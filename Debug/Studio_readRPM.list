
Studio_readRPM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ad8c  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800af64  0800af64  0000bf64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800afa4  0800afa4  0000c088  2**0
                  CONTENTS
  4 .ARM          00000008  0800afa4  0800afa4  0000bfa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800afac  0800afac  0000c088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800afac  0800afac  0000bfac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800afb0  0800afb0  0000bfb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800afb4  0000c000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000101c  20000088  0800b03c  0000c088  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200010a4  0800b03c  0000c0a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b397  00000000  00000000  0000c0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003132  00000000  00000000  0002744f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001698  00000000  00000000  0002a588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011b0  00000000  00000000  0002bc20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000290a1  00000000  00000000  0002cdd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a2c2  00000000  00000000  00055e71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001155b0  00000000  00000000  00070133  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001856e3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000065d0  00000000  00000000  00185728  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0018bcf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000088 	.word	0x20000088
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800af4c 	.word	0x0800af4c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000008c 	.word	0x2000008c
 8000214:	0800af4c 	.word	0x0800af4c

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2uiz>:
 8000af0:	004a      	lsls	r2, r1, #1
 8000af2:	d211      	bcs.n	8000b18 <__aeabi_d2uiz+0x28>
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000af8:	d211      	bcs.n	8000b1e <__aeabi_d2uiz+0x2e>
 8000afa:	d50d      	bpl.n	8000b18 <__aeabi_d2uiz+0x28>
 8000afc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d40e      	bmi.n	8000b24 <__aeabi_d2uiz+0x34>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	fa23 f002 	lsr.w	r0, r3, r2
 8000b16:	4770      	bx	lr
 8000b18:	f04f 0000 	mov.w	r0, #0
 8000b1c:	4770      	bx	lr
 8000b1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b22:	d102      	bne.n	8000b2a <__aeabi_d2uiz+0x3a>
 8000b24:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b28:	4770      	bx	lr
 8000b2a:	f04f 0000 	mov.w	r0, #0
 8000b2e:	4770      	bx	lr

08000b30 <__aeabi_d2f>:
 8000b30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b38:	bf24      	itt	cs
 8000b3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b42:	d90d      	bls.n	8000b60 <__aeabi_d2f+0x30>
 8000b44:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b50:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b58:	bf08      	it	eq
 8000b5a:	f020 0001 	biceq.w	r0, r0, #1
 8000b5e:	4770      	bx	lr
 8000b60:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b64:	d121      	bne.n	8000baa <__aeabi_d2f+0x7a>
 8000b66:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b6a:	bfbc      	itt	lt
 8000b6c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b70:	4770      	bxlt	lr
 8000b72:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b7a:	f1c2 0218 	rsb	r2, r2, #24
 8000b7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b86:	fa20 f002 	lsr.w	r0, r0, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	f040 0001 	orrne.w	r0, r0, #1
 8000b90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b9c:	ea40 000c 	orr.w	r0, r0, ip
 8000ba0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ba4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ba8:	e7cc      	b.n	8000b44 <__aeabi_d2f+0x14>
 8000baa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bae:	d107      	bne.n	8000bc0 <__aeabi_d2f+0x90>
 8000bb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bb4:	bf1e      	ittt	ne
 8000bb6:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bba:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000bbe:	4770      	bxne	lr
 8000bc0:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bc4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bc8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <__aeabi_frsub>:
 8000bd0:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000bd4:	e002      	b.n	8000bdc <__addsf3>
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_fsub>:
 8000bd8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000bdc <__addsf3>:
 8000bdc:	0042      	lsls	r2, r0, #1
 8000bde:	bf1f      	itttt	ne
 8000be0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000be4:	ea92 0f03 	teqne	r2, r3
 8000be8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bec:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bf0:	d06a      	beq.n	8000cc8 <__addsf3+0xec>
 8000bf2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bf6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bfa:	bfc1      	itttt	gt
 8000bfc:	18d2      	addgt	r2, r2, r3
 8000bfe:	4041      	eorgt	r1, r0
 8000c00:	4048      	eorgt	r0, r1
 8000c02:	4041      	eorgt	r1, r0
 8000c04:	bfb8      	it	lt
 8000c06:	425b      	neglt	r3, r3
 8000c08:	2b19      	cmp	r3, #25
 8000c0a:	bf88      	it	hi
 8000c0c:	4770      	bxhi	lr
 8000c0e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c12:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c16:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000c1a:	bf18      	it	ne
 8000c1c:	4240      	negne	r0, r0
 8000c1e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c22:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000c26:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000c2a:	bf18      	it	ne
 8000c2c:	4249      	negne	r1, r1
 8000c2e:	ea92 0f03 	teq	r2, r3
 8000c32:	d03f      	beq.n	8000cb4 <__addsf3+0xd8>
 8000c34:	f1a2 0201 	sub.w	r2, r2, #1
 8000c38:	fa41 fc03 	asr.w	ip, r1, r3
 8000c3c:	eb10 000c 	adds.w	r0, r0, ip
 8000c40:	f1c3 0320 	rsb	r3, r3, #32
 8000c44:	fa01 f103 	lsl.w	r1, r1, r3
 8000c48:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c4c:	d502      	bpl.n	8000c54 <__addsf3+0x78>
 8000c4e:	4249      	negs	r1, r1
 8000c50:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c54:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c58:	d313      	bcc.n	8000c82 <__addsf3+0xa6>
 8000c5a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c5e:	d306      	bcc.n	8000c6e <__addsf3+0x92>
 8000c60:	0840      	lsrs	r0, r0, #1
 8000c62:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c66:	f102 0201 	add.w	r2, r2, #1
 8000c6a:	2afe      	cmp	r2, #254	@ 0xfe
 8000c6c:	d251      	bcs.n	8000d12 <__addsf3+0x136>
 8000c6e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c72:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c76:	bf08      	it	eq
 8000c78:	f020 0001 	biceq.w	r0, r0, #1
 8000c7c:	ea40 0003 	orr.w	r0, r0, r3
 8000c80:	4770      	bx	lr
 8000c82:	0049      	lsls	r1, r1, #1
 8000c84:	eb40 0000 	adc.w	r0, r0, r0
 8000c88:	3a01      	subs	r2, #1
 8000c8a:	bf28      	it	cs
 8000c8c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c90:	d2ed      	bcs.n	8000c6e <__addsf3+0x92>
 8000c92:	fab0 fc80 	clz	ip, r0
 8000c96:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c9a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c9e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000ca2:	bfaa      	itet	ge
 8000ca4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ca8:	4252      	neglt	r2, r2
 8000caa:	4318      	orrge	r0, r3
 8000cac:	bfbc      	itt	lt
 8000cae:	40d0      	lsrlt	r0, r2
 8000cb0:	4318      	orrlt	r0, r3
 8000cb2:	4770      	bx	lr
 8000cb4:	f092 0f00 	teq	r2, #0
 8000cb8:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000cbc:	bf06      	itte	eq
 8000cbe:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000cc2:	3201      	addeq	r2, #1
 8000cc4:	3b01      	subne	r3, #1
 8000cc6:	e7b5      	b.n	8000c34 <__addsf3+0x58>
 8000cc8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ccc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cd0:	bf18      	it	ne
 8000cd2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cd6:	d021      	beq.n	8000d1c <__addsf3+0x140>
 8000cd8:	ea92 0f03 	teq	r2, r3
 8000cdc:	d004      	beq.n	8000ce8 <__addsf3+0x10c>
 8000cde:	f092 0f00 	teq	r2, #0
 8000ce2:	bf08      	it	eq
 8000ce4:	4608      	moveq	r0, r1
 8000ce6:	4770      	bx	lr
 8000ce8:	ea90 0f01 	teq	r0, r1
 8000cec:	bf1c      	itt	ne
 8000cee:	2000      	movne	r0, #0
 8000cf0:	4770      	bxne	lr
 8000cf2:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000cf6:	d104      	bne.n	8000d02 <__addsf3+0x126>
 8000cf8:	0040      	lsls	r0, r0, #1
 8000cfa:	bf28      	it	cs
 8000cfc:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000d00:	4770      	bx	lr
 8000d02:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000d06:	bf3c      	itt	cc
 8000d08:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000d0c:	4770      	bxcc	lr
 8000d0e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d12:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000d16:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d1a:	4770      	bx	lr
 8000d1c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d20:	bf16      	itet	ne
 8000d22:	4608      	movne	r0, r1
 8000d24:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d28:	4601      	movne	r1, r0
 8000d2a:	0242      	lsls	r2, r0, #9
 8000d2c:	bf06      	itte	eq
 8000d2e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d32:	ea90 0f01 	teqeq	r0, r1
 8000d36:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d3a:	4770      	bx	lr

08000d3c <__aeabi_ui2f>:
 8000d3c:	f04f 0300 	mov.w	r3, #0
 8000d40:	e004      	b.n	8000d4c <__aeabi_i2f+0x8>
 8000d42:	bf00      	nop

08000d44 <__aeabi_i2f>:
 8000d44:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d48:	bf48      	it	mi
 8000d4a:	4240      	negmi	r0, r0
 8000d4c:	ea5f 0c00 	movs.w	ip, r0
 8000d50:	bf08      	it	eq
 8000d52:	4770      	bxeq	lr
 8000d54:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d58:	4601      	mov	r1, r0
 8000d5a:	f04f 0000 	mov.w	r0, #0
 8000d5e:	e01c      	b.n	8000d9a <__aeabi_l2f+0x2a>

08000d60 <__aeabi_ul2f>:
 8000d60:	ea50 0201 	orrs.w	r2, r0, r1
 8000d64:	bf08      	it	eq
 8000d66:	4770      	bxeq	lr
 8000d68:	f04f 0300 	mov.w	r3, #0
 8000d6c:	e00a      	b.n	8000d84 <__aeabi_l2f+0x14>
 8000d6e:	bf00      	nop

08000d70 <__aeabi_l2f>:
 8000d70:	ea50 0201 	orrs.w	r2, r0, r1
 8000d74:	bf08      	it	eq
 8000d76:	4770      	bxeq	lr
 8000d78:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d7c:	d502      	bpl.n	8000d84 <__aeabi_l2f+0x14>
 8000d7e:	4240      	negs	r0, r0
 8000d80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d84:	ea5f 0c01 	movs.w	ip, r1
 8000d88:	bf02      	ittt	eq
 8000d8a:	4684      	moveq	ip, r0
 8000d8c:	4601      	moveq	r1, r0
 8000d8e:	2000      	moveq	r0, #0
 8000d90:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d94:	bf08      	it	eq
 8000d96:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d9a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d9e:	fabc f28c 	clz	r2, ip
 8000da2:	3a08      	subs	r2, #8
 8000da4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000da8:	db10      	blt.n	8000dcc <__aeabi_l2f+0x5c>
 8000daa:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dae:	4463      	add	r3, ip
 8000db0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000db4:	f1c2 0220 	rsb	r2, r2, #32
 8000db8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000dbc:	fa20 f202 	lsr.w	r2, r0, r2
 8000dc0:	eb43 0002 	adc.w	r0, r3, r2
 8000dc4:	bf08      	it	eq
 8000dc6:	f020 0001 	biceq.w	r0, r0, #1
 8000dca:	4770      	bx	lr
 8000dcc:	f102 0220 	add.w	r2, r2, #32
 8000dd0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dd4:	f1c2 0220 	rsb	r2, r2, #32
 8000dd8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ddc:	fa21 f202 	lsr.w	r2, r1, r2
 8000de0:	eb43 0002 	adc.w	r0, r3, r2
 8000de4:	bf08      	it	eq
 8000de6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dea:	4770      	bx	lr

08000dec <__aeabi_uldivmod>:
 8000dec:	b953      	cbnz	r3, 8000e04 <__aeabi_uldivmod+0x18>
 8000dee:	b94a      	cbnz	r2, 8000e04 <__aeabi_uldivmod+0x18>
 8000df0:	2900      	cmp	r1, #0
 8000df2:	bf08      	it	eq
 8000df4:	2800      	cmpeq	r0, #0
 8000df6:	bf1c      	itt	ne
 8000df8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000dfc:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000e00:	f000 b96a 	b.w	80010d8 <__aeabi_idiv0>
 8000e04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e0c:	f000 f806 	bl	8000e1c <__udivmoddi4>
 8000e10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e18:	b004      	add	sp, #16
 8000e1a:	4770      	bx	lr

08000e1c <__udivmoddi4>:
 8000e1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e20:	9d08      	ldr	r5, [sp, #32]
 8000e22:	460c      	mov	r4, r1
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d14e      	bne.n	8000ec6 <__udivmoddi4+0xaa>
 8000e28:	4694      	mov	ip, r2
 8000e2a:	458c      	cmp	ip, r1
 8000e2c:	4686      	mov	lr, r0
 8000e2e:	fab2 f282 	clz	r2, r2
 8000e32:	d962      	bls.n	8000efa <__udivmoddi4+0xde>
 8000e34:	b14a      	cbz	r2, 8000e4a <__udivmoddi4+0x2e>
 8000e36:	f1c2 0320 	rsb	r3, r2, #32
 8000e3a:	4091      	lsls	r1, r2
 8000e3c:	fa20 f303 	lsr.w	r3, r0, r3
 8000e40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e44:	4319      	orrs	r1, r3
 8000e46:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e4a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e4e:	fa1f f68c 	uxth.w	r6, ip
 8000e52:	fbb1 f4f7 	udiv	r4, r1, r7
 8000e56:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e5a:	fb07 1114 	mls	r1, r7, r4, r1
 8000e5e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e62:	fb04 f106 	mul.w	r1, r4, r6
 8000e66:	4299      	cmp	r1, r3
 8000e68:	d90a      	bls.n	8000e80 <__udivmoddi4+0x64>
 8000e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000e72:	f080 8112 	bcs.w	800109a <__udivmoddi4+0x27e>
 8000e76:	4299      	cmp	r1, r3
 8000e78:	f240 810f 	bls.w	800109a <__udivmoddi4+0x27e>
 8000e7c:	3c02      	subs	r4, #2
 8000e7e:	4463      	add	r3, ip
 8000e80:	1a59      	subs	r1, r3, r1
 8000e82:	fa1f f38e 	uxth.w	r3, lr
 8000e86:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e8a:	fb07 1110 	mls	r1, r7, r0, r1
 8000e8e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e92:	fb00 f606 	mul.w	r6, r0, r6
 8000e96:	429e      	cmp	r6, r3
 8000e98:	d90a      	bls.n	8000eb0 <__udivmoddi4+0x94>
 8000e9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000ea2:	f080 80fc 	bcs.w	800109e <__udivmoddi4+0x282>
 8000ea6:	429e      	cmp	r6, r3
 8000ea8:	f240 80f9 	bls.w	800109e <__udivmoddi4+0x282>
 8000eac:	4463      	add	r3, ip
 8000eae:	3802      	subs	r0, #2
 8000eb0:	1b9b      	subs	r3, r3, r6
 8000eb2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	b11d      	cbz	r5, 8000ec2 <__udivmoddi4+0xa6>
 8000eba:	40d3      	lsrs	r3, r2
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	e9c5 3200 	strd	r3, r2, [r5]
 8000ec2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	d905      	bls.n	8000ed6 <__udivmoddi4+0xba>
 8000eca:	b10d      	cbz	r5, 8000ed0 <__udivmoddi4+0xb4>
 8000ecc:	e9c5 0100 	strd	r0, r1, [r5]
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	4608      	mov	r0, r1
 8000ed4:	e7f5      	b.n	8000ec2 <__udivmoddi4+0xa6>
 8000ed6:	fab3 f183 	clz	r1, r3
 8000eda:	2900      	cmp	r1, #0
 8000edc:	d146      	bne.n	8000f6c <__udivmoddi4+0x150>
 8000ede:	42a3      	cmp	r3, r4
 8000ee0:	d302      	bcc.n	8000ee8 <__udivmoddi4+0xcc>
 8000ee2:	4290      	cmp	r0, r2
 8000ee4:	f0c0 80f0 	bcc.w	80010c8 <__udivmoddi4+0x2ac>
 8000ee8:	1a86      	subs	r6, r0, r2
 8000eea:	eb64 0303 	sbc.w	r3, r4, r3
 8000eee:	2001      	movs	r0, #1
 8000ef0:	2d00      	cmp	r5, #0
 8000ef2:	d0e6      	beq.n	8000ec2 <__udivmoddi4+0xa6>
 8000ef4:	e9c5 6300 	strd	r6, r3, [r5]
 8000ef8:	e7e3      	b.n	8000ec2 <__udivmoddi4+0xa6>
 8000efa:	2a00      	cmp	r2, #0
 8000efc:	f040 8090 	bne.w	8001020 <__udivmoddi4+0x204>
 8000f00:	eba1 040c 	sub.w	r4, r1, ip
 8000f04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f08:	fa1f f78c 	uxth.w	r7, ip
 8000f0c:	2101      	movs	r1, #1
 8000f0e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000f12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000f16:	fb08 4416 	mls	r4, r8, r6, r4
 8000f1a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f1e:	fb07 f006 	mul.w	r0, r7, r6
 8000f22:	4298      	cmp	r0, r3
 8000f24:	d908      	bls.n	8000f38 <__udivmoddi4+0x11c>
 8000f26:	eb1c 0303 	adds.w	r3, ip, r3
 8000f2a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000f2e:	d202      	bcs.n	8000f36 <__udivmoddi4+0x11a>
 8000f30:	4298      	cmp	r0, r3
 8000f32:	f200 80cd 	bhi.w	80010d0 <__udivmoddi4+0x2b4>
 8000f36:	4626      	mov	r6, r4
 8000f38:	1a1c      	subs	r4, r3, r0
 8000f3a:	fa1f f38e 	uxth.w	r3, lr
 8000f3e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000f42:	fb08 4410 	mls	r4, r8, r0, r4
 8000f46:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f4a:	fb00 f707 	mul.w	r7, r0, r7
 8000f4e:	429f      	cmp	r7, r3
 8000f50:	d908      	bls.n	8000f64 <__udivmoddi4+0x148>
 8000f52:	eb1c 0303 	adds.w	r3, ip, r3
 8000f56:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000f5a:	d202      	bcs.n	8000f62 <__udivmoddi4+0x146>
 8000f5c:	429f      	cmp	r7, r3
 8000f5e:	f200 80b0 	bhi.w	80010c2 <__udivmoddi4+0x2a6>
 8000f62:	4620      	mov	r0, r4
 8000f64:	1bdb      	subs	r3, r3, r7
 8000f66:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f6a:	e7a5      	b.n	8000eb8 <__udivmoddi4+0x9c>
 8000f6c:	f1c1 0620 	rsb	r6, r1, #32
 8000f70:	408b      	lsls	r3, r1
 8000f72:	fa22 f706 	lsr.w	r7, r2, r6
 8000f76:	431f      	orrs	r7, r3
 8000f78:	fa20 fc06 	lsr.w	ip, r0, r6
 8000f7c:	fa04 f301 	lsl.w	r3, r4, r1
 8000f80:	ea43 030c 	orr.w	r3, r3, ip
 8000f84:	40f4      	lsrs	r4, r6
 8000f86:	fa00 f801 	lsl.w	r8, r0, r1
 8000f8a:	0c38      	lsrs	r0, r7, #16
 8000f8c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000f90:	fbb4 fef0 	udiv	lr, r4, r0
 8000f94:	fa1f fc87 	uxth.w	ip, r7
 8000f98:	fb00 441e 	mls	r4, r0, lr, r4
 8000f9c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000fa0:	fb0e f90c 	mul.w	r9, lr, ip
 8000fa4:	45a1      	cmp	r9, r4
 8000fa6:	fa02 f201 	lsl.w	r2, r2, r1
 8000faa:	d90a      	bls.n	8000fc2 <__udivmoddi4+0x1a6>
 8000fac:	193c      	adds	r4, r7, r4
 8000fae:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000fb2:	f080 8084 	bcs.w	80010be <__udivmoddi4+0x2a2>
 8000fb6:	45a1      	cmp	r9, r4
 8000fb8:	f240 8081 	bls.w	80010be <__udivmoddi4+0x2a2>
 8000fbc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000fc0:	443c      	add	r4, r7
 8000fc2:	eba4 0409 	sub.w	r4, r4, r9
 8000fc6:	fa1f f983 	uxth.w	r9, r3
 8000fca:	fbb4 f3f0 	udiv	r3, r4, r0
 8000fce:	fb00 4413 	mls	r4, r0, r3, r4
 8000fd2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000fd6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000fda:	45a4      	cmp	ip, r4
 8000fdc:	d907      	bls.n	8000fee <__udivmoddi4+0x1d2>
 8000fde:	193c      	adds	r4, r7, r4
 8000fe0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000fe4:	d267      	bcs.n	80010b6 <__udivmoddi4+0x29a>
 8000fe6:	45a4      	cmp	ip, r4
 8000fe8:	d965      	bls.n	80010b6 <__udivmoddi4+0x29a>
 8000fea:	3b02      	subs	r3, #2
 8000fec:	443c      	add	r4, r7
 8000fee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ff2:	fba0 9302 	umull	r9, r3, r0, r2
 8000ff6:	eba4 040c 	sub.w	r4, r4, ip
 8000ffa:	429c      	cmp	r4, r3
 8000ffc:	46ce      	mov	lr, r9
 8000ffe:	469c      	mov	ip, r3
 8001000:	d351      	bcc.n	80010a6 <__udivmoddi4+0x28a>
 8001002:	d04e      	beq.n	80010a2 <__udivmoddi4+0x286>
 8001004:	b155      	cbz	r5, 800101c <__udivmoddi4+0x200>
 8001006:	ebb8 030e 	subs.w	r3, r8, lr
 800100a:	eb64 040c 	sbc.w	r4, r4, ip
 800100e:	fa04 f606 	lsl.w	r6, r4, r6
 8001012:	40cb      	lsrs	r3, r1
 8001014:	431e      	orrs	r6, r3
 8001016:	40cc      	lsrs	r4, r1
 8001018:	e9c5 6400 	strd	r6, r4, [r5]
 800101c:	2100      	movs	r1, #0
 800101e:	e750      	b.n	8000ec2 <__udivmoddi4+0xa6>
 8001020:	f1c2 0320 	rsb	r3, r2, #32
 8001024:	fa20 f103 	lsr.w	r1, r0, r3
 8001028:	fa0c fc02 	lsl.w	ip, ip, r2
 800102c:	fa24 f303 	lsr.w	r3, r4, r3
 8001030:	4094      	lsls	r4, r2
 8001032:	430c      	orrs	r4, r1
 8001034:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001038:	fa00 fe02 	lsl.w	lr, r0, r2
 800103c:	fa1f f78c 	uxth.w	r7, ip
 8001040:	fbb3 f0f8 	udiv	r0, r3, r8
 8001044:	fb08 3110 	mls	r1, r8, r0, r3
 8001048:	0c23      	lsrs	r3, r4, #16
 800104a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800104e:	fb00 f107 	mul.w	r1, r0, r7
 8001052:	4299      	cmp	r1, r3
 8001054:	d908      	bls.n	8001068 <__udivmoddi4+0x24c>
 8001056:	eb1c 0303 	adds.w	r3, ip, r3
 800105a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800105e:	d22c      	bcs.n	80010ba <__udivmoddi4+0x29e>
 8001060:	4299      	cmp	r1, r3
 8001062:	d92a      	bls.n	80010ba <__udivmoddi4+0x29e>
 8001064:	3802      	subs	r0, #2
 8001066:	4463      	add	r3, ip
 8001068:	1a5b      	subs	r3, r3, r1
 800106a:	b2a4      	uxth	r4, r4
 800106c:	fbb3 f1f8 	udiv	r1, r3, r8
 8001070:	fb08 3311 	mls	r3, r8, r1, r3
 8001074:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001078:	fb01 f307 	mul.w	r3, r1, r7
 800107c:	42a3      	cmp	r3, r4
 800107e:	d908      	bls.n	8001092 <__udivmoddi4+0x276>
 8001080:	eb1c 0404 	adds.w	r4, ip, r4
 8001084:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8001088:	d213      	bcs.n	80010b2 <__udivmoddi4+0x296>
 800108a:	42a3      	cmp	r3, r4
 800108c:	d911      	bls.n	80010b2 <__udivmoddi4+0x296>
 800108e:	3902      	subs	r1, #2
 8001090:	4464      	add	r4, ip
 8001092:	1ae4      	subs	r4, r4, r3
 8001094:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001098:	e739      	b.n	8000f0e <__udivmoddi4+0xf2>
 800109a:	4604      	mov	r4, r0
 800109c:	e6f0      	b.n	8000e80 <__udivmoddi4+0x64>
 800109e:	4608      	mov	r0, r1
 80010a0:	e706      	b.n	8000eb0 <__udivmoddi4+0x94>
 80010a2:	45c8      	cmp	r8, r9
 80010a4:	d2ae      	bcs.n	8001004 <__udivmoddi4+0x1e8>
 80010a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80010aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80010ae:	3801      	subs	r0, #1
 80010b0:	e7a8      	b.n	8001004 <__udivmoddi4+0x1e8>
 80010b2:	4631      	mov	r1, r6
 80010b4:	e7ed      	b.n	8001092 <__udivmoddi4+0x276>
 80010b6:	4603      	mov	r3, r0
 80010b8:	e799      	b.n	8000fee <__udivmoddi4+0x1d2>
 80010ba:	4630      	mov	r0, r6
 80010bc:	e7d4      	b.n	8001068 <__udivmoddi4+0x24c>
 80010be:	46d6      	mov	lr, sl
 80010c0:	e77f      	b.n	8000fc2 <__udivmoddi4+0x1a6>
 80010c2:	4463      	add	r3, ip
 80010c4:	3802      	subs	r0, #2
 80010c6:	e74d      	b.n	8000f64 <__udivmoddi4+0x148>
 80010c8:	4606      	mov	r6, r0
 80010ca:	4623      	mov	r3, r4
 80010cc:	4608      	mov	r0, r1
 80010ce:	e70f      	b.n	8000ef0 <__udivmoddi4+0xd4>
 80010d0:	3e02      	subs	r6, #2
 80010d2:	4463      	add	r3, ip
 80010d4:	e730      	b.n	8000f38 <__udivmoddi4+0x11c>
 80010d6:	bf00      	nop

080010d8 <__aeabi_idiv0>:
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop

080010dc <modbus_1t5_Timeout>:
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);
void Hearthbeat();

// function for interrupt
void modbus_1t5_Timeout()
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 80010e0:	4b0d      	ldr	r3, [pc, #52]	@ (8001118 <modbus_1t5_Timeout+0x3c>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	2201      	movs	r2, #1
 80010e6:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 80010e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001118 <modbus_1t5_Timeout+0x3c>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	691b      	ldr	r3, [r3, #16]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	2200      	movs	r2, #0
 80010f2:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 80010f4:	4b08      	ldr	r3, [pc, #32]	@ (8001118 <modbus_1t5_Timeout+0x3c>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	691b      	ldr	r3, [r3, #16]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	4b06      	ldr	r3, [pc, #24]	@ (8001118 <modbus_1t5_Timeout+0x3c>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	691b      	ldr	r3, [r3, #16]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f042 0201 	orr.w	r2, r2, #1
 800110a:	601a      	str	r2, [r3, #0]
}
 800110c:	bf00      	nop
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	200000a4 	.word	0x200000a4

0800111c <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8001124:	4b04      	ldr	r3, [pc, #16]	@ (8001138 <modbus_3t5_Timeout+0x1c>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	2201      	movs	r2, #1
 800112a:	755a      	strb	r2, [r3, #21]

}
 800112c:	bf00      	nop
 800112e:	370c      	adds	r7, #12
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr
 8001138:	200000a4 	.word	0x200000a4

0800113c <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 8001144:	6878      	ldr	r0, [r7, #4]
 8001146:	f008 fccb 	bl	8009ae0 <HAL_UART_GetError>
 800114a:	4603      	mov	r3, r0
 800114c:	2b20      	cmp	r3, #32
 800114e:	d101      	bne.n	8001154 <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 8001150:	f7ff ffc4 	bl	80010dc <modbus_1t5_Timeout>

	}
}
 8001154:	bf00      	nop
 8001156:	3708      	adds	r7, #8
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}

0800115c <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 8001166:	4a25      	ldr	r2, [pc, #148]	@ (80011fc <Modbus_init+0xa0>)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 800116c:	4b23      	ldr	r3, [pc, #140]	@ (80011fc <Modbus_init+0xa0>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	683a      	ldr	r2, [r7, #0]
 8001172:	605a      	str	r2, [r3, #4]

	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	691b      	ldr	r3, [r3, #16]
 8001178:	4a21      	ldr	r2, [pc, #132]	@ (8001200 <Modbus_init+0xa4>)
 800117a:	210e      	movs	r1, #14
 800117c:	4618      	mov	r0, r3
 800117e:	f007 f807 	bl	8008190 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	68db      	ldr	r3, [r3, #12]
 8001186:	2110      	movs	r1, #16
 8001188:	4618      	mov	r0, r3
 800118a:	f008 fc53 	bl	8009a34 <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	68db      	ldr	r3, [r3, #12]
 8001192:	4618      	mov	r0, r3
 8001194:	f008 fc6a 	bl	8009a6c <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	4a19      	ldr	r2, [pc, #100]	@ (8001204 <Modbus_init+0xa8>)
 800119e:	2104      	movs	r1, #4
 80011a0:	4618      	mov	r0, r3
 80011a2:	f007 ffb1 	bl	8009108 <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 80011a6:	4b15      	ldr	r3, [pc, #84]	@ (80011fc <Modbus_init+0xa0>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 80011ac:	4b13      	ldr	r3, [pc, #76]	@ (80011fc <Modbus_init+0xa0>)
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	4b12      	ldr	r3, [pc, #72]	@ (80011fc <Modbus_init+0xa0>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 80011b8:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 80011bc:	4413      	add	r3, r2
 80011be:	3302      	adds	r3, #2
 80011c0:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80011c4:	4619      	mov	r1, r3
 80011c6:	f008 f859 	bl	800927c <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 80011ca:	4b0c      	ldr	r3, [pc, #48]	@ (80011fc <Modbus_init+0xa0>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	691b      	ldr	r3, [r3, #16]
 80011d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d10c      	bne.n	80011f4 <Modbus_init+0x98>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 80011da:	4b08      	ldr	r3, [pc, #32]	@ (80011fc <Modbus_init+0xa0>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	691b      	ldr	r3, [r3, #16]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f005 ffa7 	bl	8007134 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 80011e6:	4b05      	ldr	r3, [pc, #20]	@ (80011fc <Modbus_init+0xa0>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	691b      	ldr	r3, [r3, #16]
 80011ec:	2100      	movs	r1, #0
 80011ee:	4618      	mov	r0, r3
 80011f0:	f006 fa00 	bl	80075f4 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 80011f4:	bf00      	nop
 80011f6:	3708      	adds	r7, #8
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	200000a4 	.word	0x200000a4
 8001200:	0800111d 	.word	0x0800111d
 8001204:	0800113d 	.word	0x0800113d

08001208 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001208:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800120c:	b08c      	sub	sp, #48	@ 0x30
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001210:	f002 fc89 	bl	8003b26 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001214:	f000 fb28 	bl	8001868 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001218:	f000 fe60 	bl	8001edc <MX_GPIO_Init>
  MX_DMA_Init();
 800121c:	f000 fe18 	bl	8001e50 <MX_DMA_Init>
  MX_TIM3_Init();
 8001220:	f000 fc4c 	bl	8001abc <MX_TIM3_Init>
  MX_TIM2_Init();
 8001224:	f000 fbf6 	bl	8001a14 <MX_TIM2_Init>
  MX_TIM5_Init();
 8001228:	f000 fd0e 	bl	8001c48 <MX_TIM5_Init>
  MX_ADC1_Init();
 800122c:	f000 fb68 	bl	8001900 <MX_ADC1_Init>
  MX_TIM4_Init();
 8001230:	f000 fcbc 	bl	8001bac <MX_TIM4_Init>
  MX_TIM6_Init();
 8001234:	f000 fd56 	bl	8001ce4 <MX_TIM6_Init>
  MX_TIM16_Init();
 8001238:	f000 fd8c 	bl	8001d54 <MX_TIM16_Init>
  MX_USART2_UART_Init();
 800123c:	f000 fdba 	bl	8001db4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  //PWM Motor
  HAL_TIM_Base_Start(&htim3);
 8001240:	48b3      	ldr	r0, [pc, #716]	@ (8001510 <main+0x308>)
 8001242:	f005 ff07 	bl	8007054 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001246:	2100      	movs	r1, #0
 8001248:	48b1      	ldr	r0, [pc, #708]	@ (8001510 <main+0x308>)
 800124a:	f006 f859 	bl	8007300 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 500);
 800124e:	4bb0      	ldr	r3, [pc, #704]	@ (8001510 <main+0x308>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001256:	635a      	str	r2, [r3, #52]	@ 0x34

  //Read Encoder
  HAL_TIM_Encoder_Start(&htim2,TIM_CHANNEL_ALL);
 8001258:	213c      	movs	r1, #60	@ 0x3c
 800125a:	48ae      	ldr	r0, [pc, #696]	@ (8001514 <main+0x30c>)
 800125c:	f006 fb0c 	bl	8007878 <HAL_TIM_Encoder_Start>

  //time microsec
  HAL_TIM_Base_Start_IT(&htim5);
 8001260:	48ad      	ldr	r0, [pc, #692]	@ (8001518 <main+0x310>)
 8001262:	f005 ff67 	bl	8007134 <HAL_TIM_Base_Start_IT>

  //Read joystick
  HAL_ADC_Start_DMA(&hadc1, ADCBuffer, 2);
 8001266:	2202      	movs	r2, #2
 8001268:	49ac      	ldr	r1, [pc, #688]	@ (800151c <main+0x314>)
 800126a:	48ad      	ldr	r0, [pc, #692]	@ (8001520 <main+0x318>)
 800126c:	f003 f8c8 	bl	8004400 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim4);
 8001270:	48ac      	ldr	r0, [pc, #688]	@ (8001524 <main+0x31c>)
 8001272:	f005 feef 	bl	8007054 <HAL_TIM_Base_Start>

  //PID Control Position
  PID1.Kp = 5;
 8001276:	4bac      	ldr	r3, [pc, #688]	@ (8001528 <main+0x320>)
 8001278:	4aac      	ldr	r2, [pc, #688]	@ (800152c <main+0x324>)
 800127a:	619a      	str	r2, [r3, #24]
  PID1.Ki = 0.00002;
 800127c:	4baa      	ldr	r3, [pc, #680]	@ (8001528 <main+0x320>)
 800127e:	4aac      	ldr	r2, [pc, #688]	@ (8001530 <main+0x328>)
 8001280:	61da      	str	r2, [r3, #28]
  PID1.Kd = 1;
 8001282:	4ba9      	ldr	r3, [pc, #676]	@ (8001528 <main+0x320>)
 8001284:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001288:	621a      	str	r2, [r3, #32]
  arm_pid_init_f32(&PID1, 0);
 800128a:	2100      	movs	r1, #0
 800128c:	48a6      	ldr	r0, [pc, #664]	@ (8001528 <main+0x320>)
 800128e:	f009 fcef 	bl	800ac70 <arm_pid_init_f32>

  //PID Control Velocity
  PID2.Kp = 0.15;
 8001292:	4ba8      	ldr	r3, [pc, #672]	@ (8001534 <main+0x32c>)
 8001294:	4aa8      	ldr	r2, [pc, #672]	@ (8001538 <main+0x330>)
 8001296:	619a      	str	r2, [r3, #24]
  PID2.Ki = 0.006;
 8001298:	4ba6      	ldr	r3, [pc, #664]	@ (8001534 <main+0x32c>)
 800129a:	4aa8      	ldr	r2, [pc, #672]	@ (800153c <main+0x334>)
 800129c:	61da      	str	r2, [r3, #28]
  PID2.Kd = 0.05;
 800129e:	4ba5      	ldr	r3, [pc, #660]	@ (8001534 <main+0x32c>)
 80012a0:	4aa7      	ldr	r2, [pc, #668]	@ (8001540 <main+0x338>)
 80012a2:	621a      	str	r2, [r3, #32]
  arm_pid_init_f32(&PID2, 0);
 80012a4:	2100      	movs	r1, #0
 80012a6:	48a3      	ldr	r0, [pc, #652]	@ (8001534 <main+0x32c>)
 80012a8:	f009 fce2 	bl	800ac70 <arm_pid_init_f32>

  //Modbus Setting
  // manaul add
  HAL_TIM_Base_Start_IT(&htim6);
 80012ac:	48a5      	ldr	r0, [pc, #660]	@ (8001544 <main+0x33c>)
 80012ae:	f005 ff41 	bl	8007134 <HAL_TIM_Base_Start_IT>

  //  modbus
  hmodbus.huart = &huart2;
 80012b2:	4ba5      	ldr	r3, [pc, #660]	@ (8001548 <main+0x340>)
 80012b4:	4aa5      	ldr	r2, [pc, #660]	@ (800154c <main+0x344>)
 80012b6:	60da      	str	r2, [r3, #12]
  hmodbus.htim = &htim16;
 80012b8:	4ba3      	ldr	r3, [pc, #652]	@ (8001548 <main+0x340>)
 80012ba:	4aa5      	ldr	r2, [pc, #660]	@ (8001550 <main+0x348>)
 80012bc:	611a      	str	r2, [r3, #16]
  hmodbus.slaveAddress = 0x15;
 80012be:	4ba2      	ldr	r3, [pc, #648]	@ (8001548 <main+0x340>)
 80012c0:	2215      	movs	r2, #21
 80012c2:	701a      	strb	r2, [r3, #0]
  hmodbus.RegisterSize =200;
 80012c4:	4ba0      	ldr	r3, [pc, #640]	@ (8001548 <main+0x340>)
 80012c6:	22c8      	movs	r2, #200	@ 0xc8
 80012c8:	609a      	str	r2, [r3, #8]
  Modbus_init(&hmodbus, registerFrame);
 80012ca:	49a2      	ldr	r1, [pc, #648]	@ (8001554 <main+0x34c>)
 80012cc:	489e      	ldr	r0, [pc, #632]	@ (8001548 <main+0x340>)
 80012ce:	f7ff ff45 	bl	800115c <Modbus_init>
//	  Run_jog();

	  static uint64_t timestamp = 0;
	  static uint64_t timestamp2 = 0;

	  int64_t currentTime = micros();
 80012d2:	f000 ff2b 	bl	800212c <micros>
 80012d6:	4602      	mov	r2, r0
 80012d8:	460b      	mov	r3, r1
 80012da:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	  if (max_velo < QEIdata.linearVel)
 80012de:	4b9e      	ldr	r3, [pc, #632]	@ (8001558 <main+0x350>)
 80012e0:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 80012e4:	4b9d      	ldr	r3, [pc, #628]	@ (800155c <main+0x354>)
 80012e6:	edd3 7a00 	vldr	s15, [r3]
 80012ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012f2:	dd03      	ble.n	80012fc <main+0xf4>
	  {
		  max_velo = QEIdata.linearVel;
 80012f4:	4b98      	ldr	r3, [pc, #608]	@ (8001558 <main+0x350>)
 80012f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012f8:	4a98      	ldr	r2, [pc, #608]	@ (800155c <main+0x354>)
 80012fa:	6013      	str	r3, [r2, #0]
	  }
	  if(currentTime > timestamp2){
 80012fc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001300:	4997      	ldr	r1, [pc, #604]	@ (8001560 <main+0x358>)
 8001302:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001306:	4290      	cmp	r0, r2
 8001308:	eb71 0303 	sbcs.w	r3, r1, r3
 800130c:	f080 814a 	bcs.w	80015a4 <main+0x39c>
		  timestamp2 = currentTime + 167; //6,000 Hz
 8001310:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001314:	f112 04a7 	adds.w	r4, r2, #167	@ 0xa7
 8001318:	f143 0500 	adc.w	r5, r3, #0
 800131c:	4622      	mov	r2, r4
 800131e:	462b      	mov	r3, r5
 8001320:	498f      	ldr	r1, [pc, #572]	@ (8001560 <main+0x358>)
 8001322:	e9c1 2300 	strd	r2, r3, [r1]

		  //Read encoder
		  QEIEncoderPosVel_Update();
 8001326:	f000 ff1b 	bl	8002160 <QEIEncoderPosVel_Update>

		  //Create Trajectory
		  q_f = setPosition;
 800132a:	4b8e      	ldr	r3, [pc, #568]	@ (8001564 <main+0x35c>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a8e      	ldr	r2, [pc, #568]	@ (8001568 <main+0x360>)
 8001330:	6013      	str	r3, [r2, #0]
		  checkStartMoving();
 8001332:	f001 f83d 	bl	80023b0 <checkStartMoving>
		  createTrajectory();
 8001336:	f001 fa6b 	bl	8002810 <createTrajectory>

		  if(mode == 1){
 800133a:	4b8c      	ldr	r3, [pc, #560]	@ (800156c <main+0x364>)
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	2b01      	cmp	r3, #1
 8001340:	f040 80d0 	bne.w	80014e4 <main+0x2dc>
			  if(fabs(setPosition - QEIdata.linearPos) < 0.05){
 8001344:	4b87      	ldr	r3, [pc, #540]	@ (8001564 <main+0x35c>)
 8001346:	ed93 7a00 	vldr	s14, [r3]
 800134a:	4b83      	ldr	r3, [pc, #524]	@ (8001558 <main+0x350>)
 800134c:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001350:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001354:	eef0 7ae7 	vabs.f32	s15, s15
 8001358:	ee17 0a90 	vmov	r0, s15
 800135c:	f7ff f8c0 	bl	80004e0 <__aeabi_f2d>
 8001360:	a367      	add	r3, pc, #412	@ (adr r3, 8001500 <main+0x2f8>)
 8001362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001366:	f7ff fb85 	bl	8000a74 <__aeabi_dcmplt>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d004      	beq.n	800137a <main+0x172>
				  Vin = 0;
 8001370:	4b7f      	ldr	r3, [pc, #508]	@ (8001570 <main+0x368>)
 8001372:	f04f 0200 	mov.w	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	e099      	b.n	80014ae <main+0x2a6>
			  }
			  else if(setPosition - QEIdata.linearPos < 3 && setPosition - QEIdata.linearPos > 0.05){
 800137a:	4b7a      	ldr	r3, [pc, #488]	@ (8001564 <main+0x35c>)
 800137c:	ed93 7a00 	vldr	s14, [r3]
 8001380:	4b75      	ldr	r3, [pc, #468]	@ (8001558 <main+0x350>)
 8001382:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001386:	ee77 7a67 	vsub.f32	s15, s14, s15
 800138a:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 800138e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001396:	d51b      	bpl.n	80013d0 <main+0x1c8>
 8001398:	4b72      	ldr	r3, [pc, #456]	@ (8001564 <main+0x35c>)
 800139a:	ed93 7a00 	vldr	s14, [r3]
 800139e:	4b6e      	ldr	r3, [pc, #440]	@ (8001558 <main+0x350>)
 80013a0:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80013a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013a8:	ee17 0a90 	vmov	r0, s15
 80013ac:	f7ff f898 	bl	80004e0 <__aeabi_f2d>
 80013b0:	a353      	add	r3, pc, #332	@ (adr r3, 8001500 <main+0x2f8>)
 80013b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b6:	f7ff fb7b 	bl	8000ab0 <__aeabi_dcmpgt>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d007      	beq.n	80013d0 <main+0x1c8>
				  Vin = 2;
 80013c0:	4b6b      	ldr	r3, [pc, #428]	@ (8001570 <main+0x368>)
 80013c2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80013c6:	601a      	str	r2, [r3, #0]
				  check = 1;
 80013c8:	4b6a      	ldr	r3, [pc, #424]	@ (8001574 <main+0x36c>)
 80013ca:	2201      	movs	r2, #1
 80013cc:	601a      	str	r2, [r3, #0]
 80013ce:	e06e      	b.n	80014ae <main+0x2a6>
			  }
			  else if(setPosition - QEIdata.linearPos > -3 && setPosition - QEIdata.linearPos < -0.05){
 80013d0:	4b64      	ldr	r3, [pc, #400]	@ (8001564 <main+0x35c>)
 80013d2:	ed93 7a00 	vldr	s14, [r3]
 80013d6:	4b60      	ldr	r3, [pc, #384]	@ (8001558 <main+0x350>)
 80013d8:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80013dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013e0:	eeb8 7a08 	vmov.f32	s14, #136	@ 0xc0400000 -3.0
 80013e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ec:	dd1b      	ble.n	8001426 <main+0x21e>
 80013ee:	4b5d      	ldr	r3, [pc, #372]	@ (8001564 <main+0x35c>)
 80013f0:	ed93 7a00 	vldr	s14, [r3]
 80013f4:	4b58      	ldr	r3, [pc, #352]	@ (8001558 <main+0x350>)
 80013f6:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80013fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013fe:	ee17 0a90 	vmov	r0, s15
 8001402:	f7ff f86d 	bl	80004e0 <__aeabi_f2d>
 8001406:	a340      	add	r3, pc, #256	@ (adr r3, 8001508 <main+0x300>)
 8001408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800140c:	f7ff fb32 	bl	8000a74 <__aeabi_dcmplt>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d007      	beq.n	8001426 <main+0x21e>
			  	  Vin = -1.5;
 8001416:	4b56      	ldr	r3, [pc, #344]	@ (8001570 <main+0x368>)
 8001418:	4a57      	ldr	r2, [pc, #348]	@ (8001578 <main+0x370>)
 800141a:	601a      	str	r2, [r3, #0]
			  	  check = -1;
 800141c:	4b55      	ldr	r3, [pc, #340]	@ (8001574 <main+0x36c>)
 800141e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001422:	601a      	str	r2, [r3, #0]
 8001424:	e043      	b.n	80014ae <main+0x2a6>
			  }
			  else{
				  Vin = arm_pid_f32(&PID2, (setVelocity + ref_v)/2 - QEIdata.linearVel);
 8001426:	4b55      	ldr	r3, [pc, #340]	@ (800157c <main+0x374>)
 8001428:	ed93 7a00 	vldr	s14, [r3]
 800142c:	4b54      	ldr	r3, [pc, #336]	@ (8001580 <main+0x378>)
 800142e:	edd3 7a00 	vldr	s15, [r3]
 8001432:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001436:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800143a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800143e:	4b46      	ldr	r3, [pc, #280]	@ (8001558 <main+0x350>)
 8001440:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001444:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001448:	4b3a      	ldr	r3, [pc, #232]	@ (8001534 <main+0x32c>)
 800144a:	627b      	str	r3, [r7, #36]	@ 0x24
 800144c:	edc7 7a08 	vstr	s15, [r7, #32]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8001450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001452:	ed93 7a00 	vldr	s14, [r3]
 8001456:	edd7 7a08 	vldr	s15, [r7, #32]
 800145a:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 800145e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001460:	edd3 6a01 	vldr	s13, [r3, #4]
 8001464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001466:	edd3 7a03 	vldr	s15, [r3, #12]
 800146a:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 800146e:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001474:	edd3 6a02 	vldr	s13, [r3, #8]
 8001478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800147a:	edd3 7a04 	vldr	s15, [r3, #16]
 800147e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001482:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001488:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 800148c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001490:	edc7 7a07 	vstr	s15, [r7, #28]

    /* Update state */
    S->state[1] = S->state[0];
 8001494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001496:	68da      	ldr	r2, [r3, #12]
 8001498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800149a:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 800149c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800149e:	6a3a      	ldr	r2, [r7, #32]
 80014a0:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 80014a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014a4:	69fa      	ldr	r2, [r7, #28]
 80014a6:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 80014a8:	69fb      	ldr	r3, [r7, #28]
 80014aa:	4a31      	ldr	r2, [pc, #196]	@ (8001570 <main+0x368>)
 80014ac:	6013      	str	r3, [r2, #0]
				  //Vin = arm_pid_f32(&PID2, ref_v - QEIdata.linearVel);
			  }
			  if(Vin > 24){
 80014ae:	4b30      	ldr	r3, [pc, #192]	@ (8001570 <main+0x368>)
 80014b0:	edd3 7a00 	vldr	s15, [r3]
 80014b4:	eeb3 7a08 	vmov.f32	s14, #56	@ 0x41c00000  24.0
 80014b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014c0:	dd02      	ble.n	80014c8 <main+0x2c0>
	  			  Vin = 24;
 80014c2:	4b2b      	ldr	r3, [pc, #172]	@ (8001570 <main+0x368>)
 80014c4:	4a2f      	ldr	r2, [pc, #188]	@ (8001584 <main+0x37c>)
 80014c6:	601a      	str	r2, [r3, #0]
			  }
			  if(Vin < -24){
 80014c8:	4b29      	ldr	r3, [pc, #164]	@ (8001570 <main+0x368>)
 80014ca:	edd3 7a00 	vldr	s15, [r3]
 80014ce:	eebb 7a08 	vmov.f32	s14, #184	@ 0xc1c00000 -24.0
 80014d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014da:	d55f      	bpl.n	800159c <main+0x394>
				  Vin = -24;
 80014dc:	4b24      	ldr	r3, [pc, #144]	@ (8001570 <main+0x368>)
 80014de:	4a2a      	ldr	r2, [pc, #168]	@ (8001588 <main+0x380>)
 80014e0:	601a      	str	r2, [r3, #0]
 80014e2:	e05b      	b.n	800159c <main+0x394>
			  }
		  }
	      else if(mode == 2){ //manual (control with joy stick)
 80014e4:	4b21      	ldr	r3, [pc, #132]	@ (800156c <main+0x364>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	2b02      	cmp	r3, #2
 80014ea:	d14f      	bne.n	800158c <main+0x384>
			  JoystickInput();
 80014ec:	f001 fe4c 	bl	8003188 <JoystickInput>
			  button_up_down_input();
 80014f0:	f001 fe92 	bl	8003218 <button_up_down_input>
			  button_reset_input(); //set 0;
 80014f4:	f001 ff0e 	bl	8003314 <button_reset_input>
			  button_save_position();
 80014f8:	f001 ff72 	bl	80033e0 <button_save_position>
 80014fc:	e04e      	b.n	800159c <main+0x394>
 80014fe:	bf00      	nop
 8001500:	9999999a 	.word	0x9999999a
 8001504:	3fa99999 	.word	0x3fa99999
 8001508:	9999999a 	.word	0x9999999a
 800150c:	bfa99999 	.word	0xbfa99999
 8001510:	20000240 	.word	0x20000240
 8001514:	20000174 	.word	0x20000174
 8001518:	200003d8 	.word	0x200003d8
 800151c:	20000810 	.word	0x20000810
 8001520:	200000a8 	.word	0x200000a8
 8001524:	2000030c 	.word	0x2000030c
 8001528:	20000888 	.word	0x20000888
 800152c:	40a00000 	.word	0x40a00000
 8001530:	37a7c5ac 	.word	0x37a7c5ac
 8001534:	200008ac 	.word	0x200008ac
 8001538:	3e19999a 	.word	0x3e19999a
 800153c:	3bc49ba6 	.word	0x3bc49ba6
 8001540:	3d4ccccd 	.word	0x3d4ccccd
 8001544:	200004a4 	.word	0x200004a4
 8001548:	200008e4 	.word	0x200008e4
 800154c:	2000063c 	.word	0x2000063c
 8001550:	20000570 	.word	0x20000570
 8001554:	20000dbc 	.word	0x20000dbc
 8001558:	200007c8 	.word	0x200007c8
 800155c:	200008d8 	.word	0x200008d8
 8001560:	20000f58 	.word	0x20000f58
 8001564:	200008d0 	.word	0x200008d0
 8001568:	20000828 	.word	0x20000828
 800156c:	20000000 	.word	0x20000000
 8001570:	20000820 	.word	0x20000820
 8001574:	20000f4c 	.word	0x20000f4c
 8001578:	bfc00000 	.word	0xbfc00000
 800157c:	200008d4 	.word	0x200008d4
 8001580:	20000838 	.word	0x20000838
 8001584:	41c00000 	.word	0x41c00000
 8001588:	c1c00000 	.word	0xc1c00000
		  }
		  else if(mode == 3){ //stop mode
 800158c:	4ba8      	ldr	r3, [pc, #672]	@ (8001830 <main+0x628>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	2b03      	cmp	r3, #3
 8001592:	d103      	bne.n	800159c <main+0x394>
			  Vin = 0;
 8001594:	4ba7      	ldr	r3, [pc, #668]	@ (8001834 <main+0x62c>)
 8001596:	f04f 0200 	mov.w	r2, #0
 800159a:	601a      	str	r2, [r3, #0]
		  }

		  //software limit
		  SoftwareLimit();
 800159c:	f001 fd70 	bl	8003080 <SoftwareLimit>

		  //Drive Motor which PWM
		  DriveMotor();
 80015a0:	f001 fd12 	bl	8002fc8 <DriveMotor>

	  }

	  if(currentTime > timestamp){
 80015a4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80015a8:	49a3      	ldr	r1, [pc, #652]	@ (8001838 <main+0x630>)
 80015aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80015ae:	4290      	cmp	r0, r2
 80015b0:	eb71 0303 	sbcs.w	r3, r1, r3
 80015b4:	f080 8127 	bcs.w	8001806 <main+0x5fe>
		  timestamp = currentTime + 4000; //250 Hz
 80015b8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80015bc:	f512 687a 	adds.w	r8, r2, #4000	@ 0xfa0
 80015c0:	f143 0900 	adc.w	r9, r3, #0
 80015c4:	4642      	mov	r2, r8
 80015c6:	464b      	mov	r3, r9
 80015c8:	499b      	ldr	r1, [pc, #620]	@ (8001838 <main+0x630>)
 80015ca:	e9c1 2300 	strd	r2, r3, [r1]

		  //control mode
		  if(mode == 1){ //auto
 80015ce:	4b98      	ldr	r3, [pc, #608]	@ (8001830 <main+0x628>)
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	f040 8117 	bne.w	8001806 <main+0x5fe>
			  if(fabs(setPosition - QEIdata.linearPos) < 0.05){
 80015d8:	4b98      	ldr	r3, [pc, #608]	@ (800183c <main+0x634>)
 80015da:	ed93 7a00 	vldr	s14, [r3]
 80015de:	4b98      	ldr	r3, [pc, #608]	@ (8001840 <main+0x638>)
 80015e0:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80015e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015e8:	eef0 7ae7 	vabs.f32	s15, s15
 80015ec:	ee17 0a90 	vmov	r0, s15
 80015f0:	f7fe ff76 	bl	80004e0 <__aeabi_f2d>
 80015f4:	a38a      	add	r3, pc, #552	@ (adr r3, 8001820 <main+0x618>)
 80015f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015fa:	f7ff fa3b 	bl	8000a74 <__aeabi_dcmplt>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d004      	beq.n	800160e <main+0x406>
				  Vin = 0;
 8001604:	4b8b      	ldr	r3, [pc, #556]	@ (8001834 <main+0x62c>)
 8001606:	f04f 0200 	mov.w	r2, #0
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	e0dd      	b.n	80017ca <main+0x5c2>
			  }
			  else if(setPosition - QEIdata.linearPos < 3 && setPosition - QEIdata.linearPos > 0.05){
 800160e:	4b8b      	ldr	r3, [pc, #556]	@ (800183c <main+0x634>)
 8001610:	ed93 7a00 	vldr	s14, [r3]
 8001614:	4b8a      	ldr	r3, [pc, #552]	@ (8001840 <main+0x638>)
 8001616:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800161a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800161e:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8001622:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800162a:	d51b      	bpl.n	8001664 <main+0x45c>
 800162c:	4b83      	ldr	r3, [pc, #524]	@ (800183c <main+0x634>)
 800162e:	ed93 7a00 	vldr	s14, [r3]
 8001632:	4b83      	ldr	r3, [pc, #524]	@ (8001840 <main+0x638>)
 8001634:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001638:	ee77 7a67 	vsub.f32	s15, s14, s15
 800163c:	ee17 0a90 	vmov	r0, s15
 8001640:	f7fe ff4e 	bl	80004e0 <__aeabi_f2d>
 8001644:	a376      	add	r3, pc, #472	@ (adr r3, 8001820 <main+0x618>)
 8001646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800164a:	f7ff fa31 	bl	8000ab0 <__aeabi_dcmpgt>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d007      	beq.n	8001664 <main+0x45c>
			  	  Vin = 2;
 8001654:	4b77      	ldr	r3, [pc, #476]	@ (8001834 <main+0x62c>)
 8001656:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800165a:	601a      	str	r2, [r3, #0]
			  	  check = 2;
 800165c:	4b79      	ldr	r3, [pc, #484]	@ (8001844 <main+0x63c>)
 800165e:	2202      	movs	r2, #2
 8001660:	601a      	str	r2, [r3, #0]
 8001662:	e0b2      	b.n	80017ca <main+0x5c2>
			  }
			  else if(setPosition - QEIdata.linearPos > -3 && setPosition - QEIdata.linearPos < -0.05){
 8001664:	4b75      	ldr	r3, [pc, #468]	@ (800183c <main+0x634>)
 8001666:	ed93 7a00 	vldr	s14, [r3]
 800166a:	4b75      	ldr	r3, [pc, #468]	@ (8001840 <main+0x638>)
 800166c:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001670:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001674:	eeb8 7a08 	vmov.f32	s14, #136	@ 0xc0400000 -3.0
 8001678:	eef4 7ac7 	vcmpe.f32	s15, s14
 800167c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001680:	dd1b      	ble.n	80016ba <main+0x4b2>
 8001682:	4b6e      	ldr	r3, [pc, #440]	@ (800183c <main+0x634>)
 8001684:	ed93 7a00 	vldr	s14, [r3]
 8001688:	4b6d      	ldr	r3, [pc, #436]	@ (8001840 <main+0x638>)
 800168a:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800168e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001692:	ee17 0a90 	vmov	r0, s15
 8001696:	f7fe ff23 	bl	80004e0 <__aeabi_f2d>
 800169a:	a363      	add	r3, pc, #396	@ (adr r3, 8001828 <main+0x620>)
 800169c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a0:	f7ff f9e8 	bl	8000a74 <__aeabi_dcmplt>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d007      	beq.n	80016ba <main+0x4b2>
			  	  Vin = -1.5;
 80016aa:	4b62      	ldr	r3, [pc, #392]	@ (8001834 <main+0x62c>)
 80016ac:	4a66      	ldr	r2, [pc, #408]	@ (8001848 <main+0x640>)
 80016ae:	601a      	str	r2, [r3, #0]
			  	  check = -2;
 80016b0:	4b64      	ldr	r3, [pc, #400]	@ (8001844 <main+0x63c>)
 80016b2:	f06f 0201 	mvn.w	r2, #1
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	e087      	b.n	80017ca <main+0x5c2>
			  }
			  else{
				  setVelocity = arm_pid_f32(&PID1, (setPosition + ref_p)/2 - QEIdata.linearPos);
 80016ba:	4b60      	ldr	r3, [pc, #384]	@ (800183c <main+0x634>)
 80016bc:	ed93 7a00 	vldr	s14, [r3]
 80016c0:	4b62      	ldr	r3, [pc, #392]	@ (800184c <main+0x644>)
 80016c2:	edd3 7a00 	vldr	s15, [r3]
 80016c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016ca:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80016ce:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80016d2:	4b5b      	ldr	r3, [pc, #364]	@ (8001840 <main+0x638>)
 80016d4:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80016d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016dc:	4b5c      	ldr	r3, [pc, #368]	@ (8001850 <main+0x648>)
 80016de:	60fb      	str	r3, [r7, #12]
 80016e0:	edc7 7a02 	vstr	s15, [r7, #8]
    out = (S->A0 * in) +
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	ed93 7a00 	vldr	s14, [r3]
 80016ea:	edd7 7a02 	vldr	s15, [r7, #8]
 80016ee:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	edd3 6a01 	vldr	s13, [r3, #4]
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	edd3 7a03 	vldr	s15, [r3, #12]
 80016fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8001702:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	edd3 6a02 	vldr	s13, [r3, #8]
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	edd3 7a04 	vldr	s15, [r3, #16]
 8001712:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001716:	ee37 7a27 	vadd.f32	s14, s14, s15
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8001720:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001724:	edc7 7a01 	vstr	s15, [r7, #4]
    S->state[1] = S->state[0];
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	68da      	ldr	r2, [r3, #12]
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	68ba      	ldr	r2, [r7, #8]
 8001734:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	615a      	str	r2, [r3, #20]
    return (out);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	4a45      	ldr	r2, [pc, #276]	@ (8001854 <main+0x64c>)
 8001740:	6013      	str	r3, [r2, #0]
				  Vin = arm_pid_f32(&PID2, (setVelocity + ref_v)/2 + QEIdata.linearVel);
 8001742:	4b44      	ldr	r3, [pc, #272]	@ (8001854 <main+0x64c>)
 8001744:	ed93 7a00 	vldr	s14, [r3]
 8001748:	4b43      	ldr	r3, [pc, #268]	@ (8001858 <main+0x650>)
 800174a:	edd3 7a00 	vldr	s15, [r3]
 800174e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001752:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001756:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800175a:	4b39      	ldr	r3, [pc, #228]	@ (8001840 <main+0x638>)
 800175c:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001760:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001764:	4b3d      	ldr	r3, [pc, #244]	@ (800185c <main+0x654>)
 8001766:	61bb      	str	r3, [r7, #24]
 8001768:	edc7 7a05 	vstr	s15, [r7, #20]
    out = (S->A0 * in) +
 800176c:	69bb      	ldr	r3, [r7, #24]
 800176e:	ed93 7a00 	vldr	s14, [r3]
 8001772:	edd7 7a05 	vldr	s15, [r7, #20]
 8001776:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 800177a:	69bb      	ldr	r3, [r7, #24]
 800177c:	edd3 6a01 	vldr	s13, [r3, #4]
 8001780:	69bb      	ldr	r3, [r7, #24]
 8001782:	edd3 7a03 	vldr	s15, [r3, #12]
 8001786:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 800178a:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 800178e:	69bb      	ldr	r3, [r7, #24]
 8001790:	edd3 6a02 	vldr	s13, [r3, #8]
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	edd3 7a04 	vldr	s15, [r3, #16]
 800179a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800179e:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017a2:	69bb      	ldr	r3, [r7, #24]
 80017a4:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 80017a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017ac:	edc7 7a04 	vstr	s15, [r7, #16]
    S->state[1] = S->state[0];
 80017b0:	69bb      	ldr	r3, [r7, #24]
 80017b2:	68da      	ldr	r2, [r3, #12]
 80017b4:	69bb      	ldr	r3, [r7, #24]
 80017b6:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 80017b8:	69bb      	ldr	r3, [r7, #24]
 80017ba:	697a      	ldr	r2, [r7, #20]
 80017bc:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 80017be:	69bb      	ldr	r3, [r7, #24]
 80017c0:	693a      	ldr	r2, [r7, #16]
 80017c2:	615a      	str	r2, [r3, #20]
    return (out);
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	4a1b      	ldr	r2, [pc, #108]	@ (8001834 <main+0x62c>)
 80017c8:	6013      	str	r3, [r2, #0]
				  //Vin = arm_pid_f32(&PID2, ref_v - QEIdata.linearVel);
			  }
			  if(Vin > 24){
 80017ca:	4b1a      	ldr	r3, [pc, #104]	@ (8001834 <main+0x62c>)
 80017cc:	edd3 7a00 	vldr	s15, [r3]
 80017d0:	eeb3 7a08 	vmov.f32	s14, #56	@ 0x41c00000  24.0
 80017d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017dc:	dd02      	ble.n	80017e4 <main+0x5dc>
				  Vin = 24;
 80017de:	4b15      	ldr	r3, [pc, #84]	@ (8001834 <main+0x62c>)
 80017e0:	4a1f      	ldr	r2, [pc, #124]	@ (8001860 <main+0x658>)
 80017e2:	601a      	str	r2, [r3, #0]
			  }
			  if(Vin < -24){
 80017e4:	4b13      	ldr	r3, [pc, #76]	@ (8001834 <main+0x62c>)
 80017e6:	edd3 7a00 	vldr	s15, [r3]
 80017ea:	eebb 7a08 	vmov.f32	s14, #184	@ 0xc1c00000 -24.0
 80017ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017f6:	d502      	bpl.n	80017fe <main+0x5f6>
				  Vin = -24;
 80017f8:	4b0e      	ldr	r3, [pc, #56]	@ (8001834 <main+0x62c>)
 80017fa:	4a1a      	ldr	r2, [pc, #104]	@ (8001864 <main+0x65c>)
 80017fc:	601a      	str	r2, [r3, #0]
			  }

			  //software limit
			  SoftwareLimit();
 80017fe:	f001 fc3f 	bl	8003080 <SoftwareLimit>

			  //Drive Motor which PWM
			  DriveMotor();
 8001802:	f001 fbe1 	bl	8002fc8 <DriveMotor>
		  }

	  }

	  //Check Emergency Status
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) == 1){
 8001806:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800180a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800180e:	f004 fb45 	bl	8005e9c <HAL_GPIO_ReadPin>
 8001812:	4603      	mov	r3, r0
 8001814:	2b01      	cmp	r3, #1
 8001816:	f47f ad5c 	bne.w	80012d2 <main+0xca>
		  LED_Emergency();
 800181a:	f001 fe11 	bl	8003440 <LED_Emergency>
  {
 800181e:	e558      	b.n	80012d2 <main+0xca>
 8001820:	9999999a 	.word	0x9999999a
 8001824:	3fa99999 	.word	0x3fa99999
 8001828:	9999999a 	.word	0x9999999a
 800182c:	bfa99999 	.word	0xbfa99999
 8001830:	20000000 	.word	0x20000000
 8001834:	20000820 	.word	0x20000820
 8001838:	20000f60 	.word	0x20000f60
 800183c:	200008d0 	.word	0x200008d0
 8001840:	200007c8 	.word	0x200007c8
 8001844:	20000f4c 	.word	0x20000f4c
 8001848:	bfc00000 	.word	0xbfc00000
 800184c:	20000834 	.word	0x20000834
 8001850:	20000888 	.word	0x20000888
 8001854:	200008d4 	.word	0x200008d4
 8001858:	20000838 	.word	0x20000838
 800185c:	200008ac 	.word	0x200008ac
 8001860:	41c00000 	.word	0x41c00000
 8001864:	c1c00000 	.word	0xc1c00000

08001868 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b094      	sub	sp, #80	@ 0x50
 800186c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800186e:	f107 0318 	add.w	r3, r7, #24
 8001872:	2238      	movs	r2, #56	@ 0x38
 8001874:	2100      	movs	r1, #0
 8001876:	4618      	mov	r0, r3
 8001878:	f009 fa30 	bl	800acdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800187c:	1d3b      	adds	r3, r7, #4
 800187e:	2200      	movs	r2, #0
 8001880:	601a      	str	r2, [r3, #0]
 8001882:	605a      	str	r2, [r3, #4]
 8001884:	609a      	str	r2, [r3, #8]
 8001886:	60da      	str	r2, [r3, #12]
 8001888:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800188a:	2000      	movs	r0, #0
 800188c:	f004 fb4e 	bl	8005f2c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001890:	2302      	movs	r3, #2
 8001892:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001894:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001898:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800189a:	2340      	movs	r3, #64	@ 0x40
 800189c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800189e:	2302      	movs	r3, #2
 80018a0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80018a2:	2302      	movs	r3, #2
 80018a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80018a6:	2304      	movs	r3, #4
 80018a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80018aa:	2355      	movs	r3, #85	@ 0x55
 80018ac:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018ae:	2302      	movs	r3, #2
 80018b0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80018b2:	2302      	movs	r3, #2
 80018b4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80018b6:	2302      	movs	r3, #2
 80018b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018ba:	f107 0318 	add.w	r3, r7, #24
 80018be:	4618      	mov	r0, r3
 80018c0:	f004 fbe8 	bl	8006094 <HAL_RCC_OscConfig>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <SystemClock_Config+0x66>
  {
    Error_Handler();
 80018ca:	f001 fddf 	bl	800348c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018ce:	230f      	movs	r3, #15
 80018d0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018d2:	2303      	movs	r3, #3
 80018d4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018d6:	2300      	movs	r3, #0
 80018d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80018da:	2300      	movs	r3, #0
 80018dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018de:	2300      	movs	r3, #0
 80018e0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80018e2:	1d3b      	adds	r3, r7, #4
 80018e4:	2104      	movs	r1, #4
 80018e6:	4618      	mov	r0, r3
 80018e8:	f004 fee6 	bl	80066b8 <HAL_RCC_ClockConfig>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80018f2:	f001 fdcb 	bl	800348c <Error_Handler>
  }
}
 80018f6:	bf00      	nop
 80018f8:	3750      	adds	r7, #80	@ 0x50
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
	...

08001900 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b08c      	sub	sp, #48	@ 0x30
 8001904:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001906:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800190a:	2200      	movs	r2, #0
 800190c:	601a      	str	r2, [r3, #0]
 800190e:	605a      	str	r2, [r3, #4]
 8001910:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001912:	1d3b      	adds	r3, r7, #4
 8001914:	2220      	movs	r2, #32
 8001916:	2100      	movs	r1, #0
 8001918:	4618      	mov	r0, r3
 800191a:	f009 f9df 	bl	800acdc <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800191e:	4b3a      	ldr	r3, [pc, #232]	@ (8001a08 <MX_ADC1_Init+0x108>)
 8001920:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001924:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001926:	4b38      	ldr	r3, [pc, #224]	@ (8001a08 <MX_ADC1_Init+0x108>)
 8001928:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800192c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800192e:	4b36      	ldr	r3, [pc, #216]	@ (8001a08 <MX_ADC1_Init+0x108>)
 8001930:	2200      	movs	r2, #0
 8001932:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001934:	4b34      	ldr	r3, [pc, #208]	@ (8001a08 <MX_ADC1_Init+0x108>)
 8001936:	2200      	movs	r2, #0
 8001938:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800193a:	4b33      	ldr	r3, [pc, #204]	@ (8001a08 <MX_ADC1_Init+0x108>)
 800193c:	2200      	movs	r2, #0
 800193e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001940:	4b31      	ldr	r3, [pc, #196]	@ (8001a08 <MX_ADC1_Init+0x108>)
 8001942:	2201      	movs	r2, #1
 8001944:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001946:	4b30      	ldr	r3, [pc, #192]	@ (8001a08 <MX_ADC1_Init+0x108>)
 8001948:	2204      	movs	r2, #4
 800194a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800194c:	4b2e      	ldr	r3, [pc, #184]	@ (8001a08 <MX_ADC1_Init+0x108>)
 800194e:	2200      	movs	r2, #0
 8001950:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001952:	4b2d      	ldr	r3, [pc, #180]	@ (8001a08 <MX_ADC1_Init+0x108>)
 8001954:	2200      	movs	r2, #0
 8001956:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 8001958:	4b2b      	ldr	r3, [pc, #172]	@ (8001a08 <MX_ADC1_Init+0x108>)
 800195a:	2202      	movs	r2, #2
 800195c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800195e:	4b2a      	ldr	r3, [pc, #168]	@ (8001a08 <MX_ADC1_Init+0x108>)
 8001960:	2200      	movs	r2, #0
 8001962:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T4_TRGO;
 8001966:	4b28      	ldr	r3, [pc, #160]	@ (8001a08 <MX_ADC1_Init+0x108>)
 8001968:	f44f 62b0 	mov.w	r2, #1408	@ 0x580
 800196c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800196e:	4b26      	ldr	r3, [pc, #152]	@ (8001a08 <MX_ADC1_Init+0x108>)
 8001970:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001974:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001976:	4b24      	ldr	r3, [pc, #144]	@ (8001a08 <MX_ADC1_Init+0x108>)
 8001978:	2201      	movs	r2, #1
 800197a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800197e:	4b22      	ldr	r3, [pc, #136]	@ (8001a08 <MX_ADC1_Init+0x108>)
 8001980:	2200      	movs	r2, #0
 8001982:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001984:	4b20      	ldr	r3, [pc, #128]	@ (8001a08 <MX_ADC1_Init+0x108>)
 8001986:	2200      	movs	r2, #0
 8001988:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800198c:	481e      	ldr	r0, [pc, #120]	@ (8001a08 <MX_ADC1_Init+0x108>)
 800198e:	f002 fb7b 	bl	8004088 <HAL_ADC_Init>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d001      	beq.n	800199c <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8001998:	f001 fd78 	bl	800348c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800199c:	2300      	movs	r3, #0
 800199e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80019a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019a4:	4619      	mov	r1, r3
 80019a6:	4818      	ldr	r0, [pc, #96]	@ (8001a08 <MX_ADC1_Init+0x108>)
 80019a8:	f003 fbac 	bl	8005104 <HAL_ADCEx_MultiModeConfigChannel>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 80019b2:	f001 fd6b 	bl	800348c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80019b6:	4b15      	ldr	r3, [pc, #84]	@ (8001a0c <MX_ADC1_Init+0x10c>)
 80019b8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80019ba:	2306      	movs	r3, #6
 80019bc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80019be:	2300      	movs	r3, #0
 80019c0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80019c2:	237f      	movs	r3, #127	@ 0x7f
 80019c4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80019c6:	2304      	movs	r3, #4
 80019c8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80019ca:	2300      	movs	r3, #0
 80019cc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019ce:	1d3b      	adds	r3, r7, #4
 80019d0:	4619      	mov	r1, r3
 80019d2:	480d      	ldr	r0, [pc, #52]	@ (8001a08 <MX_ADC1_Init+0x108>)
 80019d4:	f002 fe06 	bl	80045e4 <HAL_ADC_ConfigChannel>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 80019de:	f001 fd55 	bl	800348c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80019e2:	4b0b      	ldr	r3, [pc, #44]	@ (8001a10 <MX_ADC1_Init+0x110>)
 80019e4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80019e6:	230c      	movs	r3, #12
 80019e8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019ea:	1d3b      	adds	r3, r7, #4
 80019ec:	4619      	mov	r1, r3
 80019ee:	4806      	ldr	r0, [pc, #24]	@ (8001a08 <MX_ADC1_Init+0x108>)
 80019f0:	f002 fdf8 	bl	80045e4 <HAL_ADC_ConfigChannel>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 80019fa:	f001 fd47 	bl	800348c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80019fe:	bf00      	nop
 8001a00:	3730      	adds	r7, #48	@ 0x30
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	200000a8 	.word	0x200000a8
 8001a0c:	04300002 	.word	0x04300002
 8001a10:	14f00020 	.word	0x14f00020

08001a14 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b08c      	sub	sp, #48	@ 0x30
 8001a18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001a1a:	f107 030c 	add.w	r3, r7, #12
 8001a1e:	2224      	movs	r2, #36	@ 0x24
 8001a20:	2100      	movs	r1, #0
 8001a22:	4618      	mov	r0, r3
 8001a24:	f009 f95a 	bl	800acdc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a28:	463b      	mov	r3, r7
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	601a      	str	r2, [r3, #0]
 8001a2e:	605a      	str	r2, [r3, #4]
 8001a30:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a32:	4b21      	ldr	r3, [pc, #132]	@ (8001ab8 <MX_TIM2_Init+0xa4>)
 8001a34:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001a38:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001a3a:	4b1f      	ldr	r3, [pc, #124]	@ (8001ab8 <MX_TIM2_Init+0xa4>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a40:	4b1d      	ldr	r3, [pc, #116]	@ (8001ab8 <MX_TIM2_Init+0xa4>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001a46:	4b1c      	ldr	r3, [pc, #112]	@ (8001ab8 <MX_TIM2_Init+0xa4>)
 8001a48:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001a4c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a4e:	4b1a      	ldr	r3, [pc, #104]	@ (8001ab8 <MX_TIM2_Init+0xa4>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a54:	4b18      	ldr	r3, [pc, #96]	@ (8001ab8 <MX_TIM2_Init+0xa4>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a62:	2301      	movs	r3, #1
 8001a64:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a66:	2300      	movs	r3, #0
 8001a68:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a72:	2301      	movs	r3, #1
 8001a74:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a76:	2300      	movs	r3, #0
 8001a78:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001a7e:	f107 030c 	add.w	r3, r7, #12
 8001a82:	4619      	mov	r1, r3
 8001a84:	480c      	ldr	r0, [pc, #48]	@ (8001ab8 <MX_TIM2_Init+0xa4>)
 8001a86:	f005 fe43 	bl	8007710 <HAL_TIM_Encoder_Init>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d001      	beq.n	8001a94 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001a90:	f001 fcfc 	bl	800348c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a94:	2300      	movs	r3, #0
 8001a96:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a9c:	463b      	mov	r3, r7
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	4805      	ldr	r0, [pc, #20]	@ (8001ab8 <MX_TIM2_Init+0xa4>)
 8001aa2:	f007 f9eb 	bl	8008e7c <HAL_TIMEx_MasterConfigSynchronization>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001aac:	f001 fcee 	bl	800348c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001ab0:	bf00      	nop
 8001ab2:	3730      	adds	r7, #48	@ 0x30
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	20000174 	.word	0x20000174

08001abc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b08e      	sub	sp, #56	@ 0x38
 8001ac0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ac2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	601a      	str	r2, [r3, #0]
 8001aca:	605a      	str	r2, [r3, #4]
 8001acc:	609a      	str	r2, [r3, #8]
 8001ace:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ad0:	f107 031c 	add.w	r3, r7, #28
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	601a      	str	r2, [r3, #0]
 8001ad8:	605a      	str	r2, [r3, #4]
 8001ada:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001adc:	463b      	mov	r3, r7
 8001ade:	2200      	movs	r2, #0
 8001ae0:	601a      	str	r2, [r3, #0]
 8001ae2:	605a      	str	r2, [r3, #4]
 8001ae4:	609a      	str	r2, [r3, #8]
 8001ae6:	60da      	str	r2, [r3, #12]
 8001ae8:	611a      	str	r2, [r3, #16]
 8001aea:	615a      	str	r2, [r3, #20]
 8001aec:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001aee:	4b2d      	ldr	r3, [pc, #180]	@ (8001ba4 <MX_TIM3_Init+0xe8>)
 8001af0:	4a2d      	ldr	r2, [pc, #180]	@ (8001ba8 <MX_TIM3_Init+0xec>)
 8001af2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 169;
 8001af4:	4b2b      	ldr	r3, [pc, #172]	@ (8001ba4 <MX_TIM3_Init+0xe8>)
 8001af6:	22a9      	movs	r2, #169	@ 0xa9
 8001af8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001afa:	4b2a      	ldr	r3, [pc, #168]	@ (8001ba4 <MX_TIM3_Init+0xe8>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001b00:	4b28      	ldr	r3, [pc, #160]	@ (8001ba4 <MX_TIM3_Init+0xe8>)
 8001b02:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001b06:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b08:	4b26      	ldr	r3, [pc, #152]	@ (8001ba4 <MX_TIM3_Init+0xe8>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b0e:	4b25      	ldr	r3, [pc, #148]	@ (8001ba4 <MX_TIM3_Init+0xe8>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001b14:	4823      	ldr	r0, [pc, #140]	@ (8001ba4 <MX_TIM3_Init+0xe8>)
 8001b16:	f005 fa39 	bl	8006f8c <HAL_TIM_Base_Init>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001b20:	f001 fcb4 	bl	800348c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b24:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b28:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001b2a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b2e:	4619      	mov	r1, r3
 8001b30:	481c      	ldr	r0, [pc, #112]	@ (8001ba4 <MX_TIM3_Init+0xe8>)
 8001b32:	f006 f9bd 	bl	8007eb0 <HAL_TIM_ConfigClockSource>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001b3c:	f001 fca6 	bl	800348c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001b40:	4818      	ldr	r0, [pc, #96]	@ (8001ba4 <MX_TIM3_Init+0xe8>)
 8001b42:	f005 fb6f 	bl	8007224 <HAL_TIM_PWM_Init>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001b4c:	f001 fc9e 	bl	800348c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b50:	2300      	movs	r3, #0
 8001b52:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b54:	2300      	movs	r3, #0
 8001b56:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b58:	f107 031c 	add.w	r3, r7, #28
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	4811      	ldr	r0, [pc, #68]	@ (8001ba4 <MX_TIM3_Init+0xe8>)
 8001b60:	f007 f98c 	bl	8008e7c <HAL_TIMEx_MasterConfigSynchronization>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001b6a:	f001 fc8f 	bl	800348c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b6e:	2360      	movs	r3, #96	@ 0x60
 8001b70:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 8001b72:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001b76:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b80:	463b      	mov	r3, r7
 8001b82:	2200      	movs	r2, #0
 8001b84:	4619      	mov	r1, r3
 8001b86:	4807      	ldr	r0, [pc, #28]	@ (8001ba4 <MX_TIM3_Init+0xe8>)
 8001b88:	f006 f87e 	bl	8007c88 <HAL_TIM_PWM_ConfigChannel>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8001b92:	f001 fc7b 	bl	800348c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001b96:	4803      	ldr	r0, [pc, #12]	@ (8001ba4 <MX_TIM3_Init+0xe8>)
 8001b98:	f001 fe08 	bl	80037ac <HAL_TIM_MspPostInit>

}
 8001b9c:	bf00      	nop
 8001b9e:	3738      	adds	r7, #56	@ 0x38
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	20000240 	.word	0x20000240
 8001ba8:	40000400 	.word	0x40000400

08001bac <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b088      	sub	sp, #32
 8001bb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bb2:	f107 0310 	add.w	r3, r7, #16
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	601a      	str	r2, [r3, #0]
 8001bba:	605a      	str	r2, [r3, #4]
 8001bbc:	609a      	str	r2, [r3, #8]
 8001bbe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bc0:	1d3b      	adds	r3, r7, #4
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	601a      	str	r2, [r3, #0]
 8001bc6:	605a      	str	r2, [r3, #4]
 8001bc8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001bca:	4b1d      	ldr	r3, [pc, #116]	@ (8001c40 <MX_TIM4_Init+0x94>)
 8001bcc:	4a1d      	ldr	r2, [pc, #116]	@ (8001c44 <MX_TIM4_Init+0x98>)
 8001bce:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 169;
 8001bd0:	4b1b      	ldr	r3, [pc, #108]	@ (8001c40 <MX_TIM4_Init+0x94>)
 8001bd2:	22a9      	movs	r2, #169	@ 0xa9
 8001bd4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bd6:	4b1a      	ldr	r3, [pc, #104]	@ (8001c40 <MX_TIM4_Init+0x94>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8001bdc:	4b18      	ldr	r3, [pc, #96]	@ (8001c40 <MX_TIM4_Init+0x94>)
 8001bde:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001be2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001be4:	4b16      	ldr	r3, [pc, #88]	@ (8001c40 <MX_TIM4_Init+0x94>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bea:	4b15      	ldr	r3, [pc, #84]	@ (8001c40 <MX_TIM4_Init+0x94>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001bf0:	4813      	ldr	r0, [pc, #76]	@ (8001c40 <MX_TIM4_Init+0x94>)
 8001bf2:	f005 f9cb 	bl	8006f8c <HAL_TIM_Base_Init>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d001      	beq.n	8001c00 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001bfc:	f001 fc46 	bl	800348c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c00:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c04:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001c06:	f107 0310 	add.w	r3, r7, #16
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	480c      	ldr	r0, [pc, #48]	@ (8001c40 <MX_TIM4_Init+0x94>)
 8001c0e:	f006 f94f 	bl	8007eb0 <HAL_TIM_ConfigClockSource>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d001      	beq.n	8001c1c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001c18:	f001 fc38 	bl	800348c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001c1c:	2320      	movs	r3, #32
 8001c1e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c20:	2300      	movs	r3, #0
 8001c22:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001c24:	1d3b      	adds	r3, r7, #4
 8001c26:	4619      	mov	r1, r3
 8001c28:	4805      	ldr	r0, [pc, #20]	@ (8001c40 <MX_TIM4_Init+0x94>)
 8001c2a:	f007 f927 	bl	8008e7c <HAL_TIMEx_MasterConfigSynchronization>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001c34:	f001 fc2a 	bl	800348c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001c38:	bf00      	nop
 8001c3a:	3720      	adds	r7, #32
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	2000030c 	.word	0x2000030c
 8001c44:	40000800 	.word	0x40000800

08001c48 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b088      	sub	sp, #32
 8001c4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c4e:	f107 0310 	add.w	r3, r7, #16
 8001c52:	2200      	movs	r2, #0
 8001c54:	601a      	str	r2, [r3, #0]
 8001c56:	605a      	str	r2, [r3, #4]
 8001c58:	609a      	str	r2, [r3, #8]
 8001c5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c5c:	1d3b      	adds	r3, r7, #4
 8001c5e:	2200      	movs	r2, #0
 8001c60:	601a      	str	r2, [r3, #0]
 8001c62:	605a      	str	r2, [r3, #4]
 8001c64:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001c66:	4b1d      	ldr	r3, [pc, #116]	@ (8001cdc <MX_TIM5_Init+0x94>)
 8001c68:	4a1d      	ldr	r2, [pc, #116]	@ (8001ce0 <MX_TIM5_Init+0x98>)
 8001c6a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 8001c6c:	4b1b      	ldr	r3, [pc, #108]	@ (8001cdc <MX_TIM5_Init+0x94>)
 8001c6e:	22a9      	movs	r2, #169	@ 0xa9
 8001c70:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c72:	4b1a      	ldr	r3, [pc, #104]	@ (8001cdc <MX_TIM5_Init+0x94>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001c78:	4b18      	ldr	r3, [pc, #96]	@ (8001cdc <MX_TIM5_Init+0x94>)
 8001c7a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001c7e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c80:	4b16      	ldr	r3, [pc, #88]	@ (8001cdc <MX_TIM5_Init+0x94>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c86:	4b15      	ldr	r3, [pc, #84]	@ (8001cdc <MX_TIM5_Init+0x94>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001c8c:	4813      	ldr	r0, [pc, #76]	@ (8001cdc <MX_TIM5_Init+0x94>)
 8001c8e:	f005 f97d 	bl	8006f8c <HAL_TIM_Base_Init>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001c98:	f001 fbf8 	bl	800348c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c9c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ca0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001ca2:	f107 0310 	add.w	r3, r7, #16
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	480c      	ldr	r0, [pc, #48]	@ (8001cdc <MX_TIM5_Init+0x94>)
 8001caa:	f006 f901 	bl	8007eb0 <HAL_TIM_ConfigClockSource>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d001      	beq.n	8001cb8 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001cb4:	f001 fbea 	bl	800348c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001cc0:	1d3b      	adds	r3, r7, #4
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	4805      	ldr	r0, [pc, #20]	@ (8001cdc <MX_TIM5_Init+0x94>)
 8001cc6:	f007 f8d9 	bl	8008e7c <HAL_TIMEx_MasterConfigSynchronization>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d001      	beq.n	8001cd4 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001cd0:	f001 fbdc 	bl	800348c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001cd4:	bf00      	nop
 8001cd6:	3720      	adds	r7, #32
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	200003d8 	.word	0x200003d8
 8001ce0:	40000c00 	.word	0x40000c00

08001ce4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b084      	sub	sp, #16
 8001ce8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cea:	1d3b      	adds	r3, r7, #4
 8001cec:	2200      	movs	r2, #0
 8001cee:	601a      	str	r2, [r3, #0]
 8001cf0:	605a      	str	r2, [r3, #4]
 8001cf2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001cf4:	4b15      	ldr	r3, [pc, #84]	@ (8001d4c <MX_TIM6_Init+0x68>)
 8001cf6:	4a16      	ldr	r2, [pc, #88]	@ (8001d50 <MX_TIM6_Init+0x6c>)
 8001cf8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1699;
 8001cfa:	4b14      	ldr	r3, [pc, #80]	@ (8001d4c <MX_TIM6_Init+0x68>)
 8001cfc:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 8001d00:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d02:	4b12      	ldr	r3, [pc, #72]	@ (8001d4c <MX_TIM6_Init+0x68>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 20000;
 8001d08:	4b10      	ldr	r3, [pc, #64]	@ (8001d4c <MX_TIM6_Init+0x68>)
 8001d0a:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8001d0e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d10:	4b0e      	ldr	r3, [pc, #56]	@ (8001d4c <MX_TIM6_Init+0x68>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001d16:	480d      	ldr	r0, [pc, #52]	@ (8001d4c <MX_TIM6_Init+0x68>)
 8001d18:	f005 f938 	bl	8006f8c <HAL_TIM_Base_Init>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8001d22:	f001 fbb3 	bl	800348c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d26:	2300      	movs	r3, #0
 8001d28:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001d2e:	1d3b      	adds	r3, r7, #4
 8001d30:	4619      	mov	r1, r3
 8001d32:	4806      	ldr	r0, [pc, #24]	@ (8001d4c <MX_TIM6_Init+0x68>)
 8001d34:	f007 f8a2 	bl	8008e7c <HAL_TIMEx_MasterConfigSynchronization>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8001d3e:	f001 fba5 	bl	800348c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001d42:	bf00      	nop
 8001d44:	3710      	adds	r7, #16
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	200004a4 	.word	0x200004a4
 8001d50:	40001000 	.word	0x40001000

08001d54 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001d58:	4b14      	ldr	r3, [pc, #80]	@ (8001dac <MX_TIM16_Init+0x58>)
 8001d5a:	4a15      	ldr	r2, [pc, #84]	@ (8001db0 <MX_TIM16_Init+0x5c>)
 8001d5c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8001d5e:	4b13      	ldr	r3, [pc, #76]	@ (8001dac <MX_TIM16_Init+0x58>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d64:	4b11      	ldr	r3, [pc, #68]	@ (8001dac <MX_TIM16_Init+0x58>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8001d6a:	4b10      	ldr	r3, [pc, #64]	@ (8001dac <MX_TIM16_Init+0x58>)
 8001d6c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d70:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d72:	4b0e      	ldr	r3, [pc, #56]	@ (8001dac <MX_TIM16_Init+0x58>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001d78:	4b0c      	ldr	r3, [pc, #48]	@ (8001dac <MX_TIM16_Init+0x58>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d7e:	4b0b      	ldr	r3, [pc, #44]	@ (8001dac <MX_TIM16_Init+0x58>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001d84:	4809      	ldr	r0, [pc, #36]	@ (8001dac <MX_TIM16_Init+0x58>)
 8001d86:	f005 f901 	bl	8006f8c <HAL_TIM_Base_Init>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d001      	beq.n	8001d94 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8001d90:	f001 fb7c 	bl	800348c <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8001d94:	2108      	movs	r1, #8
 8001d96:	4805      	ldr	r0, [pc, #20]	@ (8001dac <MX_TIM16_Init+0x58>)
 8001d98:	f005 fbc4 	bl	8007524 <HAL_TIM_OnePulse_Init>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 8001da2:	f001 fb73 	bl	800348c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001da6:	bf00      	nop
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	20000570 	.word	0x20000570
 8001db0:	40014400 	.word	0x40014400

08001db4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001db8:	4b23      	ldr	r3, [pc, #140]	@ (8001e48 <MX_USART2_UART_Init+0x94>)
 8001dba:	4a24      	ldr	r2, [pc, #144]	@ (8001e4c <MX_USART2_UART_Init+0x98>)
 8001dbc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8001dbe:	4b22      	ldr	r3, [pc, #136]	@ (8001e48 <MX_USART2_UART_Init+0x94>)
 8001dc0:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8001dc4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8001dc6:	4b20      	ldr	r3, [pc, #128]	@ (8001e48 <MX_USART2_UART_Init+0x94>)
 8001dc8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001dcc:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001dce:	4b1e      	ldr	r3, [pc, #120]	@ (8001e48 <MX_USART2_UART_Init+0x94>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8001dd4:	4b1c      	ldr	r3, [pc, #112]	@ (8001e48 <MX_USART2_UART_Init+0x94>)
 8001dd6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001dda:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ddc:	4b1a      	ldr	r3, [pc, #104]	@ (8001e48 <MX_USART2_UART_Init+0x94>)
 8001dde:	220c      	movs	r2, #12
 8001de0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001de2:	4b19      	ldr	r3, [pc, #100]	@ (8001e48 <MX_USART2_UART_Init+0x94>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001de8:	4b17      	ldr	r3, [pc, #92]	@ (8001e48 <MX_USART2_UART_Init+0x94>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001dee:	4b16      	ldr	r3, [pc, #88]	@ (8001e48 <MX_USART2_UART_Init+0x94>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001df4:	4b14      	ldr	r3, [pc, #80]	@ (8001e48 <MX_USART2_UART_Init+0x94>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001dfa:	4b13      	ldr	r3, [pc, #76]	@ (8001e48 <MX_USART2_UART_Init+0x94>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e00:	4811      	ldr	r0, [pc, #68]	@ (8001e48 <MX_USART2_UART_Init+0x94>)
 8001e02:	f007 f921 	bl	8009048 <HAL_UART_Init>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d001      	beq.n	8001e10 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8001e0c:	f001 fb3e 	bl	800348c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e10:	2100      	movs	r1, #0
 8001e12:	480d      	ldr	r0, [pc, #52]	@ (8001e48 <MX_USART2_UART_Init+0x94>)
 8001e14:	f008 fe62 	bl	800aadc <HAL_UARTEx_SetTxFifoThreshold>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d001      	beq.n	8001e22 <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 8001e1e:	f001 fb35 	bl	800348c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e22:	2100      	movs	r1, #0
 8001e24:	4808      	ldr	r0, [pc, #32]	@ (8001e48 <MX_USART2_UART_Init+0x94>)
 8001e26:	f008 fe97 	bl	800ab58 <HAL_UARTEx_SetRxFifoThreshold>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d001      	beq.n	8001e34 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 8001e30:	f001 fb2c 	bl	800348c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001e34:	4804      	ldr	r0, [pc, #16]	@ (8001e48 <MX_USART2_UART_Init+0x94>)
 8001e36:	f008 fe18 	bl	800aa6a <HAL_UARTEx_DisableFifoMode>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d001      	beq.n	8001e44 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8001e40:	f001 fb24 	bl	800348c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e44:	bf00      	nop
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	2000063c 	.word	0x2000063c
 8001e4c:	40004400 	.word	0x40004400

08001e50 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001e56:	4b20      	ldr	r3, [pc, #128]	@ (8001ed8 <MX_DMA_Init+0x88>)
 8001e58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e5a:	4a1f      	ldr	r2, [pc, #124]	@ (8001ed8 <MX_DMA_Init+0x88>)
 8001e5c:	f043 0304 	orr.w	r3, r3, #4
 8001e60:	6493      	str	r3, [r2, #72]	@ 0x48
 8001e62:	4b1d      	ldr	r3, [pc, #116]	@ (8001ed8 <MX_DMA_Init+0x88>)
 8001e64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e66:	f003 0304 	and.w	r3, r3, #4
 8001e6a:	60fb      	str	r3, [r7, #12]
 8001e6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001e6e:	4b1a      	ldr	r3, [pc, #104]	@ (8001ed8 <MX_DMA_Init+0x88>)
 8001e70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e72:	4a19      	ldr	r2, [pc, #100]	@ (8001ed8 <MX_DMA_Init+0x88>)
 8001e74:	f043 0302 	orr.w	r3, r3, #2
 8001e78:	6493      	str	r3, [r2, #72]	@ 0x48
 8001e7a:	4b17      	ldr	r3, [pc, #92]	@ (8001ed8 <MX_DMA_Init+0x88>)
 8001e7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e7e:	f003 0302 	and.w	r3, r3, #2
 8001e82:	60bb      	str	r3, [r7, #8]
 8001e84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e86:	4b14      	ldr	r3, [pc, #80]	@ (8001ed8 <MX_DMA_Init+0x88>)
 8001e88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e8a:	4a13      	ldr	r2, [pc, #76]	@ (8001ed8 <MX_DMA_Init+0x88>)
 8001e8c:	f043 0301 	orr.w	r3, r3, #1
 8001e90:	6493      	str	r3, [r2, #72]	@ 0x48
 8001e92:	4b11      	ldr	r3, [pc, #68]	@ (8001ed8 <MX_DMA_Init+0x88>)
 8001e94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e96:	f003 0301 	and.w	r3, r3, #1
 8001e9a:	607b      	str	r3, [r7, #4]
 8001e9c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	2100      	movs	r1, #0
 8001ea2:	200b      	movs	r0, #11
 8001ea4:	f003 fb11 	bl	80054ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001ea8:	200b      	movs	r0, #11
 8001eaa:	f003 fb28 	bl	80054fe <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001eae:	2200      	movs	r2, #0
 8001eb0:	2100      	movs	r1, #0
 8001eb2:	200c      	movs	r0, #12
 8001eb4:	f003 fb09 	bl	80054ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001eb8:	200c      	movs	r0, #12
 8001eba:	f003 fb20 	bl	80054fe <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	2100      	movs	r1, #0
 8001ec2:	2038      	movs	r0, #56	@ 0x38
 8001ec4:	f003 fb01 	bl	80054ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8001ec8:	2038      	movs	r0, #56	@ 0x38
 8001eca:	f003 fb18 	bl	80054fe <HAL_NVIC_EnableIRQ>

}
 8001ece:	bf00      	nop
 8001ed0:	3710      	adds	r7, #16
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	40021000 	.word	0x40021000

08001edc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b08a      	sub	sp, #40	@ 0x28
 8001ee0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee2:	f107 0314 	add.w	r3, r7, #20
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	601a      	str	r2, [r3, #0]
 8001eea:	605a      	str	r2, [r3, #4]
 8001eec:	609a      	str	r2, [r3, #8]
 8001eee:	60da      	str	r2, [r3, #12]
 8001ef0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ef2:	4b7d      	ldr	r3, [pc, #500]	@ (80020e8 <MX_GPIO_Init+0x20c>)
 8001ef4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ef6:	4a7c      	ldr	r2, [pc, #496]	@ (80020e8 <MX_GPIO_Init+0x20c>)
 8001ef8:	f043 0304 	orr.w	r3, r3, #4
 8001efc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001efe:	4b7a      	ldr	r3, [pc, #488]	@ (80020e8 <MX_GPIO_Init+0x20c>)
 8001f00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f02:	f003 0304 	and.w	r3, r3, #4
 8001f06:	613b      	str	r3, [r7, #16]
 8001f08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f0a:	4b77      	ldr	r3, [pc, #476]	@ (80020e8 <MX_GPIO_Init+0x20c>)
 8001f0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f0e:	4a76      	ldr	r2, [pc, #472]	@ (80020e8 <MX_GPIO_Init+0x20c>)
 8001f10:	f043 0320 	orr.w	r3, r3, #32
 8001f14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f16:	4b74      	ldr	r3, [pc, #464]	@ (80020e8 <MX_GPIO_Init+0x20c>)
 8001f18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f1a:	f003 0320 	and.w	r3, r3, #32
 8001f1e:	60fb      	str	r3, [r7, #12]
 8001f20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f22:	4b71      	ldr	r3, [pc, #452]	@ (80020e8 <MX_GPIO_Init+0x20c>)
 8001f24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f26:	4a70      	ldr	r2, [pc, #448]	@ (80020e8 <MX_GPIO_Init+0x20c>)
 8001f28:	f043 0301 	orr.w	r3, r3, #1
 8001f2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f2e:	4b6e      	ldr	r3, [pc, #440]	@ (80020e8 <MX_GPIO_Init+0x20c>)
 8001f30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f32:	f003 0301 	and.w	r3, r3, #1
 8001f36:	60bb      	str	r3, [r7, #8]
 8001f38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f3a:	4b6b      	ldr	r3, [pc, #428]	@ (80020e8 <MX_GPIO_Init+0x20c>)
 8001f3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f3e:	4a6a      	ldr	r2, [pc, #424]	@ (80020e8 <MX_GPIO_Init+0x20c>)
 8001f40:	f043 0302 	orr.w	r3, r3, #2
 8001f44:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f46:	4b68      	ldr	r3, [pc, #416]	@ (80020e8 <MX_GPIO_Init+0x20c>)
 8001f48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f4a:	f003 0302 	and.w	r3, r3, #2
 8001f4e:	607b      	str	r3, [r7, #4]
 8001f50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f52:	4b65      	ldr	r3, [pc, #404]	@ (80020e8 <MX_GPIO_Init+0x20c>)
 8001f54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f56:	4a64      	ldr	r2, [pc, #400]	@ (80020e8 <MX_GPIO_Init+0x20c>)
 8001f58:	f043 0308 	orr.w	r3, r3, #8
 8001f5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f5e:	4b62      	ldr	r3, [pc, #392]	@ (80020e8 <MX_GPIO_Init+0x20c>)
 8001f60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f62:	f003 0308 	and.w	r3, r3, #8
 8001f66:	603b      	str	r3, [r7, #0]
 8001f68:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7, GPIO_PIN_RESET);
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	f244 01b0 	movw	r1, #16560	@ 0x40b0
 8001f70:	485e      	ldr	r0, [pc, #376]	@ (80020ec <MX_GPIO_Init+0x210>)
 8001f72:	f003 ffab 	bl	8005ecc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001f76:	2200      	movs	r2, #0
 8001f78:	f44f 7178 	mov.w	r1, #992	@ 0x3e0
 8001f7c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f80:	f003 ffa4 	bl	8005ecc <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_6, GPIO_PIN_RESET);
 8001f84:	2200      	movs	r2, #0
 8001f86:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 8001f8a:	4859      	ldr	r0, [pc, #356]	@ (80020f0 <MX_GPIO_Init+0x214>)
 8001f8c:	f003 ff9e 	bl	8005ecc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001f90:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f96:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001f9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fa0:	f107 0314 	add.w	r3, r7, #20
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	4851      	ldr	r0, [pc, #324]	@ (80020ec <MX_GPIO_Init+0x210>)
 8001fa8:	f003 fdf6 	bl	8005b98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC4 PC5 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8001fac:	f244 03b0 	movw	r3, #16560	@ 0x40b0
 8001fb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fbe:	f107 0314 	add.w	r3, r7, #20
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	4849      	ldr	r0, [pc, #292]	@ (80020ec <MX_GPIO_Init+0x210>)
 8001fc6:	f003 fde7 	bl	8005b98 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA6 PA7 PA8
                           PA9 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001fca:	f44f 7378 	mov.w	r3, #992	@ 0x3e0
 8001fce:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fdc:	f107 0314 	add.w	r3, r7, #20
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001fe6:	f003 fdd7 	bl	8005b98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_6;
 8001fea:	f44f 6388 	mov.w	r3, #1088	@ 0x440
 8001fee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ffc:	f107 0314 	add.w	r3, r7, #20
 8002000:	4619      	mov	r1, r3
 8002002:	483b      	ldr	r0, [pc, #236]	@ (80020f0 <MX_GPIO_Init+0x214>)
 8002004:	f003 fdc8 	bl	8005b98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002008:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800200c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800200e:	2300      	movs	r3, #0
 8002010:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002012:	2300      	movs	r3, #0
 8002014:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002016:	f107 0314 	add.w	r3, r7, #20
 800201a:	4619      	mov	r1, r3
 800201c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002020:	f003 fdba 	bl	8005b98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002024:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002028:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800202a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800202e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002030:	2302      	movs	r3, #2
 8002032:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002034:	f107 0314 	add.w	r3, r7, #20
 8002038:	4619      	mov	r1, r3
 800203a:	482c      	ldr	r0, [pc, #176]	@ (80020ec <MX_GPIO_Init+0x210>)
 800203c:	f003 fdac 	bl	8005b98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002040:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002044:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002046:	2300      	movs	r3, #0
 8002048:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800204a:	2302      	movs	r3, #2
 800204c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800204e:	f107 0314 	add.w	r3, r7, #20
 8002052:	4619      	mov	r1, r3
 8002054:	4825      	ldr	r0, [pc, #148]	@ (80020ec <MX_GPIO_Init+0x210>)
 8002056:	f003 fd9f 	bl	8005b98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800205a:	2304      	movs	r3, #4
 800205c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800205e:	2300      	movs	r3, #0
 8002060:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002062:	2302      	movs	r3, #2
 8002064:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002066:	f107 0314 	add.w	r3, r7, #20
 800206a:	4619      	mov	r1, r3
 800206c:	4821      	ldr	r0, [pc, #132]	@ (80020f4 <MX_GPIO_Init+0x218>)
 800206e:	f003 fd93 	bl	8005b98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002072:	2330      	movs	r3, #48	@ 0x30
 8002074:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002076:	2300      	movs	r3, #0
 8002078:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207a:	2300      	movs	r3, #0
 800207c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800207e:	f107 0314 	add.w	r3, r7, #20
 8002082:	4619      	mov	r1, r3
 8002084:	481a      	ldr	r0, [pc, #104]	@ (80020f0 <MX_GPIO_Init+0x214>)
 8002086:	f003 fd87 	bl	8005b98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800208a:	2380      	movs	r3, #128	@ 0x80
 800208c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800208e:	2300      	movs	r3, #0
 8002090:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002092:	2302      	movs	r3, #2
 8002094:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002096:	f107 0314 	add.w	r3, r7, #20
 800209a:	4619      	mov	r1, r3
 800209c:	4814      	ldr	r0, [pc, #80]	@ (80020f0 <MX_GPIO_Init+0x214>)
 800209e:	f003 fd7b 	bl	8005b98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80020a2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80020a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80020a8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80020ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ae:	2300      	movs	r3, #0
 80020b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020b2:	f107 0314 	add.w	r3, r7, #20
 80020b6:	4619      	mov	r1, r3
 80020b8:	480d      	ldr	r0, [pc, #52]	@ (80020f0 <MX_GPIO_Init+0x214>)
 80020ba:	f003 fd6d 	bl	8005b98 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80020be:	2200      	movs	r2, #0
 80020c0:	2100      	movs	r1, #0
 80020c2:	2017      	movs	r0, #23
 80020c4:	f003 fa01 	bl	80054ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80020c8:	2017      	movs	r0, #23
 80020ca:	f003 fa18 	bl	80054fe <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80020ce:	2200      	movs	r2, #0
 80020d0:	2100      	movs	r1, #0
 80020d2:	2028      	movs	r0, #40	@ 0x28
 80020d4:	f003 f9f9 	bl	80054ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80020d8:	2028      	movs	r0, #40	@ 0x28
 80020da:	f003 fa10 	bl	80054fe <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80020de:	bf00      	nop
 80020e0:	3728      	adds	r7, #40	@ 0x28
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	40021000 	.word	0x40021000
 80020ec:	48000800 	.word	0x48000800
 80020f0:	48000400 	.word	0x48000400
 80020f4:	48000c00 	.word	0x48000c00

080020f8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
//MicroSecondTimer Implement
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020f8:	b4b0      	push	{r4, r5, r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
	if(htim == &htim5)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	4a08      	ldr	r2, [pc, #32]	@ (8002124 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d108      	bne.n	800211a <HAL_TIM_PeriodElapsedCallback+0x22>
	{
		_micros += UINT32_MAX;
 8002108:	4b07      	ldr	r3, [pc, #28]	@ (8002128 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800210a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800210e:	1e54      	subs	r4, r2, #1
 8002110:	f143 0500 	adc.w	r5, r3, #0
 8002114:	4b04      	ldr	r3, [pc, #16]	@ (8002128 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8002116:	e9c3 4500 	strd	r4, r5, [r3]
//	{
//	    check2 +=1;
//		Heartbeat();
//		Routine();
//	}
}
 800211a:	bf00      	nop
 800211c:	370c      	adds	r7, #12
 800211e:	46bd      	mov	sp, r7
 8002120:	bcb0      	pop	{r4, r5, r7}
 8002122:	4770      	bx	lr
 8002124:	200003d8 	.word	0x200003d8
 8002128:	20000808 	.word	0x20000808

0800212c <micros>:

uint64_t micros()
{
 800212c:	b4b0      	push	{r4, r5, r7}
 800212e:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim5)+_micros;
 8002130:	4b09      	ldr	r3, [pc, #36]	@ (8002158 <micros+0x2c>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002136:	2200      	movs	r2, #0
 8002138:	4618      	mov	r0, r3
 800213a:	4611      	mov	r1, r2
 800213c:	4b07      	ldr	r3, [pc, #28]	@ (800215c <micros+0x30>)
 800213e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002142:	1884      	adds	r4, r0, r2
 8002144:	eb41 0503 	adc.w	r5, r1, r3
 8002148:	4622      	mov	r2, r4
 800214a:	462b      	mov	r3, r5
}
 800214c:	4610      	mov	r0, r2
 800214e:	4619      	mov	r1, r3
 8002150:	46bd      	mov	sp, r7
 8002152:	bcb0      	pop	{r4, r5, r7}
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	200003d8 	.word	0x200003d8
 800215c:	20000808 	.word	0x20000808

08002160 <QEIEncoderPosVel_Update>:

void QEIEncoderPosVel_Update()
{
 8002160:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002164:	b082      	sub	sp, #8
 8002166:	af00      	add	r7, sp, #0
	//collect data
	QEIdata.TimeStamp[NEW] = micros();
 8002168:	f7ff ffe0 	bl	800212c <micros>
 800216c:	4602      	mov	r2, r0
 800216e:	460b      	mov	r3, r1
 8002170:	4971      	ldr	r1, [pc, #452]	@ (8002338 <QEIEncoderPosVel_Update+0x1d8>)
 8002172:	e9c1 2302 	strd	r2, r3, [r1, #8]
	QEIdata.Position[NEW] = __HAL_TIM_GET_COUNTER(&htim2);
 8002176:	4b71      	ldr	r3, [pc, #452]	@ (800233c <QEIEncoderPosVel_Update+0x1dc>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800217c:	4a6e      	ldr	r2, [pc, #440]	@ (8002338 <QEIEncoderPosVel_Update+0x1d8>)
 800217e:	6013      	str	r3, [r2, #0]
	//Postion 1 turn calculation
	QEIdata.QEIPostion_1turn = QEIdata.Position[NEW] % 8192;
 8002180:	4b6d      	ldr	r3, [pc, #436]	@ (8002338 <QEIEncoderPosVel_Update+0x1d8>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002188:	ee07 3a90 	vmov	s15, r3
 800218c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002190:	4b69      	ldr	r3, [pc, #420]	@ (8002338 <QEIEncoderPosVel_Update+0x1d8>)
 8002192:	edc3 7a06 	vstr	s15, [r3, #24]
	//calculate dx
	int32_t diffPosition = QEIdata.Position[NEW] - QEIdata.Position[OLD];
 8002196:	4b68      	ldr	r3, [pc, #416]	@ (8002338 <QEIEncoderPosVel_Update+0x1d8>)
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	4b67      	ldr	r3, [pc, #412]	@ (8002338 <QEIEncoderPosVel_Update+0x1d8>)
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	607b      	str	r3, [r7, #4]
	//Handle Warp around
	if(diffPosition > UINT32_MAX/2)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	da02      	bge.n	80021ae <QEIEncoderPosVel_Update+0x4e>
		diffPosition -=UINT32_MAX;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	3301      	adds	r3, #1
 80021ac:	607b      	str	r3, [r7, #4]
	if(diffPosition < -UINT32_MAX/2)
		diffPosition +=UINT32_MAX;
	//calculate dt
	float diffTime = (QEIdata.TimeStamp[NEW]-QEIdata.TimeStamp[OLD]) * 0.000001; //sec
 80021ae:	4b62      	ldr	r3, [pc, #392]	@ (8002338 <QEIEncoderPosVel_Update+0x1d8>)
 80021b0:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80021b4:	4b60      	ldr	r3, [pc, #384]	@ (8002338 <QEIEncoderPosVel_Update+0x1d8>)
 80021b6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80021ba:	ebb0 0a02 	subs.w	sl, r0, r2
 80021be:	eb61 0b03 	sbc.w	fp, r1, r3
 80021c2:	4650      	mov	r0, sl
 80021c4:	4659      	mov	r1, fp
 80021c6:	f7fe f9ad 	bl	8000524 <__aeabi_ul2d>
 80021ca:	a357      	add	r3, pc, #348	@ (adr r3, 8002328 <QEIEncoderPosVel_Update+0x1c8>)
 80021cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021d0:	f7fe f9de 	bl	8000590 <__aeabi_dmul>
 80021d4:	4602      	mov	r2, r0
 80021d6:	460b      	mov	r3, r1
 80021d8:	4610      	mov	r0, r2
 80021da:	4619      	mov	r1, r3
 80021dc:	f7fe fca8 	bl	8000b30 <__aeabi_d2f>
 80021e0:	4603      	mov	r3, r0
 80021e2:	603b      	str	r3, [r7, #0]
	//calculate anglar velocity
	QEIdata.QEIAngularVelocity = diffPosition / diffTime;  //pulse/sec
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	ee07 3a90 	vmov	s15, r3
 80021ea:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80021ee:	ed97 7a00 	vldr	s14, [r7]
 80021f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021f6:	4b50      	ldr	r3, [pc, #320]	@ (8002338 <QEIEncoderPosVel_Update+0x1d8>)
 80021f8:	edc3 7a07 	vstr	s15, [r3, #28]

	QEIdata.rad_s = (QEIdata.QEIAngularVelocity*2*3.14)/8192;
 80021fc:	4b4e      	ldr	r3, [pc, #312]	@ (8002338 <QEIEncoderPosVel_Update+0x1d8>)
 80021fe:	edd3 7a07 	vldr	s15, [r3, #28]
 8002202:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002206:	ee17 0a90 	vmov	r0, s15
 800220a:	f7fe f969 	bl	80004e0 <__aeabi_f2d>
 800220e:	a348      	add	r3, pc, #288	@ (adr r3, 8002330 <QEIEncoderPosVel_Update+0x1d0>)
 8002210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002214:	f7fe f9bc 	bl	8000590 <__aeabi_dmul>
 8002218:	4602      	mov	r2, r0
 800221a:	460b      	mov	r3, r1
 800221c:	4610      	mov	r0, r2
 800221e:	4619      	mov	r1, r3
 8002220:	f04f 0200 	mov.w	r2, #0
 8002224:	4b46      	ldr	r3, [pc, #280]	@ (8002340 <QEIEncoderPosVel_Update+0x1e0>)
 8002226:	f7fe fadd 	bl	80007e4 <__aeabi_ddiv>
 800222a:	4602      	mov	r2, r0
 800222c:	460b      	mov	r3, r1
 800222e:	4610      	mov	r0, r2
 8002230:	4619      	mov	r1, r3
 8002232:	f7fe fc7d 	bl	8000b30 <__aeabi_d2f>
 8002236:	4603      	mov	r3, r0
 8002238:	4a3f      	ldr	r2, [pc, #252]	@ (8002338 <QEIEncoderPosVel_Update+0x1d8>)
 800223a:	6213      	str	r3, [r2, #32]
	QEIdata.rpm = (QEIdata.QEIAngularVelocity*60)/8192;
 800223c:	4b3e      	ldr	r3, [pc, #248]	@ (8002338 <QEIEncoderPosVel_Update+0x1d8>)
 800223e:	edd3 7a07 	vldr	s15, [r3, #28]
 8002242:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 8002344 <QEIEncoderPosVel_Update+0x1e4>
 8002246:	ee27 7a87 	vmul.f32	s14, s15, s14
 800224a:	eddf 6a3f 	vldr	s13, [pc, #252]	@ 8002348 <QEIEncoderPosVel_Update+0x1e8>
 800224e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002252:	4b39      	ldr	r3, [pc, #228]	@ (8002338 <QEIEncoderPosVel_Update+0x1d8>)
 8002254:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	QEIdata.linearVel = (QEIdata.QEIAngularVelocity*10)/8192; //velocity (mm/s)
 8002258:	4b37      	ldr	r3, [pc, #220]	@ (8002338 <QEIEncoderPosVel_Update+0x1d8>)
 800225a:	edd3 7a07 	vldr	s15, [r3, #28]
 800225e:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002262:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002266:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002348 <QEIEncoderPosVel_Update+0x1e8>
 800226a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800226e:	4b32      	ldr	r3, [pc, #200]	@ (8002338 <QEIEncoderPosVel_Update+0x1d8>)
 8002270:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	QEIdata.Velocity[NEW] = QEIdata.linearVel;
 8002274:	4b30      	ldr	r3, [pc, #192]	@ (8002338 <QEIEncoderPosVel_Update+0x1d8>)
 8002276:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002278:	4a2f      	ldr	r2, [pc, #188]	@ (8002338 <QEIEncoderPosVel_Update+0x1d8>)
 800227a:	6313      	str	r3, [r2, #48]	@ 0x30
	QEIdata.linearAcc = (QEIdata.Velocity[NEW]-QEIdata.Velocity[OLD])/diffTime;
 800227c:	4b2e      	ldr	r3, [pc, #184]	@ (8002338 <QEIEncoderPosVel_Update+0x1d8>)
 800227e:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 8002282:	4b2d      	ldr	r3, [pc, #180]	@ (8002338 <QEIEncoderPosVel_Update+0x1d8>)
 8002284:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8002288:	ee77 6a67 	vsub.f32	s13, s14, s15
 800228c:	ed97 7a00 	vldr	s14, [r7]
 8002290:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002294:	4b28      	ldr	r3, [pc, #160]	@ (8002338 <QEIEncoderPosVel_Update+0x1d8>)
 8002296:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38


	if(QEIdata.Position[NEW] < 2147483648){
 800229a:	4b27      	ldr	r3, [pc, #156]	@ (8002338 <QEIEncoderPosVel_Update+0x1d8>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	db11      	blt.n	80022c6 <QEIEncoderPosVel_Update+0x166>
		QEIdata.linearPos = ((float)QEIdata.Position[NEW]*10)/8192; //position (mm)
 80022a2:	4b25      	ldr	r3, [pc, #148]	@ (8002338 <QEIEncoderPosVel_Update+0x1d8>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	ee07 3a90 	vmov	s15, r3
 80022aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022ae:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80022b2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80022b6:	eddf 6a24 	vldr	s13, [pc, #144]	@ 8002348 <QEIEncoderPosVel_Update+0x1e8>
 80022ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80022be:	4b1e      	ldr	r3, [pc, #120]	@ (8002338 <QEIEncoderPosVel_Update+0x1d8>)
 80022c0:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
 80022c4:	e01c      	b.n	8002300 <QEIEncoderPosVel_Update+0x1a0>
	}
	else{
		QEIdata.linearPos = -((float)(4294967295 - QEIdata.Position[NEW])*10)/8192;
 80022c6:	4b1c      	ldr	r3, [pc, #112]	@ (8002338 <QEIEncoderPosVel_Update+0x1d8>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	2200      	movs	r2, #0
 80022cc:	461c      	mov	r4, r3
 80022ce:	4615      	mov	r5, r2
 80022d0:	2300      	movs	r3, #0
 80022d2:	f1d4 38ff 	rsbs	r8, r4, #4294967295	@ 0xffffffff
 80022d6:	eb63 0905 	sbc.w	r9, r3, r5
 80022da:	4640      	mov	r0, r8
 80022dc:	4649      	mov	r1, r9
 80022de:	f7fe fd47 	bl	8000d70 <__aeabi_l2f>
 80022e2:	ee07 0a10 	vmov	s14, r0
 80022e6:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 80022ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022ee:	eeb1 7a67 	vneg.f32	s14, s15
 80022f2:	eddf 6a15 	vldr	s13, [pc, #84]	@ 8002348 <QEIEncoderPosVel_Update+0x1e8>
 80022f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80022fa:	4b0f      	ldr	r3, [pc, #60]	@ (8002338 <QEIEncoderPosVel_Update+0x1d8>)
 80022fc:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
	}

	//store value for next loop
	QEIdata.Position[OLD] = QEIdata.Position[NEW];
 8002300:	4b0d      	ldr	r3, [pc, #52]	@ (8002338 <QEIEncoderPosVel_Update+0x1d8>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a0c      	ldr	r2, [pc, #48]	@ (8002338 <QEIEncoderPosVel_Update+0x1d8>)
 8002306:	6053      	str	r3, [r2, #4]
	QEIdata.TimeStamp[OLD]=QEIdata.TimeStamp[NEW];
 8002308:	4b0b      	ldr	r3, [pc, #44]	@ (8002338 <QEIEncoderPosVel_Update+0x1d8>)
 800230a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800230e:	490a      	ldr	r1, [pc, #40]	@ (8002338 <QEIEncoderPosVel_Update+0x1d8>)
 8002310:	e9c1 2304 	strd	r2, r3, [r1, #16]
	QEIdata.Velocity[OLD] = QEIdata.Velocity[NEW];
 8002314:	4b08      	ldr	r3, [pc, #32]	@ (8002338 <QEIEncoderPosVel_Update+0x1d8>)
 8002316:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002318:	4a07      	ldr	r2, [pc, #28]	@ (8002338 <QEIEncoderPosVel_Update+0x1d8>)
 800231a:	6353      	str	r3, [r2, #52]	@ 0x34
}
 800231c:	bf00      	nop
 800231e:	3708      	adds	r7, #8
 8002320:	46bd      	mov	sp, r7
 8002322:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002326:	bf00      	nop
 8002328:	a0b5ed8d 	.word	0xa0b5ed8d
 800232c:	3eb0c6f7 	.word	0x3eb0c6f7
 8002330:	51eb851f 	.word	0x51eb851f
 8002334:	40091eb8 	.word	0x40091eb8
 8002338:	200007c8 	.word	0x200007c8
 800233c:	20000174 	.word	0x20000174
 8002340:	40c00000 	.word	0x40c00000
 8002344:	42700000 	.word	0x42700000
 8002348:	46000000 	.word	0x46000000

0800234c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	4603      	mov	r3, r0
 8002354:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_10)  //change mode IT
 8002356:	88fb      	ldrh	r3, [r7, #6]
 8002358:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800235c:	d10c      	bne.n	8002378 <HAL_GPIO_EXTI_Callback+0x2c>
	{
//		setPosition = 100;
		mode += 1;
 800235e:	4b11      	ldr	r3, [pc, #68]	@ (80023a4 <HAL_GPIO_EXTI_Callback+0x58>)
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	3301      	adds	r3, #1
 8002364:	b2da      	uxtb	r2, r3
 8002366:	4b0f      	ldr	r3, [pc, #60]	@ (80023a4 <HAL_GPIO_EXTI_Callback+0x58>)
 8002368:	701a      	strb	r2, [r3, #0]
		if(mode==4){
 800236a:	4b0e      	ldr	r3, [pc, #56]	@ (80023a4 <HAL_GPIO_EXTI_Callback+0x58>)
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	2b04      	cmp	r3, #4
 8002370:	d102      	bne.n	8002378 <HAL_GPIO_EXTI_Callback+0x2c>
			mode = 1;
 8002372:	4b0c      	ldr	r3, [pc, #48]	@ (80023a4 <HAL_GPIO_EXTI_Callback+0x58>)
 8002374:	2201      	movs	r2, #1
 8002376:	701a      	strb	r2, [r3, #0]
//		}
//		else if(mode == 2){
//			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
//		}
	}
	if(GPIO_Pin == GPIO_PIN_8){ //check top sensor
 8002378:	88fb      	ldrh	r3, [r7, #6]
 800237a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800237e:	d104      	bne.n	800238a <HAL_GPIO_EXTI_Callback+0x3e>
		S_top = 1;
 8002380:	4b09      	ldr	r3, [pc, #36]	@ (80023a8 <HAL_GPIO_EXTI_Callback+0x5c>)
 8002382:	2201      	movs	r2, #1
 8002384:	601a      	str	r2, [r3, #0]
		//Vin = -2;
		DriveMotor();
 8002386:	f000 fe1f 	bl	8002fc8 <DriveMotor>
	}
	if(GPIO_Pin == GPIO_PIN_9){ //check down sensor
 800238a:	88fb      	ldrh	r3, [r7, #6]
 800238c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002390:	d104      	bne.n	800239c <HAL_GPIO_EXTI_Callback+0x50>
		S_down = 1;
 8002392:	4b06      	ldr	r3, [pc, #24]	@ (80023ac <HAL_GPIO_EXTI_Callback+0x60>)
 8002394:	2201      	movs	r2, #1
 8002396:	601a      	str	r2, [r3, #0]
		//Vin = 2;
		DriveMotor();
 8002398:	f000 fe16 	bl	8002fc8 <DriveMotor>
	}
}
 800239c:	bf00      	nop
 800239e:	3708      	adds	r7, #8
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	20000000 	.word	0x20000000
 80023a8:	200008dc 	.word	0x200008dc
 80023ac:	200008e0 	.word	0x200008e0

080023b0 <checkStartMoving>:

//-----------------------------------Trajectory------------------------------------------//
void checkStartMoving(){
 80023b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023b4:	b082      	sub	sp, #8
 80023b6:	af00      	add	r7, sp, #0
	if(q_f != q_f_old){
 80023b8:	4b9d      	ldr	r3, [pc, #628]	@ (8002630 <checkStartMoving+0x280>)
 80023ba:	ed93 7a00 	vldr	s14, [r3]
 80023be:	4b9d      	ldr	r3, [pc, #628]	@ (8002634 <checkStartMoving+0x284>)
 80023c0:	edd3 7a00 	vldr	s15, [r3]
 80023c4:	eeb4 7a67 	vcmp.f32	s14, s15
 80023c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023cc:	f000 8201 	beq.w	80027d2 <checkStartMoving+0x422>
		q_i = q_f_old;   //Define q_i
 80023d0:	4b98      	ldr	r3, [pc, #608]	@ (8002634 <checkStartMoving+0x284>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a98      	ldr	r2, [pc, #608]	@ (8002638 <checkStartMoving+0x288>)
 80023d6:	6013      	str	r3, [r2, #0]
		delta_q = q_f - q_i;
 80023d8:	4b95      	ldr	r3, [pc, #596]	@ (8002630 <checkStartMoving+0x280>)
 80023da:	ed93 7a00 	vldr	s14, [r3]
 80023de:	4b96      	ldr	r3, [pc, #600]	@ (8002638 <checkStartMoving+0x288>)
 80023e0:	edd3 7a00 	vldr	s15, [r3]
 80023e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023e8:	4b94      	ldr	r3, [pc, #592]	@ (800263c <checkStartMoving+0x28c>)
 80023ea:	edc3 7a00 	vstr	s15, [r3]
		if(delta_q < 0){
 80023ee:	4b93      	ldr	r3, [pc, #588]	@ (800263c <checkStartMoving+0x28c>)
 80023f0:	edd3 7a00 	vldr	s15, [r3]
 80023f4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80023f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023fc:	d504      	bpl.n	8002408 <checkStartMoving+0x58>
			dir = -1;
 80023fe:	4b90      	ldr	r3, [pc, #576]	@ (8002640 <checkStartMoving+0x290>)
 8002400:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002404:	601a      	str	r2, [r3, #0]
 8002406:	e002      	b.n	800240e <checkStartMoving+0x5e>
		}
		else{
			dir = 1;
 8002408:	4b8d      	ldr	r3, [pc, #564]	@ (8002640 <checkStartMoving+0x290>)
 800240a:	2201      	movs	r2, #1
 800240c:	601a      	str	r2, [r3, #0]
		}

		float q_check = fabs(q_d_i + q_2d_max*sqrt(fabs(delta_q)/q_2d_max)*dir);
 800240e:	4b8d      	ldr	r3, [pc, #564]	@ (8002644 <checkStartMoving+0x294>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4618      	mov	r0, r3
 8002414:	f7fe f864 	bl	80004e0 <__aeabi_f2d>
 8002418:	4604      	mov	r4, r0
 800241a:	460d      	mov	r5, r1
 800241c:	4b8a      	ldr	r3, [pc, #552]	@ (8002648 <checkStartMoving+0x298>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4618      	mov	r0, r3
 8002422:	f7fe f85d 	bl	80004e0 <__aeabi_f2d>
 8002426:	4680      	mov	r8, r0
 8002428:	4689      	mov	r9, r1
 800242a:	4b84      	ldr	r3, [pc, #528]	@ (800263c <checkStartMoving+0x28c>)
 800242c:	edd3 7a00 	vldr	s15, [r3]
 8002430:	eef0 7ae7 	vabs.f32	s15, s15
 8002434:	ee17 0a90 	vmov	r0, s15
 8002438:	f7fe f852 	bl	80004e0 <__aeabi_f2d>
 800243c:	4682      	mov	sl, r0
 800243e:	468b      	mov	fp, r1
 8002440:	4b81      	ldr	r3, [pc, #516]	@ (8002648 <checkStartMoving+0x298>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4618      	mov	r0, r3
 8002446:	f7fe f84b 	bl	80004e0 <__aeabi_f2d>
 800244a:	4602      	mov	r2, r0
 800244c:	460b      	mov	r3, r1
 800244e:	4650      	mov	r0, sl
 8002450:	4659      	mov	r1, fp
 8002452:	f7fe f9c7 	bl	80007e4 <__aeabi_ddiv>
 8002456:	4602      	mov	r2, r0
 8002458:	460b      	mov	r3, r1
 800245a:	ec43 2b17 	vmov	d7, r2, r3
 800245e:	eeb0 0a47 	vmov.f32	s0, s14
 8002462:	eef0 0a67 	vmov.f32	s1, s15
 8002466:	f008 fc6b 	bl	800ad40 <sqrt>
 800246a:	ec53 2b10 	vmov	r2, r3, d0
 800246e:	4640      	mov	r0, r8
 8002470:	4649      	mov	r1, r9
 8002472:	f7fe f88d 	bl	8000590 <__aeabi_dmul>
 8002476:	4602      	mov	r2, r0
 8002478:	460b      	mov	r3, r1
 800247a:	4690      	mov	r8, r2
 800247c:	4699      	mov	r9, r3
 800247e:	4b70      	ldr	r3, [pc, #448]	@ (8002640 <checkStartMoving+0x290>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4618      	mov	r0, r3
 8002484:	f7fe f81a 	bl	80004bc <__aeabi_i2d>
 8002488:	4602      	mov	r2, r0
 800248a:	460b      	mov	r3, r1
 800248c:	4640      	mov	r0, r8
 800248e:	4649      	mov	r1, r9
 8002490:	f7fe f87e 	bl	8000590 <__aeabi_dmul>
 8002494:	4602      	mov	r2, r0
 8002496:	460b      	mov	r3, r1
 8002498:	4620      	mov	r0, r4
 800249a:	4629      	mov	r1, r5
 800249c:	f7fd fec2 	bl	8000224 <__adddf3>
 80024a0:	4602      	mov	r2, r0
 80024a2:	460b      	mov	r3, r1
 80024a4:	4610      	mov	r0, r2
 80024a6:	4619      	mov	r1, r3
 80024a8:	f7fe fb42 	bl	8000b30 <__aeabi_d2f>
 80024ac:	ee07 0a90 	vmov	s15, r0
 80024b0:	eef0 7ae7 	vabs.f32	s15, s15
 80024b4:	edc7 7a01 	vstr	s15, [r7, #4]

		if(q_check >= q_d_max){ //Accelerate to maximum speed
 80024b8:	4b64      	ldr	r3, [pc, #400]	@ (800264c <checkStartMoving+0x29c>)
 80024ba:	edd3 7a00 	vldr	s15, [r3]
 80024be:	ed97 7a01 	vldr	s14, [r7, #4]
 80024c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024ca:	f2c0 80cf 	blt.w	800266c <checkStartMoving+0x2bc>
			calmode = 1;
 80024ce:	4b60      	ldr	r3, [pc, #384]	@ (8002650 <checkStartMoving+0x2a0>)
 80024d0:	2201      	movs	r2, #1
 80024d2:	701a      	strb	r2, [r3, #0]
			t_acc = fabs((q_d_max-q_d_i)/q_2d_max);
 80024d4:	4b5d      	ldr	r3, [pc, #372]	@ (800264c <checkStartMoving+0x29c>)
 80024d6:	ed93 7a00 	vldr	s14, [r3]
 80024da:	4b5a      	ldr	r3, [pc, #360]	@ (8002644 <checkStartMoving+0x294>)
 80024dc:	edd3 7a00 	vldr	s15, [r3]
 80024e0:	ee77 6a67 	vsub.f32	s13, s14, s15
 80024e4:	4b58      	ldr	r3, [pc, #352]	@ (8002648 <checkStartMoving+0x298>)
 80024e6:	ed93 7a00 	vldr	s14, [r3]
 80024ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024ee:	eef0 7ae7 	vabs.f32	s15, s15
 80024f2:	4b58      	ldr	r3, [pc, #352]	@ (8002654 <checkStartMoving+0x2a4>)
 80024f4:	edc3 7a00 	vstr	s15, [r3]
			q_acc = q_d_i*t_acc*dir + 0.5*q_2d_max*t_acc*t_acc*dir;
 80024f8:	4b52      	ldr	r3, [pc, #328]	@ (8002644 <checkStartMoving+0x294>)
 80024fa:	ed93 7a00 	vldr	s14, [r3]
 80024fe:	4b55      	ldr	r3, [pc, #340]	@ (8002654 <checkStartMoving+0x2a4>)
 8002500:	edd3 7a00 	vldr	s15, [r3]
 8002504:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002508:	4b4d      	ldr	r3, [pc, #308]	@ (8002640 <checkStartMoving+0x290>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	ee07 3a90 	vmov	s15, r3
 8002510:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002514:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002518:	ee17 0a90 	vmov	r0, s15
 800251c:	f7fd ffe0 	bl	80004e0 <__aeabi_f2d>
 8002520:	4604      	mov	r4, r0
 8002522:	460d      	mov	r5, r1
 8002524:	4b48      	ldr	r3, [pc, #288]	@ (8002648 <checkStartMoving+0x298>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4618      	mov	r0, r3
 800252a:	f7fd ffd9 	bl	80004e0 <__aeabi_f2d>
 800252e:	f04f 0200 	mov.w	r2, #0
 8002532:	4b49      	ldr	r3, [pc, #292]	@ (8002658 <checkStartMoving+0x2a8>)
 8002534:	f7fe f82c 	bl	8000590 <__aeabi_dmul>
 8002538:	4602      	mov	r2, r0
 800253a:	460b      	mov	r3, r1
 800253c:	4690      	mov	r8, r2
 800253e:	4699      	mov	r9, r3
 8002540:	4b44      	ldr	r3, [pc, #272]	@ (8002654 <checkStartMoving+0x2a4>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4618      	mov	r0, r3
 8002546:	f7fd ffcb 	bl	80004e0 <__aeabi_f2d>
 800254a:	4602      	mov	r2, r0
 800254c:	460b      	mov	r3, r1
 800254e:	4640      	mov	r0, r8
 8002550:	4649      	mov	r1, r9
 8002552:	f7fe f81d 	bl	8000590 <__aeabi_dmul>
 8002556:	4602      	mov	r2, r0
 8002558:	460b      	mov	r3, r1
 800255a:	4690      	mov	r8, r2
 800255c:	4699      	mov	r9, r3
 800255e:	4b3d      	ldr	r3, [pc, #244]	@ (8002654 <checkStartMoving+0x2a4>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4618      	mov	r0, r3
 8002564:	f7fd ffbc 	bl	80004e0 <__aeabi_f2d>
 8002568:	4602      	mov	r2, r0
 800256a:	460b      	mov	r3, r1
 800256c:	4640      	mov	r0, r8
 800256e:	4649      	mov	r1, r9
 8002570:	f7fe f80e 	bl	8000590 <__aeabi_dmul>
 8002574:	4602      	mov	r2, r0
 8002576:	460b      	mov	r3, r1
 8002578:	4690      	mov	r8, r2
 800257a:	4699      	mov	r9, r3
 800257c:	4b30      	ldr	r3, [pc, #192]	@ (8002640 <checkStartMoving+0x290>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4618      	mov	r0, r3
 8002582:	f7fd ff9b 	bl	80004bc <__aeabi_i2d>
 8002586:	4602      	mov	r2, r0
 8002588:	460b      	mov	r3, r1
 800258a:	4640      	mov	r0, r8
 800258c:	4649      	mov	r1, r9
 800258e:	f7fd ffff 	bl	8000590 <__aeabi_dmul>
 8002592:	4602      	mov	r2, r0
 8002594:	460b      	mov	r3, r1
 8002596:	4620      	mov	r0, r4
 8002598:	4629      	mov	r1, r5
 800259a:	f7fd fe43 	bl	8000224 <__adddf3>
 800259e:	4602      	mov	r2, r0
 80025a0:	460b      	mov	r3, r1
 80025a2:	4610      	mov	r0, r2
 80025a4:	4619      	mov	r1, r3
 80025a6:	f7fe fac3 	bl	8000b30 <__aeabi_d2f>
 80025aa:	4603      	mov	r3, r0
 80025ac:	4a2b      	ldr	r2, [pc, #172]	@ (800265c <checkStartMoving+0x2ac>)
 80025ae:	6013      	str	r3, [r2, #0]
			t_const = fabs((q_f-q_i-2*q_acc)/q_d_max);
 80025b0:	4b1f      	ldr	r3, [pc, #124]	@ (8002630 <checkStartMoving+0x280>)
 80025b2:	ed93 7a00 	vldr	s14, [r3]
 80025b6:	4b20      	ldr	r3, [pc, #128]	@ (8002638 <checkStartMoving+0x288>)
 80025b8:	edd3 7a00 	vldr	s15, [r3]
 80025bc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80025c0:	4b26      	ldr	r3, [pc, #152]	@ (800265c <checkStartMoving+0x2ac>)
 80025c2:	edd3 7a00 	vldr	s15, [r3]
 80025c6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80025ca:	ee77 6a67 	vsub.f32	s13, s14, s15
 80025ce:	4b1f      	ldr	r3, [pc, #124]	@ (800264c <checkStartMoving+0x29c>)
 80025d0:	ed93 7a00 	vldr	s14, [r3]
 80025d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025d8:	eef0 7ae7 	vabs.f32	s15, s15
 80025dc:	4b20      	ldr	r3, [pc, #128]	@ (8002660 <checkStartMoving+0x2b0>)
 80025de:	edc3 7a00 	vstr	s15, [r3]
			q_const = q_acc + q_d_max*t_const*dir;
 80025e2:	4b1a      	ldr	r3, [pc, #104]	@ (800264c <checkStartMoving+0x29c>)
 80025e4:	ed93 7a00 	vldr	s14, [r3]
 80025e8:	4b1d      	ldr	r3, [pc, #116]	@ (8002660 <checkStartMoving+0x2b0>)
 80025ea:	edd3 7a00 	vldr	s15, [r3]
 80025ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025f2:	4b13      	ldr	r3, [pc, #76]	@ (8002640 <checkStartMoving+0x290>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	ee07 3a90 	vmov	s15, r3
 80025fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002602:	4b16      	ldr	r3, [pc, #88]	@ (800265c <checkStartMoving+0x2ac>)
 8002604:	edd3 7a00 	vldr	s15, [r3]
 8002608:	ee77 7a27 	vadd.f32	s15, s14, s15
 800260c:	4b15      	ldr	r3, [pc, #84]	@ (8002664 <checkStartMoving+0x2b4>)
 800260e:	edc3 7a00 	vstr	s15, [r3]
			total_t = 2*t_acc + t_const;
 8002612:	4b10      	ldr	r3, [pc, #64]	@ (8002654 <checkStartMoving+0x2a4>)
 8002614:	edd3 7a00 	vldr	s15, [r3]
 8002618:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800261c:	4b10      	ldr	r3, [pc, #64]	@ (8002660 <checkStartMoving+0x2b0>)
 800261e:	edd3 7a00 	vldr	s15, [r3]
 8002622:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002626:	4b10      	ldr	r3, [pc, #64]	@ (8002668 <checkStartMoving+0x2b8>)
 8002628:	edc3 7a00 	vstr	s15, [r3]
 800262c:	e0c6      	b.n	80027bc <checkStartMoving+0x40c>
 800262e:	bf00      	nop
 8002630:	20000828 	.word	0x20000828
 8002634:	20000840 	.word	0x20000840
 8002638:	2000082c 	.word	0x2000082c
 800263c:	20000830 	.word	0x20000830
 8002640:	20000014 	.word	0x20000014
 8002644:	20000824 	.word	0x20000824
 8002648:	2000000c 	.word	0x2000000c
 800264c:	20000008 	.word	0x20000008
 8002650:	20000010 	.word	0x20000010
 8002654:	20000844 	.word	0x20000844
 8002658:	3fe00000 	.word	0x3fe00000
 800265c:	20000848 	.word	0x20000848
 8002660:	2000084c 	.word	0x2000084c
 8002664:	20000850 	.word	0x20000850
 8002668:	20000864 	.word	0x20000864
		}
		else{ //Accelerating does not reach maximum speed
			calmode = 2;
 800266c:	4b5b      	ldr	r3, [pc, #364]	@ (80027dc <checkStartMoving+0x42c>)
 800266e:	2202      	movs	r2, #2
 8002670:	701a      	strb	r2, [r3, #0]
			t_acc = sqrt(fabs(delta_q)/q_2d_max);
 8002672:	4b5b      	ldr	r3, [pc, #364]	@ (80027e0 <checkStartMoving+0x430>)
 8002674:	edd3 7a00 	vldr	s15, [r3]
 8002678:	eef0 7ae7 	vabs.f32	s15, s15
 800267c:	ee17 0a90 	vmov	r0, s15
 8002680:	f7fd ff2e 	bl	80004e0 <__aeabi_f2d>
 8002684:	4604      	mov	r4, r0
 8002686:	460d      	mov	r5, r1
 8002688:	4b56      	ldr	r3, [pc, #344]	@ (80027e4 <checkStartMoving+0x434>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4618      	mov	r0, r3
 800268e:	f7fd ff27 	bl	80004e0 <__aeabi_f2d>
 8002692:	4602      	mov	r2, r0
 8002694:	460b      	mov	r3, r1
 8002696:	4620      	mov	r0, r4
 8002698:	4629      	mov	r1, r5
 800269a:	f7fe f8a3 	bl	80007e4 <__aeabi_ddiv>
 800269e:	4602      	mov	r2, r0
 80026a0:	460b      	mov	r3, r1
 80026a2:	ec43 2b17 	vmov	d7, r2, r3
 80026a6:	eeb0 0a47 	vmov.f32	s0, s14
 80026aa:	eef0 0a67 	vmov.f32	s1, s15
 80026ae:	f008 fb47 	bl	800ad40 <sqrt>
 80026b2:	ec53 2b10 	vmov	r2, r3, d0
 80026b6:	4610      	mov	r0, r2
 80026b8:	4619      	mov	r1, r3
 80026ba:	f7fe fa39 	bl	8000b30 <__aeabi_d2f>
 80026be:	4603      	mov	r3, r0
 80026c0:	4a49      	ldr	r2, [pc, #292]	@ (80027e8 <checkStartMoving+0x438>)
 80026c2:	6013      	str	r3, [r2, #0]
			q_acc = q_d_i*t_acc*dir + 0.5*q_2d_max*t_acc*t_acc*dir;
 80026c4:	4b49      	ldr	r3, [pc, #292]	@ (80027ec <checkStartMoving+0x43c>)
 80026c6:	ed93 7a00 	vldr	s14, [r3]
 80026ca:	4b47      	ldr	r3, [pc, #284]	@ (80027e8 <checkStartMoving+0x438>)
 80026cc:	edd3 7a00 	vldr	s15, [r3]
 80026d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026d4:	4b46      	ldr	r3, [pc, #280]	@ (80027f0 <checkStartMoving+0x440>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	ee07 3a90 	vmov	s15, r3
 80026dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026e4:	ee17 0a90 	vmov	r0, s15
 80026e8:	f7fd fefa 	bl	80004e0 <__aeabi_f2d>
 80026ec:	4604      	mov	r4, r0
 80026ee:	460d      	mov	r5, r1
 80026f0:	4b3c      	ldr	r3, [pc, #240]	@ (80027e4 <checkStartMoving+0x434>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4618      	mov	r0, r3
 80026f6:	f7fd fef3 	bl	80004e0 <__aeabi_f2d>
 80026fa:	f04f 0200 	mov.w	r2, #0
 80026fe:	4b3d      	ldr	r3, [pc, #244]	@ (80027f4 <checkStartMoving+0x444>)
 8002700:	f7fd ff46 	bl	8000590 <__aeabi_dmul>
 8002704:	4602      	mov	r2, r0
 8002706:	460b      	mov	r3, r1
 8002708:	4690      	mov	r8, r2
 800270a:	4699      	mov	r9, r3
 800270c:	4b36      	ldr	r3, [pc, #216]	@ (80027e8 <checkStartMoving+0x438>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4618      	mov	r0, r3
 8002712:	f7fd fee5 	bl	80004e0 <__aeabi_f2d>
 8002716:	4602      	mov	r2, r0
 8002718:	460b      	mov	r3, r1
 800271a:	4640      	mov	r0, r8
 800271c:	4649      	mov	r1, r9
 800271e:	f7fd ff37 	bl	8000590 <__aeabi_dmul>
 8002722:	4602      	mov	r2, r0
 8002724:	460b      	mov	r3, r1
 8002726:	4690      	mov	r8, r2
 8002728:	4699      	mov	r9, r3
 800272a:	4b2f      	ldr	r3, [pc, #188]	@ (80027e8 <checkStartMoving+0x438>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4618      	mov	r0, r3
 8002730:	f7fd fed6 	bl	80004e0 <__aeabi_f2d>
 8002734:	4602      	mov	r2, r0
 8002736:	460b      	mov	r3, r1
 8002738:	4640      	mov	r0, r8
 800273a:	4649      	mov	r1, r9
 800273c:	f7fd ff28 	bl	8000590 <__aeabi_dmul>
 8002740:	4602      	mov	r2, r0
 8002742:	460b      	mov	r3, r1
 8002744:	4690      	mov	r8, r2
 8002746:	4699      	mov	r9, r3
 8002748:	4b29      	ldr	r3, [pc, #164]	@ (80027f0 <checkStartMoving+0x440>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4618      	mov	r0, r3
 800274e:	f7fd feb5 	bl	80004bc <__aeabi_i2d>
 8002752:	4602      	mov	r2, r0
 8002754:	460b      	mov	r3, r1
 8002756:	4640      	mov	r0, r8
 8002758:	4649      	mov	r1, r9
 800275a:	f7fd ff19 	bl	8000590 <__aeabi_dmul>
 800275e:	4602      	mov	r2, r0
 8002760:	460b      	mov	r3, r1
 8002762:	4620      	mov	r0, r4
 8002764:	4629      	mov	r1, r5
 8002766:	f7fd fd5d 	bl	8000224 <__adddf3>
 800276a:	4602      	mov	r2, r0
 800276c:	460b      	mov	r3, r1
 800276e:	4610      	mov	r0, r2
 8002770:	4619      	mov	r1, r3
 8002772:	f7fe f9dd 	bl	8000b30 <__aeabi_d2f>
 8002776:	4603      	mov	r3, r0
 8002778:	4a1f      	ldr	r2, [pc, #124]	@ (80027f8 <checkStartMoving+0x448>)
 800277a:	6013      	str	r3, [r2, #0]
			q_d_acc = q_d_i + q_2d_max*t_acc*dir;
 800277c:	4b19      	ldr	r3, [pc, #100]	@ (80027e4 <checkStartMoving+0x434>)
 800277e:	ed93 7a00 	vldr	s14, [r3]
 8002782:	4b19      	ldr	r3, [pc, #100]	@ (80027e8 <checkStartMoving+0x438>)
 8002784:	edd3 7a00 	vldr	s15, [r3]
 8002788:	ee27 7a27 	vmul.f32	s14, s14, s15
 800278c:	4b18      	ldr	r3, [pc, #96]	@ (80027f0 <checkStartMoving+0x440>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	ee07 3a90 	vmov	s15, r3
 8002794:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002798:	ee27 7a27 	vmul.f32	s14, s14, s15
 800279c:	4b13      	ldr	r3, [pc, #76]	@ (80027ec <checkStartMoving+0x43c>)
 800279e:	edd3 7a00 	vldr	s15, [r3]
 80027a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027a6:	4b15      	ldr	r3, [pc, #84]	@ (80027fc <checkStartMoving+0x44c>)
 80027a8:	edc3 7a00 	vstr	s15, [r3]
			total_t = 2*t_acc;
 80027ac:	4b0e      	ldr	r3, [pc, #56]	@ (80027e8 <checkStartMoving+0x438>)
 80027ae:	edd3 7a00 	vldr	s15, [r3]
 80027b2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80027b6:	4b12      	ldr	r3, [pc, #72]	@ (8002800 <checkStartMoving+0x450>)
 80027b8:	edc3 7a00 	vstr	s15, [r3]
		}
		T_start = micros();
 80027bc:	f7ff fcb6 	bl	800212c <micros>
 80027c0:	4602      	mov	r2, r0
 80027c2:	460b      	mov	r3, r1
 80027c4:	490f      	ldr	r1, [pc, #60]	@ (8002804 <checkStartMoving+0x454>)
 80027c6:	e9c1 2300 	strd	r2, r3, [r1]
		q_f_old = q_f;
 80027ca:	4b0f      	ldr	r3, [pc, #60]	@ (8002808 <checkStartMoving+0x458>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a0f      	ldr	r2, [pc, #60]	@ (800280c <checkStartMoving+0x45c>)
 80027d0:	6013      	str	r3, [r2, #0]
	}
}
 80027d2:	bf00      	nop
 80027d4:	3708      	adds	r7, #8
 80027d6:	46bd      	mov	sp, r7
 80027d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027dc:	20000010 	.word	0x20000010
 80027e0:	20000830 	.word	0x20000830
 80027e4:	2000000c 	.word	0x2000000c
 80027e8:	20000844 	.word	0x20000844
 80027ec:	20000824 	.word	0x20000824
 80027f0:	20000014 	.word	0x20000014
 80027f4:	3fe00000 	.word	0x3fe00000
 80027f8:	20000848 	.word	0x20000848
 80027fc:	20000854 	.word	0x20000854
 8002800:	20000864 	.word	0x20000864
 8002804:	20000858 	.word	0x20000858
 8002808:	20000828 	.word	0x20000828
 800280c:	20000840 	.word	0x20000840

08002810 <createTrajectory>:

void createTrajectory(){
 8002810:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002814:	af00      	add	r7, sp, #0
	if(calmode == 1){
 8002816:	4b84      	ldr	r3, [pc, #528]	@ (8002a28 <createTrajectory+0x218>)
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	2b01      	cmp	r3, #1
 800281c:	f040 822c 	bne.w	8002c78 <createTrajectory+0x468>
		t = (float)(micros()-T_start)/1000000; //sec
 8002820:	f7ff fc84 	bl	800212c <micros>
 8002824:	4b81      	ldr	r3, [pc, #516]	@ (8002a2c <createTrajectory+0x21c>)
 8002826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800282a:	ebb0 0802 	subs.w	r8, r0, r2
 800282e:	eb61 0903 	sbc.w	r9, r1, r3
 8002832:	4640      	mov	r0, r8
 8002834:	4649      	mov	r1, r9
 8002836:	f7fe fa93 	bl	8000d60 <__aeabi_ul2f>
 800283a:	ee06 0a90 	vmov	s13, r0
 800283e:	ed9f 7a7c 	vldr	s14, [pc, #496]	@ 8002a30 <createTrajectory+0x220>
 8002842:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002846:	4b7b      	ldr	r3, [pc, #492]	@ (8002a34 <createTrajectory+0x224>)
 8002848:	edc3 7a00 	vstr	s15, [r3]
		if((0 <= t) && (t < t_acc)){ //Acceleration Segment
 800284c:	4b79      	ldr	r3, [pc, #484]	@ (8002a34 <createTrajectory+0x224>)
 800284e:	edd3 7a00 	vldr	s15, [r3]
 8002852:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800285a:	f2c0 8094 	blt.w	8002986 <createTrajectory+0x176>
 800285e:	4b75      	ldr	r3, [pc, #468]	@ (8002a34 <createTrajectory+0x224>)
 8002860:	ed93 7a00 	vldr	s14, [r3]
 8002864:	4b74      	ldr	r3, [pc, #464]	@ (8002a38 <createTrajectory+0x228>)
 8002866:	edd3 7a00 	vldr	s15, [r3]
 800286a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800286e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002872:	f140 8088 	bpl.w	8002986 <createTrajectory+0x176>
			ref_p = q_i + q_d_i*t*dir + 0.5*q_2d_max*t*t*dir;
 8002876:	4b71      	ldr	r3, [pc, #452]	@ (8002a3c <createTrajectory+0x22c>)
 8002878:	ed93 7a00 	vldr	s14, [r3]
 800287c:	4b6d      	ldr	r3, [pc, #436]	@ (8002a34 <createTrajectory+0x224>)
 800287e:	edd3 7a00 	vldr	s15, [r3]
 8002882:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002886:	4b6e      	ldr	r3, [pc, #440]	@ (8002a40 <createTrajectory+0x230>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	ee07 3a90 	vmov	s15, r3
 800288e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002892:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002896:	4b6b      	ldr	r3, [pc, #428]	@ (8002a44 <createTrajectory+0x234>)
 8002898:	edd3 7a00 	vldr	s15, [r3]
 800289c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028a0:	ee17 0a90 	vmov	r0, s15
 80028a4:	f7fd fe1c 	bl	80004e0 <__aeabi_f2d>
 80028a8:	4604      	mov	r4, r0
 80028aa:	460d      	mov	r5, r1
 80028ac:	4b66      	ldr	r3, [pc, #408]	@ (8002a48 <createTrajectory+0x238>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4618      	mov	r0, r3
 80028b2:	f7fd fe15 	bl	80004e0 <__aeabi_f2d>
 80028b6:	f04f 0200 	mov.w	r2, #0
 80028ba:	4b64      	ldr	r3, [pc, #400]	@ (8002a4c <createTrajectory+0x23c>)
 80028bc:	f7fd fe68 	bl	8000590 <__aeabi_dmul>
 80028c0:	4602      	mov	r2, r0
 80028c2:	460b      	mov	r3, r1
 80028c4:	4690      	mov	r8, r2
 80028c6:	4699      	mov	r9, r3
 80028c8:	4b5a      	ldr	r3, [pc, #360]	@ (8002a34 <createTrajectory+0x224>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4618      	mov	r0, r3
 80028ce:	f7fd fe07 	bl	80004e0 <__aeabi_f2d>
 80028d2:	4602      	mov	r2, r0
 80028d4:	460b      	mov	r3, r1
 80028d6:	4640      	mov	r0, r8
 80028d8:	4649      	mov	r1, r9
 80028da:	f7fd fe59 	bl	8000590 <__aeabi_dmul>
 80028de:	4602      	mov	r2, r0
 80028e0:	460b      	mov	r3, r1
 80028e2:	4690      	mov	r8, r2
 80028e4:	4699      	mov	r9, r3
 80028e6:	4b53      	ldr	r3, [pc, #332]	@ (8002a34 <createTrajectory+0x224>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4618      	mov	r0, r3
 80028ec:	f7fd fdf8 	bl	80004e0 <__aeabi_f2d>
 80028f0:	4602      	mov	r2, r0
 80028f2:	460b      	mov	r3, r1
 80028f4:	4640      	mov	r0, r8
 80028f6:	4649      	mov	r1, r9
 80028f8:	f7fd fe4a 	bl	8000590 <__aeabi_dmul>
 80028fc:	4602      	mov	r2, r0
 80028fe:	460b      	mov	r3, r1
 8002900:	4690      	mov	r8, r2
 8002902:	4699      	mov	r9, r3
 8002904:	4b4e      	ldr	r3, [pc, #312]	@ (8002a40 <createTrajectory+0x230>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4618      	mov	r0, r3
 800290a:	f7fd fdd7 	bl	80004bc <__aeabi_i2d>
 800290e:	4602      	mov	r2, r0
 8002910:	460b      	mov	r3, r1
 8002912:	4640      	mov	r0, r8
 8002914:	4649      	mov	r1, r9
 8002916:	f7fd fe3b 	bl	8000590 <__aeabi_dmul>
 800291a:	4602      	mov	r2, r0
 800291c:	460b      	mov	r3, r1
 800291e:	4620      	mov	r0, r4
 8002920:	4629      	mov	r1, r5
 8002922:	f7fd fc7f 	bl	8000224 <__adddf3>
 8002926:	4602      	mov	r2, r0
 8002928:	460b      	mov	r3, r1
 800292a:	4610      	mov	r0, r2
 800292c:	4619      	mov	r1, r3
 800292e:	f7fe f8ff 	bl	8000b30 <__aeabi_d2f>
 8002932:	4603      	mov	r3, r0
 8002934:	4a46      	ldr	r2, [pc, #280]	@ (8002a50 <createTrajectory+0x240>)
 8002936:	6013      	str	r3, [r2, #0]
			ref_v = q_d_i + q_2d_max*t*dir;
 8002938:	4b43      	ldr	r3, [pc, #268]	@ (8002a48 <createTrajectory+0x238>)
 800293a:	ed93 7a00 	vldr	s14, [r3]
 800293e:	4b3d      	ldr	r3, [pc, #244]	@ (8002a34 <createTrajectory+0x224>)
 8002940:	edd3 7a00 	vldr	s15, [r3]
 8002944:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002948:	4b3d      	ldr	r3, [pc, #244]	@ (8002a40 <createTrajectory+0x230>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	ee07 3a90 	vmov	s15, r3
 8002950:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002954:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002958:	4b38      	ldr	r3, [pc, #224]	@ (8002a3c <createTrajectory+0x22c>)
 800295a:	edd3 7a00 	vldr	s15, [r3]
 800295e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002962:	4b3c      	ldr	r3, [pc, #240]	@ (8002a54 <createTrajectory+0x244>)
 8002964:	edc3 7a00 	vstr	s15, [r3]
			ref_a = q_2d_max*dir;
 8002968:	4b35      	ldr	r3, [pc, #212]	@ (8002a40 <createTrajectory+0x230>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	ee07 3a90 	vmov	s15, r3
 8002970:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002974:	4b34      	ldr	r3, [pc, #208]	@ (8002a48 <createTrajectory+0x238>)
 8002976:	edd3 7a00 	vldr	s15, [r3]
 800297a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800297e:	4b36      	ldr	r3, [pc, #216]	@ (8002a58 <createTrajectory+0x248>)
 8002980:	edc3 7a00 	vstr	s15, [r3]
 8002984:	e2fd      	b.n	8002f82 <createTrajectory+0x772>
		}
		else if((t_acc <= t) && (t < t_acc+t_const)){ //Constant Velocity Segment
 8002986:	4b2c      	ldr	r3, [pc, #176]	@ (8002a38 <createTrajectory+0x228>)
 8002988:	ed93 7a00 	vldr	s14, [r3]
 800298c:	4b29      	ldr	r3, [pc, #164]	@ (8002a34 <createTrajectory+0x224>)
 800298e:	edd3 7a00 	vldr	s15, [r3]
 8002992:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002996:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800299a:	d865      	bhi.n	8002a68 <createTrajectory+0x258>
 800299c:	4b26      	ldr	r3, [pc, #152]	@ (8002a38 <createTrajectory+0x228>)
 800299e:	ed93 7a00 	vldr	s14, [r3]
 80029a2:	4b2e      	ldr	r3, [pc, #184]	@ (8002a5c <createTrajectory+0x24c>)
 80029a4:	edd3 7a00 	vldr	s15, [r3]
 80029a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029ac:	4b21      	ldr	r3, [pc, #132]	@ (8002a34 <createTrajectory+0x224>)
 80029ae:	edd3 7a00 	vldr	s15, [r3]
 80029b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80029b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029ba:	dd55      	ble.n	8002a68 <createTrajectory+0x258>
			ref_p = q_i + q_acc + q_d_max*(t-t_acc)*dir;
 80029bc:	4b21      	ldr	r3, [pc, #132]	@ (8002a44 <createTrajectory+0x234>)
 80029be:	ed93 7a00 	vldr	s14, [r3]
 80029c2:	4b27      	ldr	r3, [pc, #156]	@ (8002a60 <createTrajectory+0x250>)
 80029c4:	edd3 7a00 	vldr	s15, [r3]
 80029c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029cc:	4b19      	ldr	r3, [pc, #100]	@ (8002a34 <createTrajectory+0x224>)
 80029ce:	edd3 6a00 	vldr	s13, [r3]
 80029d2:	4b19      	ldr	r3, [pc, #100]	@ (8002a38 <createTrajectory+0x228>)
 80029d4:	edd3 7a00 	vldr	s15, [r3]
 80029d8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80029dc:	4b21      	ldr	r3, [pc, #132]	@ (8002a64 <createTrajectory+0x254>)
 80029de:	edd3 7a00 	vldr	s15, [r3]
 80029e2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80029e6:	4b16      	ldr	r3, [pc, #88]	@ (8002a40 <createTrajectory+0x230>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	ee07 3a90 	vmov	s15, r3
 80029ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029fa:	4b15      	ldr	r3, [pc, #84]	@ (8002a50 <createTrajectory+0x240>)
 80029fc:	edc3 7a00 	vstr	s15, [r3]
			ref_v = q_d_max*dir;
 8002a00:	4b0f      	ldr	r3, [pc, #60]	@ (8002a40 <createTrajectory+0x230>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	ee07 3a90 	vmov	s15, r3
 8002a08:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a0c:	4b15      	ldr	r3, [pc, #84]	@ (8002a64 <createTrajectory+0x254>)
 8002a0e:	edd3 7a00 	vldr	s15, [r3]
 8002a12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a16:	4b0f      	ldr	r3, [pc, #60]	@ (8002a54 <createTrajectory+0x244>)
 8002a18:	edc3 7a00 	vstr	s15, [r3]
			ref_a = 0;
 8002a1c:	4b0e      	ldr	r3, [pc, #56]	@ (8002a58 <createTrajectory+0x248>)
 8002a1e:	f04f 0200 	mov.w	r2, #0
 8002a22:	601a      	str	r2, [r3, #0]
 8002a24:	e2ad      	b.n	8002f82 <createTrajectory+0x772>
 8002a26:	bf00      	nop
 8002a28:	20000010 	.word	0x20000010
 8002a2c:	20000858 	.word	0x20000858
 8002a30:	49742400 	.word	0x49742400
 8002a34:	20000860 	.word	0x20000860
 8002a38:	20000844 	.word	0x20000844
 8002a3c:	20000824 	.word	0x20000824
 8002a40:	20000014 	.word	0x20000014
 8002a44:	2000082c 	.word	0x2000082c
 8002a48:	2000000c 	.word	0x2000000c
 8002a4c:	3fe00000 	.word	0x3fe00000
 8002a50:	20000834 	.word	0x20000834
 8002a54:	20000838 	.word	0x20000838
 8002a58:	2000083c 	.word	0x2000083c
 8002a5c:	2000084c 	.word	0x2000084c
 8002a60:	20000848 	.word	0x20000848
 8002a64:	20000008 	.word	0x20000008
		}
		else if((t_acc+t_const <= t) && (t < 2*t_acc+t_const)){ //Deceleration Segment
 8002a68:	4b76      	ldr	r3, [pc, #472]	@ (8002c44 <createTrajectory+0x434>)
 8002a6a:	ed93 7a00 	vldr	s14, [r3]
 8002a6e:	4b76      	ldr	r3, [pc, #472]	@ (8002c48 <createTrajectory+0x438>)
 8002a70:	edd3 7a00 	vldr	s15, [r3]
 8002a74:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a78:	4b74      	ldr	r3, [pc, #464]	@ (8002c4c <createTrajectory+0x43c>)
 8002a7a:	edd3 7a00 	vldr	s15, [r3]
 8002a7e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a86:	f200 80d8 	bhi.w	8002c3a <createTrajectory+0x42a>
 8002a8a:	4b6e      	ldr	r3, [pc, #440]	@ (8002c44 <createTrajectory+0x434>)
 8002a8c:	edd3 7a00 	vldr	s15, [r3]
 8002a90:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002a94:	4b6c      	ldr	r3, [pc, #432]	@ (8002c48 <createTrajectory+0x438>)
 8002a96:	edd3 7a00 	vldr	s15, [r3]
 8002a9a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a9e:	4b6b      	ldr	r3, [pc, #428]	@ (8002c4c <createTrajectory+0x43c>)
 8002aa0:	edd3 7a00 	vldr	s15, [r3]
 8002aa4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002aa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002aac:	f340 80c5 	ble.w	8002c3a <createTrajectory+0x42a>
			ref_p = q_i + q_const + q_d_max*(t-t_acc-t_const)*dir-0.5*q_2d_max*(t-t_acc-t_const)*(t-t_acc-t_const)*dir;
 8002ab0:	4b67      	ldr	r3, [pc, #412]	@ (8002c50 <createTrajectory+0x440>)
 8002ab2:	ed93 7a00 	vldr	s14, [r3]
 8002ab6:	4b67      	ldr	r3, [pc, #412]	@ (8002c54 <createTrajectory+0x444>)
 8002ab8:	edd3 7a00 	vldr	s15, [r3]
 8002abc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ac0:	4b62      	ldr	r3, [pc, #392]	@ (8002c4c <createTrajectory+0x43c>)
 8002ac2:	edd3 6a00 	vldr	s13, [r3]
 8002ac6:	4b5f      	ldr	r3, [pc, #380]	@ (8002c44 <createTrajectory+0x434>)
 8002ac8:	edd3 7a00 	vldr	s15, [r3]
 8002acc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002ad0:	4b5d      	ldr	r3, [pc, #372]	@ (8002c48 <createTrajectory+0x438>)
 8002ad2:	edd3 7a00 	vldr	s15, [r3]
 8002ad6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002ada:	4b5f      	ldr	r3, [pc, #380]	@ (8002c58 <createTrajectory+0x448>)
 8002adc:	edd3 7a00 	vldr	s15, [r3]
 8002ae0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002ae4:	4b5d      	ldr	r3, [pc, #372]	@ (8002c5c <createTrajectory+0x44c>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	ee07 3a90 	vmov	s15, r3
 8002aec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002af0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002af4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002af8:	ee17 0a90 	vmov	r0, s15
 8002afc:	f7fd fcf0 	bl	80004e0 <__aeabi_f2d>
 8002b00:	4604      	mov	r4, r0
 8002b02:	460d      	mov	r5, r1
 8002b04:	4b56      	ldr	r3, [pc, #344]	@ (8002c60 <createTrajectory+0x450>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f7fd fce9 	bl	80004e0 <__aeabi_f2d>
 8002b0e:	f04f 0200 	mov.w	r2, #0
 8002b12:	4b54      	ldr	r3, [pc, #336]	@ (8002c64 <createTrajectory+0x454>)
 8002b14:	f7fd fd3c 	bl	8000590 <__aeabi_dmul>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	460b      	mov	r3, r1
 8002b1c:	4690      	mov	r8, r2
 8002b1e:	4699      	mov	r9, r3
 8002b20:	4b4a      	ldr	r3, [pc, #296]	@ (8002c4c <createTrajectory+0x43c>)
 8002b22:	ed93 7a00 	vldr	s14, [r3]
 8002b26:	4b47      	ldr	r3, [pc, #284]	@ (8002c44 <createTrajectory+0x434>)
 8002b28:	edd3 7a00 	vldr	s15, [r3]
 8002b2c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b30:	4b45      	ldr	r3, [pc, #276]	@ (8002c48 <createTrajectory+0x438>)
 8002b32:	edd3 7a00 	vldr	s15, [r3]
 8002b36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b3a:	ee17 0a90 	vmov	r0, s15
 8002b3e:	f7fd fccf 	bl	80004e0 <__aeabi_f2d>
 8002b42:	4602      	mov	r2, r0
 8002b44:	460b      	mov	r3, r1
 8002b46:	4640      	mov	r0, r8
 8002b48:	4649      	mov	r1, r9
 8002b4a:	f7fd fd21 	bl	8000590 <__aeabi_dmul>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	460b      	mov	r3, r1
 8002b52:	4690      	mov	r8, r2
 8002b54:	4699      	mov	r9, r3
 8002b56:	4b3d      	ldr	r3, [pc, #244]	@ (8002c4c <createTrajectory+0x43c>)
 8002b58:	ed93 7a00 	vldr	s14, [r3]
 8002b5c:	4b39      	ldr	r3, [pc, #228]	@ (8002c44 <createTrajectory+0x434>)
 8002b5e:	edd3 7a00 	vldr	s15, [r3]
 8002b62:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b66:	4b38      	ldr	r3, [pc, #224]	@ (8002c48 <createTrajectory+0x438>)
 8002b68:	edd3 7a00 	vldr	s15, [r3]
 8002b6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b70:	ee17 0a90 	vmov	r0, s15
 8002b74:	f7fd fcb4 	bl	80004e0 <__aeabi_f2d>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	460b      	mov	r3, r1
 8002b7c:	4640      	mov	r0, r8
 8002b7e:	4649      	mov	r1, r9
 8002b80:	f7fd fd06 	bl	8000590 <__aeabi_dmul>
 8002b84:	4602      	mov	r2, r0
 8002b86:	460b      	mov	r3, r1
 8002b88:	4690      	mov	r8, r2
 8002b8a:	4699      	mov	r9, r3
 8002b8c:	4b33      	ldr	r3, [pc, #204]	@ (8002c5c <createTrajectory+0x44c>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4618      	mov	r0, r3
 8002b92:	f7fd fc93 	bl	80004bc <__aeabi_i2d>
 8002b96:	4602      	mov	r2, r0
 8002b98:	460b      	mov	r3, r1
 8002b9a:	4640      	mov	r0, r8
 8002b9c:	4649      	mov	r1, r9
 8002b9e:	f7fd fcf7 	bl	8000590 <__aeabi_dmul>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	460b      	mov	r3, r1
 8002ba6:	4620      	mov	r0, r4
 8002ba8:	4629      	mov	r1, r5
 8002baa:	f7fd fb39 	bl	8000220 <__aeabi_dsub>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	460b      	mov	r3, r1
 8002bb2:	4610      	mov	r0, r2
 8002bb4:	4619      	mov	r1, r3
 8002bb6:	f7fd ffbb 	bl	8000b30 <__aeabi_d2f>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	4a2a      	ldr	r2, [pc, #168]	@ (8002c68 <createTrajectory+0x458>)
 8002bbe:	6013      	str	r3, [r2, #0]
			ref_v = -q_2d_max*(t-t_acc-t_const)*dir + q_d_max*dir;
 8002bc0:	4b27      	ldr	r3, [pc, #156]	@ (8002c60 <createTrajectory+0x450>)
 8002bc2:	edd3 7a00 	vldr	s15, [r3]
 8002bc6:	eeb1 7a67 	vneg.f32	s14, s15
 8002bca:	4b20      	ldr	r3, [pc, #128]	@ (8002c4c <createTrajectory+0x43c>)
 8002bcc:	edd3 6a00 	vldr	s13, [r3]
 8002bd0:	4b1c      	ldr	r3, [pc, #112]	@ (8002c44 <createTrajectory+0x434>)
 8002bd2:	edd3 7a00 	vldr	s15, [r3]
 8002bd6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002bda:	4b1b      	ldr	r3, [pc, #108]	@ (8002c48 <createTrajectory+0x438>)
 8002bdc:	edd3 7a00 	vldr	s15, [r3]
 8002be0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002be4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002be8:	4b1c      	ldr	r3, [pc, #112]	@ (8002c5c <createTrajectory+0x44c>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	ee07 3a90 	vmov	s15, r3
 8002bf0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bf4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002bf8:	4b18      	ldr	r3, [pc, #96]	@ (8002c5c <createTrajectory+0x44c>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	ee07 3a90 	vmov	s15, r3
 8002c00:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002c04:	4b14      	ldr	r3, [pc, #80]	@ (8002c58 <createTrajectory+0x448>)
 8002c06:	edd3 7a00 	vldr	s15, [r3]
 8002c0a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c12:	4b16      	ldr	r3, [pc, #88]	@ (8002c6c <createTrajectory+0x45c>)
 8002c14:	edc3 7a00 	vstr	s15, [r3]
			ref_a = -q_2d_max*dir;
 8002c18:	4b11      	ldr	r3, [pc, #68]	@ (8002c60 <createTrajectory+0x450>)
 8002c1a:	edd3 7a00 	vldr	s15, [r3]
 8002c1e:	eeb1 7a67 	vneg.f32	s14, s15
 8002c22:	4b0e      	ldr	r3, [pc, #56]	@ (8002c5c <createTrajectory+0x44c>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	ee07 3a90 	vmov	s15, r3
 8002c2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c32:	4b0f      	ldr	r3, [pc, #60]	@ (8002c70 <createTrajectory+0x460>)
 8002c34:	edc3 7a00 	vstr	s15, [r3]
 8002c38:	e1a3      	b.n	8002f82 <createTrajectory+0x772>
		}
		else{
			calmode = 3;
 8002c3a:	4b0e      	ldr	r3, [pc, #56]	@ (8002c74 <createTrajectory+0x464>)
 8002c3c:	2203      	movs	r2, #3
 8002c3e:	701a      	strb	r2, [r3, #0]
	else if(calmode == 3){ //stop
		ref_p = q_f;
		ref_v = 0;
		ref_a = 0;
	}
}
 8002c40:	e19f      	b.n	8002f82 <createTrajectory+0x772>
 8002c42:	bf00      	nop
 8002c44:	20000844 	.word	0x20000844
 8002c48:	2000084c 	.word	0x2000084c
 8002c4c:	20000860 	.word	0x20000860
 8002c50:	2000082c 	.word	0x2000082c
 8002c54:	20000850 	.word	0x20000850
 8002c58:	20000008 	.word	0x20000008
 8002c5c:	20000014 	.word	0x20000014
 8002c60:	2000000c 	.word	0x2000000c
 8002c64:	3fe00000 	.word	0x3fe00000
 8002c68:	20000834 	.word	0x20000834
 8002c6c:	20000838 	.word	0x20000838
 8002c70:	2000083c 	.word	0x2000083c
 8002c74:	20000010 	.word	0x20000010
	else if(calmode == 2){
 8002c78:	4bc3      	ldr	r3, [pc, #780]	@ (8002f88 <createTrajectory+0x778>)
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	2b02      	cmp	r3, #2
 8002c7e:	f040 816f 	bne.w	8002f60 <createTrajectory+0x750>
		t = (float)(micros()-T_start)/1000000; //sec
 8002c82:	f7ff fa53 	bl	800212c <micros>
 8002c86:	4bc1      	ldr	r3, [pc, #772]	@ (8002f8c <createTrajectory+0x77c>)
 8002c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c8c:	1a84      	subs	r4, r0, r2
 8002c8e:	eb61 0503 	sbc.w	r5, r1, r3
 8002c92:	4620      	mov	r0, r4
 8002c94:	4629      	mov	r1, r5
 8002c96:	f7fe f863 	bl	8000d60 <__aeabi_ul2f>
 8002c9a:	ee06 0a90 	vmov	s13, r0
 8002c9e:	ed9f 7abc 	vldr	s14, [pc, #752]	@ 8002f90 <createTrajectory+0x780>
 8002ca2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ca6:	4bbb      	ldr	r3, [pc, #748]	@ (8002f94 <createTrajectory+0x784>)
 8002ca8:	edc3 7a00 	vstr	s15, [r3]
		if((0 <= t) && (t < t_acc)){ //Acceleration Segment
 8002cac:	4bb9      	ldr	r3, [pc, #740]	@ (8002f94 <createTrajectory+0x784>)
 8002cae:	edd3 7a00 	vldr	s15, [r3]
 8002cb2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002cb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cba:	f2c0 8094 	blt.w	8002de6 <createTrajectory+0x5d6>
 8002cbe:	4bb5      	ldr	r3, [pc, #724]	@ (8002f94 <createTrajectory+0x784>)
 8002cc0:	ed93 7a00 	vldr	s14, [r3]
 8002cc4:	4bb4      	ldr	r3, [pc, #720]	@ (8002f98 <createTrajectory+0x788>)
 8002cc6:	edd3 7a00 	vldr	s15, [r3]
 8002cca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002cce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cd2:	f140 8088 	bpl.w	8002de6 <createTrajectory+0x5d6>
			ref_p = q_i + q_d_i*t*dir + 0.5*q_2d_max*t*t*dir;
 8002cd6:	4bb1      	ldr	r3, [pc, #708]	@ (8002f9c <createTrajectory+0x78c>)
 8002cd8:	ed93 7a00 	vldr	s14, [r3]
 8002cdc:	4bad      	ldr	r3, [pc, #692]	@ (8002f94 <createTrajectory+0x784>)
 8002cde:	edd3 7a00 	vldr	s15, [r3]
 8002ce2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ce6:	4bae      	ldr	r3, [pc, #696]	@ (8002fa0 <createTrajectory+0x790>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	ee07 3a90 	vmov	s15, r3
 8002cee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002cf2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002cf6:	4bab      	ldr	r3, [pc, #684]	@ (8002fa4 <createTrajectory+0x794>)
 8002cf8:	edd3 7a00 	vldr	s15, [r3]
 8002cfc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d00:	ee17 0a90 	vmov	r0, s15
 8002d04:	f7fd fbec 	bl	80004e0 <__aeabi_f2d>
 8002d08:	4604      	mov	r4, r0
 8002d0a:	460d      	mov	r5, r1
 8002d0c:	4ba6      	ldr	r3, [pc, #664]	@ (8002fa8 <createTrajectory+0x798>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4618      	mov	r0, r3
 8002d12:	f7fd fbe5 	bl	80004e0 <__aeabi_f2d>
 8002d16:	f04f 0200 	mov.w	r2, #0
 8002d1a:	4ba4      	ldr	r3, [pc, #656]	@ (8002fac <createTrajectory+0x79c>)
 8002d1c:	f7fd fc38 	bl	8000590 <__aeabi_dmul>
 8002d20:	4602      	mov	r2, r0
 8002d22:	460b      	mov	r3, r1
 8002d24:	4690      	mov	r8, r2
 8002d26:	4699      	mov	r9, r3
 8002d28:	4b9a      	ldr	r3, [pc, #616]	@ (8002f94 <createTrajectory+0x784>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f7fd fbd7 	bl	80004e0 <__aeabi_f2d>
 8002d32:	4602      	mov	r2, r0
 8002d34:	460b      	mov	r3, r1
 8002d36:	4640      	mov	r0, r8
 8002d38:	4649      	mov	r1, r9
 8002d3a:	f7fd fc29 	bl	8000590 <__aeabi_dmul>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	460b      	mov	r3, r1
 8002d42:	4690      	mov	r8, r2
 8002d44:	4699      	mov	r9, r3
 8002d46:	4b93      	ldr	r3, [pc, #588]	@ (8002f94 <createTrajectory+0x784>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f7fd fbc8 	bl	80004e0 <__aeabi_f2d>
 8002d50:	4602      	mov	r2, r0
 8002d52:	460b      	mov	r3, r1
 8002d54:	4640      	mov	r0, r8
 8002d56:	4649      	mov	r1, r9
 8002d58:	f7fd fc1a 	bl	8000590 <__aeabi_dmul>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	460b      	mov	r3, r1
 8002d60:	4690      	mov	r8, r2
 8002d62:	4699      	mov	r9, r3
 8002d64:	4b8e      	ldr	r3, [pc, #568]	@ (8002fa0 <createTrajectory+0x790>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f7fd fba7 	bl	80004bc <__aeabi_i2d>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	460b      	mov	r3, r1
 8002d72:	4640      	mov	r0, r8
 8002d74:	4649      	mov	r1, r9
 8002d76:	f7fd fc0b 	bl	8000590 <__aeabi_dmul>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	460b      	mov	r3, r1
 8002d7e:	4620      	mov	r0, r4
 8002d80:	4629      	mov	r1, r5
 8002d82:	f7fd fa4f 	bl	8000224 <__adddf3>
 8002d86:	4602      	mov	r2, r0
 8002d88:	460b      	mov	r3, r1
 8002d8a:	4610      	mov	r0, r2
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	f7fd fecf 	bl	8000b30 <__aeabi_d2f>
 8002d92:	4603      	mov	r3, r0
 8002d94:	4a86      	ldr	r2, [pc, #536]	@ (8002fb0 <createTrajectory+0x7a0>)
 8002d96:	6013      	str	r3, [r2, #0]
			ref_v = q_d_i + q_2d_max*t*dir;
 8002d98:	4b83      	ldr	r3, [pc, #524]	@ (8002fa8 <createTrajectory+0x798>)
 8002d9a:	ed93 7a00 	vldr	s14, [r3]
 8002d9e:	4b7d      	ldr	r3, [pc, #500]	@ (8002f94 <createTrajectory+0x784>)
 8002da0:	edd3 7a00 	vldr	s15, [r3]
 8002da4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002da8:	4b7d      	ldr	r3, [pc, #500]	@ (8002fa0 <createTrajectory+0x790>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	ee07 3a90 	vmov	s15, r3
 8002db0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002db4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002db8:	4b78      	ldr	r3, [pc, #480]	@ (8002f9c <createTrajectory+0x78c>)
 8002dba:	edd3 7a00 	vldr	s15, [r3]
 8002dbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dc2:	4b7c      	ldr	r3, [pc, #496]	@ (8002fb4 <createTrajectory+0x7a4>)
 8002dc4:	edc3 7a00 	vstr	s15, [r3]
			ref_a = q_2d_max*dir;
 8002dc8:	4b75      	ldr	r3, [pc, #468]	@ (8002fa0 <createTrajectory+0x790>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	ee07 3a90 	vmov	s15, r3
 8002dd0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002dd4:	4b74      	ldr	r3, [pc, #464]	@ (8002fa8 <createTrajectory+0x798>)
 8002dd6:	edd3 7a00 	vldr	s15, [r3]
 8002dda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dde:	4b76      	ldr	r3, [pc, #472]	@ (8002fb8 <createTrajectory+0x7a8>)
 8002de0:	edc3 7a00 	vstr	s15, [r3]
 8002de4:	e0cd      	b.n	8002f82 <createTrajectory+0x772>
		else if((t_acc <= t) && (t < t_acc*2)){
 8002de6:	4b6c      	ldr	r3, [pc, #432]	@ (8002f98 <createTrajectory+0x788>)
 8002de8:	ed93 7a00 	vldr	s14, [r3]
 8002dec:	4b69      	ldr	r3, [pc, #420]	@ (8002f94 <createTrajectory+0x784>)
 8002dee:	edd3 7a00 	vldr	s15, [r3]
 8002df2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002df6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dfa:	f200 80ad 	bhi.w	8002f58 <createTrajectory+0x748>
 8002dfe:	4b66      	ldr	r3, [pc, #408]	@ (8002f98 <createTrajectory+0x788>)
 8002e00:	edd3 7a00 	vldr	s15, [r3]
 8002e04:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002e08:	4b62      	ldr	r3, [pc, #392]	@ (8002f94 <createTrajectory+0x784>)
 8002e0a:	edd3 7a00 	vldr	s15, [r3]
 8002e0e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e16:	f340 809f 	ble.w	8002f58 <createTrajectory+0x748>
			ref_p = q_i + q_acc + q_d_acc*(t-t_acc) - 0.5*q_2d_max*(t-t_acc)*(t-t_acc)*dir;
 8002e1a:	4b62      	ldr	r3, [pc, #392]	@ (8002fa4 <createTrajectory+0x794>)
 8002e1c:	ed93 7a00 	vldr	s14, [r3]
 8002e20:	4b66      	ldr	r3, [pc, #408]	@ (8002fbc <createTrajectory+0x7ac>)
 8002e22:	edd3 7a00 	vldr	s15, [r3]
 8002e26:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e2a:	4b5a      	ldr	r3, [pc, #360]	@ (8002f94 <createTrajectory+0x784>)
 8002e2c:	edd3 6a00 	vldr	s13, [r3]
 8002e30:	4b59      	ldr	r3, [pc, #356]	@ (8002f98 <createTrajectory+0x788>)
 8002e32:	edd3 7a00 	vldr	s15, [r3]
 8002e36:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002e3a:	4b61      	ldr	r3, [pc, #388]	@ (8002fc0 <createTrajectory+0x7b0>)
 8002e3c:	edd3 7a00 	vldr	s15, [r3]
 8002e40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e48:	ee17 0a90 	vmov	r0, s15
 8002e4c:	f7fd fb48 	bl	80004e0 <__aeabi_f2d>
 8002e50:	4604      	mov	r4, r0
 8002e52:	460d      	mov	r5, r1
 8002e54:	4b54      	ldr	r3, [pc, #336]	@ (8002fa8 <createTrajectory+0x798>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f7fd fb41 	bl	80004e0 <__aeabi_f2d>
 8002e5e:	f04f 0200 	mov.w	r2, #0
 8002e62:	4b52      	ldr	r3, [pc, #328]	@ (8002fac <createTrajectory+0x79c>)
 8002e64:	f7fd fb94 	bl	8000590 <__aeabi_dmul>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	460b      	mov	r3, r1
 8002e6c:	4690      	mov	r8, r2
 8002e6e:	4699      	mov	r9, r3
 8002e70:	4b48      	ldr	r3, [pc, #288]	@ (8002f94 <createTrajectory+0x784>)
 8002e72:	ed93 7a00 	vldr	s14, [r3]
 8002e76:	4b48      	ldr	r3, [pc, #288]	@ (8002f98 <createTrajectory+0x788>)
 8002e78:	edd3 7a00 	vldr	s15, [r3]
 8002e7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e80:	ee17 0a90 	vmov	r0, s15
 8002e84:	f7fd fb2c 	bl	80004e0 <__aeabi_f2d>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	460b      	mov	r3, r1
 8002e8c:	4640      	mov	r0, r8
 8002e8e:	4649      	mov	r1, r9
 8002e90:	f7fd fb7e 	bl	8000590 <__aeabi_dmul>
 8002e94:	4602      	mov	r2, r0
 8002e96:	460b      	mov	r3, r1
 8002e98:	4690      	mov	r8, r2
 8002e9a:	4699      	mov	r9, r3
 8002e9c:	4b3d      	ldr	r3, [pc, #244]	@ (8002f94 <createTrajectory+0x784>)
 8002e9e:	ed93 7a00 	vldr	s14, [r3]
 8002ea2:	4b3d      	ldr	r3, [pc, #244]	@ (8002f98 <createTrajectory+0x788>)
 8002ea4:	edd3 7a00 	vldr	s15, [r3]
 8002ea8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002eac:	ee17 0a90 	vmov	r0, s15
 8002eb0:	f7fd fb16 	bl	80004e0 <__aeabi_f2d>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	460b      	mov	r3, r1
 8002eb8:	4640      	mov	r0, r8
 8002eba:	4649      	mov	r1, r9
 8002ebc:	f7fd fb68 	bl	8000590 <__aeabi_dmul>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	460b      	mov	r3, r1
 8002ec4:	4690      	mov	r8, r2
 8002ec6:	4699      	mov	r9, r3
 8002ec8:	4b35      	ldr	r3, [pc, #212]	@ (8002fa0 <createTrajectory+0x790>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f7fd faf5 	bl	80004bc <__aeabi_i2d>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	460b      	mov	r3, r1
 8002ed6:	4640      	mov	r0, r8
 8002ed8:	4649      	mov	r1, r9
 8002eda:	f7fd fb59 	bl	8000590 <__aeabi_dmul>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	460b      	mov	r3, r1
 8002ee2:	4620      	mov	r0, r4
 8002ee4:	4629      	mov	r1, r5
 8002ee6:	f7fd f99b 	bl	8000220 <__aeabi_dsub>
 8002eea:	4602      	mov	r2, r0
 8002eec:	460b      	mov	r3, r1
 8002eee:	4610      	mov	r0, r2
 8002ef0:	4619      	mov	r1, r3
 8002ef2:	f7fd fe1d 	bl	8000b30 <__aeabi_d2f>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	4a2d      	ldr	r2, [pc, #180]	@ (8002fb0 <createTrajectory+0x7a0>)
 8002efa:	6013      	str	r3, [r2, #0]
			ref_v = q_d_acc - q_2d_max*(t-t_acc)*dir;
 8002efc:	4b30      	ldr	r3, [pc, #192]	@ (8002fc0 <createTrajectory+0x7b0>)
 8002efe:	ed93 7a00 	vldr	s14, [r3]
 8002f02:	4b24      	ldr	r3, [pc, #144]	@ (8002f94 <createTrajectory+0x784>)
 8002f04:	edd3 6a00 	vldr	s13, [r3]
 8002f08:	4b23      	ldr	r3, [pc, #140]	@ (8002f98 <createTrajectory+0x788>)
 8002f0a:	edd3 7a00 	vldr	s15, [r3]
 8002f0e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002f12:	4b25      	ldr	r3, [pc, #148]	@ (8002fa8 <createTrajectory+0x798>)
 8002f14:	edd3 7a00 	vldr	s15, [r3]
 8002f18:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002f1c:	4b20      	ldr	r3, [pc, #128]	@ (8002fa0 <createTrajectory+0x790>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	ee07 3a90 	vmov	s15, r3
 8002f24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f28:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f30:	4b20      	ldr	r3, [pc, #128]	@ (8002fb4 <createTrajectory+0x7a4>)
 8002f32:	edc3 7a00 	vstr	s15, [r3]
			ref_a = -q_2d_max*dir;
 8002f36:	4b1c      	ldr	r3, [pc, #112]	@ (8002fa8 <createTrajectory+0x798>)
 8002f38:	edd3 7a00 	vldr	s15, [r3]
 8002f3c:	eeb1 7a67 	vneg.f32	s14, s15
 8002f40:	4b17      	ldr	r3, [pc, #92]	@ (8002fa0 <createTrajectory+0x790>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	ee07 3a90 	vmov	s15, r3
 8002f48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f50:	4b19      	ldr	r3, [pc, #100]	@ (8002fb8 <createTrajectory+0x7a8>)
 8002f52:	edc3 7a00 	vstr	s15, [r3]
 8002f56:	e014      	b.n	8002f82 <createTrajectory+0x772>
			calmode = 3;
 8002f58:	4b0b      	ldr	r3, [pc, #44]	@ (8002f88 <createTrajectory+0x778>)
 8002f5a:	2203      	movs	r2, #3
 8002f5c:	701a      	strb	r2, [r3, #0]
}
 8002f5e:	e010      	b.n	8002f82 <createTrajectory+0x772>
	else if(calmode == 3){ //stop
 8002f60:	4b09      	ldr	r3, [pc, #36]	@ (8002f88 <createTrajectory+0x778>)
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	2b03      	cmp	r3, #3
 8002f66:	d10c      	bne.n	8002f82 <createTrajectory+0x772>
		ref_p = q_f;
 8002f68:	4b16      	ldr	r3, [pc, #88]	@ (8002fc4 <createTrajectory+0x7b4>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a10      	ldr	r2, [pc, #64]	@ (8002fb0 <createTrajectory+0x7a0>)
 8002f6e:	6013      	str	r3, [r2, #0]
		ref_v = 0;
 8002f70:	4b10      	ldr	r3, [pc, #64]	@ (8002fb4 <createTrajectory+0x7a4>)
 8002f72:	f04f 0200 	mov.w	r2, #0
 8002f76:	601a      	str	r2, [r3, #0]
		ref_a = 0;
 8002f78:	4b0f      	ldr	r3, [pc, #60]	@ (8002fb8 <createTrajectory+0x7a8>)
 8002f7a:	f04f 0200 	mov.w	r2, #0
 8002f7e:	601a      	str	r2, [r3, #0]
}
 8002f80:	e7ff      	b.n	8002f82 <createTrajectory+0x772>
 8002f82:	bf00      	nop
 8002f84:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002f88:	20000010 	.word	0x20000010
 8002f8c:	20000858 	.word	0x20000858
 8002f90:	49742400 	.word	0x49742400
 8002f94:	20000860 	.word	0x20000860
 8002f98:	20000844 	.word	0x20000844
 8002f9c:	20000824 	.word	0x20000824
 8002fa0:	20000014 	.word	0x20000014
 8002fa4:	2000082c 	.word	0x2000082c
 8002fa8:	2000000c 	.word	0x2000000c
 8002fac:	3fe00000 	.word	0x3fe00000
 8002fb0:	20000834 	.word	0x20000834
 8002fb4:	20000838 	.word	0x20000838
 8002fb8:	2000083c 	.word	0x2000083c
 8002fbc:	20000848 	.word	0x20000848
 8002fc0:	20000854 	.word	0x20000854
 8002fc4:	20000828 	.word	0x20000828

08002fc8 <DriveMotor>:

//--------------------------Drive Motor----------------//

void DriveMotor(){
 8002fc8:	b598      	push	{r3, r4, r7, lr}
 8002fca:	af00      	add	r7, sp, #0
	//PWM Motor
	duty_cycle = (fabs(Vin)*100)/24;
 8002fcc:	4b26      	ldr	r3, [pc, #152]	@ (8003068 <DriveMotor+0xa0>)
 8002fce:	edd3 7a00 	vldr	s15, [r3]
 8002fd2:	eef0 7ae7 	vabs.f32	s15, s15
 8002fd6:	ee17 0a90 	vmov	r0, s15
 8002fda:	f7fd fa81 	bl	80004e0 <__aeabi_f2d>
 8002fde:	f04f 0200 	mov.w	r2, #0
 8002fe2:	4b22      	ldr	r3, [pc, #136]	@ (800306c <DriveMotor+0xa4>)
 8002fe4:	f7fd fad4 	bl	8000590 <__aeabi_dmul>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	460b      	mov	r3, r1
 8002fec:	4610      	mov	r0, r2
 8002fee:	4619      	mov	r1, r3
 8002ff0:	f04f 0200 	mov.w	r2, #0
 8002ff4:	4b1e      	ldr	r3, [pc, #120]	@ (8003070 <DriveMotor+0xa8>)
 8002ff6:	f7fd fbf5 	bl	80007e4 <__aeabi_ddiv>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	460b      	mov	r3, r1
 8002ffe:	4610      	mov	r0, r2
 8003000:	4619      	mov	r1, r3
 8003002:	f7fd fd95 	bl	8000b30 <__aeabi_d2f>
 8003006:	4603      	mov	r3, r0
 8003008:	4a1a      	ldr	r2, [pc, #104]	@ (8003074 <DriveMotor+0xac>)
 800300a:	6013      	str	r3, [r2, #0]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, duty_cycle*9.99);
 800300c:	4b19      	ldr	r3, [pc, #100]	@ (8003074 <DriveMotor+0xac>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4618      	mov	r0, r3
 8003012:	f7fd fa65 	bl	80004e0 <__aeabi_f2d>
 8003016:	a312      	add	r3, pc, #72	@ (adr r3, 8003060 <DriveMotor+0x98>)
 8003018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800301c:	f7fd fab8 	bl	8000590 <__aeabi_dmul>
 8003020:	4602      	mov	r2, r0
 8003022:	460b      	mov	r3, r1
 8003024:	4914      	ldr	r1, [pc, #80]	@ (8003078 <DriveMotor+0xb0>)
 8003026:	680c      	ldr	r4, [r1, #0]
 8003028:	4610      	mov	r0, r2
 800302a:	4619      	mov	r1, r3
 800302c:	f7fd fd60 	bl	8000af0 <__aeabi_d2uiz>
 8003030:	4603      	mov	r3, r0
 8003032:	6363      	str	r3, [r4, #52]	@ 0x34

	//Control Motor Direction
	if(Vin < 0){
 8003034:	4b0c      	ldr	r3, [pc, #48]	@ (8003068 <DriveMotor+0xa0>)
 8003036:	edd3 7a00 	vldr	s15, [r3]
 800303a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800303e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003042:	d505      	bpl.n	8003050 <DriveMotor+0x88>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, 1);
 8003044:	2201      	movs	r2, #1
 8003046:	2120      	movs	r1, #32
 8003048:	480c      	ldr	r0, [pc, #48]	@ (800307c <DriveMotor+0xb4>)
 800304a:	f002 ff3f 	bl	8005ecc <HAL_GPIO_WritePin>
	}
	else{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, 0);
	}
}
 800304e:	e004      	b.n	800305a <DriveMotor+0x92>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, 0);
 8003050:	2200      	movs	r2, #0
 8003052:	2120      	movs	r1, #32
 8003054:	4809      	ldr	r0, [pc, #36]	@ (800307c <DriveMotor+0xb4>)
 8003056:	f002 ff39 	bl	8005ecc <HAL_GPIO_WritePin>
}
 800305a:	bf00      	nop
 800305c:	bd98      	pop	{r3, r4, r7, pc}
 800305e:	bf00      	nop
 8003060:	47ae147b 	.word	0x47ae147b
 8003064:	4023fae1 	.word	0x4023fae1
 8003068:	20000820 	.word	0x20000820
 800306c:	40590000 	.word	0x40590000
 8003070:	40380000 	.word	0x40380000
 8003074:	20000004 	.word	0x20000004
 8003078:	20000240 	.word	0x20000240
 800307c:	48000800 	.word	0x48000800

08003080 <SoftwareLimit>:

void SoftwareLimit(){
 8003080:	b480      	push	{r7}
 8003082:	af00      	add	r7, sp, #0
	if((S_top == 1 || QEIdata.linearPos>580) && Vin >= -2){
 8003084:	4b3b      	ldr	r3, [pc, #236]	@ (8003174 <SoftwareLimit+0xf4>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	2b01      	cmp	r3, #1
 800308a:	d009      	beq.n	80030a0 <SoftwareLimit+0x20>
 800308c:	4b3a      	ldr	r3, [pc, #232]	@ (8003178 <SoftwareLimit+0xf8>)
 800308e:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8003092:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 800317c <SoftwareLimit+0xfc>
 8003096:	eef4 7ac7 	vcmpe.f32	s15, s14
 800309a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800309e:	dd0e      	ble.n	80030be <SoftwareLimit+0x3e>
 80030a0:	4b37      	ldr	r3, [pc, #220]	@ (8003180 <SoftwareLimit+0x100>)
 80030a2:	edd3 7a00 	vldr	s15, [r3]
 80030a6:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 80030aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030b2:	db04      	blt.n	80030be <SoftwareLimit+0x3e>
		Vin = 0;
 80030b4:	4b32      	ldr	r3, [pc, #200]	@ (8003180 <SoftwareLimit+0x100>)
 80030b6:	f04f 0200 	mov.w	r2, #0
 80030ba:	601a      	str	r2, [r3, #0]
 80030bc:	e01a      	b.n	80030f4 <SoftwareLimit+0x74>
	}
	else if((S_top == 1 || QEIdata.linearPos>580) && Vin < -2){
 80030be:	4b2d      	ldr	r3, [pc, #180]	@ (8003174 <SoftwareLimit+0xf4>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d009      	beq.n	80030da <SoftwareLimit+0x5a>
 80030c6:	4b2c      	ldr	r3, [pc, #176]	@ (8003178 <SoftwareLimit+0xf8>)
 80030c8:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80030cc:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 800317c <SoftwareLimit+0xfc>
 80030d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030d8:	dd0c      	ble.n	80030f4 <SoftwareLimit+0x74>
 80030da:	4b29      	ldr	r3, [pc, #164]	@ (8003180 <SoftwareLimit+0x100>)
 80030dc:	edd3 7a00 	vldr	s15, [r3]
 80030e0:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 80030e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030ec:	d502      	bpl.n	80030f4 <SoftwareLimit+0x74>
		S_top = 0;
 80030ee:	4b21      	ldr	r3, [pc, #132]	@ (8003174 <SoftwareLimit+0xf4>)
 80030f0:	2200      	movs	r2, #0
 80030f2:	601a      	str	r2, [r3, #0]
	}

	if((S_down == 1 || QEIdata.linearPos<-5) && Vin <= 2){
 80030f4:	4b23      	ldr	r3, [pc, #140]	@ (8003184 <SoftwareLimit+0x104>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d009      	beq.n	8003110 <SoftwareLimit+0x90>
 80030fc:	4b1e      	ldr	r3, [pc, #120]	@ (8003178 <SoftwareLimit+0xf8>)
 80030fe:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8003102:	eeb9 7a04 	vmov.f32	s14, #148	@ 0xc0a00000 -5.0
 8003106:	eef4 7ac7 	vcmpe.f32	s15, s14
 800310a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800310e:	d50e      	bpl.n	800312e <SoftwareLimit+0xae>
 8003110:	4b1b      	ldr	r3, [pc, #108]	@ (8003180 <SoftwareLimit+0x100>)
 8003112:	edd3 7a00 	vldr	s15, [r3]
 8003116:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800311a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800311e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003122:	d804      	bhi.n	800312e <SoftwareLimit+0xae>
		Vin = 0;
 8003124:	4b16      	ldr	r3, [pc, #88]	@ (8003180 <SoftwareLimit+0x100>)
 8003126:	f04f 0200 	mov.w	r2, #0
 800312a:	601a      	str	r2, [r3, #0]
	}
	else if((S_down == 1 || QEIdata.linearPos<-5) && Vin > 2){
		S_down = 0;
	}

}
 800312c:	e01c      	b.n	8003168 <SoftwareLimit+0xe8>
	else if((S_down == 1 || QEIdata.linearPos<-5) && Vin > 2){
 800312e:	4b15      	ldr	r3, [pc, #84]	@ (8003184 <SoftwareLimit+0x104>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	2b01      	cmp	r3, #1
 8003134:	d00a      	beq.n	800314c <SoftwareLimit+0xcc>
 8003136:	4b10      	ldr	r3, [pc, #64]	@ (8003178 <SoftwareLimit+0xf8>)
 8003138:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800313c:	eeb9 7a04 	vmov.f32	s14, #148	@ 0xc0a00000 -5.0
 8003140:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003144:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003148:	d400      	bmi.n	800314c <SoftwareLimit+0xcc>
}
 800314a:	e00d      	b.n	8003168 <SoftwareLimit+0xe8>
	else if((S_down == 1 || QEIdata.linearPos<-5) && Vin > 2){
 800314c:	4b0c      	ldr	r3, [pc, #48]	@ (8003180 <SoftwareLimit+0x100>)
 800314e:	edd3 7a00 	vldr	s15, [r3]
 8003152:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8003156:	eef4 7ac7 	vcmpe.f32	s15, s14
 800315a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800315e:	dc00      	bgt.n	8003162 <SoftwareLimit+0xe2>
}
 8003160:	e002      	b.n	8003168 <SoftwareLimit+0xe8>
		S_down = 0;
 8003162:	4b08      	ldr	r3, [pc, #32]	@ (8003184 <SoftwareLimit+0x104>)
 8003164:	2200      	movs	r2, #0
 8003166:	601a      	str	r2, [r3, #0]
}
 8003168:	bf00      	nop
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr
 8003172:	bf00      	nop
 8003174:	200008dc 	.word	0x200008dc
 8003178:	200007c8 	.word	0x200007c8
 800317c:	44110000 	.word	0x44110000
 8003180:	20000820 	.word	0x20000820
 8003184:	200008e0 	.word	0x200008e0

08003188 <JoystickInput>:


//------------------------------------Joy---------------------------------------//

void JoystickInput(){
 8003188:	b5b0      	push	{r4, r5, r7, lr}
 800318a:	af00      	add	r7, sp, #0
	//Control y-axis by joy
	Vin = (float)(ADCBuffer[1]-1850)*24/2048; //0->24V
 800318c:	4b1e      	ldr	r3, [pc, #120]	@ (8003208 <JoystickInput+0x80>)
 800318e:	885b      	ldrh	r3, [r3, #2]
 8003190:	f2a3 733a 	subw	r3, r3, #1850	@ 0x73a
 8003194:	ee07 3a90 	vmov	s15, r3
 8003198:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800319c:	eeb3 7a08 	vmov.f32	s14, #56	@ 0x41c00000  24.0
 80031a0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80031a4:	eddf 6a19 	vldr	s13, [pc, #100]	@ 800320c <JoystickInput+0x84>
 80031a8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80031ac:	4b18      	ldr	r3, [pc, #96]	@ (8003210 <JoystickInput+0x88>)
 80031ae:	edc3 7a00 	vstr	s15, [r3]

	//Control x-axis by joy
	x_position += ((ADCBuffer[0]-2048)*0.005);
 80031b2:	4b18      	ldr	r3, [pc, #96]	@ (8003214 <JoystickInput+0x8c>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4618      	mov	r0, r3
 80031b8:	f7fd f992 	bl	80004e0 <__aeabi_f2d>
 80031bc:	4604      	mov	r4, r0
 80031be:	460d      	mov	r5, r1
 80031c0:	4b11      	ldr	r3, [pc, #68]	@ (8003208 <JoystickInput+0x80>)
 80031c2:	881b      	ldrh	r3, [r3, #0]
 80031c4:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 80031c8:	4618      	mov	r0, r3
 80031ca:	f7fd f977 	bl	80004bc <__aeabi_i2d>
 80031ce:	a30c      	add	r3, pc, #48	@ (adr r3, 8003200 <JoystickInput+0x78>)
 80031d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031d4:	f7fd f9dc 	bl	8000590 <__aeabi_dmul>
 80031d8:	4602      	mov	r2, r0
 80031da:	460b      	mov	r3, r1
 80031dc:	4620      	mov	r0, r4
 80031de:	4629      	mov	r1, r5
 80031e0:	f7fd f820 	bl	8000224 <__adddf3>
 80031e4:	4602      	mov	r2, r0
 80031e6:	460b      	mov	r3, r1
 80031e8:	4610      	mov	r0, r2
 80031ea:	4619      	mov	r1, r3
 80031ec:	f7fd fca0 	bl	8000b30 <__aeabi_d2f>
 80031f0:	4603      	mov	r3, r0
 80031f2:	4a08      	ldr	r2, [pc, #32]	@ (8003214 <JoystickInput+0x8c>)
 80031f4:	6013      	str	r3, [r2, #0]
}
 80031f6:	bf00      	nop
 80031f8:	bdb0      	pop	{r4, r5, r7, pc}
 80031fa:	bf00      	nop
 80031fc:	f3af 8000 	nop.w
 8003200:	47ae147b 	.word	0x47ae147b
 8003204:	3f747ae1 	.word	0x3f747ae1
 8003208:	20000810 	.word	0x20000810
 800320c:	45000000 	.word	0x45000000
 8003210:	20000820 	.word	0x20000820
 8003214:	20000814 	.word	0x20000814

08003218 <button_up_down_input>:

void button_up_down_input(){
 8003218:	b580      	push	{r7, lr}
 800321a:	af00      	add	r7, sp, #0
	//check button up
	if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_11) == 1){
 800321c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003220:	4832      	ldr	r0, [pc, #200]	@ (80032ec <button_up_down_input+0xd4>)
 8003222:	f002 fe3b 	bl	8005e9c <HAL_GPIO_ReadPin>
 8003226:	4603      	mov	r3, r0
 8003228:	2b01      	cmp	r3, #1
 800322a:	d110      	bne.n	800324e <button_up_down_input+0x36>
		set_manual_point = QEIdata.linearPos + 10; //stem 10 mm
 800322c:	4b30      	ldr	r3, [pc, #192]	@ (80032f0 <button_up_down_input+0xd8>)
 800322e:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8003232:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8003236:	ee77 7a87 	vadd.f32	s15, s15, s14
 800323a:	4b2e      	ldr	r3, [pc, #184]	@ (80032f4 <button_up_down_input+0xdc>)
 800323c:	edc3 7a00 	vstr	s15, [r3]
		check_up = 1;
 8003240:	4b2d      	ldr	r3, [pc, #180]	@ (80032f8 <button_up_down_input+0xe0>)
 8003242:	2201      	movs	r2, #1
 8003244:	701a      	strb	r2, [r3, #0]
		B_up = 1;
 8003246:	4b2d      	ldr	r3, [pc, #180]	@ (80032fc <button_up_down_input+0xe4>)
 8003248:	2201      	movs	r2, #1
 800324a:	701a      	strb	r2, [r3, #0]
 800324c:	e002      	b.n	8003254 <button_up_down_input+0x3c>
	}
	else{
		B_up = 0;
 800324e:	4b2b      	ldr	r3, [pc, #172]	@ (80032fc <button_up_down_input+0xe4>)
 8003250:	2200      	movs	r2, #0
 8003252:	701a      	strb	r2, [r3, #0]
	}
	if(QEIdata.linearPos < set_manual_point && check_up == 1){
 8003254:	4b26      	ldr	r3, [pc, #152]	@ (80032f0 <button_up_down_input+0xd8>)
 8003256:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 800325a:	4b26      	ldr	r3, [pc, #152]	@ (80032f4 <button_up_down_input+0xdc>)
 800325c:	edd3 7a00 	vldr	s15, [r3]
 8003260:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003264:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003268:	d507      	bpl.n	800327a <button_up_down_input+0x62>
 800326a:	4b23      	ldr	r3, [pc, #140]	@ (80032f8 <button_up_down_input+0xe0>)
 800326c:	781b      	ldrb	r3, [r3, #0]
 800326e:	2b01      	cmp	r3, #1
 8003270:	d103      	bne.n	800327a <button_up_down_input+0x62>
		Vin = 4.5;
 8003272:	4b23      	ldr	r3, [pc, #140]	@ (8003300 <button_up_down_input+0xe8>)
 8003274:	4a23      	ldr	r2, [pc, #140]	@ (8003304 <button_up_down_input+0xec>)
 8003276:	601a      	str	r2, [r3, #0]
 8003278:	e002      	b.n	8003280 <button_up_down_input+0x68>
	}
	else{
		check_up = 0;
 800327a:	4b1f      	ldr	r3, [pc, #124]	@ (80032f8 <button_up_down_input+0xe0>)
 800327c:	2200      	movs	r2, #0
 800327e:	701a      	strb	r2, [r3, #0]
	}

	//check button down
	if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_12) == 1){
 8003280:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003284:	4819      	ldr	r0, [pc, #100]	@ (80032ec <button_up_down_input+0xd4>)
 8003286:	f002 fe09 	bl	8005e9c <HAL_GPIO_ReadPin>
 800328a:	4603      	mov	r3, r0
 800328c:	2b01      	cmp	r3, #1
 800328e:	d110      	bne.n	80032b2 <button_up_down_input+0x9a>
		set_manual_point = QEIdata.linearPos - 10;
 8003290:	4b17      	ldr	r3, [pc, #92]	@ (80032f0 <button_up_down_input+0xd8>)
 8003292:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8003296:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800329a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800329e:	4b15      	ldr	r3, [pc, #84]	@ (80032f4 <button_up_down_input+0xdc>)
 80032a0:	edc3 7a00 	vstr	s15, [r3]
		check_down = 1;
 80032a4:	4b18      	ldr	r3, [pc, #96]	@ (8003308 <button_up_down_input+0xf0>)
 80032a6:	2201      	movs	r2, #1
 80032a8:	701a      	strb	r2, [r3, #0]
		B_down = 1;
 80032aa:	4b18      	ldr	r3, [pc, #96]	@ (800330c <button_up_down_input+0xf4>)
 80032ac:	2201      	movs	r2, #1
 80032ae:	701a      	strb	r2, [r3, #0]
 80032b0:	e002      	b.n	80032b8 <button_up_down_input+0xa0>
	}
	else{
		B_down = 0;
 80032b2:	4b16      	ldr	r3, [pc, #88]	@ (800330c <button_up_down_input+0xf4>)
 80032b4:	2200      	movs	r2, #0
 80032b6:	701a      	strb	r2, [r3, #0]
	}
	if(QEIdata.linearPos > set_manual_point && check_down == 1){
 80032b8:	4b0d      	ldr	r3, [pc, #52]	@ (80032f0 <button_up_down_input+0xd8>)
 80032ba:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 80032be:	4b0d      	ldr	r3, [pc, #52]	@ (80032f4 <button_up_down_input+0xdc>)
 80032c0:	edd3 7a00 	vldr	s15, [r3]
 80032c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80032c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032cc:	dd07      	ble.n	80032de <button_up_down_input+0xc6>
 80032ce:	4b0e      	ldr	r3, [pc, #56]	@ (8003308 <button_up_down_input+0xf0>)
 80032d0:	781b      	ldrb	r3, [r3, #0]
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d103      	bne.n	80032de <button_up_down_input+0xc6>
		Vin = -3.5;
 80032d6:	4b0a      	ldr	r3, [pc, #40]	@ (8003300 <button_up_down_input+0xe8>)
 80032d8:	4a0d      	ldr	r2, [pc, #52]	@ (8003310 <button_up_down_input+0xf8>)
 80032da:	601a      	str	r2, [r3, #0]
 80032dc:	e003      	b.n	80032e6 <button_up_down_input+0xce>
	}
	else{
		check_down = 0;
 80032de:	4b0a      	ldr	r3, [pc, #40]	@ (8003308 <button_up_down_input+0xf0>)
 80032e0:	2200      	movs	r2, #0
 80032e2:	701a      	strb	r2, [r3, #0]
	}
}
 80032e4:	bf00      	nop
 80032e6:	bf00      	nop
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	48000800 	.word	0x48000800
 80032f0:	200007c8 	.word	0x200007c8
 80032f4:	20000818 	.word	0x20000818
 80032f8:	2000081c 	.word	0x2000081c
 80032fc:	20000868 	.word	0x20000868
 8003300:	20000820 	.word	0x20000820
 8003304:	40900000 	.word	0x40900000
 8003308:	2000081d 	.word	0x2000081d
 800330c:	20000869 	.word	0x20000869
 8003310:	c0600000 	.word	0xc0600000

08003314 <button_reset_input>:

void button_reset_input(){
 8003314:	b580      	push	{r7, lr}
 8003316:	af00      	add	r7, sp, #0
	//check button reset
	if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2) == 1 || set_Home_state == 1){
 8003318:	2104      	movs	r1, #4
 800331a:	4827      	ldr	r0, [pc, #156]	@ (80033b8 <button_reset_input+0xa4>)
 800331c:	f002 fdbe 	bl	8005e9c <HAL_GPIO_ReadPin>
 8003320:	4603      	mov	r3, r0
 8003322:	2b01      	cmp	r3, #1
 8003324:	d003      	beq.n	800332e <button_reset_input+0x1a>
 8003326:	4b25      	ldr	r3, [pc, #148]	@ (80033bc <button_reset_input+0xa8>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	2b01      	cmp	r3, #1
 800332c:	d13d      	bne.n	80033aa <button_reset_input+0x96>
		B_reset = 1;
 800332e:	4b24      	ldr	r3, [pc, #144]	@ (80033c0 <button_reset_input+0xac>)
 8003330:	2201      	movs	r2, #1
 8003332:	701a      	strb	r2, [r3, #0]
		while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) == 0){
 8003334:	e006      	b.n	8003344 <button_reset_input+0x30>
			Vin = -3.5;
 8003336:	4b23      	ldr	r3, [pc, #140]	@ (80033c4 <button_reset_input+0xb0>)
 8003338:	4a23      	ldr	r2, [pc, #140]	@ (80033c8 <button_reset_input+0xb4>)
 800333a:	601a      	str	r2, [r3, #0]
			//software limit
			SoftwareLimit();
 800333c:	f7ff fea0 	bl	8003080 <SoftwareLimit>
			//Drive Motor which PWM
			DriveMotor();
 8003340:	f7ff fe42 	bl	8002fc8 <DriveMotor>
		while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) == 0){
 8003344:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003348:	4820      	ldr	r0, [pc, #128]	@ (80033cc <button_reset_input+0xb8>)
 800334a:	f002 fda7 	bl	8005e9c <HAL_GPIO_ReadPin>
 800334e:	4603      	mov	r3, r0
 8003350:	2b00      	cmp	r3, #0
 8003352:	d0f0      	beq.n	8003336 <button_reset_input+0x22>
		}

		Vin = 2.1;
 8003354:	4b1b      	ldr	r3, [pc, #108]	@ (80033c4 <button_reset_input+0xb0>)
 8003356:	4a1e      	ldr	r2, [pc, #120]	@ (80033d0 <button_reset_input+0xbc>)
 8003358:	601a      	str	r2, [r3, #0]
		SoftwareLimit();
 800335a:	f7ff fe91 	bl	8003080 <SoftwareLimit>
		DriveMotor();
 800335e:	f7ff fe33 	bl	8002fc8 <DriveMotor>
		HAL_Delay(500);
 8003362:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003366:	f000 fc4f 	bl	8003c08 <HAL_Delay>

		while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) == 0){
 800336a:	e006      	b.n	800337a <button_reset_input+0x66>
			Vin = -1.1;
 800336c:	4b15      	ldr	r3, [pc, #84]	@ (80033c4 <button_reset_input+0xb0>)
 800336e:	4a19      	ldr	r2, [pc, #100]	@ (80033d4 <button_reset_input+0xc0>)
 8003370:	601a      	str	r2, [r3, #0]
			//software limit
			SoftwareLimit();
 8003372:	f7ff fe85 	bl	8003080 <SoftwareLimit>
			//Drive Motor which PWM
			DriveMotor();
 8003376:	f7ff fe27 	bl	8002fc8 <DriveMotor>
		while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) == 0){
 800337a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800337e:	4813      	ldr	r0, [pc, #76]	@ (80033cc <button_reset_input+0xb8>)
 8003380:	f002 fd8c 	bl	8005e9c <HAL_GPIO_ReadPin>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d0f0      	beq.n	800336c <button_reset_input+0x58>
		}
		Vin = 0;
 800338a:	4b0e      	ldr	r3, [pc, #56]	@ (80033c4 <button_reset_input+0xb0>)
 800338c:	f04f 0200 	mov.w	r2, #0
 8003390:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_COUNTER(&htim2, 0); //set position to 0
 8003392:	4b11      	ldr	r3, [pc, #68]	@ (80033d8 <button_reset_input+0xc4>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	2200      	movs	r2, #0
 8003398:	625a      	str	r2, [r3, #36]	@ 0x24

		if(set_Home_state == 1){
 800339a:	4b08      	ldr	r3, [pc, #32]	@ (80033bc <button_reset_input+0xa8>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d107      	bne.n	80033b2 <button_reset_input+0x9e>
			Home_state_triger = 1;
 80033a2:	4b0e      	ldr	r3, [pc, #56]	@ (80033dc <button_reset_input+0xc8>)
 80033a4:	2201      	movs	r2, #1
 80033a6:	601a      	str	r2, [r3, #0]
		if(set_Home_state == 1){
 80033a8:	e003      	b.n	80033b2 <button_reset_input+0x9e>
		}
	}
	else{
		B_reset = 0;
 80033aa:	4b05      	ldr	r3, [pc, #20]	@ (80033c0 <button_reset_input+0xac>)
 80033ac:	2200      	movs	r2, #0
 80033ae:	701a      	strb	r2, [r3, #0]
	}
}
 80033b0:	bf00      	nop
 80033b2:	bf00      	nop
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	48000c00 	.word	0x48000c00
 80033bc:	20000f50 	.word	0x20000f50
 80033c0:	2000086a 	.word	0x2000086a
 80033c4:	20000820 	.word	0x20000820
 80033c8:	c0600000 	.word	0xc0600000
 80033cc:	48000400 	.word	0x48000400
 80033d0:	40066666 	.word	0x40066666
 80033d4:	bf8ccccd 	.word	0xbf8ccccd
 80033d8:	20000174 	.word	0x20000174
 80033dc:	20000f54 	.word	0x20000f54

080033e0 <button_save_position>:

void button_save_position(){
 80033e0:	b580      	push	{r7, lr}
 80033e2:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == 1 && B_save == 0){
 80033e4:	2180      	movs	r1, #128	@ 0x80
 80033e6:	4811      	ldr	r0, [pc, #68]	@ (800342c <button_save_position+0x4c>)
 80033e8:	f002 fd58 	bl	8005e9c <HAL_GPIO_ReadPin>
 80033ec:	4603      	mov	r3, r0
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d116      	bne.n	8003420 <button_save_position+0x40>
 80033f2:	4b0f      	ldr	r3, [pc, #60]	@ (8003430 <button_save_position+0x50>)
 80033f4:	781b      	ldrb	r3, [r3, #0]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d112      	bne.n	8003420 <button_save_position+0x40>
		B_save = 1;
 80033fa:	4b0d      	ldr	r3, [pc, #52]	@ (8003430 <button_save_position+0x50>)
 80033fc:	2201      	movs	r2, #1
 80033fe:	701a      	strb	r2, [r3, #0]
		count_save += 1;
 8003400:	4b0c      	ldr	r3, [pc, #48]	@ (8003434 <button_save_position+0x54>)
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	3301      	adds	r3, #1
 8003406:	b2da      	uxtb	r2, r3
 8003408:	4b0a      	ldr	r3, [pc, #40]	@ (8003434 <button_save_position+0x54>)
 800340a:	701a      	strb	r2, [r3, #0]
		shelves_pos[count_save] = QEIdata.linearPos;
 800340c:	4b09      	ldr	r3, [pc, #36]	@ (8003434 <button_save_position+0x54>)
 800340e:	781b      	ldrb	r3, [r3, #0]
 8003410:	4618      	mov	r0, r3
 8003412:	4b09      	ldr	r3, [pc, #36]	@ (8003438 <button_save_position+0x58>)
 8003414:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003416:	4909      	ldr	r1, [pc, #36]	@ (800343c <button_save_position+0x5c>)
 8003418:	0083      	lsls	r3, r0, #2
 800341a:	440b      	add	r3, r1
 800341c:	601a      	str	r2, [r3, #0]
 800341e:	e003      	b.n	8003428 <button_save_position+0x48>
	}
	else{
		B_save = 0;
 8003420:	4b03      	ldr	r3, [pc, #12]	@ (8003430 <button_save_position+0x50>)
 8003422:	2200      	movs	r2, #0
 8003424:	701a      	strb	r2, [r3, #0]
	}
}
 8003426:	bf00      	nop
 8003428:	bf00      	nop
 800342a:	bd80      	pop	{r7, pc}
 800342c:	48000400 	.word	0x48000400
 8003430:	2000086b 	.word	0x2000086b
 8003434:	2000086c 	.word	0x2000086c
 8003438:	200007c8 	.word	0x200007c8
 800343c:	20000870 	.word	0x20000870

08003440 <LED_Emergency>:
}
//-----------------------------------------------------------//

//-----------------------LED STATUS--------------------------//

void LED_Emergency(){
 8003440:	b580      	push	{r7, lr}
 8003442:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 8003444:	2201      	movs	r2, #1
 8003446:	2140      	movs	r1, #64	@ 0x40
 8003448:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800344c:	f002 fd3e 	bl	8005ecc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 8003450:	2200      	movs	r2, #0
 8003452:	2180      	movs	r1, #128	@ 0x80
 8003454:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003458:	f002 fd38 	bl	8005ecc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0);
 800345c:	2200      	movs	r2, #0
 800345e:	2140      	movs	r1, #64	@ 0x40
 8003460:	4808      	ldr	r0, [pc, #32]	@ (8003484 <LED_Emergency+0x44>)
 8003462:	f002 fd33 	bl	8005ecc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);
 8003466:	2200      	movs	r2, #0
 8003468:	2180      	movs	r1, #128	@ 0x80
 800346a:	4807      	ldr	r0, [pc, #28]	@ (8003488 <LED_Emergency+0x48>)
 800346c:	f002 fd2e 	bl	8005ecc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
 8003470:	2200      	movs	r2, #0
 8003472:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003476:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800347a:	f002 fd27 	bl	8005ecc <HAL_GPIO_WritePin>
}
 800347e:	bf00      	nop
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	48000400 	.word	0x48000400
 8003488:	48000800 	.word	0x48000800

0800348c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800348c:	b480      	push	{r7}
 800348e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003490:	b672      	cpsid	i
}
 8003492:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003494:	bf00      	nop
 8003496:	e7fd      	b.n	8003494 <Error_Handler+0x8>

08003498 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b082      	sub	sp, #8
 800349c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800349e:	4b0f      	ldr	r3, [pc, #60]	@ (80034dc <HAL_MspInit+0x44>)
 80034a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034a2:	4a0e      	ldr	r2, [pc, #56]	@ (80034dc <HAL_MspInit+0x44>)
 80034a4:	f043 0301 	orr.w	r3, r3, #1
 80034a8:	6613      	str	r3, [r2, #96]	@ 0x60
 80034aa:	4b0c      	ldr	r3, [pc, #48]	@ (80034dc <HAL_MspInit+0x44>)
 80034ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034ae:	f003 0301 	and.w	r3, r3, #1
 80034b2:	607b      	str	r3, [r7, #4]
 80034b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80034b6:	4b09      	ldr	r3, [pc, #36]	@ (80034dc <HAL_MspInit+0x44>)
 80034b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034ba:	4a08      	ldr	r2, [pc, #32]	@ (80034dc <HAL_MspInit+0x44>)
 80034bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80034c2:	4b06      	ldr	r3, [pc, #24]	@ (80034dc <HAL_MspInit+0x44>)
 80034c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034ca:	603b      	str	r3, [r7, #0]
 80034cc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80034ce:	f002 fdd1 	bl	8006074 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80034d2:	bf00      	nop
 80034d4:	3708      	adds	r7, #8
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	40021000 	.word	0x40021000

080034e0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b0a0      	sub	sp, #128	@ 0x80
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034e8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80034ec:	2200      	movs	r2, #0
 80034ee:	601a      	str	r2, [r3, #0]
 80034f0:	605a      	str	r2, [r3, #4]
 80034f2:	609a      	str	r2, [r3, #8]
 80034f4:	60da      	str	r2, [r3, #12]
 80034f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80034f8:	f107 0318 	add.w	r3, r7, #24
 80034fc:	2254      	movs	r2, #84	@ 0x54
 80034fe:	2100      	movs	r1, #0
 8003500:	4618      	mov	r0, r3
 8003502:	f007 fbeb 	bl	800acdc <memset>
  if(hadc->Instance==ADC1)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800350e:	d178      	bne.n	8003602 <HAL_ADC_MspInit+0x122>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8003510:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003514:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8003516:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800351a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800351c:	f107 0318 	add.w	r3, r7, #24
 8003520:	4618      	mov	r0, r3
 8003522:	f003 fae5 	bl	8006af0 <HAL_RCCEx_PeriphCLKConfig>
 8003526:	4603      	mov	r3, r0
 8003528:	2b00      	cmp	r3, #0
 800352a:	d001      	beq.n	8003530 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800352c:	f7ff ffae 	bl	800348c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003530:	4b36      	ldr	r3, [pc, #216]	@ (800360c <HAL_ADC_MspInit+0x12c>)
 8003532:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003534:	4a35      	ldr	r2, [pc, #212]	@ (800360c <HAL_ADC_MspInit+0x12c>)
 8003536:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800353a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800353c:	4b33      	ldr	r3, [pc, #204]	@ (800360c <HAL_ADC_MspInit+0x12c>)
 800353e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003540:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003544:	617b      	str	r3, [r7, #20]
 8003546:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003548:	4b30      	ldr	r3, [pc, #192]	@ (800360c <HAL_ADC_MspInit+0x12c>)
 800354a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800354c:	4a2f      	ldr	r2, [pc, #188]	@ (800360c <HAL_ADC_MspInit+0x12c>)
 800354e:	f043 0301 	orr.w	r3, r3, #1
 8003552:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003554:	4b2d      	ldr	r3, [pc, #180]	@ (800360c <HAL_ADC_MspInit+0x12c>)
 8003556:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003558:	f003 0301 	and.w	r3, r3, #1
 800355c:	613b      	str	r3, [r7, #16]
 800355e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003560:	4b2a      	ldr	r3, [pc, #168]	@ (800360c <HAL_ADC_MspInit+0x12c>)
 8003562:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003564:	4a29      	ldr	r2, [pc, #164]	@ (800360c <HAL_ADC_MspInit+0x12c>)
 8003566:	f043 0302 	orr.w	r3, r3, #2
 800356a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800356c:	4b27      	ldr	r3, [pc, #156]	@ (800360c <HAL_ADC_MspInit+0x12c>)
 800356e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003570:	f003 0302 	and.w	r3, r3, #2
 8003574:	60fb      	str	r3, [r7, #12]
 8003576:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PB14     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003578:	2301      	movs	r3, #1
 800357a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800357c:	2303      	movs	r3, #3
 800357e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003580:	2300      	movs	r3, #0
 8003582:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003584:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003588:	4619      	mov	r1, r3
 800358a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800358e:	f002 fb03 	bl	8005b98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003592:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003596:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003598:	2303      	movs	r3, #3
 800359a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800359c:	2300      	movs	r3, #0
 800359e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035a0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80035a4:	4619      	mov	r1, r3
 80035a6:	481a      	ldr	r0, [pc, #104]	@ (8003610 <HAL_ADC_MspInit+0x130>)
 80035a8:	f002 faf6 	bl	8005b98 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Channel1;
 80035ac:	4b19      	ldr	r3, [pc, #100]	@ (8003614 <HAL_ADC_MspInit+0x134>)
 80035ae:	4a1a      	ldr	r2, [pc, #104]	@ (8003618 <HAL_ADC_MspInit+0x138>)
 80035b0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80035b2:	4b18      	ldr	r3, [pc, #96]	@ (8003614 <HAL_ADC_MspInit+0x134>)
 80035b4:	2205      	movs	r2, #5
 80035b6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80035b8:	4b16      	ldr	r3, [pc, #88]	@ (8003614 <HAL_ADC_MspInit+0x134>)
 80035ba:	2200      	movs	r2, #0
 80035bc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80035be:	4b15      	ldr	r3, [pc, #84]	@ (8003614 <HAL_ADC_MspInit+0x134>)
 80035c0:	2200      	movs	r2, #0
 80035c2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80035c4:	4b13      	ldr	r3, [pc, #76]	@ (8003614 <HAL_ADC_MspInit+0x134>)
 80035c6:	2280      	movs	r2, #128	@ 0x80
 80035c8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80035ca:	4b12      	ldr	r3, [pc, #72]	@ (8003614 <HAL_ADC_MspInit+0x134>)
 80035cc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80035d0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80035d2:	4b10      	ldr	r3, [pc, #64]	@ (8003614 <HAL_ADC_MspInit+0x134>)
 80035d4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80035d8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80035da:	4b0e      	ldr	r3, [pc, #56]	@ (8003614 <HAL_ADC_MspInit+0x134>)
 80035dc:	2220      	movs	r2, #32
 80035de:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80035e0:	4b0c      	ldr	r3, [pc, #48]	@ (8003614 <HAL_ADC_MspInit+0x134>)
 80035e2:	2200      	movs	r2, #0
 80035e4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80035e6:	480b      	ldr	r0, [pc, #44]	@ (8003614 <HAL_ADC_MspInit+0x134>)
 80035e8:	f001 ffa4 	bl	8005534 <HAL_DMA_Init>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d001      	beq.n	80035f6 <HAL_ADC_MspInit+0x116>
    {
      Error_Handler();
 80035f2:	f7ff ff4b 	bl	800348c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a06      	ldr	r2, [pc, #24]	@ (8003614 <HAL_ADC_MspInit+0x134>)
 80035fa:	655a      	str	r2, [r3, #84]	@ 0x54
 80035fc:	4a05      	ldr	r2, [pc, #20]	@ (8003614 <HAL_ADC_MspInit+0x134>)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003602:	bf00      	nop
 8003604:	3780      	adds	r7, #128	@ 0x80
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop
 800360c:	40021000 	.word	0x40021000
 8003610:	48000400 	.word	0x48000400
 8003614:	20000114 	.word	0x20000114
 8003618:	40020408 	.word	0x40020408

0800361c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b08a      	sub	sp, #40	@ 0x28
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003624:	f107 0314 	add.w	r3, r7, #20
 8003628:	2200      	movs	r2, #0
 800362a:	601a      	str	r2, [r3, #0]
 800362c:	605a      	str	r2, [r3, #4]
 800362e:	609a      	str	r2, [r3, #8]
 8003630:	60da      	str	r2, [r3, #12]
 8003632:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800363c:	d129      	bne.n	8003692 <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800363e:	4b17      	ldr	r3, [pc, #92]	@ (800369c <HAL_TIM_Encoder_MspInit+0x80>)
 8003640:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003642:	4a16      	ldr	r2, [pc, #88]	@ (800369c <HAL_TIM_Encoder_MspInit+0x80>)
 8003644:	f043 0301 	orr.w	r3, r3, #1
 8003648:	6593      	str	r3, [r2, #88]	@ 0x58
 800364a:	4b14      	ldr	r3, [pc, #80]	@ (800369c <HAL_TIM_Encoder_MspInit+0x80>)
 800364c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800364e:	f003 0301 	and.w	r3, r3, #1
 8003652:	613b      	str	r3, [r7, #16]
 8003654:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003656:	4b11      	ldr	r3, [pc, #68]	@ (800369c <HAL_TIM_Encoder_MspInit+0x80>)
 8003658:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800365a:	4a10      	ldr	r2, [pc, #64]	@ (800369c <HAL_TIM_Encoder_MspInit+0x80>)
 800365c:	f043 0301 	orr.w	r3, r3, #1
 8003660:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003662:	4b0e      	ldr	r3, [pc, #56]	@ (800369c <HAL_TIM_Encoder_MspInit+0x80>)
 8003664:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003666:	f003 0301 	and.w	r3, r3, #1
 800366a:	60fb      	str	r3, [r7, #12]
 800366c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_15;
 800366e:	f248 0302 	movw	r3, #32770	@ 0x8002
 8003672:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003674:	2302      	movs	r3, #2
 8003676:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003678:	2300      	movs	r3, #0
 800367a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800367c:	2300      	movs	r3, #0
 800367e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003680:	2301      	movs	r3, #1
 8003682:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003684:	f107 0314 	add.w	r3, r7, #20
 8003688:	4619      	mov	r1, r3
 800368a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800368e:	f002 fa83 	bl	8005b98 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003692:	bf00      	nop
 8003694:	3728      	adds	r7, #40	@ 0x28
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}
 800369a:	bf00      	nop
 800369c:	40021000 	.word	0x40021000

080036a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b088      	sub	sp, #32
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a39      	ldr	r2, [pc, #228]	@ (8003794 <HAL_TIM_Base_MspInit+0xf4>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d10c      	bne.n	80036cc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80036b2:	4b39      	ldr	r3, [pc, #228]	@ (8003798 <HAL_TIM_Base_MspInit+0xf8>)
 80036b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036b6:	4a38      	ldr	r2, [pc, #224]	@ (8003798 <HAL_TIM_Base_MspInit+0xf8>)
 80036b8:	f043 0302 	orr.w	r3, r3, #2
 80036bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80036be:	4b36      	ldr	r3, [pc, #216]	@ (8003798 <HAL_TIM_Base_MspInit+0xf8>)
 80036c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036c2:	f003 0302 	and.w	r3, r3, #2
 80036c6:	61fb      	str	r3, [r7, #28]
 80036c8:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80036ca:	e05e      	b.n	800378a <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM4)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a32      	ldr	r2, [pc, #200]	@ (800379c <HAL_TIM_Base_MspInit+0xfc>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d10c      	bne.n	80036f0 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80036d6:	4b30      	ldr	r3, [pc, #192]	@ (8003798 <HAL_TIM_Base_MspInit+0xf8>)
 80036d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036da:	4a2f      	ldr	r2, [pc, #188]	@ (8003798 <HAL_TIM_Base_MspInit+0xf8>)
 80036dc:	f043 0304 	orr.w	r3, r3, #4
 80036e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80036e2:	4b2d      	ldr	r3, [pc, #180]	@ (8003798 <HAL_TIM_Base_MspInit+0xf8>)
 80036e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036e6:	f003 0304 	and.w	r3, r3, #4
 80036ea:	61bb      	str	r3, [r7, #24]
 80036ec:	69bb      	ldr	r3, [r7, #24]
}
 80036ee:	e04c      	b.n	800378a <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM5)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a2a      	ldr	r2, [pc, #168]	@ (80037a0 <HAL_TIM_Base_MspInit+0x100>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d114      	bne.n	8003724 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80036fa:	4b27      	ldr	r3, [pc, #156]	@ (8003798 <HAL_TIM_Base_MspInit+0xf8>)
 80036fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036fe:	4a26      	ldr	r2, [pc, #152]	@ (8003798 <HAL_TIM_Base_MspInit+0xf8>)
 8003700:	f043 0308 	orr.w	r3, r3, #8
 8003704:	6593      	str	r3, [r2, #88]	@ 0x58
 8003706:	4b24      	ldr	r3, [pc, #144]	@ (8003798 <HAL_TIM_Base_MspInit+0xf8>)
 8003708:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800370a:	f003 0308 	and.w	r3, r3, #8
 800370e:	617b      	str	r3, [r7, #20]
 8003710:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8003712:	2200      	movs	r2, #0
 8003714:	2100      	movs	r1, #0
 8003716:	2032      	movs	r0, #50	@ 0x32
 8003718:	f001 fed7 	bl	80054ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800371c:	2032      	movs	r0, #50	@ 0x32
 800371e:	f001 feee 	bl	80054fe <HAL_NVIC_EnableIRQ>
}
 8003722:	e032      	b.n	800378a <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM6)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a1e      	ldr	r2, [pc, #120]	@ (80037a4 <HAL_TIM_Base_MspInit+0x104>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d114      	bne.n	8003758 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800372e:	4b1a      	ldr	r3, [pc, #104]	@ (8003798 <HAL_TIM_Base_MspInit+0xf8>)
 8003730:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003732:	4a19      	ldr	r2, [pc, #100]	@ (8003798 <HAL_TIM_Base_MspInit+0xf8>)
 8003734:	f043 0310 	orr.w	r3, r3, #16
 8003738:	6593      	str	r3, [r2, #88]	@ 0x58
 800373a:	4b17      	ldr	r3, [pc, #92]	@ (8003798 <HAL_TIM_Base_MspInit+0xf8>)
 800373c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800373e:	f003 0310 	and.w	r3, r3, #16
 8003742:	613b      	str	r3, [r7, #16]
 8003744:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003746:	2200      	movs	r2, #0
 8003748:	2100      	movs	r1, #0
 800374a:	2036      	movs	r0, #54	@ 0x36
 800374c:	f001 febd 	bl	80054ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003750:	2036      	movs	r0, #54	@ 0x36
 8003752:	f001 fed4 	bl	80054fe <HAL_NVIC_EnableIRQ>
}
 8003756:	e018      	b.n	800378a <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM16)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a12      	ldr	r2, [pc, #72]	@ (80037a8 <HAL_TIM_Base_MspInit+0x108>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d113      	bne.n	800378a <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003762:	4b0d      	ldr	r3, [pc, #52]	@ (8003798 <HAL_TIM_Base_MspInit+0xf8>)
 8003764:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003766:	4a0c      	ldr	r2, [pc, #48]	@ (8003798 <HAL_TIM_Base_MspInit+0xf8>)
 8003768:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800376c:	6613      	str	r3, [r2, #96]	@ 0x60
 800376e:	4b0a      	ldr	r3, [pc, #40]	@ (8003798 <HAL_TIM_Base_MspInit+0xf8>)
 8003770:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003772:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003776:	60fb      	str	r3, [r7, #12]
 8003778:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800377a:	2200      	movs	r2, #0
 800377c:	2100      	movs	r1, #0
 800377e:	2019      	movs	r0, #25
 8003780:	f001 fea3 	bl	80054ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003784:	2019      	movs	r0, #25
 8003786:	f001 feba 	bl	80054fe <HAL_NVIC_EnableIRQ>
}
 800378a:	bf00      	nop
 800378c:	3720      	adds	r7, #32
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	40000400 	.word	0x40000400
 8003798:	40021000 	.word	0x40021000
 800379c:	40000800 	.word	0x40000800
 80037a0:	40000c00 	.word	0x40000c00
 80037a4:	40001000 	.word	0x40001000
 80037a8:	40014400 	.word	0x40014400

080037ac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b088      	sub	sp, #32
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037b4:	f107 030c 	add.w	r3, r7, #12
 80037b8:	2200      	movs	r2, #0
 80037ba:	601a      	str	r2, [r3, #0]
 80037bc:	605a      	str	r2, [r3, #4]
 80037be:	609a      	str	r2, [r3, #8]
 80037c0:	60da      	str	r2, [r3, #12]
 80037c2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a11      	ldr	r2, [pc, #68]	@ (8003810 <HAL_TIM_MspPostInit+0x64>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d11b      	bne.n	8003806 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80037ce:	4b11      	ldr	r3, [pc, #68]	@ (8003814 <HAL_TIM_MspPostInit+0x68>)
 80037d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037d2:	4a10      	ldr	r2, [pc, #64]	@ (8003814 <HAL_TIM_MspPostInit+0x68>)
 80037d4:	f043 0304 	orr.w	r3, r3, #4
 80037d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80037da:	4b0e      	ldr	r3, [pc, #56]	@ (8003814 <HAL_TIM_MspPostInit+0x68>)
 80037dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037de:	f003 0304 	and.w	r3, r3, #4
 80037e2:	60bb      	str	r3, [r7, #8]
 80037e4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80037e6:	2340      	movs	r3, #64	@ 0x40
 80037e8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037ea:	2302      	movs	r3, #2
 80037ec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037ee:	2300      	movs	r3, #0
 80037f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037f2:	2300      	movs	r3, #0
 80037f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80037f6:	2302      	movs	r3, #2
 80037f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80037fa:	f107 030c 	add.w	r3, r7, #12
 80037fe:	4619      	mov	r1, r3
 8003800:	4805      	ldr	r0, [pc, #20]	@ (8003818 <HAL_TIM_MspPostInit+0x6c>)
 8003802:	f002 f9c9 	bl	8005b98 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003806:	bf00      	nop
 8003808:	3720      	adds	r7, #32
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop
 8003810:	40000400 	.word	0x40000400
 8003814:	40021000 	.word	0x40021000
 8003818:	48000800 	.word	0x48000800

0800381c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b09e      	sub	sp, #120	@ 0x78
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003824:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003828:	2200      	movs	r2, #0
 800382a:	601a      	str	r2, [r3, #0]
 800382c:	605a      	str	r2, [r3, #4]
 800382e:	609a      	str	r2, [r3, #8]
 8003830:	60da      	str	r2, [r3, #12]
 8003832:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003834:	f107 0310 	add.w	r3, r7, #16
 8003838:	2254      	movs	r2, #84	@ 0x54
 800383a:	2100      	movs	r1, #0
 800383c:	4618      	mov	r0, r3
 800383e:	f007 fa4d 	bl	800acdc <memset>
  if(huart->Instance==USART2)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a4d      	ldr	r2, [pc, #308]	@ (800397c <HAL_UART_MspInit+0x160>)
 8003848:	4293      	cmp	r3, r2
 800384a:	f040 8092 	bne.w	8003972 <HAL_UART_MspInit+0x156>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800384e:	2302      	movs	r3, #2
 8003850:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003852:	2300      	movs	r3, #0
 8003854:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003856:	f107 0310 	add.w	r3, r7, #16
 800385a:	4618      	mov	r0, r3
 800385c:	f003 f948 	bl	8006af0 <HAL_RCCEx_PeriphCLKConfig>
 8003860:	4603      	mov	r3, r0
 8003862:	2b00      	cmp	r3, #0
 8003864:	d001      	beq.n	800386a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003866:	f7ff fe11 	bl	800348c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800386a:	4b45      	ldr	r3, [pc, #276]	@ (8003980 <HAL_UART_MspInit+0x164>)
 800386c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800386e:	4a44      	ldr	r2, [pc, #272]	@ (8003980 <HAL_UART_MspInit+0x164>)
 8003870:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003874:	6593      	str	r3, [r2, #88]	@ 0x58
 8003876:	4b42      	ldr	r3, [pc, #264]	@ (8003980 <HAL_UART_MspInit+0x164>)
 8003878:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800387a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800387e:	60fb      	str	r3, [r7, #12]
 8003880:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003882:	4b3f      	ldr	r3, [pc, #252]	@ (8003980 <HAL_UART_MspInit+0x164>)
 8003884:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003886:	4a3e      	ldr	r2, [pc, #248]	@ (8003980 <HAL_UART_MspInit+0x164>)
 8003888:	f043 0301 	orr.w	r3, r3, #1
 800388c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800388e:	4b3c      	ldr	r3, [pc, #240]	@ (8003980 <HAL_UART_MspInit+0x164>)
 8003890:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003892:	f003 0301 	and.w	r3, r3, #1
 8003896:	60bb      	str	r3, [r7, #8]
 8003898:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800389a:	230c      	movs	r3, #12
 800389c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800389e:	2302      	movs	r3, #2
 80038a0:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038a2:	2300      	movs	r3, #0
 80038a4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038a6:	2300      	movs	r3, #0
 80038a8:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80038aa:	2307      	movs	r3, #7
 80038ac:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038ae:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80038b2:	4619      	mov	r1, r3
 80038b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80038b8:	f002 f96e 	bl	8005b98 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel1;
 80038bc:	4b31      	ldr	r3, [pc, #196]	@ (8003984 <HAL_UART_MspInit+0x168>)
 80038be:	4a32      	ldr	r2, [pc, #200]	@ (8003988 <HAL_UART_MspInit+0x16c>)
 80038c0:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80038c2:	4b30      	ldr	r3, [pc, #192]	@ (8003984 <HAL_UART_MspInit+0x168>)
 80038c4:	221b      	movs	r2, #27
 80038c6:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80038c8:	4b2e      	ldr	r3, [pc, #184]	@ (8003984 <HAL_UART_MspInit+0x168>)
 80038ca:	2210      	movs	r2, #16
 80038cc:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80038ce:	4b2d      	ldr	r3, [pc, #180]	@ (8003984 <HAL_UART_MspInit+0x168>)
 80038d0:	2200      	movs	r2, #0
 80038d2:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80038d4:	4b2b      	ldr	r3, [pc, #172]	@ (8003984 <HAL_UART_MspInit+0x168>)
 80038d6:	2280      	movs	r2, #128	@ 0x80
 80038d8:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80038da:	4b2a      	ldr	r3, [pc, #168]	@ (8003984 <HAL_UART_MspInit+0x168>)
 80038dc:	2200      	movs	r2, #0
 80038de:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80038e0:	4b28      	ldr	r3, [pc, #160]	@ (8003984 <HAL_UART_MspInit+0x168>)
 80038e2:	2200      	movs	r2, #0
 80038e4:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80038e6:	4b27      	ldr	r3, [pc, #156]	@ (8003984 <HAL_UART_MspInit+0x168>)
 80038e8:	2200      	movs	r2, #0
 80038ea:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80038ec:	4b25      	ldr	r3, [pc, #148]	@ (8003984 <HAL_UART_MspInit+0x168>)
 80038ee:	2200      	movs	r2, #0
 80038f0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80038f2:	4824      	ldr	r0, [pc, #144]	@ (8003984 <HAL_UART_MspInit+0x168>)
 80038f4:	f001 fe1e 	bl	8005534 <HAL_DMA_Init>
 80038f8:	4603      	mov	r3, r0
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d001      	beq.n	8003902 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 80038fe:	f7ff fdc5 	bl	800348c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a1f      	ldr	r2, [pc, #124]	@ (8003984 <HAL_UART_MspInit+0x168>)
 8003906:	67da      	str	r2, [r3, #124]	@ 0x7c
 8003908:	4a1e      	ldr	r2, [pc, #120]	@ (8003984 <HAL_UART_MspInit+0x168>)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel2;
 800390e:	4b1f      	ldr	r3, [pc, #124]	@ (800398c <HAL_UART_MspInit+0x170>)
 8003910:	4a1f      	ldr	r2, [pc, #124]	@ (8003990 <HAL_UART_MspInit+0x174>)
 8003912:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8003914:	4b1d      	ldr	r3, [pc, #116]	@ (800398c <HAL_UART_MspInit+0x170>)
 8003916:	221a      	movs	r2, #26
 8003918:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800391a:	4b1c      	ldr	r3, [pc, #112]	@ (800398c <HAL_UART_MspInit+0x170>)
 800391c:	2200      	movs	r2, #0
 800391e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003920:	4b1a      	ldr	r3, [pc, #104]	@ (800398c <HAL_UART_MspInit+0x170>)
 8003922:	2200      	movs	r2, #0
 8003924:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003926:	4b19      	ldr	r3, [pc, #100]	@ (800398c <HAL_UART_MspInit+0x170>)
 8003928:	2280      	movs	r2, #128	@ 0x80
 800392a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800392c:	4b17      	ldr	r3, [pc, #92]	@ (800398c <HAL_UART_MspInit+0x170>)
 800392e:	2200      	movs	r2, #0
 8003930:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003932:	4b16      	ldr	r3, [pc, #88]	@ (800398c <HAL_UART_MspInit+0x170>)
 8003934:	2200      	movs	r2, #0
 8003936:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003938:	4b14      	ldr	r3, [pc, #80]	@ (800398c <HAL_UART_MspInit+0x170>)
 800393a:	2200      	movs	r2, #0
 800393c:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800393e:	4b13      	ldr	r3, [pc, #76]	@ (800398c <HAL_UART_MspInit+0x170>)
 8003940:	2200      	movs	r2, #0
 8003942:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003944:	4811      	ldr	r0, [pc, #68]	@ (800398c <HAL_UART_MspInit+0x170>)
 8003946:	f001 fdf5 	bl	8005534 <HAL_DMA_Init>
 800394a:	4603      	mov	r3, r0
 800394c:	2b00      	cmp	r3, #0
 800394e:	d001      	beq.n	8003954 <HAL_UART_MspInit+0x138>
    {
      Error_Handler();
 8003950:	f7ff fd9c 	bl	800348c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	4a0d      	ldr	r2, [pc, #52]	@ (800398c <HAL_UART_MspInit+0x170>)
 8003958:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800395c:	4a0b      	ldr	r2, [pc, #44]	@ (800398c <HAL_UART_MspInit+0x170>)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003962:	2200      	movs	r2, #0
 8003964:	2100      	movs	r1, #0
 8003966:	2026      	movs	r0, #38	@ 0x26
 8003968:	f001 fdaf 	bl	80054ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800396c:	2026      	movs	r0, #38	@ 0x26
 800396e:	f001 fdc6 	bl	80054fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003972:	bf00      	nop
 8003974:	3778      	adds	r7, #120	@ 0x78
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	40004400 	.word	0x40004400
 8003980:	40021000 	.word	0x40021000
 8003984:	20000708 	.word	0x20000708
 8003988:	40020008 	.word	0x40020008
 800398c:	20000768 	.word	0x20000768
 8003990:	4002001c 	.word	0x4002001c

08003994 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003994:	b480      	push	{r7}
 8003996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003998:	bf00      	nop
 800399a:	e7fd      	b.n	8003998 <NMI_Handler+0x4>

0800399c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800399c:	b480      	push	{r7}
 800399e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80039a0:	bf00      	nop
 80039a2:	e7fd      	b.n	80039a0 <HardFault_Handler+0x4>

080039a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80039a4:	b480      	push	{r7}
 80039a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80039a8:	bf00      	nop
 80039aa:	e7fd      	b.n	80039a8 <MemManage_Handler+0x4>

080039ac <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80039ac:	b480      	push	{r7}
 80039ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80039b0:	bf00      	nop
 80039b2:	e7fd      	b.n	80039b0 <BusFault_Handler+0x4>

080039b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80039b4:	b480      	push	{r7}
 80039b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80039b8:	bf00      	nop
 80039ba:	e7fd      	b.n	80039b8 <UsageFault_Handler+0x4>

080039bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80039bc:	b480      	push	{r7}
 80039be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80039c0:	bf00      	nop
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr

080039ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80039ca:	b480      	push	{r7}
 80039cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80039ce:	bf00      	nop
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr

080039d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80039d8:	b480      	push	{r7}
 80039da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80039dc:	bf00      	nop
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr

080039e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80039e6:	b580      	push	{r7, lr}
 80039e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80039ea:	f000 f8ef 	bl	8003bcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80039ee:	bf00      	nop
 80039f0:	bd80      	pop	{r7, pc}
	...

080039f4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80039f8:	4802      	ldr	r0, [pc, #8]	@ (8003a04 <DMA1_Channel1_IRQHandler+0x10>)
 80039fa:	f001 ff7e 	bl	80058fa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80039fe:	bf00      	nop
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	20000708 	.word	0x20000708

08003a08 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003a0c:	4802      	ldr	r0, [pc, #8]	@ (8003a18 <DMA1_Channel2_IRQHandler+0x10>)
 8003a0e:	f001 ff74 	bl	80058fa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003a12:	bf00      	nop
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	20000768 	.word	0x20000768

08003a1c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8003a20:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8003a24:	f002 fa6a 	bl	8005efc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8003a28:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8003a2c:	f002 fa66 	bl	8005efc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003a30:	bf00      	nop
 8003a32:	bd80      	pop	{r7, pc}

08003a34 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8003a38:	4802      	ldr	r0, [pc, #8]	@ (8003a44 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8003a3a:	f003 ffab 	bl	8007994 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8003a3e:	bf00      	nop
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	20000570 	.word	0x20000570

08003a48 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003a4c:	4802      	ldr	r0, [pc, #8]	@ (8003a58 <USART2_IRQHandler+0x10>)
 8003a4e:	f005 fc61 	bl	8009314 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003a52:	bf00      	nop
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	bf00      	nop
 8003a58:	2000063c 	.word	0x2000063c

08003a5c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8003a60:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8003a64:	f002 fa4a 	bl	8005efc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003a68:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8003a6c:	f002 fa46 	bl	8005efc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003a70:	bf00      	nop
 8003a72:	bd80      	pop	{r7, pc}

08003a74 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003a78:	4802      	ldr	r0, [pc, #8]	@ (8003a84 <TIM5_IRQHandler+0x10>)
 8003a7a:	f003 ff8b 	bl	8007994 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003a7e:	bf00      	nop
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	bf00      	nop
 8003a84:	200003d8 	.word	0x200003d8

08003a88 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003a8c:	4802      	ldr	r0, [pc, #8]	@ (8003a98 <TIM6_DAC_IRQHandler+0x10>)
 8003a8e:	f003 ff81 	bl	8007994 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003a92:	bf00      	nop
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	200004a4 	.word	0x200004a4

08003a9c <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003aa0:	4802      	ldr	r0, [pc, #8]	@ (8003aac <DMA2_Channel1_IRQHandler+0x10>)
 8003aa2:	f001 ff2a 	bl	80058fa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8003aa6:	bf00      	nop
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	20000114 	.word	0x20000114

08003ab0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003ab4:	4b06      	ldr	r3, [pc, #24]	@ (8003ad0 <SystemInit+0x20>)
 8003ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003aba:	4a05      	ldr	r2, [pc, #20]	@ (8003ad0 <SystemInit+0x20>)
 8003abc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003ac0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003ac4:	bf00      	nop
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr
 8003ace:	bf00      	nop
 8003ad0:	e000ed00 	.word	0xe000ed00

08003ad4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003ad4:	480d      	ldr	r0, [pc, #52]	@ (8003b0c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003ad6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003ad8:	f7ff ffea 	bl	8003ab0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003adc:	480c      	ldr	r0, [pc, #48]	@ (8003b10 <LoopForever+0x6>)
  ldr r1, =_edata
 8003ade:	490d      	ldr	r1, [pc, #52]	@ (8003b14 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003ae0:	4a0d      	ldr	r2, [pc, #52]	@ (8003b18 <LoopForever+0xe>)
  movs r3, #0
 8003ae2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003ae4:	e002      	b.n	8003aec <LoopCopyDataInit>

08003ae6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003ae6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ae8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003aea:	3304      	adds	r3, #4

08003aec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003aec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003aee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003af0:	d3f9      	bcc.n	8003ae6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003af2:	4a0a      	ldr	r2, [pc, #40]	@ (8003b1c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003af4:	4c0a      	ldr	r4, [pc, #40]	@ (8003b20 <LoopForever+0x16>)
  movs r3, #0
 8003af6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003af8:	e001      	b.n	8003afe <LoopFillZerobss>

08003afa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003afa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003afc:	3204      	adds	r2, #4

08003afe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003afe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003b00:	d3fb      	bcc.n	8003afa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003b02:	f007 f8f9 	bl	800acf8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003b06:	f7fd fb7f 	bl	8001208 <main>

08003b0a <LoopForever>:

LoopForever:
    b LoopForever
 8003b0a:	e7fe      	b.n	8003b0a <LoopForever>
  ldr   r0, =_estack
 8003b0c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003b10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003b14:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8003b18:	0800afb4 	.word	0x0800afb4
  ldr r2, =_sbss
 8003b1c:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8003b20:	200010a4 	.word	0x200010a4

08003b24 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003b24:	e7fe      	b.n	8003b24 <ADC1_2_IRQHandler>

08003b26 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b26:	b580      	push	{r7, lr}
 8003b28:	b082      	sub	sp, #8
 8003b2a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b30:	2003      	movs	r0, #3
 8003b32:	f001 fcbf 	bl	80054b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003b36:	2000      	movs	r0, #0
 8003b38:	f000 f80e 	bl	8003b58 <HAL_InitTick>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d002      	beq.n	8003b48 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	71fb      	strb	r3, [r7, #7]
 8003b46:	e001      	b.n	8003b4c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003b48:	f7ff fca6 	bl	8003498 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003b4c:	79fb      	ldrb	r3, [r7, #7]

}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3708      	adds	r7, #8
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
	...

08003b58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b084      	sub	sp, #16
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003b60:	2300      	movs	r3, #0
 8003b62:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003b64:	4b16      	ldr	r3, [pc, #88]	@ (8003bc0 <HAL_InitTick+0x68>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d022      	beq.n	8003bb2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003b6c:	4b15      	ldr	r3, [pc, #84]	@ (8003bc4 <HAL_InitTick+0x6c>)
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	4b13      	ldr	r3, [pc, #76]	@ (8003bc0 <HAL_InitTick+0x68>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003b78:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b80:	4618      	mov	r0, r3
 8003b82:	f001 fcca 	bl	800551a <HAL_SYSTICK_Config>
 8003b86:	4603      	mov	r3, r0
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d10f      	bne.n	8003bac <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2b0f      	cmp	r3, #15
 8003b90:	d809      	bhi.n	8003ba6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b92:	2200      	movs	r2, #0
 8003b94:	6879      	ldr	r1, [r7, #4]
 8003b96:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003b9a:	f001 fc96 	bl	80054ca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003b9e:	4a0a      	ldr	r2, [pc, #40]	@ (8003bc8 <HAL_InitTick+0x70>)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6013      	str	r3, [r2, #0]
 8003ba4:	e007      	b.n	8003bb6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	73fb      	strb	r3, [r7, #15]
 8003baa:	e004      	b.n	8003bb6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	73fb      	strb	r3, [r7, #15]
 8003bb0:	e001      	b.n	8003bb6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003bb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3710      	adds	r7, #16
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}
 8003bc0:	20000020 	.word	0x20000020
 8003bc4:	20000018 	.word	0x20000018
 8003bc8:	2000001c 	.word	0x2000001c

08003bcc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003bd0:	4b05      	ldr	r3, [pc, #20]	@ (8003be8 <HAL_IncTick+0x1c>)
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	4b05      	ldr	r3, [pc, #20]	@ (8003bec <HAL_IncTick+0x20>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4413      	add	r3, r2
 8003bda:	4a03      	ldr	r2, [pc, #12]	@ (8003be8 <HAL_IncTick+0x1c>)
 8003bdc:	6013      	str	r3, [r2, #0]
}
 8003bde:	bf00      	nop
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr
 8003be8:	20000f68 	.word	0x20000f68
 8003bec:	20000020 	.word	0x20000020

08003bf0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	af00      	add	r7, sp, #0
  return uwTick;
 8003bf4:	4b03      	ldr	r3, [pc, #12]	@ (8003c04 <HAL_GetTick+0x14>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr
 8003c02:	bf00      	nop
 8003c04:	20000f68 	.word	0x20000f68

08003c08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b084      	sub	sp, #16
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c10:	f7ff ffee 	bl	8003bf0 <HAL_GetTick>
 8003c14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003c20:	d004      	beq.n	8003c2c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8003c22:	4b09      	ldr	r3, [pc, #36]	@ (8003c48 <HAL_Delay+0x40>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	68fa      	ldr	r2, [r7, #12]
 8003c28:	4413      	add	r3, r2
 8003c2a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003c2c:	bf00      	nop
 8003c2e:	f7ff ffdf 	bl	8003bf0 <HAL_GetTick>
 8003c32:	4602      	mov	r2, r0
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	1ad3      	subs	r3, r2, r3
 8003c38:	68fa      	ldr	r2, [r7, #12]
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d8f7      	bhi.n	8003c2e <HAL_Delay+0x26>
  {
  }
}
 8003c3e:	bf00      	nop
 8003c40:	bf00      	nop
 8003c42:	3710      	adds	r7, #16
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}
 8003c48:	20000020 	.word	0x20000020

08003c4c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b083      	sub	sp, #12
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
 8003c54:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	431a      	orrs	r2, r3
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	609a      	str	r2, [r3, #8]
}
 8003c66:	bf00      	nop
 8003c68:	370c      	adds	r7, #12
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr

08003c72 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003c72:	b480      	push	{r7}
 8003c74:	b083      	sub	sp, #12
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	6078      	str	r0, [r7, #4]
 8003c7a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	431a      	orrs	r2, r3
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	609a      	str	r2, [r3, #8]
}
 8003c8c:	bf00      	nop
 8003c8e:	370c      	adds	r7, #12
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr

08003c98 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	370c      	adds	r7, #12
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr

08003cb4 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b087      	sub	sp, #28
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	60f8      	str	r0, [r7, #12]
 8003cbc:	60b9      	str	r1, [r7, #8]
 8003cbe:	607a      	str	r2, [r7, #4]
 8003cc0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	3360      	adds	r3, #96	@ 0x60
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	4413      	add	r3, r2
 8003cce:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	4b08      	ldr	r3, [pc, #32]	@ (8003cf8 <LL_ADC_SetOffset+0x44>)
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	687a      	ldr	r2, [r7, #4]
 8003cda:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8003cde:	683a      	ldr	r2, [r7, #0]
 8003ce0:	430a      	orrs	r2, r1
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003cec:	bf00      	nop
 8003cee:	371c      	adds	r7, #28
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr
 8003cf8:	03fff000 	.word	0x03fff000

08003cfc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b085      	sub	sp, #20
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	3360      	adds	r3, #96	@ 0x60
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	4413      	add	r3, r2
 8003d12:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3714      	adds	r7, #20
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr

08003d28 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b087      	sub	sp, #28
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	60f8      	str	r0, [r7, #12]
 8003d30:	60b9      	str	r1, [r7, #8]
 8003d32:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	3360      	adds	r3, #96	@ 0x60
 8003d38:	461a      	mov	r2, r3
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	009b      	lsls	r3, r3, #2
 8003d3e:	4413      	add	r3, r2
 8003d40:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	431a      	orrs	r2, r3
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003d52:	bf00      	nop
 8003d54:	371c      	adds	r7, #28
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr

08003d5e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003d5e:	b480      	push	{r7}
 8003d60:	b087      	sub	sp, #28
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	60f8      	str	r0, [r7, #12]
 8003d66:	60b9      	str	r1, [r7, #8]
 8003d68:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	3360      	adds	r3, #96	@ 0x60
 8003d6e:	461a      	mov	r2, r3
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	4413      	add	r3, r2
 8003d76:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	431a      	orrs	r2, r3
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8003d88:	bf00      	nop
 8003d8a:	371c      	adds	r7, #28
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr

08003d94 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b087      	sub	sp, #28
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	60f8      	str	r0, [r7, #12]
 8003d9c:	60b9      	str	r1, [r7, #8]
 8003d9e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	3360      	adds	r3, #96	@ 0x60
 8003da4:	461a      	mov	r2, r3
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	009b      	lsls	r3, r3, #2
 8003daa:	4413      	add	r3, r2
 8003dac:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	431a      	orrs	r2, r3
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8003dbe:	bf00      	nop
 8003dc0:	371c      	adds	r7, #28
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr

08003dca <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003dca:	b480      	push	{r7}
 8003dcc:	b083      	sub	sp, #12
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6078      	str	r0, [r7, #4]
 8003dd2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	695b      	ldr	r3, [r3, #20]
 8003dd8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	431a      	orrs	r2, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	615a      	str	r2, [r3, #20]
}
 8003de4:	bf00      	nop
 8003de6:	370c      	adds	r7, #12
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr

08003df0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b083      	sub	sp, #12
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d101      	bne.n	8003e08 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003e04:	2301      	movs	r3, #1
 8003e06:	e000      	b.n	8003e0a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003e08:	2300      	movs	r3, #0
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	370c      	adds	r7, #12
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr

08003e16 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003e16:	b480      	push	{r7}
 8003e18:	b087      	sub	sp, #28
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	60f8      	str	r0, [r7, #12]
 8003e1e:	60b9      	str	r1, [r7, #8]
 8003e20:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	3330      	adds	r3, #48	@ 0x30
 8003e26:	461a      	mov	r2, r3
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	0a1b      	lsrs	r3, r3, #8
 8003e2c:	009b      	lsls	r3, r3, #2
 8003e2e:	f003 030c 	and.w	r3, r3, #12
 8003e32:	4413      	add	r3, r2
 8003e34:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	f003 031f 	and.w	r3, r3, #31
 8003e40:	211f      	movs	r1, #31
 8003e42:	fa01 f303 	lsl.w	r3, r1, r3
 8003e46:	43db      	mvns	r3, r3
 8003e48:	401a      	ands	r2, r3
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	0e9b      	lsrs	r3, r3, #26
 8003e4e:	f003 011f 	and.w	r1, r3, #31
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	f003 031f 	and.w	r3, r3, #31
 8003e58:	fa01 f303 	lsl.w	r3, r1, r3
 8003e5c:	431a      	orrs	r2, r3
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003e62:	bf00      	nop
 8003e64:	371c      	adds	r7, #28
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr

08003e6e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003e6e:	b480      	push	{r7}
 8003e70:	b087      	sub	sp, #28
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	60f8      	str	r0, [r7, #12]
 8003e76:	60b9      	str	r1, [r7, #8]
 8003e78:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	3314      	adds	r3, #20
 8003e7e:	461a      	mov	r2, r3
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	0e5b      	lsrs	r3, r3, #25
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	f003 0304 	and.w	r3, r3, #4
 8003e8a:	4413      	add	r3, r2
 8003e8c:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	0d1b      	lsrs	r3, r3, #20
 8003e96:	f003 031f 	and.w	r3, r3, #31
 8003e9a:	2107      	movs	r1, #7
 8003e9c:	fa01 f303 	lsl.w	r3, r1, r3
 8003ea0:	43db      	mvns	r3, r3
 8003ea2:	401a      	ands	r2, r3
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	0d1b      	lsrs	r3, r3, #20
 8003ea8:	f003 031f 	and.w	r3, r3, #31
 8003eac:	6879      	ldr	r1, [r7, #4]
 8003eae:	fa01 f303 	lsl.w	r3, r1, r3
 8003eb2:	431a      	orrs	r2, r3
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003eb8:	bf00      	nop
 8003eba:	371c      	adds	r7, #28
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr

08003ec4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b085      	sub	sp, #20
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	60f8      	str	r0, [r7, #12]
 8003ecc:	60b9      	str	r1, [r7, #8]
 8003ece:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003edc:	43db      	mvns	r3, r3
 8003ede:	401a      	ands	r2, r3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	f003 0318 	and.w	r3, r3, #24
 8003ee6:	4908      	ldr	r1, [pc, #32]	@ (8003f08 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003ee8:	40d9      	lsrs	r1, r3
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	400b      	ands	r3, r1
 8003eee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ef2:	431a      	orrs	r2, r3
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003efa:	bf00      	nop
 8003efc:	3714      	adds	r7, #20
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr
 8003f06:	bf00      	nop
 8003f08:	0007ffff 	.word	0x0007ffff

08003f0c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b083      	sub	sp, #12
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	f003 031f 	and.w	r3, r3, #31
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	370c      	adds	r7, #12
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr

08003f28 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b083      	sub	sp, #12
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003f38:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	6093      	str	r3, [r2, #8]
}
 8003f40:	bf00      	nop
 8003f42:	370c      	adds	r7, #12
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr

08003f4c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b083      	sub	sp, #12
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003f5c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f60:	d101      	bne.n	8003f66 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003f62:	2301      	movs	r3, #1
 8003f64:	e000      	b.n	8003f68 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003f66:	2300      	movs	r3, #0
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	370c      	adds	r7, #12
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr

08003f74 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b083      	sub	sp, #12
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003f84:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003f88:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003f90:	bf00      	nop
 8003f92:	370c      	adds	r7, #12
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr

08003f9c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b083      	sub	sp, #12
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003fb0:	d101      	bne.n	8003fb6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e000      	b.n	8003fb8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003fb6:	2300      	movs	r3, #0
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	370c      	adds	r7, #12
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr

08003fc4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b083      	sub	sp, #12
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003fd4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003fd8:	f043 0201 	orr.w	r2, r3, #1
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003fe0:	bf00      	nop
 8003fe2:	370c      	adds	r7, #12
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr

08003fec <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	f003 0301 	and.w	r3, r3, #1
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d101      	bne.n	8004004 <LL_ADC_IsEnabled+0x18>
 8004000:	2301      	movs	r3, #1
 8004002:	e000      	b.n	8004006 <LL_ADC_IsEnabled+0x1a>
 8004004:	2300      	movs	r3, #0
}
 8004006:	4618      	mov	r0, r3
 8004008:	370c      	adds	r7, #12
 800400a:	46bd      	mov	sp, r7
 800400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004010:	4770      	bx	lr

08004012 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004012:	b480      	push	{r7}
 8004014:	b083      	sub	sp, #12
 8004016:	af00      	add	r7, sp, #0
 8004018:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004022:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004026:	f043 0204 	orr.w	r2, r3, #4
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800402e:	bf00      	nop
 8004030:	370c      	adds	r7, #12
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr

0800403a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800403a:	b480      	push	{r7}
 800403c:	b083      	sub	sp, #12
 800403e:	af00      	add	r7, sp, #0
 8004040:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	f003 0304 	and.w	r3, r3, #4
 800404a:	2b04      	cmp	r3, #4
 800404c:	d101      	bne.n	8004052 <LL_ADC_REG_IsConversionOngoing+0x18>
 800404e:	2301      	movs	r3, #1
 8004050:	e000      	b.n	8004054 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004052:	2300      	movs	r3, #0
}
 8004054:	4618      	mov	r0, r3
 8004056:	370c      	adds	r7, #12
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr

08004060 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004060:	b480      	push	{r7}
 8004062:	b083      	sub	sp, #12
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	f003 0308 	and.w	r3, r3, #8
 8004070:	2b08      	cmp	r3, #8
 8004072:	d101      	bne.n	8004078 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004074:	2301      	movs	r3, #1
 8004076:	e000      	b.n	800407a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004078:	2300      	movs	r3, #0
}
 800407a:	4618      	mov	r0, r3
 800407c:	370c      	adds	r7, #12
 800407e:	46bd      	mov	sp, r7
 8004080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004084:	4770      	bx	lr
	...

08004088 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004088:	b590      	push	{r4, r7, lr}
 800408a:	b089      	sub	sp, #36	@ 0x24
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004090:	2300      	movs	r3, #0
 8004092:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8004094:	2300      	movs	r3, #0
 8004096:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d101      	bne.n	80040a2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	e1a9      	b.n	80043f6 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	695b      	ldr	r3, [r3, #20]
 80040a6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d109      	bne.n	80040c4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f7ff fa15 	bl	80034e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2200      	movs	r2, #0
 80040ba:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2200      	movs	r2, #0
 80040c0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4618      	mov	r0, r3
 80040ca:	f7ff ff3f 	bl	8003f4c <LL_ADC_IsDeepPowerDownEnabled>
 80040ce:	4603      	mov	r3, r0
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d004      	beq.n	80040de <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4618      	mov	r0, r3
 80040da:	f7ff ff25 	bl	8003f28 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4618      	mov	r0, r3
 80040e4:	f7ff ff5a 	bl	8003f9c <LL_ADC_IsInternalRegulatorEnabled>
 80040e8:	4603      	mov	r3, r0
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d115      	bne.n	800411a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4618      	mov	r0, r3
 80040f4:	f7ff ff3e 	bl	8003f74 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80040f8:	4b9c      	ldr	r3, [pc, #624]	@ (800436c <HAL_ADC_Init+0x2e4>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	099b      	lsrs	r3, r3, #6
 80040fe:	4a9c      	ldr	r2, [pc, #624]	@ (8004370 <HAL_ADC_Init+0x2e8>)
 8004100:	fba2 2303 	umull	r2, r3, r2, r3
 8004104:	099b      	lsrs	r3, r3, #6
 8004106:	3301      	adds	r3, #1
 8004108:	005b      	lsls	r3, r3, #1
 800410a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800410c:	e002      	b.n	8004114 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	3b01      	subs	r3, #1
 8004112:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d1f9      	bne.n	800410e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4618      	mov	r0, r3
 8004120:	f7ff ff3c 	bl	8003f9c <LL_ADC_IsInternalRegulatorEnabled>
 8004124:	4603      	mov	r3, r0
 8004126:	2b00      	cmp	r3, #0
 8004128:	d10d      	bne.n	8004146 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800412e:	f043 0210 	orr.w	r2, r3, #16
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800413a:	f043 0201 	orr.w	r2, r3, #1
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4618      	mov	r0, r3
 800414c:	f7ff ff75 	bl	800403a <LL_ADC_REG_IsConversionOngoing>
 8004150:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004156:	f003 0310 	and.w	r3, r3, #16
 800415a:	2b00      	cmp	r3, #0
 800415c:	f040 8142 	bne.w	80043e4 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	2b00      	cmp	r3, #0
 8004164:	f040 813e 	bne.w	80043e4 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800416c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004170:	f043 0202 	orr.w	r2, r3, #2
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4618      	mov	r0, r3
 800417e:	f7ff ff35 	bl	8003fec <LL_ADC_IsEnabled>
 8004182:	4603      	mov	r3, r0
 8004184:	2b00      	cmp	r3, #0
 8004186:	d141      	bne.n	800420c <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004190:	d004      	beq.n	800419c <HAL_ADC_Init+0x114>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a77      	ldr	r2, [pc, #476]	@ (8004374 <HAL_ADC_Init+0x2ec>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d10f      	bne.n	80041bc <HAL_ADC_Init+0x134>
 800419c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80041a0:	f7ff ff24 	bl	8003fec <LL_ADC_IsEnabled>
 80041a4:	4604      	mov	r4, r0
 80041a6:	4873      	ldr	r0, [pc, #460]	@ (8004374 <HAL_ADC_Init+0x2ec>)
 80041a8:	f7ff ff20 	bl	8003fec <LL_ADC_IsEnabled>
 80041ac:	4603      	mov	r3, r0
 80041ae:	4323      	orrs	r3, r4
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	bf0c      	ite	eq
 80041b4:	2301      	moveq	r3, #1
 80041b6:	2300      	movne	r3, #0
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	e012      	b.n	80041e2 <HAL_ADC_Init+0x15a>
 80041bc:	486e      	ldr	r0, [pc, #440]	@ (8004378 <HAL_ADC_Init+0x2f0>)
 80041be:	f7ff ff15 	bl	8003fec <LL_ADC_IsEnabled>
 80041c2:	4604      	mov	r4, r0
 80041c4:	486d      	ldr	r0, [pc, #436]	@ (800437c <HAL_ADC_Init+0x2f4>)
 80041c6:	f7ff ff11 	bl	8003fec <LL_ADC_IsEnabled>
 80041ca:	4603      	mov	r3, r0
 80041cc:	431c      	orrs	r4, r3
 80041ce:	486c      	ldr	r0, [pc, #432]	@ (8004380 <HAL_ADC_Init+0x2f8>)
 80041d0:	f7ff ff0c 	bl	8003fec <LL_ADC_IsEnabled>
 80041d4:	4603      	mov	r3, r0
 80041d6:	4323      	orrs	r3, r4
 80041d8:	2b00      	cmp	r3, #0
 80041da:	bf0c      	ite	eq
 80041dc:	2301      	moveq	r3, #1
 80041de:	2300      	movne	r3, #0
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d012      	beq.n	800420c <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80041ee:	d004      	beq.n	80041fa <HAL_ADC_Init+0x172>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a5f      	ldr	r2, [pc, #380]	@ (8004374 <HAL_ADC_Init+0x2ec>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d101      	bne.n	80041fe <HAL_ADC_Init+0x176>
 80041fa:	4a62      	ldr	r2, [pc, #392]	@ (8004384 <HAL_ADC_Init+0x2fc>)
 80041fc:	e000      	b.n	8004200 <HAL_ADC_Init+0x178>
 80041fe:	4a62      	ldr	r2, [pc, #392]	@ (8004388 <HAL_ADC_Init+0x300>)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	4619      	mov	r1, r3
 8004206:	4610      	mov	r0, r2
 8004208:	f7ff fd20 	bl	8003c4c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	7f5b      	ldrb	r3, [r3, #29]
 8004210:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004216:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800421c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8004222:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800422a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800422c:	4313      	orrs	r3, r2
 800422e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004236:	2b01      	cmp	r3, #1
 8004238:	d106      	bne.n	8004248 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800423e:	3b01      	subs	r3, #1
 8004240:	045b      	lsls	r3, r3, #17
 8004242:	69ba      	ldr	r2, [r7, #24]
 8004244:	4313      	orrs	r3, r2
 8004246:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800424c:	2b00      	cmp	r3, #0
 800424e:	d009      	beq.n	8004264 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004254:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800425c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800425e:	69ba      	ldr	r2, [r7, #24]
 8004260:	4313      	orrs	r3, r2
 8004262:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	68da      	ldr	r2, [r3, #12]
 800426a:	4b48      	ldr	r3, [pc, #288]	@ (800438c <HAL_ADC_Init+0x304>)
 800426c:	4013      	ands	r3, r2
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	6812      	ldr	r2, [r2, #0]
 8004272:	69b9      	ldr	r1, [r7, #24]
 8004274:	430b      	orrs	r3, r1
 8004276:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	691b      	ldr	r3, [r3, #16]
 800427e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	430a      	orrs	r2, r1
 800428c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4618      	mov	r0, r3
 8004294:	f7ff fee4 	bl	8004060 <LL_ADC_INJ_IsConversionOngoing>
 8004298:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d17f      	bne.n	80043a0 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d17c      	bne.n	80043a0 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80042aa:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80042b2:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80042b4:	4313      	orrs	r3, r2
 80042b6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	68db      	ldr	r3, [r3, #12]
 80042be:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80042c2:	f023 0302 	bic.w	r3, r3, #2
 80042c6:	687a      	ldr	r2, [r7, #4]
 80042c8:	6812      	ldr	r2, [r2, #0]
 80042ca:	69b9      	ldr	r1, [r7, #24]
 80042cc:	430b      	orrs	r3, r1
 80042ce:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	691b      	ldr	r3, [r3, #16]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d017      	beq.n	8004308 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	691a      	ldr	r2, [r3, #16]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80042e6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80042f0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80042f4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	6911      	ldr	r1, [r2, #16]
 80042fc:	687a      	ldr	r2, [r7, #4]
 80042fe:	6812      	ldr	r2, [r2, #0]
 8004300:	430b      	orrs	r3, r1
 8004302:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8004306:	e013      	b.n	8004330 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	691a      	ldr	r2, [r3, #16]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004316:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004320:	687a      	ldr	r2, [r7, #4]
 8004322:	6812      	ldr	r2, [r2, #0]
 8004324:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004328:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800432c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004336:	2b01      	cmp	r3, #1
 8004338:	d12a      	bne.n	8004390 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	691b      	ldr	r3, [r3, #16]
 8004340:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004344:	f023 0304 	bic.w	r3, r3, #4
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 800434c:	687a      	ldr	r2, [r7, #4]
 800434e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004350:	4311      	orrs	r1, r2
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004356:	4311      	orrs	r1, r2
 8004358:	687a      	ldr	r2, [r7, #4]
 800435a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800435c:	430a      	orrs	r2, r1
 800435e:	431a      	orrs	r2, r3
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f042 0201 	orr.w	r2, r2, #1
 8004368:	611a      	str	r2, [r3, #16]
 800436a:	e019      	b.n	80043a0 <HAL_ADC_Init+0x318>
 800436c:	20000018 	.word	0x20000018
 8004370:	053e2d63 	.word	0x053e2d63
 8004374:	50000100 	.word	0x50000100
 8004378:	50000400 	.word	0x50000400
 800437c:	50000500 	.word	0x50000500
 8004380:	50000600 	.word	0x50000600
 8004384:	50000300 	.word	0x50000300
 8004388:	50000700 	.word	0x50000700
 800438c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	691a      	ldr	r2, [r3, #16]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f022 0201 	bic.w	r2, r2, #1
 800439e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	695b      	ldr	r3, [r3, #20]
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d10c      	bne.n	80043c2 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043ae:	f023 010f 	bic.w	r1, r3, #15
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6a1b      	ldr	r3, [r3, #32]
 80043b6:	1e5a      	subs	r2, r3, #1
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	430a      	orrs	r2, r1
 80043be:	631a      	str	r2, [r3, #48]	@ 0x30
 80043c0:	e007      	b.n	80043d2 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f022 020f 	bic.w	r2, r2, #15
 80043d0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043d6:	f023 0303 	bic.w	r3, r3, #3
 80043da:	f043 0201 	orr.w	r2, r3, #1
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80043e2:	e007      	b.n	80043f4 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043e8:	f043 0210 	orr.w	r2, r3, #16
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80043f4:	7ffb      	ldrb	r3, [r7, #31]
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3724      	adds	r7, #36	@ 0x24
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd90      	pop	{r4, r7, pc}
 80043fe:	bf00      	nop

08004400 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b086      	sub	sp, #24
 8004404:	af00      	add	r7, sp, #0
 8004406:	60f8      	str	r0, [r7, #12]
 8004408:	60b9      	str	r1, [r7, #8]
 800440a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004414:	d004      	beq.n	8004420 <HAL_ADC_Start_DMA+0x20>
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a5a      	ldr	r2, [pc, #360]	@ (8004584 <HAL_ADC_Start_DMA+0x184>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d101      	bne.n	8004424 <HAL_ADC_Start_DMA+0x24>
 8004420:	4b59      	ldr	r3, [pc, #356]	@ (8004588 <HAL_ADC_Start_DMA+0x188>)
 8004422:	e000      	b.n	8004426 <HAL_ADC_Start_DMA+0x26>
 8004424:	4b59      	ldr	r3, [pc, #356]	@ (800458c <HAL_ADC_Start_DMA+0x18c>)
 8004426:	4618      	mov	r0, r3
 8004428:	f7ff fd70 	bl	8003f0c <LL_ADC_GetMultimode>
 800442c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4618      	mov	r0, r3
 8004434:	f7ff fe01 	bl	800403a <LL_ADC_REG_IsConversionOngoing>
 8004438:	4603      	mov	r3, r0
 800443a:	2b00      	cmp	r3, #0
 800443c:	f040 809b 	bne.w	8004576 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004446:	2b01      	cmp	r3, #1
 8004448:	d101      	bne.n	800444e <HAL_ADC_Start_DMA+0x4e>
 800444a:	2302      	movs	r3, #2
 800444c:	e096      	b.n	800457c <HAL_ADC_Start_DMA+0x17c>
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2201      	movs	r2, #1
 8004452:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a4d      	ldr	r2, [pc, #308]	@ (8004590 <HAL_ADC_Start_DMA+0x190>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d008      	beq.n	8004472 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d005      	beq.n	8004472 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	2b05      	cmp	r3, #5
 800446a:	d002      	beq.n	8004472 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	2b09      	cmp	r3, #9
 8004470:	d17a      	bne.n	8004568 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004472:	68f8      	ldr	r0, [r7, #12]
 8004474:	f000 fcf6 	bl	8004e64 <ADC_Enable>
 8004478:	4603      	mov	r3, r0
 800447a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800447c:	7dfb      	ldrb	r3, [r7, #23]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d16d      	bne.n	800455e <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004486:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800448a:	f023 0301 	bic.w	r3, r3, #1
 800448e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a3a      	ldr	r2, [pc, #232]	@ (8004584 <HAL_ADC_Start_DMA+0x184>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d009      	beq.n	80044b4 <HAL_ADC_Start_DMA+0xb4>
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a3b      	ldr	r2, [pc, #236]	@ (8004594 <HAL_ADC_Start_DMA+0x194>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d002      	beq.n	80044b0 <HAL_ADC_Start_DMA+0xb0>
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	e003      	b.n	80044b8 <HAL_ADC_Start_DMA+0xb8>
 80044b0:	4b39      	ldr	r3, [pc, #228]	@ (8004598 <HAL_ADC_Start_DMA+0x198>)
 80044b2:	e001      	b.n	80044b8 <HAL_ADC_Start_DMA+0xb8>
 80044b4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80044b8:	68fa      	ldr	r2, [r7, #12]
 80044ba:	6812      	ldr	r2, [r2, #0]
 80044bc:	4293      	cmp	r3, r2
 80044be:	d002      	beq.n	80044c6 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d105      	bne.n	80044d2 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044ca:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044d6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d006      	beq.n	80044ec <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044e2:	f023 0206 	bic.w	r2, r3, #6
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	661a      	str	r2, [r3, #96]	@ 0x60
 80044ea:	e002      	b.n	80044f2 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2200      	movs	r2, #0
 80044f0:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044f6:	4a29      	ldr	r2, [pc, #164]	@ (800459c <HAL_ADC_Start_DMA+0x19c>)
 80044f8:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044fe:	4a28      	ldr	r2, [pc, #160]	@ (80045a0 <HAL_ADC_Start_DMA+0x1a0>)
 8004500:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004506:	4a27      	ldr	r2, [pc, #156]	@ (80045a4 <HAL_ADC_Start_DMA+0x1a4>)
 8004508:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	221c      	movs	r2, #28
 8004510:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2200      	movs	r2, #0
 8004516:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	685a      	ldr	r2, [r3, #4]
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f042 0210 	orr.w	r2, r2, #16
 8004528:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	68da      	ldr	r2, [r3, #12]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f042 0201 	orr.w	r2, r2, #1
 8004538:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	3340      	adds	r3, #64	@ 0x40
 8004544:	4619      	mov	r1, r3
 8004546:	68ba      	ldr	r2, [r7, #8]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f001 f89b 	bl	8005684 <HAL_DMA_Start_IT>
 800454e:	4603      	mov	r3, r0
 8004550:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4618      	mov	r0, r3
 8004558:	f7ff fd5b 	bl	8004012 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800455c:	e00d      	b.n	800457a <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2200      	movs	r2, #0
 8004562:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8004566:	e008      	b.n	800457a <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2200      	movs	r2, #0
 8004570:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8004574:	e001      	b.n	800457a <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004576:	2302      	movs	r3, #2
 8004578:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800457a:	7dfb      	ldrb	r3, [r7, #23]
}
 800457c:	4618      	mov	r0, r3
 800457e:	3718      	adds	r7, #24
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}
 8004584:	50000100 	.word	0x50000100
 8004588:	50000300 	.word	0x50000300
 800458c:	50000700 	.word	0x50000700
 8004590:	50000600 	.word	0x50000600
 8004594:	50000500 	.word	0x50000500
 8004598:	50000400 	.word	0x50000400
 800459c:	08004f91 	.word	0x08004f91
 80045a0:	08005069 	.word	0x08005069
 80045a4:	08005085 	.word	0x08005085

080045a8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b083      	sub	sp, #12
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80045b0:	bf00      	nop
 80045b2:	370c      	adds	r7, #12
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr

080045bc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80045bc:	b480      	push	{r7}
 80045be:	b083      	sub	sp, #12
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80045c4:	bf00      	nop
 80045c6:	370c      	adds	r7, #12
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr

080045d0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b083      	sub	sp, #12
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80045d8:	bf00      	nop
 80045da:	370c      	adds	r7, #12
 80045dc:	46bd      	mov	sp, r7
 80045de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e2:	4770      	bx	lr

080045e4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b0b6      	sub	sp, #216	@ 0xd8
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
 80045ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80045ee:	2300      	movs	r3, #0
 80045f0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80045f4:	2300      	movs	r3, #0
 80045f6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d102      	bne.n	8004608 <HAL_ADC_ConfigChannel+0x24>
 8004602:	2302      	movs	r3, #2
 8004604:	f000 bc13 	b.w	8004e2e <HAL_ADC_ConfigChannel+0x84a>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2201      	movs	r2, #1
 800460c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4618      	mov	r0, r3
 8004616:	f7ff fd10 	bl	800403a <LL_ADC_REG_IsConversionOngoing>
 800461a:	4603      	mov	r3, r0
 800461c:	2b00      	cmp	r3, #0
 800461e:	f040 83f3 	bne.w	8004e08 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6818      	ldr	r0, [r3, #0]
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	6859      	ldr	r1, [r3, #4]
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	461a      	mov	r2, r3
 8004630:	f7ff fbf1 	bl	8003e16 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4618      	mov	r0, r3
 800463a:	f7ff fcfe 	bl	800403a <LL_ADC_REG_IsConversionOngoing>
 800463e:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4618      	mov	r0, r3
 8004648:	f7ff fd0a 	bl	8004060 <LL_ADC_INJ_IsConversionOngoing>
 800464c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004650:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004654:	2b00      	cmp	r3, #0
 8004656:	f040 81d9 	bne.w	8004a0c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800465a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800465e:	2b00      	cmp	r3, #0
 8004660:	f040 81d4 	bne.w	8004a0c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800466c:	d10f      	bne.n	800468e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6818      	ldr	r0, [r3, #0]
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	2200      	movs	r2, #0
 8004678:	4619      	mov	r1, r3
 800467a:	f7ff fbf8 	bl	8003e6e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8004686:	4618      	mov	r0, r3
 8004688:	f7ff fb9f 	bl	8003dca <LL_ADC_SetSamplingTimeCommonConfig>
 800468c:	e00e      	b.n	80046ac <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6818      	ldr	r0, [r3, #0]
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	6819      	ldr	r1, [r3, #0]
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	461a      	mov	r2, r3
 800469c:	f7ff fbe7 	bl	8003e6e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	2100      	movs	r1, #0
 80046a6:	4618      	mov	r0, r3
 80046a8:	f7ff fb8f 	bl	8003dca <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	695a      	ldr	r2, [r3, #20]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	68db      	ldr	r3, [r3, #12]
 80046b6:	08db      	lsrs	r3, r3, #3
 80046b8:	f003 0303 	and.w	r3, r3, #3
 80046bc:	005b      	lsls	r3, r3, #1
 80046be:	fa02 f303 	lsl.w	r3, r2, r3
 80046c2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	691b      	ldr	r3, [r3, #16]
 80046ca:	2b04      	cmp	r3, #4
 80046cc:	d022      	beq.n	8004714 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6818      	ldr	r0, [r3, #0]
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	6919      	ldr	r1, [r3, #16]
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80046de:	f7ff fae9 	bl	8003cb4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6818      	ldr	r0, [r3, #0]
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	6919      	ldr	r1, [r3, #16]
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	699b      	ldr	r3, [r3, #24]
 80046ee:	461a      	mov	r2, r3
 80046f0:	f7ff fb35 	bl	8003d5e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6818      	ldr	r0, [r3, #0]
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004700:	2b01      	cmp	r3, #1
 8004702:	d102      	bne.n	800470a <HAL_ADC_ConfigChannel+0x126>
 8004704:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004708:	e000      	b.n	800470c <HAL_ADC_ConfigChannel+0x128>
 800470a:	2300      	movs	r3, #0
 800470c:	461a      	mov	r2, r3
 800470e:	f7ff fb41 	bl	8003d94 <LL_ADC_SetOffsetSaturation>
 8004712:	e17b      	b.n	8004a0c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	2100      	movs	r1, #0
 800471a:	4618      	mov	r0, r3
 800471c:	f7ff faee 	bl	8003cfc <LL_ADC_GetOffsetChannel>
 8004720:	4603      	mov	r3, r0
 8004722:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004726:	2b00      	cmp	r3, #0
 8004728:	d10a      	bne.n	8004740 <HAL_ADC_ConfigChannel+0x15c>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	2100      	movs	r1, #0
 8004730:	4618      	mov	r0, r3
 8004732:	f7ff fae3 	bl	8003cfc <LL_ADC_GetOffsetChannel>
 8004736:	4603      	mov	r3, r0
 8004738:	0e9b      	lsrs	r3, r3, #26
 800473a:	f003 021f 	and.w	r2, r3, #31
 800473e:	e01e      	b.n	800477e <HAL_ADC_ConfigChannel+0x19a>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	2100      	movs	r1, #0
 8004746:	4618      	mov	r0, r3
 8004748:	f7ff fad8 	bl	8003cfc <LL_ADC_GetOffsetChannel>
 800474c:	4603      	mov	r3, r0
 800474e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004752:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004756:	fa93 f3a3 	rbit	r3, r3
 800475a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800475e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004762:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004766:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800476a:	2b00      	cmp	r3, #0
 800476c:	d101      	bne.n	8004772 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800476e:	2320      	movs	r3, #32
 8004770:	e004      	b.n	800477c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8004772:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004776:	fab3 f383 	clz	r3, r3
 800477a:	b2db      	uxtb	r3, r3
 800477c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004786:	2b00      	cmp	r3, #0
 8004788:	d105      	bne.n	8004796 <HAL_ADC_ConfigChannel+0x1b2>
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	0e9b      	lsrs	r3, r3, #26
 8004790:	f003 031f 	and.w	r3, r3, #31
 8004794:	e018      	b.n	80047c8 <HAL_ADC_ConfigChannel+0x1e4>
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800479e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80047a2:	fa93 f3a3 	rbit	r3, r3
 80047a6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80047aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80047ae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80047b2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d101      	bne.n	80047be <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80047ba:	2320      	movs	r3, #32
 80047bc:	e004      	b.n	80047c8 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80047be:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80047c2:	fab3 f383 	clz	r3, r3
 80047c6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d106      	bne.n	80047da <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	2200      	movs	r2, #0
 80047d2:	2100      	movs	r1, #0
 80047d4:	4618      	mov	r0, r3
 80047d6:	f7ff faa7 	bl	8003d28 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	2101      	movs	r1, #1
 80047e0:	4618      	mov	r0, r3
 80047e2:	f7ff fa8b 	bl	8003cfc <LL_ADC_GetOffsetChannel>
 80047e6:	4603      	mov	r3, r0
 80047e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d10a      	bne.n	8004806 <HAL_ADC_ConfigChannel+0x222>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	2101      	movs	r1, #1
 80047f6:	4618      	mov	r0, r3
 80047f8:	f7ff fa80 	bl	8003cfc <LL_ADC_GetOffsetChannel>
 80047fc:	4603      	mov	r3, r0
 80047fe:	0e9b      	lsrs	r3, r3, #26
 8004800:	f003 021f 	and.w	r2, r3, #31
 8004804:	e01e      	b.n	8004844 <HAL_ADC_ConfigChannel+0x260>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	2101      	movs	r1, #1
 800480c:	4618      	mov	r0, r3
 800480e:	f7ff fa75 	bl	8003cfc <LL_ADC_GetOffsetChannel>
 8004812:	4603      	mov	r3, r0
 8004814:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004818:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800481c:	fa93 f3a3 	rbit	r3, r3
 8004820:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8004824:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004828:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800482c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004830:	2b00      	cmp	r3, #0
 8004832:	d101      	bne.n	8004838 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8004834:	2320      	movs	r3, #32
 8004836:	e004      	b.n	8004842 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8004838:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800483c:	fab3 f383 	clz	r3, r3
 8004840:	b2db      	uxtb	r3, r3
 8004842:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800484c:	2b00      	cmp	r3, #0
 800484e:	d105      	bne.n	800485c <HAL_ADC_ConfigChannel+0x278>
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	0e9b      	lsrs	r3, r3, #26
 8004856:	f003 031f 	and.w	r3, r3, #31
 800485a:	e018      	b.n	800488e <HAL_ADC_ConfigChannel+0x2aa>
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004864:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004868:	fa93 f3a3 	rbit	r3, r3
 800486c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8004870:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004874:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8004878:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800487c:	2b00      	cmp	r3, #0
 800487e:	d101      	bne.n	8004884 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8004880:	2320      	movs	r3, #32
 8004882:	e004      	b.n	800488e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8004884:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004888:	fab3 f383 	clz	r3, r3
 800488c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800488e:	429a      	cmp	r2, r3
 8004890:	d106      	bne.n	80048a0 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	2200      	movs	r2, #0
 8004898:	2101      	movs	r1, #1
 800489a:	4618      	mov	r0, r3
 800489c:	f7ff fa44 	bl	8003d28 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	2102      	movs	r1, #2
 80048a6:	4618      	mov	r0, r3
 80048a8:	f7ff fa28 	bl	8003cfc <LL_ADC_GetOffsetChannel>
 80048ac:	4603      	mov	r3, r0
 80048ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d10a      	bne.n	80048cc <HAL_ADC_ConfigChannel+0x2e8>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	2102      	movs	r1, #2
 80048bc:	4618      	mov	r0, r3
 80048be:	f7ff fa1d 	bl	8003cfc <LL_ADC_GetOffsetChannel>
 80048c2:	4603      	mov	r3, r0
 80048c4:	0e9b      	lsrs	r3, r3, #26
 80048c6:	f003 021f 	and.w	r2, r3, #31
 80048ca:	e01e      	b.n	800490a <HAL_ADC_ConfigChannel+0x326>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	2102      	movs	r1, #2
 80048d2:	4618      	mov	r0, r3
 80048d4:	f7ff fa12 	bl	8003cfc <LL_ADC_GetOffsetChannel>
 80048d8:	4603      	mov	r3, r0
 80048da:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80048e2:	fa93 f3a3 	rbit	r3, r3
 80048e6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80048ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80048ee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80048f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d101      	bne.n	80048fe <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80048fa:	2320      	movs	r3, #32
 80048fc:	e004      	b.n	8004908 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80048fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004902:	fab3 f383 	clz	r3, r3
 8004906:	b2db      	uxtb	r3, r3
 8004908:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004912:	2b00      	cmp	r3, #0
 8004914:	d105      	bne.n	8004922 <HAL_ADC_ConfigChannel+0x33e>
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	0e9b      	lsrs	r3, r3, #26
 800491c:	f003 031f 	and.w	r3, r3, #31
 8004920:	e016      	b.n	8004950 <HAL_ADC_ConfigChannel+0x36c>
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800492a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800492e:	fa93 f3a3 	rbit	r3, r3
 8004932:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8004934:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004936:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800493a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800493e:	2b00      	cmp	r3, #0
 8004940:	d101      	bne.n	8004946 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8004942:	2320      	movs	r3, #32
 8004944:	e004      	b.n	8004950 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8004946:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800494a:	fab3 f383 	clz	r3, r3
 800494e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004950:	429a      	cmp	r2, r3
 8004952:	d106      	bne.n	8004962 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2200      	movs	r2, #0
 800495a:	2102      	movs	r1, #2
 800495c:	4618      	mov	r0, r3
 800495e:	f7ff f9e3 	bl	8003d28 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	2103      	movs	r1, #3
 8004968:	4618      	mov	r0, r3
 800496a:	f7ff f9c7 	bl	8003cfc <LL_ADC_GetOffsetChannel>
 800496e:	4603      	mov	r3, r0
 8004970:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004974:	2b00      	cmp	r3, #0
 8004976:	d10a      	bne.n	800498e <HAL_ADC_ConfigChannel+0x3aa>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	2103      	movs	r1, #3
 800497e:	4618      	mov	r0, r3
 8004980:	f7ff f9bc 	bl	8003cfc <LL_ADC_GetOffsetChannel>
 8004984:	4603      	mov	r3, r0
 8004986:	0e9b      	lsrs	r3, r3, #26
 8004988:	f003 021f 	and.w	r2, r3, #31
 800498c:	e017      	b.n	80049be <HAL_ADC_ConfigChannel+0x3da>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	2103      	movs	r1, #3
 8004994:	4618      	mov	r0, r3
 8004996:	f7ff f9b1 	bl	8003cfc <LL_ADC_GetOffsetChannel>
 800499a:	4603      	mov	r3, r0
 800499c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800499e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80049a0:	fa93 f3a3 	rbit	r3, r3
 80049a4:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80049a6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80049a8:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80049aa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d101      	bne.n	80049b4 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80049b0:	2320      	movs	r3, #32
 80049b2:	e003      	b.n	80049bc <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80049b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80049b6:	fab3 f383 	clz	r3, r3
 80049ba:	b2db      	uxtb	r3, r3
 80049bc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d105      	bne.n	80049d6 <HAL_ADC_ConfigChannel+0x3f2>
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	0e9b      	lsrs	r3, r3, #26
 80049d0:	f003 031f 	and.w	r3, r3, #31
 80049d4:	e011      	b.n	80049fa <HAL_ADC_ConfigChannel+0x416>
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049dc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80049de:	fa93 f3a3 	rbit	r3, r3
 80049e2:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80049e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80049e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80049e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d101      	bne.n	80049f2 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80049ee:	2320      	movs	r3, #32
 80049f0:	e003      	b.n	80049fa <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80049f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80049f4:	fab3 f383 	clz	r3, r3
 80049f8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d106      	bne.n	8004a0c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	2200      	movs	r2, #0
 8004a04:	2103      	movs	r1, #3
 8004a06:	4618      	mov	r0, r3
 8004a08:	f7ff f98e 	bl	8003d28 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4618      	mov	r0, r3
 8004a12:	f7ff faeb 	bl	8003fec <LL_ADC_IsEnabled>
 8004a16:	4603      	mov	r3, r0
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	f040 813d 	bne.w	8004c98 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6818      	ldr	r0, [r3, #0]
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	6819      	ldr	r1, [r3, #0]
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	68db      	ldr	r3, [r3, #12]
 8004a2a:	461a      	mov	r2, r3
 8004a2c:	f7ff fa4a 	bl	8003ec4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	4aa2      	ldr	r2, [pc, #648]	@ (8004cc0 <HAL_ADC_ConfigChannel+0x6dc>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	f040 812e 	bne.w	8004c98 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d10b      	bne.n	8004a64 <HAL_ADC_ConfigChannel+0x480>
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	0e9b      	lsrs	r3, r3, #26
 8004a52:	3301      	adds	r3, #1
 8004a54:	f003 031f 	and.w	r3, r3, #31
 8004a58:	2b09      	cmp	r3, #9
 8004a5a:	bf94      	ite	ls
 8004a5c:	2301      	movls	r3, #1
 8004a5e:	2300      	movhi	r3, #0
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	e019      	b.n	8004a98 <HAL_ADC_ConfigChannel+0x4b4>
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a6a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004a6c:	fa93 f3a3 	rbit	r3, r3
 8004a70:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8004a72:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004a74:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8004a76:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d101      	bne.n	8004a80 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8004a7c:	2320      	movs	r3, #32
 8004a7e:	e003      	b.n	8004a88 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8004a80:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004a82:	fab3 f383 	clz	r3, r3
 8004a86:	b2db      	uxtb	r3, r3
 8004a88:	3301      	adds	r3, #1
 8004a8a:	f003 031f 	and.w	r3, r3, #31
 8004a8e:	2b09      	cmp	r3, #9
 8004a90:	bf94      	ite	ls
 8004a92:	2301      	movls	r3, #1
 8004a94:	2300      	movhi	r3, #0
 8004a96:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d079      	beq.n	8004b90 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d107      	bne.n	8004ab8 <HAL_ADC_ConfigChannel+0x4d4>
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	0e9b      	lsrs	r3, r3, #26
 8004aae:	3301      	adds	r3, #1
 8004ab0:	069b      	lsls	r3, r3, #26
 8004ab2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004ab6:	e015      	b.n	8004ae4 <HAL_ADC_ConfigChannel+0x500>
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004abe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ac0:	fa93 f3a3 	rbit	r3, r3
 8004ac4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004ac6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ac8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8004aca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d101      	bne.n	8004ad4 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8004ad0:	2320      	movs	r3, #32
 8004ad2:	e003      	b.n	8004adc <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8004ad4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ad6:	fab3 f383 	clz	r3, r3
 8004ada:	b2db      	uxtb	r3, r3
 8004adc:	3301      	adds	r3, #1
 8004ade:	069b      	lsls	r3, r3, #26
 8004ae0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d109      	bne.n	8004b04 <HAL_ADC_ConfigChannel+0x520>
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	0e9b      	lsrs	r3, r3, #26
 8004af6:	3301      	adds	r3, #1
 8004af8:	f003 031f 	and.w	r3, r3, #31
 8004afc:	2101      	movs	r1, #1
 8004afe:	fa01 f303 	lsl.w	r3, r1, r3
 8004b02:	e017      	b.n	8004b34 <HAL_ADC_ConfigChannel+0x550>
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b0a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b0c:	fa93 f3a3 	rbit	r3, r3
 8004b10:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8004b12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b14:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8004b16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d101      	bne.n	8004b20 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8004b1c:	2320      	movs	r3, #32
 8004b1e:	e003      	b.n	8004b28 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8004b20:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004b22:	fab3 f383 	clz	r3, r3
 8004b26:	b2db      	uxtb	r3, r3
 8004b28:	3301      	adds	r3, #1
 8004b2a:	f003 031f 	and.w	r3, r3, #31
 8004b2e:	2101      	movs	r1, #1
 8004b30:	fa01 f303 	lsl.w	r3, r1, r3
 8004b34:	ea42 0103 	orr.w	r1, r2, r3
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d10a      	bne.n	8004b5a <HAL_ADC_ConfigChannel+0x576>
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	0e9b      	lsrs	r3, r3, #26
 8004b4a:	3301      	adds	r3, #1
 8004b4c:	f003 021f 	and.w	r2, r3, #31
 8004b50:	4613      	mov	r3, r2
 8004b52:	005b      	lsls	r3, r3, #1
 8004b54:	4413      	add	r3, r2
 8004b56:	051b      	lsls	r3, r3, #20
 8004b58:	e018      	b.n	8004b8c <HAL_ADC_ConfigChannel+0x5a8>
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b62:	fa93 f3a3 	rbit	r3, r3
 8004b66:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004b68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8004b6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d101      	bne.n	8004b76 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8004b72:	2320      	movs	r3, #32
 8004b74:	e003      	b.n	8004b7e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8004b76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b78:	fab3 f383 	clz	r3, r3
 8004b7c:	b2db      	uxtb	r3, r3
 8004b7e:	3301      	adds	r3, #1
 8004b80:	f003 021f 	and.w	r2, r3, #31
 8004b84:	4613      	mov	r3, r2
 8004b86:	005b      	lsls	r3, r3, #1
 8004b88:	4413      	add	r3, r2
 8004b8a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004b8c:	430b      	orrs	r3, r1
 8004b8e:	e07e      	b.n	8004c8e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d107      	bne.n	8004bac <HAL_ADC_ConfigChannel+0x5c8>
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	0e9b      	lsrs	r3, r3, #26
 8004ba2:	3301      	adds	r3, #1
 8004ba4:	069b      	lsls	r3, r3, #26
 8004ba6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004baa:	e015      	b.n	8004bd8 <HAL_ADC_ConfigChannel+0x5f4>
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bb4:	fa93 f3a3 	rbit	r3, r3
 8004bb8:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8004bba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bbc:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8004bbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d101      	bne.n	8004bc8 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8004bc4:	2320      	movs	r3, #32
 8004bc6:	e003      	b.n	8004bd0 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8004bc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bca:	fab3 f383 	clz	r3, r3
 8004bce:	b2db      	uxtb	r3, r3
 8004bd0:	3301      	adds	r3, #1
 8004bd2:	069b      	lsls	r3, r3, #26
 8004bd4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d109      	bne.n	8004bf8 <HAL_ADC_ConfigChannel+0x614>
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	0e9b      	lsrs	r3, r3, #26
 8004bea:	3301      	adds	r3, #1
 8004bec:	f003 031f 	and.w	r3, r3, #31
 8004bf0:	2101      	movs	r1, #1
 8004bf2:	fa01 f303 	lsl.w	r3, r1, r3
 8004bf6:	e017      	b.n	8004c28 <HAL_ADC_ConfigChannel+0x644>
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bfe:	6a3b      	ldr	r3, [r7, #32]
 8004c00:	fa93 f3a3 	rbit	r3, r3
 8004c04:	61fb      	str	r3, [r7, #28]
  return result;
 8004c06:	69fb      	ldr	r3, [r7, #28]
 8004c08:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8004c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d101      	bne.n	8004c14 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8004c10:	2320      	movs	r3, #32
 8004c12:	e003      	b.n	8004c1c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8004c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c16:	fab3 f383 	clz	r3, r3
 8004c1a:	b2db      	uxtb	r3, r3
 8004c1c:	3301      	adds	r3, #1
 8004c1e:	f003 031f 	and.w	r3, r3, #31
 8004c22:	2101      	movs	r1, #1
 8004c24:	fa01 f303 	lsl.w	r3, r1, r3
 8004c28:	ea42 0103 	orr.w	r1, r2, r3
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d10d      	bne.n	8004c54 <HAL_ADC_ConfigChannel+0x670>
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	0e9b      	lsrs	r3, r3, #26
 8004c3e:	3301      	adds	r3, #1
 8004c40:	f003 021f 	and.w	r2, r3, #31
 8004c44:	4613      	mov	r3, r2
 8004c46:	005b      	lsls	r3, r3, #1
 8004c48:	4413      	add	r3, r2
 8004c4a:	3b1e      	subs	r3, #30
 8004c4c:	051b      	lsls	r3, r3, #20
 8004c4e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004c52:	e01b      	b.n	8004c8c <HAL_ADC_ConfigChannel+0x6a8>
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	fa93 f3a3 	rbit	r3, r3
 8004c60:	613b      	str	r3, [r7, #16]
  return result;
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004c66:	69bb      	ldr	r3, [r7, #24]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d101      	bne.n	8004c70 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8004c6c:	2320      	movs	r3, #32
 8004c6e:	e003      	b.n	8004c78 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8004c70:	69bb      	ldr	r3, [r7, #24]
 8004c72:	fab3 f383 	clz	r3, r3
 8004c76:	b2db      	uxtb	r3, r3
 8004c78:	3301      	adds	r3, #1
 8004c7a:	f003 021f 	and.w	r2, r3, #31
 8004c7e:	4613      	mov	r3, r2
 8004c80:	005b      	lsls	r3, r3, #1
 8004c82:	4413      	add	r3, r2
 8004c84:	3b1e      	subs	r3, #30
 8004c86:	051b      	lsls	r3, r3, #20
 8004c88:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004c8c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8004c8e:	683a      	ldr	r2, [r7, #0]
 8004c90:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004c92:	4619      	mov	r1, r3
 8004c94:	f7ff f8eb 	bl	8003e6e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	4b09      	ldr	r3, [pc, #36]	@ (8004cc4 <HAL_ADC_ConfigChannel+0x6e0>)
 8004c9e:	4013      	ands	r3, r2
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	f000 80be 	beq.w	8004e22 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004cae:	d004      	beq.n	8004cba <HAL_ADC_ConfigChannel+0x6d6>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a04      	ldr	r2, [pc, #16]	@ (8004cc8 <HAL_ADC_ConfigChannel+0x6e4>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d10a      	bne.n	8004cd0 <HAL_ADC_ConfigChannel+0x6ec>
 8004cba:	4b04      	ldr	r3, [pc, #16]	@ (8004ccc <HAL_ADC_ConfigChannel+0x6e8>)
 8004cbc:	e009      	b.n	8004cd2 <HAL_ADC_ConfigChannel+0x6ee>
 8004cbe:	bf00      	nop
 8004cc0:	407f0000 	.word	0x407f0000
 8004cc4:	80080000 	.word	0x80080000
 8004cc8:	50000100 	.word	0x50000100
 8004ccc:	50000300 	.word	0x50000300
 8004cd0:	4b59      	ldr	r3, [pc, #356]	@ (8004e38 <HAL_ADC_ConfigChannel+0x854>)
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f7fe ffe0 	bl	8003c98 <LL_ADC_GetCommonPathInternalCh>
 8004cd8:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a56      	ldr	r2, [pc, #344]	@ (8004e3c <HAL_ADC_ConfigChannel+0x858>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d004      	beq.n	8004cf0 <HAL_ADC_ConfigChannel+0x70c>
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a55      	ldr	r2, [pc, #340]	@ (8004e40 <HAL_ADC_ConfigChannel+0x85c>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d13a      	bne.n	8004d66 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004cf0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004cf4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d134      	bne.n	8004d66 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004d04:	d005      	beq.n	8004d12 <HAL_ADC_ConfigChannel+0x72e>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a4e      	ldr	r2, [pc, #312]	@ (8004e44 <HAL_ADC_ConfigChannel+0x860>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	f040 8085 	bne.w	8004e1c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004d1a:	d004      	beq.n	8004d26 <HAL_ADC_ConfigChannel+0x742>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a49      	ldr	r2, [pc, #292]	@ (8004e48 <HAL_ADC_ConfigChannel+0x864>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d101      	bne.n	8004d2a <HAL_ADC_ConfigChannel+0x746>
 8004d26:	4a49      	ldr	r2, [pc, #292]	@ (8004e4c <HAL_ADC_ConfigChannel+0x868>)
 8004d28:	e000      	b.n	8004d2c <HAL_ADC_ConfigChannel+0x748>
 8004d2a:	4a43      	ldr	r2, [pc, #268]	@ (8004e38 <HAL_ADC_ConfigChannel+0x854>)
 8004d2c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004d30:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004d34:	4619      	mov	r1, r3
 8004d36:	4610      	mov	r0, r2
 8004d38:	f7fe ff9b 	bl	8003c72 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004d3c:	4b44      	ldr	r3, [pc, #272]	@ (8004e50 <HAL_ADC_ConfigChannel+0x86c>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	099b      	lsrs	r3, r3, #6
 8004d42:	4a44      	ldr	r2, [pc, #272]	@ (8004e54 <HAL_ADC_ConfigChannel+0x870>)
 8004d44:	fba2 2303 	umull	r2, r3, r2, r3
 8004d48:	099b      	lsrs	r3, r3, #6
 8004d4a:	1c5a      	adds	r2, r3, #1
 8004d4c:	4613      	mov	r3, r2
 8004d4e:	005b      	lsls	r3, r3, #1
 8004d50:	4413      	add	r3, r2
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004d56:	e002      	b.n	8004d5e <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	3b01      	subs	r3, #1
 8004d5c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d1f9      	bne.n	8004d58 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004d64:	e05a      	b.n	8004e1c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a3b      	ldr	r2, [pc, #236]	@ (8004e58 <HAL_ADC_ConfigChannel+0x874>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d125      	bne.n	8004dbc <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004d70:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004d74:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d11f      	bne.n	8004dbc <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a31      	ldr	r2, [pc, #196]	@ (8004e48 <HAL_ADC_ConfigChannel+0x864>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d104      	bne.n	8004d90 <HAL_ADC_ConfigChannel+0x7ac>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a34      	ldr	r2, [pc, #208]	@ (8004e5c <HAL_ADC_ConfigChannel+0x878>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d047      	beq.n	8004e20 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004d98:	d004      	beq.n	8004da4 <HAL_ADC_ConfigChannel+0x7c0>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a2a      	ldr	r2, [pc, #168]	@ (8004e48 <HAL_ADC_ConfigChannel+0x864>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d101      	bne.n	8004da8 <HAL_ADC_ConfigChannel+0x7c4>
 8004da4:	4a29      	ldr	r2, [pc, #164]	@ (8004e4c <HAL_ADC_ConfigChannel+0x868>)
 8004da6:	e000      	b.n	8004daa <HAL_ADC_ConfigChannel+0x7c6>
 8004da8:	4a23      	ldr	r2, [pc, #140]	@ (8004e38 <HAL_ADC_ConfigChannel+0x854>)
 8004daa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004dae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004db2:	4619      	mov	r1, r3
 8004db4:	4610      	mov	r0, r2
 8004db6:	f7fe ff5c 	bl	8003c72 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004dba:	e031      	b.n	8004e20 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a27      	ldr	r2, [pc, #156]	@ (8004e60 <HAL_ADC_ConfigChannel+0x87c>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d12d      	bne.n	8004e22 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004dc6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004dca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d127      	bne.n	8004e22 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a1c      	ldr	r2, [pc, #112]	@ (8004e48 <HAL_ADC_ConfigChannel+0x864>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d022      	beq.n	8004e22 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004de4:	d004      	beq.n	8004df0 <HAL_ADC_ConfigChannel+0x80c>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a17      	ldr	r2, [pc, #92]	@ (8004e48 <HAL_ADC_ConfigChannel+0x864>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d101      	bne.n	8004df4 <HAL_ADC_ConfigChannel+0x810>
 8004df0:	4a16      	ldr	r2, [pc, #88]	@ (8004e4c <HAL_ADC_ConfigChannel+0x868>)
 8004df2:	e000      	b.n	8004df6 <HAL_ADC_ConfigChannel+0x812>
 8004df4:	4a10      	ldr	r2, [pc, #64]	@ (8004e38 <HAL_ADC_ConfigChannel+0x854>)
 8004df6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004dfa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004dfe:	4619      	mov	r1, r3
 8004e00:	4610      	mov	r0, r2
 8004e02:	f7fe ff36 	bl	8003c72 <LL_ADC_SetCommonPathInternalCh>
 8004e06:	e00c      	b.n	8004e22 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e0c:	f043 0220 	orr.w	r2, r3, #32
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8004e1a:	e002      	b.n	8004e22 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004e1c:	bf00      	nop
 8004e1e:	e000      	b.n	8004e22 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004e20:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2200      	movs	r2, #0
 8004e26:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004e2a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	37d8      	adds	r7, #216	@ 0xd8
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}
 8004e36:	bf00      	nop
 8004e38:	50000700 	.word	0x50000700
 8004e3c:	c3210000 	.word	0xc3210000
 8004e40:	90c00010 	.word	0x90c00010
 8004e44:	50000600 	.word	0x50000600
 8004e48:	50000100 	.word	0x50000100
 8004e4c:	50000300 	.word	0x50000300
 8004e50:	20000018 	.word	0x20000018
 8004e54:	053e2d63 	.word	0x053e2d63
 8004e58:	c7520000 	.word	0xc7520000
 8004e5c:	50000500 	.word	0x50000500
 8004e60:	cb840000 	.word	0xcb840000

08004e64 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b084      	sub	sp, #16
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4618      	mov	r0, r3
 8004e76:	f7ff f8b9 	bl	8003fec <LL_ADC_IsEnabled>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d176      	bne.n	8004f6e <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	689a      	ldr	r2, [r3, #8]
 8004e86:	4b3c      	ldr	r3, [pc, #240]	@ (8004f78 <ADC_Enable+0x114>)
 8004e88:	4013      	ands	r3, r2
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d00d      	beq.n	8004eaa <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e92:	f043 0210 	orr.w	r2, r3, #16
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e9e:	f043 0201 	orr.w	r2, r3, #1
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e062      	b.n	8004f70 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f7ff f888 	bl	8003fc4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004ebc:	d004      	beq.n	8004ec8 <ADC_Enable+0x64>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a2e      	ldr	r2, [pc, #184]	@ (8004f7c <ADC_Enable+0x118>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d101      	bne.n	8004ecc <ADC_Enable+0x68>
 8004ec8:	4b2d      	ldr	r3, [pc, #180]	@ (8004f80 <ADC_Enable+0x11c>)
 8004eca:	e000      	b.n	8004ece <ADC_Enable+0x6a>
 8004ecc:	4b2d      	ldr	r3, [pc, #180]	@ (8004f84 <ADC_Enable+0x120>)
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f7fe fee2 	bl	8003c98 <LL_ADC_GetCommonPathInternalCh>
 8004ed4:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004ed6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d013      	beq.n	8004f06 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004ede:	4b2a      	ldr	r3, [pc, #168]	@ (8004f88 <ADC_Enable+0x124>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	099b      	lsrs	r3, r3, #6
 8004ee4:	4a29      	ldr	r2, [pc, #164]	@ (8004f8c <ADC_Enable+0x128>)
 8004ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8004eea:	099b      	lsrs	r3, r3, #6
 8004eec:	1c5a      	adds	r2, r3, #1
 8004eee:	4613      	mov	r3, r2
 8004ef0:	005b      	lsls	r3, r3, #1
 8004ef2:	4413      	add	r3, r2
 8004ef4:	009b      	lsls	r3, r3, #2
 8004ef6:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004ef8:	e002      	b.n	8004f00 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	3b01      	subs	r3, #1
 8004efe:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d1f9      	bne.n	8004efa <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004f06:	f7fe fe73 	bl	8003bf0 <HAL_GetTick>
 8004f0a:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004f0c:	e028      	b.n	8004f60 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4618      	mov	r0, r3
 8004f14:	f7ff f86a 	bl	8003fec <LL_ADC_IsEnabled>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d104      	bne.n	8004f28 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4618      	mov	r0, r3
 8004f24:	f7ff f84e 	bl	8003fc4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004f28:	f7fe fe62 	bl	8003bf0 <HAL_GetTick>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	1ad3      	subs	r3, r2, r3
 8004f32:	2b02      	cmp	r3, #2
 8004f34:	d914      	bls.n	8004f60 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f003 0301 	and.w	r3, r3, #1
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d00d      	beq.n	8004f60 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f48:	f043 0210 	orr.w	r2, r3, #16
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f54:	f043 0201 	orr.w	r2, r3, #1
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	e007      	b.n	8004f70 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 0301 	and.w	r3, r3, #1
 8004f6a:	2b01      	cmp	r3, #1
 8004f6c:	d1cf      	bne.n	8004f0e <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004f6e:	2300      	movs	r3, #0
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	3710      	adds	r7, #16
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}
 8004f78:	8000003f 	.word	0x8000003f
 8004f7c:	50000100 	.word	0x50000100
 8004f80:	50000300 	.word	0x50000300
 8004f84:	50000700 	.word	0x50000700
 8004f88:	20000018 	.word	0x20000018
 8004f8c:	053e2d63 	.word	0x053e2d63

08004f90 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b084      	sub	sp, #16
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f9c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fa2:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d14b      	bne.n	8005042 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fae:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 0308 	and.w	r3, r3, #8
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d021      	beq.n	8005008 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f7fe ff11 	bl	8003df0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d032      	beq.n	800503a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	68db      	ldr	r3, [r3, #12]
 8004fda:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d12b      	bne.n	800503a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fe6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ff2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d11f      	bne.n	800503a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ffe:	f043 0201 	orr.w	r2, r3, #1
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005006:	e018      	b.n	800503a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	68db      	ldr	r3, [r3, #12]
 800500e:	f003 0302 	and.w	r3, r3, #2
 8005012:	2b00      	cmp	r3, #0
 8005014:	d111      	bne.n	800503a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800501a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005026:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800502a:	2b00      	cmp	r3, #0
 800502c:	d105      	bne.n	800503a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005032:	f043 0201 	orr.w	r2, r3, #1
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800503a:	68f8      	ldr	r0, [r7, #12]
 800503c:	f7ff fab4 	bl	80045a8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005040:	e00e      	b.n	8005060 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005046:	f003 0310 	and.w	r3, r3, #16
 800504a:	2b00      	cmp	r3, #0
 800504c:	d003      	beq.n	8005056 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800504e:	68f8      	ldr	r0, [r7, #12]
 8005050:	f7ff fabe 	bl	80045d0 <HAL_ADC_ErrorCallback>
}
 8005054:	e004      	b.n	8005060 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800505a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800505c:	6878      	ldr	r0, [r7, #4]
 800505e:	4798      	blx	r3
}
 8005060:	bf00      	nop
 8005062:	3710      	adds	r7, #16
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}

08005068 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b084      	sub	sp, #16
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005074:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005076:	68f8      	ldr	r0, [r7, #12]
 8005078:	f7ff faa0 	bl	80045bc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800507c:	bf00      	nop
 800507e:	3710      	adds	r7, #16
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}

08005084 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b084      	sub	sp, #16
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005090:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005096:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050a2:	f043 0204 	orr.w	r2, r3, #4
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80050aa:	68f8      	ldr	r0, [r7, #12]
 80050ac:	f7ff fa90 	bl	80045d0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80050b0:	bf00      	nop
 80050b2:	3710      	adds	r7, #16
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}

080050b8 <LL_ADC_IsEnabled>:
{
 80050b8:	b480      	push	{r7}
 80050ba:	b083      	sub	sp, #12
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	f003 0301 	and.w	r3, r3, #1
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d101      	bne.n	80050d0 <LL_ADC_IsEnabled+0x18>
 80050cc:	2301      	movs	r3, #1
 80050ce:	e000      	b.n	80050d2 <LL_ADC_IsEnabled+0x1a>
 80050d0:	2300      	movs	r3, #0
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	370c      	adds	r7, #12
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr

080050de <LL_ADC_REG_IsConversionOngoing>:
{
 80050de:	b480      	push	{r7}
 80050e0:	b083      	sub	sp, #12
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	f003 0304 	and.w	r3, r3, #4
 80050ee:	2b04      	cmp	r3, #4
 80050f0:	d101      	bne.n	80050f6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80050f2:	2301      	movs	r3, #1
 80050f4:	e000      	b.n	80050f8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80050f6:	2300      	movs	r3, #0
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	370c      	adds	r7, #12
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr

08005104 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8005104:	b590      	push	{r4, r7, lr}
 8005106:	b0a1      	sub	sp, #132	@ 0x84
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800510e:	2300      	movs	r3, #0
 8005110:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800511a:	2b01      	cmp	r3, #1
 800511c:	d101      	bne.n	8005122 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800511e:	2302      	movs	r3, #2
 8005120:	e0e7      	b.n	80052f2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2201      	movs	r2, #1
 8005126:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800512a:	2300      	movs	r3, #0
 800512c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800512e:	2300      	movs	r3, #0
 8005130:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800513a:	d102      	bne.n	8005142 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800513c:	4b6f      	ldr	r3, [pc, #444]	@ (80052fc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800513e:	60bb      	str	r3, [r7, #8]
 8005140:	e009      	b.n	8005156 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a6e      	ldr	r2, [pc, #440]	@ (8005300 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d102      	bne.n	8005152 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 800514c:	4b6d      	ldr	r3, [pc, #436]	@ (8005304 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800514e:	60bb      	str	r3, [r7, #8]
 8005150:	e001      	b.n	8005156 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8005152:	2300      	movs	r3, #0
 8005154:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d10b      	bne.n	8005174 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005160:	f043 0220 	orr.w	r2, r3, #32
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2200      	movs	r2, #0
 800516c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8005170:	2301      	movs	r3, #1
 8005172:	e0be      	b.n	80052f2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	4618      	mov	r0, r3
 8005178:	f7ff ffb1 	bl	80050de <LL_ADC_REG_IsConversionOngoing>
 800517c:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4618      	mov	r0, r3
 8005184:	f7ff ffab 	bl	80050de <LL_ADC_REG_IsConversionOngoing>
 8005188:	4603      	mov	r3, r0
 800518a:	2b00      	cmp	r3, #0
 800518c:	f040 80a0 	bne.w	80052d0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8005190:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005192:	2b00      	cmp	r3, #0
 8005194:	f040 809c 	bne.w	80052d0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80051a0:	d004      	beq.n	80051ac <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a55      	ldr	r2, [pc, #340]	@ (80052fc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d101      	bne.n	80051b0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80051ac:	4b56      	ldr	r3, [pc, #344]	@ (8005308 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80051ae:	e000      	b.n	80051b2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80051b0:	4b56      	ldr	r3, [pc, #344]	@ (800530c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80051b2:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d04b      	beq.n	8005254 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80051bc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	6859      	ldr	r1, [r3, #4]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80051ce:	035b      	lsls	r3, r3, #13
 80051d0:	430b      	orrs	r3, r1
 80051d2:	431a      	orrs	r2, r3
 80051d4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80051d6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80051e0:	d004      	beq.n	80051ec <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a45      	ldr	r2, [pc, #276]	@ (80052fc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d10f      	bne.n	800520c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80051ec:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80051f0:	f7ff ff62 	bl	80050b8 <LL_ADC_IsEnabled>
 80051f4:	4604      	mov	r4, r0
 80051f6:	4841      	ldr	r0, [pc, #260]	@ (80052fc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80051f8:	f7ff ff5e 	bl	80050b8 <LL_ADC_IsEnabled>
 80051fc:	4603      	mov	r3, r0
 80051fe:	4323      	orrs	r3, r4
 8005200:	2b00      	cmp	r3, #0
 8005202:	bf0c      	ite	eq
 8005204:	2301      	moveq	r3, #1
 8005206:	2300      	movne	r3, #0
 8005208:	b2db      	uxtb	r3, r3
 800520a:	e012      	b.n	8005232 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 800520c:	483c      	ldr	r0, [pc, #240]	@ (8005300 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800520e:	f7ff ff53 	bl	80050b8 <LL_ADC_IsEnabled>
 8005212:	4604      	mov	r4, r0
 8005214:	483b      	ldr	r0, [pc, #236]	@ (8005304 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005216:	f7ff ff4f 	bl	80050b8 <LL_ADC_IsEnabled>
 800521a:	4603      	mov	r3, r0
 800521c:	431c      	orrs	r4, r3
 800521e:	483c      	ldr	r0, [pc, #240]	@ (8005310 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8005220:	f7ff ff4a 	bl	80050b8 <LL_ADC_IsEnabled>
 8005224:	4603      	mov	r3, r0
 8005226:	4323      	orrs	r3, r4
 8005228:	2b00      	cmp	r3, #0
 800522a:	bf0c      	ite	eq
 800522c:	2301      	moveq	r3, #1
 800522e:	2300      	movne	r3, #0
 8005230:	b2db      	uxtb	r3, r3
 8005232:	2b00      	cmp	r3, #0
 8005234:	d056      	beq.n	80052e4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005236:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800523e:	f023 030f 	bic.w	r3, r3, #15
 8005242:	683a      	ldr	r2, [r7, #0]
 8005244:	6811      	ldr	r1, [r2, #0]
 8005246:	683a      	ldr	r2, [r7, #0]
 8005248:	6892      	ldr	r2, [r2, #8]
 800524a:	430a      	orrs	r2, r1
 800524c:	431a      	orrs	r2, r3
 800524e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005250:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005252:	e047      	b.n	80052e4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005254:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005256:	689b      	ldr	r3, [r3, #8]
 8005258:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800525c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800525e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005268:	d004      	beq.n	8005274 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a23      	ldr	r2, [pc, #140]	@ (80052fc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d10f      	bne.n	8005294 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8005274:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005278:	f7ff ff1e 	bl	80050b8 <LL_ADC_IsEnabled>
 800527c:	4604      	mov	r4, r0
 800527e:	481f      	ldr	r0, [pc, #124]	@ (80052fc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005280:	f7ff ff1a 	bl	80050b8 <LL_ADC_IsEnabled>
 8005284:	4603      	mov	r3, r0
 8005286:	4323      	orrs	r3, r4
 8005288:	2b00      	cmp	r3, #0
 800528a:	bf0c      	ite	eq
 800528c:	2301      	moveq	r3, #1
 800528e:	2300      	movne	r3, #0
 8005290:	b2db      	uxtb	r3, r3
 8005292:	e012      	b.n	80052ba <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8005294:	481a      	ldr	r0, [pc, #104]	@ (8005300 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005296:	f7ff ff0f 	bl	80050b8 <LL_ADC_IsEnabled>
 800529a:	4604      	mov	r4, r0
 800529c:	4819      	ldr	r0, [pc, #100]	@ (8005304 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800529e:	f7ff ff0b 	bl	80050b8 <LL_ADC_IsEnabled>
 80052a2:	4603      	mov	r3, r0
 80052a4:	431c      	orrs	r4, r3
 80052a6:	481a      	ldr	r0, [pc, #104]	@ (8005310 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80052a8:	f7ff ff06 	bl	80050b8 <LL_ADC_IsEnabled>
 80052ac:	4603      	mov	r3, r0
 80052ae:	4323      	orrs	r3, r4
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	bf0c      	ite	eq
 80052b4:	2301      	moveq	r3, #1
 80052b6:	2300      	movne	r3, #0
 80052b8:	b2db      	uxtb	r3, r3
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d012      	beq.n	80052e4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80052be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80052c6:	f023 030f 	bic.w	r3, r3, #15
 80052ca:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80052cc:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80052ce:	e009      	b.n	80052e4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052d4:	f043 0220 	orr.w	r2, r3, #32
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80052dc:	2301      	movs	r3, #1
 80052de:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80052e2:	e000      	b.n	80052e6 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80052e4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2200      	movs	r2, #0
 80052ea:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80052ee:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3784      	adds	r7, #132	@ 0x84
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd90      	pop	{r4, r7, pc}
 80052fa:	bf00      	nop
 80052fc:	50000100 	.word	0x50000100
 8005300:	50000400 	.word	0x50000400
 8005304:	50000500 	.word	0x50000500
 8005308:	50000300 	.word	0x50000300
 800530c:	50000700 	.word	0x50000700
 8005310:	50000600 	.word	0x50000600

08005314 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005314:	b480      	push	{r7}
 8005316:	b085      	sub	sp, #20
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	f003 0307 	and.w	r3, r3, #7
 8005322:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005324:	4b0c      	ldr	r3, [pc, #48]	@ (8005358 <__NVIC_SetPriorityGrouping+0x44>)
 8005326:	68db      	ldr	r3, [r3, #12]
 8005328:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800532a:	68ba      	ldr	r2, [r7, #8]
 800532c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005330:	4013      	ands	r3, r2
 8005332:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800533c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005340:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005344:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005346:	4a04      	ldr	r2, [pc, #16]	@ (8005358 <__NVIC_SetPriorityGrouping+0x44>)
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	60d3      	str	r3, [r2, #12]
}
 800534c:	bf00      	nop
 800534e:	3714      	adds	r7, #20
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr
 8005358:	e000ed00 	.word	0xe000ed00

0800535c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800535c:	b480      	push	{r7}
 800535e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005360:	4b04      	ldr	r3, [pc, #16]	@ (8005374 <__NVIC_GetPriorityGrouping+0x18>)
 8005362:	68db      	ldr	r3, [r3, #12]
 8005364:	0a1b      	lsrs	r3, r3, #8
 8005366:	f003 0307 	and.w	r3, r3, #7
}
 800536a:	4618      	mov	r0, r3
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr
 8005374:	e000ed00 	.word	0xe000ed00

08005378 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005378:	b480      	push	{r7}
 800537a:	b083      	sub	sp, #12
 800537c:	af00      	add	r7, sp, #0
 800537e:	4603      	mov	r3, r0
 8005380:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005386:	2b00      	cmp	r3, #0
 8005388:	db0b      	blt.n	80053a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800538a:	79fb      	ldrb	r3, [r7, #7]
 800538c:	f003 021f 	and.w	r2, r3, #31
 8005390:	4907      	ldr	r1, [pc, #28]	@ (80053b0 <__NVIC_EnableIRQ+0x38>)
 8005392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005396:	095b      	lsrs	r3, r3, #5
 8005398:	2001      	movs	r0, #1
 800539a:	fa00 f202 	lsl.w	r2, r0, r2
 800539e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80053a2:	bf00      	nop
 80053a4:	370c      	adds	r7, #12
 80053a6:	46bd      	mov	sp, r7
 80053a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ac:	4770      	bx	lr
 80053ae:	bf00      	nop
 80053b0:	e000e100 	.word	0xe000e100

080053b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b083      	sub	sp, #12
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	4603      	mov	r3, r0
 80053bc:	6039      	str	r1, [r7, #0]
 80053be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80053c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	db0a      	blt.n	80053de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	b2da      	uxtb	r2, r3
 80053cc:	490c      	ldr	r1, [pc, #48]	@ (8005400 <__NVIC_SetPriority+0x4c>)
 80053ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053d2:	0112      	lsls	r2, r2, #4
 80053d4:	b2d2      	uxtb	r2, r2
 80053d6:	440b      	add	r3, r1
 80053d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80053dc:	e00a      	b.n	80053f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	b2da      	uxtb	r2, r3
 80053e2:	4908      	ldr	r1, [pc, #32]	@ (8005404 <__NVIC_SetPriority+0x50>)
 80053e4:	79fb      	ldrb	r3, [r7, #7]
 80053e6:	f003 030f 	and.w	r3, r3, #15
 80053ea:	3b04      	subs	r3, #4
 80053ec:	0112      	lsls	r2, r2, #4
 80053ee:	b2d2      	uxtb	r2, r2
 80053f0:	440b      	add	r3, r1
 80053f2:	761a      	strb	r2, [r3, #24]
}
 80053f4:	bf00      	nop
 80053f6:	370c      	adds	r7, #12
 80053f8:	46bd      	mov	sp, r7
 80053fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fe:	4770      	bx	lr
 8005400:	e000e100 	.word	0xe000e100
 8005404:	e000ed00 	.word	0xe000ed00

08005408 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005408:	b480      	push	{r7}
 800540a:	b089      	sub	sp, #36	@ 0x24
 800540c:	af00      	add	r7, sp, #0
 800540e:	60f8      	str	r0, [r7, #12]
 8005410:	60b9      	str	r1, [r7, #8]
 8005412:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f003 0307 	and.w	r3, r3, #7
 800541a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800541c:	69fb      	ldr	r3, [r7, #28]
 800541e:	f1c3 0307 	rsb	r3, r3, #7
 8005422:	2b04      	cmp	r3, #4
 8005424:	bf28      	it	cs
 8005426:	2304      	movcs	r3, #4
 8005428:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800542a:	69fb      	ldr	r3, [r7, #28]
 800542c:	3304      	adds	r3, #4
 800542e:	2b06      	cmp	r3, #6
 8005430:	d902      	bls.n	8005438 <NVIC_EncodePriority+0x30>
 8005432:	69fb      	ldr	r3, [r7, #28]
 8005434:	3b03      	subs	r3, #3
 8005436:	e000      	b.n	800543a <NVIC_EncodePriority+0x32>
 8005438:	2300      	movs	r3, #0
 800543a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800543c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005440:	69bb      	ldr	r3, [r7, #24]
 8005442:	fa02 f303 	lsl.w	r3, r2, r3
 8005446:	43da      	mvns	r2, r3
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	401a      	ands	r2, r3
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005450:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	fa01 f303 	lsl.w	r3, r1, r3
 800545a:	43d9      	mvns	r1, r3
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005460:	4313      	orrs	r3, r2
         );
}
 8005462:	4618      	mov	r0, r3
 8005464:	3724      	adds	r7, #36	@ 0x24
 8005466:	46bd      	mov	sp, r7
 8005468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546c:	4770      	bx	lr
	...

08005470 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b082      	sub	sp, #8
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	3b01      	subs	r3, #1
 800547c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005480:	d301      	bcc.n	8005486 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005482:	2301      	movs	r3, #1
 8005484:	e00f      	b.n	80054a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005486:	4a0a      	ldr	r2, [pc, #40]	@ (80054b0 <SysTick_Config+0x40>)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	3b01      	subs	r3, #1
 800548c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800548e:	210f      	movs	r1, #15
 8005490:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005494:	f7ff ff8e 	bl	80053b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005498:	4b05      	ldr	r3, [pc, #20]	@ (80054b0 <SysTick_Config+0x40>)
 800549a:	2200      	movs	r2, #0
 800549c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800549e:	4b04      	ldr	r3, [pc, #16]	@ (80054b0 <SysTick_Config+0x40>)
 80054a0:	2207      	movs	r2, #7
 80054a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80054a4:	2300      	movs	r3, #0
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3708      	adds	r7, #8
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}
 80054ae:	bf00      	nop
 80054b0:	e000e010 	.word	0xe000e010

080054b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b082      	sub	sp, #8
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	f7ff ff29 	bl	8005314 <__NVIC_SetPriorityGrouping>
}
 80054c2:	bf00      	nop
 80054c4:	3708      	adds	r7, #8
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}

080054ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80054ca:	b580      	push	{r7, lr}
 80054cc:	b086      	sub	sp, #24
 80054ce:	af00      	add	r7, sp, #0
 80054d0:	4603      	mov	r3, r0
 80054d2:	60b9      	str	r1, [r7, #8]
 80054d4:	607a      	str	r2, [r7, #4]
 80054d6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80054d8:	f7ff ff40 	bl	800535c <__NVIC_GetPriorityGrouping>
 80054dc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80054de:	687a      	ldr	r2, [r7, #4]
 80054e0:	68b9      	ldr	r1, [r7, #8]
 80054e2:	6978      	ldr	r0, [r7, #20]
 80054e4:	f7ff ff90 	bl	8005408 <NVIC_EncodePriority>
 80054e8:	4602      	mov	r2, r0
 80054ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054ee:	4611      	mov	r1, r2
 80054f0:	4618      	mov	r0, r3
 80054f2:	f7ff ff5f 	bl	80053b4 <__NVIC_SetPriority>
}
 80054f6:	bf00      	nop
 80054f8:	3718      	adds	r7, #24
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}

080054fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80054fe:	b580      	push	{r7, lr}
 8005500:	b082      	sub	sp, #8
 8005502:	af00      	add	r7, sp, #0
 8005504:	4603      	mov	r3, r0
 8005506:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005508:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800550c:	4618      	mov	r0, r3
 800550e:	f7ff ff33 	bl	8005378 <__NVIC_EnableIRQ>
}
 8005512:	bf00      	nop
 8005514:	3708      	adds	r7, #8
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}

0800551a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800551a:	b580      	push	{r7, lr}
 800551c:	b082      	sub	sp, #8
 800551e:	af00      	add	r7, sp, #0
 8005520:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f7ff ffa4 	bl	8005470 <SysTick_Config>
 8005528:	4603      	mov	r3, r0
}
 800552a:	4618      	mov	r0, r3
 800552c:	3708      	adds	r7, #8
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}
	...

08005534 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b084      	sub	sp, #16
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d101      	bne.n	8005546 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005542:	2301      	movs	r3, #1
 8005544:	e08d      	b.n	8005662 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	461a      	mov	r2, r3
 800554c:	4b47      	ldr	r3, [pc, #284]	@ (800566c <HAL_DMA_Init+0x138>)
 800554e:	429a      	cmp	r2, r3
 8005550:	d80f      	bhi.n	8005572 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	461a      	mov	r2, r3
 8005558:	4b45      	ldr	r3, [pc, #276]	@ (8005670 <HAL_DMA_Init+0x13c>)
 800555a:	4413      	add	r3, r2
 800555c:	4a45      	ldr	r2, [pc, #276]	@ (8005674 <HAL_DMA_Init+0x140>)
 800555e:	fba2 2303 	umull	r2, r3, r2, r3
 8005562:	091b      	lsrs	r3, r3, #4
 8005564:	009a      	lsls	r2, r3, #2
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	4a42      	ldr	r2, [pc, #264]	@ (8005678 <HAL_DMA_Init+0x144>)
 800556e:	641a      	str	r2, [r3, #64]	@ 0x40
 8005570:	e00e      	b.n	8005590 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	461a      	mov	r2, r3
 8005578:	4b40      	ldr	r3, [pc, #256]	@ (800567c <HAL_DMA_Init+0x148>)
 800557a:	4413      	add	r3, r2
 800557c:	4a3d      	ldr	r2, [pc, #244]	@ (8005674 <HAL_DMA_Init+0x140>)
 800557e:	fba2 2303 	umull	r2, r3, r2, r3
 8005582:	091b      	lsrs	r3, r3, #4
 8005584:	009a      	lsls	r2, r3, #2
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	4a3c      	ldr	r2, [pc, #240]	@ (8005680 <HAL_DMA_Init+0x14c>)
 800558e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2202      	movs	r2, #2
 8005594:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80055a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055aa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80055b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	691b      	ldr	r3, [r3, #16]
 80055ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80055c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	699b      	ldr	r3, [r3, #24]
 80055c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80055cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6a1b      	ldr	r3, [r3, #32]
 80055d2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80055d4:	68fa      	ldr	r2, [r7, #12]
 80055d6:	4313      	orrs	r3, r2
 80055d8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	68fa      	ldr	r2, [r7, #12]
 80055e0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f000 fa76 	bl	8005ad4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80055f0:	d102      	bne.n	80055f8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2200      	movs	r2, #0
 80055f6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	685a      	ldr	r2, [r3, #4]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005600:	b2d2      	uxtb	r2, r2
 8005602:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005608:	687a      	ldr	r2, [r7, #4]
 800560a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800560c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d010      	beq.n	8005638 <HAL_DMA_Init+0x104>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	2b04      	cmp	r3, #4
 800561c:	d80c      	bhi.n	8005638 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f000 fa96 	bl	8005b50 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005628:	2200      	movs	r2, #0
 800562a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005630:	687a      	ldr	r2, [r7, #4]
 8005632:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005634:	605a      	str	r2, [r3, #4]
 8005636:	e008      	b.n	800564a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2200      	movs	r2, #0
 800563c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2200      	movs	r2, #0
 8005642:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2200      	movs	r2, #0
 8005648:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2200      	movs	r2, #0
 800564e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2201      	movs	r2, #1
 8005654:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2200      	movs	r2, #0
 800565c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005660:	2300      	movs	r3, #0
}
 8005662:	4618      	mov	r0, r3
 8005664:	3710      	adds	r7, #16
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}
 800566a:	bf00      	nop
 800566c:	40020407 	.word	0x40020407
 8005670:	bffdfff8 	.word	0xbffdfff8
 8005674:	cccccccd 	.word	0xcccccccd
 8005678:	40020000 	.word	0x40020000
 800567c:	bffdfbf8 	.word	0xbffdfbf8
 8005680:	40020400 	.word	0x40020400

08005684 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b086      	sub	sp, #24
 8005688:	af00      	add	r7, sp, #0
 800568a:	60f8      	str	r0, [r7, #12]
 800568c:	60b9      	str	r1, [r7, #8]
 800568e:	607a      	str	r2, [r7, #4]
 8005690:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005692:	2300      	movs	r3, #0
 8005694:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800569c:	2b01      	cmp	r3, #1
 800569e:	d101      	bne.n	80056a4 <HAL_DMA_Start_IT+0x20>
 80056a0:	2302      	movs	r3, #2
 80056a2:	e066      	b.n	8005772 <HAL_DMA_Start_IT+0xee>
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2201      	movs	r2, #1
 80056a8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80056b2:	b2db      	uxtb	r3, r3
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	d155      	bne.n	8005764 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2202      	movs	r2, #2
 80056bc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2200      	movs	r2, #0
 80056c4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	681a      	ldr	r2, [r3, #0]
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f022 0201 	bic.w	r2, r2, #1
 80056d4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	687a      	ldr	r2, [r7, #4]
 80056da:	68b9      	ldr	r1, [r7, #8]
 80056dc:	68f8      	ldr	r0, [r7, #12]
 80056de:	f000 f9bb 	bl	8005a58 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d008      	beq.n	80056fc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	681a      	ldr	r2, [r3, #0]
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f042 020e 	orr.w	r2, r2, #14
 80056f8:	601a      	str	r2, [r3, #0]
 80056fa:	e00f      	b.n	800571c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	681a      	ldr	r2, [r3, #0]
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f022 0204 	bic.w	r2, r2, #4
 800570a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f042 020a 	orr.w	r2, r2, #10
 800571a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005726:	2b00      	cmp	r3, #0
 8005728:	d007      	beq.n	800573a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005734:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005738:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800573e:	2b00      	cmp	r3, #0
 8005740:	d007      	beq.n	8005752 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005746:	681a      	ldr	r2, [r3, #0]
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800574c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005750:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	681a      	ldr	r2, [r3, #0]
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f042 0201 	orr.w	r2, r2, #1
 8005760:	601a      	str	r2, [r3, #0]
 8005762:	e005      	b.n	8005770 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2200      	movs	r2, #0
 8005768:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800576c:	2302      	movs	r3, #2
 800576e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005770:	7dfb      	ldrb	r3, [r7, #23]
}
 8005772:	4618      	mov	r0, r3
 8005774:	3718      	adds	r7, #24
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}

0800577a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800577a:	b480      	push	{r7}
 800577c:	b085      	sub	sp, #20
 800577e:	af00      	add	r7, sp, #0
 8005780:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005782:	2300      	movs	r3, #0
 8005784:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800578c:	b2db      	uxtb	r3, r3
 800578e:	2b02      	cmp	r3, #2
 8005790:	d005      	beq.n	800579e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2204      	movs	r2, #4
 8005796:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8005798:	2301      	movs	r3, #1
 800579a:	73fb      	strb	r3, [r7, #15]
 800579c:	e037      	b.n	800580e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f022 020e 	bic.w	r2, r2, #14
 80057ac:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80057b2:	681a      	ldr	r2, [r3, #0]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80057b8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80057bc:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	681a      	ldr	r2, [r3, #0]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f022 0201 	bic.w	r2, r2, #1
 80057cc:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057d2:	f003 021f 	and.w	r2, r3, #31
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057da:	2101      	movs	r1, #1
 80057dc:	fa01 f202 	lsl.w	r2, r1, r2
 80057e0:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80057e6:	687a      	ldr	r2, [r7, #4]
 80057e8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80057ea:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d00c      	beq.n	800580e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057f8:	681a      	ldr	r2, [r3, #0]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057fe:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005802:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005808:	687a      	ldr	r2, [r7, #4]
 800580a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800580c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2201      	movs	r2, #1
 8005812:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2200      	movs	r2, #0
 800581a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800581e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005820:	4618      	mov	r0, r3
 8005822:	3714      	adds	r7, #20
 8005824:	46bd      	mov	sp, r7
 8005826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582a:	4770      	bx	lr

0800582c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b084      	sub	sp, #16
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005834:	2300      	movs	r3, #0
 8005836:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800583e:	b2db      	uxtb	r3, r3
 8005840:	2b02      	cmp	r3, #2
 8005842:	d00d      	beq.n	8005860 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2204      	movs	r2, #4
 8005848:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2201      	movs	r2, #1
 800584e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2200      	movs	r2, #0
 8005856:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	73fb      	strb	r3, [r7, #15]
 800585e:	e047      	b.n	80058f0 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	681a      	ldr	r2, [r3, #0]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f022 020e 	bic.w	r2, r2, #14
 800586e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	681a      	ldr	r2, [r3, #0]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f022 0201 	bic.w	r2, r2, #1
 800587e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005884:	681a      	ldr	r2, [r3, #0]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800588a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800588e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005894:	f003 021f 	and.w	r2, r3, #31
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800589c:	2101      	movs	r1, #1
 800589e:	fa01 f202 	lsl.w	r2, r1, r2
 80058a2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058a8:	687a      	ldr	r2, [r7, #4]
 80058aa:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80058ac:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d00c      	beq.n	80058d0 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058c0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80058c4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058ca:	687a      	ldr	r2, [r7, #4]
 80058cc:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80058ce:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2201      	movs	r2, #1
 80058d4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2200      	movs	r2, #0
 80058dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d003      	beq.n	80058f0 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	4798      	blx	r3
    }
  }
  return status;
 80058f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3710      	adds	r7, #16
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}

080058fa <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80058fa:	b580      	push	{r7, lr}
 80058fc:	b084      	sub	sp, #16
 80058fe:	af00      	add	r7, sp, #0
 8005900:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005916:	f003 031f 	and.w	r3, r3, #31
 800591a:	2204      	movs	r2, #4
 800591c:	409a      	lsls	r2, r3
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	4013      	ands	r3, r2
 8005922:	2b00      	cmp	r3, #0
 8005924:	d026      	beq.n	8005974 <HAL_DMA_IRQHandler+0x7a>
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	f003 0304 	and.w	r3, r3, #4
 800592c:	2b00      	cmp	r3, #0
 800592e:	d021      	beq.n	8005974 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f003 0320 	and.w	r3, r3, #32
 800593a:	2b00      	cmp	r3, #0
 800593c:	d107      	bne.n	800594e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f022 0204 	bic.w	r2, r2, #4
 800594c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005952:	f003 021f 	and.w	r2, r3, #31
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800595a:	2104      	movs	r1, #4
 800595c:	fa01 f202 	lsl.w	r2, r1, r2
 8005960:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005966:	2b00      	cmp	r3, #0
 8005968:	d071      	beq.n	8005a4e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005972:	e06c      	b.n	8005a4e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005978:	f003 031f 	and.w	r3, r3, #31
 800597c:	2202      	movs	r2, #2
 800597e:	409a      	lsls	r2, r3
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	4013      	ands	r3, r2
 8005984:	2b00      	cmp	r3, #0
 8005986:	d02e      	beq.n	80059e6 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	f003 0302 	and.w	r3, r3, #2
 800598e:	2b00      	cmp	r3, #0
 8005990:	d029      	beq.n	80059e6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f003 0320 	and.w	r3, r3, #32
 800599c:	2b00      	cmp	r3, #0
 800599e:	d10b      	bne.n	80059b8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	681a      	ldr	r2, [r3, #0]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f022 020a 	bic.w	r2, r2, #10
 80059ae:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2201      	movs	r2, #1
 80059b4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059bc:	f003 021f 	and.w	r2, r3, #31
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059c4:	2102      	movs	r1, #2
 80059c6:	fa01 f202 	lsl.w	r2, r1, r2
 80059ca:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2200      	movs	r2, #0
 80059d0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d038      	beq.n	8005a4e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80059e4:	e033      	b.n	8005a4e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059ea:	f003 031f 	and.w	r3, r3, #31
 80059ee:	2208      	movs	r2, #8
 80059f0:	409a      	lsls	r2, r3
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	4013      	ands	r3, r2
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d02a      	beq.n	8005a50 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	f003 0308 	and.w	r3, r3, #8
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d025      	beq.n	8005a50 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	681a      	ldr	r2, [r3, #0]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f022 020e 	bic.w	r2, r2, #14
 8005a12:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a18:	f003 021f 	and.w	r2, r3, #31
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a20:	2101      	movs	r1, #1
 8005a22:	fa01 f202 	lsl.w	r2, r1, r2
 8005a26:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2201      	movs	r2, #1
 8005a32:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d004      	beq.n	8005a50 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005a4e:	bf00      	nop
 8005a50:	bf00      	nop
}
 8005a52:	3710      	adds	r7, #16
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}

08005a58 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b085      	sub	sp, #20
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	60f8      	str	r0, [r7, #12]
 8005a60:	60b9      	str	r1, [r7, #8]
 8005a62:	607a      	str	r2, [r7, #4]
 8005a64:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a6a:	68fa      	ldr	r2, [r7, #12]
 8005a6c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005a6e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d004      	beq.n	8005a82 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a7c:	68fa      	ldr	r2, [r7, #12]
 8005a7e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005a80:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a86:	f003 021f 	and.w	r2, r3, #31
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a8e:	2101      	movs	r1, #1
 8005a90:	fa01 f202 	lsl.w	r2, r1, r2
 8005a94:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	683a      	ldr	r2, [r7, #0]
 8005a9c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	2b10      	cmp	r3, #16
 8005aa4:	d108      	bne.n	8005ab8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	687a      	ldr	r2, [r7, #4]
 8005aac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	68ba      	ldr	r2, [r7, #8]
 8005ab4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005ab6:	e007      	b.n	8005ac8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	68ba      	ldr	r2, [r7, #8]
 8005abe:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	687a      	ldr	r2, [r7, #4]
 8005ac6:	60da      	str	r2, [r3, #12]
}
 8005ac8:	bf00      	nop
 8005aca:	3714      	adds	r7, #20
 8005acc:	46bd      	mov	sp, r7
 8005ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad2:	4770      	bx	lr

08005ad4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b087      	sub	sp, #28
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	461a      	mov	r2, r3
 8005ae2:	4b16      	ldr	r3, [pc, #88]	@ (8005b3c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d802      	bhi.n	8005aee <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005ae8:	4b15      	ldr	r3, [pc, #84]	@ (8005b40 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005aea:	617b      	str	r3, [r7, #20]
 8005aec:	e001      	b.n	8005af2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8005aee:	4b15      	ldr	r3, [pc, #84]	@ (8005b44 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005af0:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	b2db      	uxtb	r3, r3
 8005afc:	3b08      	subs	r3, #8
 8005afe:	4a12      	ldr	r2, [pc, #72]	@ (8005b48 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005b00:	fba2 2303 	umull	r2, r3, r2, r3
 8005b04:	091b      	lsrs	r3, r3, #4
 8005b06:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b0c:	089b      	lsrs	r3, r3, #2
 8005b0e:	009a      	lsls	r2, r3, #2
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	4413      	add	r3, r2
 8005b14:	461a      	mov	r2, r3
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	4a0b      	ldr	r2, [pc, #44]	@ (8005b4c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005b1e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	f003 031f 	and.w	r3, r3, #31
 8005b26:	2201      	movs	r2, #1
 8005b28:	409a      	lsls	r2, r3
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005b2e:	bf00      	nop
 8005b30:	371c      	adds	r7, #28
 8005b32:	46bd      	mov	sp, r7
 8005b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b38:	4770      	bx	lr
 8005b3a:	bf00      	nop
 8005b3c:	40020407 	.word	0x40020407
 8005b40:	40020800 	.word	0x40020800
 8005b44:	40020820 	.word	0x40020820
 8005b48:	cccccccd 	.word	0xcccccccd
 8005b4c:	40020880 	.word	0x40020880

08005b50 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b085      	sub	sp, #20
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	b2db      	uxtb	r3, r3
 8005b5e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005b60:	68fa      	ldr	r2, [r7, #12]
 8005b62:	4b0b      	ldr	r3, [pc, #44]	@ (8005b90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005b64:	4413      	add	r3, r2
 8005b66:	009b      	lsls	r3, r3, #2
 8005b68:	461a      	mov	r2, r3
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	4a08      	ldr	r2, [pc, #32]	@ (8005b94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005b72:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	3b01      	subs	r3, #1
 8005b78:	f003 031f 	and.w	r3, r3, #31
 8005b7c:	2201      	movs	r2, #1
 8005b7e:	409a      	lsls	r2, r3
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8005b84:	bf00      	nop
 8005b86:	3714      	adds	r7, #20
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr
 8005b90:	1000823f 	.word	0x1000823f
 8005b94:	40020940 	.word	0x40020940

08005b98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b087      	sub	sp, #28
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
 8005ba0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005ba6:	e15a      	b.n	8005e5e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	681a      	ldr	r2, [r3, #0]
 8005bac:	2101      	movs	r1, #1
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	fa01 f303 	lsl.w	r3, r1, r3
 8005bb4:	4013      	ands	r3, r2
 8005bb6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	f000 814c 	beq.w	8005e58 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	f003 0303 	and.w	r3, r3, #3
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	d005      	beq.n	8005bd8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005bd4:	2b02      	cmp	r3, #2
 8005bd6:	d130      	bne.n	8005c3a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	689b      	ldr	r3, [r3, #8]
 8005bdc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	005b      	lsls	r3, r3, #1
 8005be2:	2203      	movs	r2, #3
 8005be4:	fa02 f303 	lsl.w	r3, r2, r3
 8005be8:	43db      	mvns	r3, r3
 8005bea:	693a      	ldr	r2, [r7, #16]
 8005bec:	4013      	ands	r3, r2
 8005bee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	68da      	ldr	r2, [r3, #12]
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	005b      	lsls	r3, r3, #1
 8005bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8005bfc:	693a      	ldr	r2, [r7, #16]
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	693a      	ldr	r2, [r7, #16]
 8005c06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005c0e:	2201      	movs	r2, #1
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	fa02 f303 	lsl.w	r3, r2, r3
 8005c16:	43db      	mvns	r3, r3
 8005c18:	693a      	ldr	r2, [r7, #16]
 8005c1a:	4013      	ands	r3, r2
 8005c1c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	091b      	lsrs	r3, r3, #4
 8005c24:	f003 0201 	and.w	r2, r3, #1
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c2e:	693a      	ldr	r2, [r7, #16]
 8005c30:	4313      	orrs	r3, r2
 8005c32:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	693a      	ldr	r2, [r7, #16]
 8005c38:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	f003 0303 	and.w	r3, r3, #3
 8005c42:	2b03      	cmp	r3, #3
 8005c44:	d017      	beq.n	8005c76 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	68db      	ldr	r3, [r3, #12]
 8005c4a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	005b      	lsls	r3, r3, #1
 8005c50:	2203      	movs	r2, #3
 8005c52:	fa02 f303 	lsl.w	r3, r2, r3
 8005c56:	43db      	mvns	r3, r3
 8005c58:	693a      	ldr	r2, [r7, #16]
 8005c5a:	4013      	ands	r3, r2
 8005c5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	689a      	ldr	r2, [r3, #8]
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	005b      	lsls	r3, r3, #1
 8005c66:	fa02 f303 	lsl.w	r3, r2, r3
 8005c6a:	693a      	ldr	r2, [r7, #16]
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	693a      	ldr	r2, [r7, #16]
 8005c74:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	f003 0303 	and.w	r3, r3, #3
 8005c7e:	2b02      	cmp	r3, #2
 8005c80:	d123      	bne.n	8005cca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	08da      	lsrs	r2, r3, #3
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	3208      	adds	r2, #8
 8005c8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c8e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	f003 0307 	and.w	r3, r3, #7
 8005c96:	009b      	lsls	r3, r3, #2
 8005c98:	220f      	movs	r2, #15
 8005c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c9e:	43db      	mvns	r3, r3
 8005ca0:	693a      	ldr	r2, [r7, #16]
 8005ca2:	4013      	ands	r3, r2
 8005ca4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	691a      	ldr	r2, [r3, #16]
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	f003 0307 	and.w	r3, r3, #7
 8005cb0:	009b      	lsls	r3, r3, #2
 8005cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8005cb6:	693a      	ldr	r2, [r7, #16]
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	08da      	lsrs	r2, r3, #3
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	3208      	adds	r2, #8
 8005cc4:	6939      	ldr	r1, [r7, #16]
 8005cc6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	005b      	lsls	r3, r3, #1
 8005cd4:	2203      	movs	r2, #3
 8005cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8005cda:	43db      	mvns	r3, r3
 8005cdc:	693a      	ldr	r2, [r7, #16]
 8005cde:	4013      	ands	r3, r2
 8005ce0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	f003 0203 	and.w	r2, r3, #3
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	005b      	lsls	r3, r3, #1
 8005cee:	fa02 f303 	lsl.w	r3, r2, r3
 8005cf2:	693a      	ldr	r2, [r7, #16]
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	693a      	ldr	r2, [r7, #16]
 8005cfc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	f000 80a6 	beq.w	8005e58 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d0c:	4b5b      	ldr	r3, [pc, #364]	@ (8005e7c <HAL_GPIO_Init+0x2e4>)
 8005d0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d10:	4a5a      	ldr	r2, [pc, #360]	@ (8005e7c <HAL_GPIO_Init+0x2e4>)
 8005d12:	f043 0301 	orr.w	r3, r3, #1
 8005d16:	6613      	str	r3, [r2, #96]	@ 0x60
 8005d18:	4b58      	ldr	r3, [pc, #352]	@ (8005e7c <HAL_GPIO_Init+0x2e4>)
 8005d1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d1c:	f003 0301 	and.w	r3, r3, #1
 8005d20:	60bb      	str	r3, [r7, #8]
 8005d22:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005d24:	4a56      	ldr	r2, [pc, #344]	@ (8005e80 <HAL_GPIO_Init+0x2e8>)
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	089b      	lsrs	r3, r3, #2
 8005d2a:	3302      	adds	r3, #2
 8005d2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d30:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	f003 0303 	and.w	r3, r3, #3
 8005d38:	009b      	lsls	r3, r3, #2
 8005d3a:	220f      	movs	r2, #15
 8005d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d40:	43db      	mvns	r3, r3
 8005d42:	693a      	ldr	r2, [r7, #16]
 8005d44:	4013      	ands	r3, r2
 8005d46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005d4e:	d01f      	beq.n	8005d90 <HAL_GPIO_Init+0x1f8>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	4a4c      	ldr	r2, [pc, #304]	@ (8005e84 <HAL_GPIO_Init+0x2ec>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d019      	beq.n	8005d8c <HAL_GPIO_Init+0x1f4>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	4a4b      	ldr	r2, [pc, #300]	@ (8005e88 <HAL_GPIO_Init+0x2f0>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d013      	beq.n	8005d88 <HAL_GPIO_Init+0x1f0>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	4a4a      	ldr	r2, [pc, #296]	@ (8005e8c <HAL_GPIO_Init+0x2f4>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d00d      	beq.n	8005d84 <HAL_GPIO_Init+0x1ec>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	4a49      	ldr	r2, [pc, #292]	@ (8005e90 <HAL_GPIO_Init+0x2f8>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d007      	beq.n	8005d80 <HAL_GPIO_Init+0x1e8>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	4a48      	ldr	r2, [pc, #288]	@ (8005e94 <HAL_GPIO_Init+0x2fc>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d101      	bne.n	8005d7c <HAL_GPIO_Init+0x1e4>
 8005d78:	2305      	movs	r3, #5
 8005d7a:	e00a      	b.n	8005d92 <HAL_GPIO_Init+0x1fa>
 8005d7c:	2306      	movs	r3, #6
 8005d7e:	e008      	b.n	8005d92 <HAL_GPIO_Init+0x1fa>
 8005d80:	2304      	movs	r3, #4
 8005d82:	e006      	b.n	8005d92 <HAL_GPIO_Init+0x1fa>
 8005d84:	2303      	movs	r3, #3
 8005d86:	e004      	b.n	8005d92 <HAL_GPIO_Init+0x1fa>
 8005d88:	2302      	movs	r3, #2
 8005d8a:	e002      	b.n	8005d92 <HAL_GPIO_Init+0x1fa>
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	e000      	b.n	8005d92 <HAL_GPIO_Init+0x1fa>
 8005d90:	2300      	movs	r3, #0
 8005d92:	697a      	ldr	r2, [r7, #20]
 8005d94:	f002 0203 	and.w	r2, r2, #3
 8005d98:	0092      	lsls	r2, r2, #2
 8005d9a:	4093      	lsls	r3, r2
 8005d9c:	693a      	ldr	r2, [r7, #16]
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005da2:	4937      	ldr	r1, [pc, #220]	@ (8005e80 <HAL_GPIO_Init+0x2e8>)
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	089b      	lsrs	r3, r3, #2
 8005da8:	3302      	adds	r3, #2
 8005daa:	693a      	ldr	r2, [r7, #16]
 8005dac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005db0:	4b39      	ldr	r3, [pc, #228]	@ (8005e98 <HAL_GPIO_Init+0x300>)
 8005db2:	689b      	ldr	r3, [r3, #8]
 8005db4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	43db      	mvns	r3, r3
 8005dba:	693a      	ldr	r2, [r7, #16]
 8005dbc:	4013      	ands	r3, r2
 8005dbe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d003      	beq.n	8005dd4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005dcc:	693a      	ldr	r2, [r7, #16]
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005dd4:	4a30      	ldr	r2, [pc, #192]	@ (8005e98 <HAL_GPIO_Init+0x300>)
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005dda:	4b2f      	ldr	r3, [pc, #188]	@ (8005e98 <HAL_GPIO_Init+0x300>)
 8005ddc:	68db      	ldr	r3, [r3, #12]
 8005dde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	43db      	mvns	r3, r3
 8005de4:	693a      	ldr	r2, [r7, #16]
 8005de6:	4013      	ands	r3, r2
 8005de8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d003      	beq.n	8005dfe <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005df6:	693a      	ldr	r2, [r7, #16]
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005dfe:	4a26      	ldr	r2, [pc, #152]	@ (8005e98 <HAL_GPIO_Init+0x300>)
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005e04:	4b24      	ldr	r3, [pc, #144]	@ (8005e98 <HAL_GPIO_Init+0x300>)
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	43db      	mvns	r3, r3
 8005e0e:	693a      	ldr	r2, [r7, #16]
 8005e10:	4013      	ands	r3, r2
 8005e12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d003      	beq.n	8005e28 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005e20:	693a      	ldr	r2, [r7, #16]
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	4313      	orrs	r3, r2
 8005e26:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005e28:	4a1b      	ldr	r2, [pc, #108]	@ (8005e98 <HAL_GPIO_Init+0x300>)
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005e2e:	4b1a      	ldr	r3, [pc, #104]	@ (8005e98 <HAL_GPIO_Init+0x300>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	43db      	mvns	r3, r3
 8005e38:	693a      	ldr	r2, [r7, #16]
 8005e3a:	4013      	ands	r3, r2
 8005e3c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d003      	beq.n	8005e52 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005e4a:	693a      	ldr	r2, [r7, #16]
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005e52:	4a11      	ldr	r2, [pc, #68]	@ (8005e98 <HAL_GPIO_Init+0x300>)
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	3301      	adds	r3, #1
 8005e5c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	681a      	ldr	r2, [r3, #0]
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	fa22 f303 	lsr.w	r3, r2, r3
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	f47f ae9d 	bne.w	8005ba8 <HAL_GPIO_Init+0x10>
  }
}
 8005e6e:	bf00      	nop
 8005e70:	bf00      	nop
 8005e72:	371c      	adds	r7, #28
 8005e74:	46bd      	mov	sp, r7
 8005e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7a:	4770      	bx	lr
 8005e7c:	40021000 	.word	0x40021000
 8005e80:	40010000 	.word	0x40010000
 8005e84:	48000400 	.word	0x48000400
 8005e88:	48000800 	.word	0x48000800
 8005e8c:	48000c00 	.word	0x48000c00
 8005e90:	48001000 	.word	0x48001000
 8005e94:	48001400 	.word	0x48001400
 8005e98:	40010400 	.word	0x40010400

08005e9c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b085      	sub	sp, #20
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
 8005ea4:	460b      	mov	r3, r1
 8005ea6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	691a      	ldr	r2, [r3, #16]
 8005eac:	887b      	ldrh	r3, [r7, #2]
 8005eae:	4013      	ands	r3, r2
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d002      	beq.n	8005eba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	73fb      	strb	r3, [r7, #15]
 8005eb8:	e001      	b.n	8005ebe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005ebe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	3714      	adds	r7, #20
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr

08005ecc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b083      	sub	sp, #12
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
 8005ed4:	460b      	mov	r3, r1
 8005ed6:	807b      	strh	r3, [r7, #2]
 8005ed8:	4613      	mov	r3, r2
 8005eda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005edc:	787b      	ldrb	r3, [r7, #1]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d003      	beq.n	8005eea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005ee2:	887a      	ldrh	r2, [r7, #2]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005ee8:	e002      	b.n	8005ef0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005eea:	887a      	ldrh	r2, [r7, #2]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005ef0:	bf00      	nop
 8005ef2:	370c      	adds	r7, #12
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efa:	4770      	bx	lr

08005efc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b082      	sub	sp, #8
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	4603      	mov	r3, r0
 8005f04:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005f06:	4b08      	ldr	r3, [pc, #32]	@ (8005f28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005f08:	695a      	ldr	r2, [r3, #20]
 8005f0a:	88fb      	ldrh	r3, [r7, #6]
 8005f0c:	4013      	ands	r3, r2
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d006      	beq.n	8005f20 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005f12:	4a05      	ldr	r2, [pc, #20]	@ (8005f28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005f14:	88fb      	ldrh	r3, [r7, #6]
 8005f16:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005f18:	88fb      	ldrh	r3, [r7, #6]
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f7fc fa16 	bl	800234c <HAL_GPIO_EXTI_Callback>
  }
}
 8005f20:	bf00      	nop
 8005f22:	3708      	adds	r7, #8
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}
 8005f28:	40010400 	.word	0x40010400

08005f2c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b085      	sub	sp, #20
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d141      	bne.n	8005fbe <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005f3a:	4b4b      	ldr	r3, [pc, #300]	@ (8006068 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005f42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f46:	d131      	bne.n	8005fac <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005f48:	4b47      	ldr	r3, [pc, #284]	@ (8006068 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f4e:	4a46      	ldr	r2, [pc, #280]	@ (8006068 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005f54:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005f58:	4b43      	ldr	r3, [pc, #268]	@ (8006068 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005f60:	4a41      	ldr	r2, [pc, #260]	@ (8006068 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f62:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005f66:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005f68:	4b40      	ldr	r3, [pc, #256]	@ (800606c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	2232      	movs	r2, #50	@ 0x32
 8005f6e:	fb02 f303 	mul.w	r3, r2, r3
 8005f72:	4a3f      	ldr	r2, [pc, #252]	@ (8006070 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005f74:	fba2 2303 	umull	r2, r3, r2, r3
 8005f78:	0c9b      	lsrs	r3, r3, #18
 8005f7a:	3301      	adds	r3, #1
 8005f7c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005f7e:	e002      	b.n	8005f86 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	3b01      	subs	r3, #1
 8005f84:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005f86:	4b38      	ldr	r3, [pc, #224]	@ (8006068 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f88:	695b      	ldr	r3, [r3, #20]
 8005f8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f92:	d102      	bne.n	8005f9a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d1f2      	bne.n	8005f80 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005f9a:	4b33      	ldr	r3, [pc, #204]	@ (8006068 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f9c:	695b      	ldr	r3, [r3, #20]
 8005f9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005fa2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005fa6:	d158      	bne.n	800605a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005fa8:	2303      	movs	r3, #3
 8005faa:	e057      	b.n	800605c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005fac:	4b2e      	ldr	r3, [pc, #184]	@ (8006068 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005fae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005fb2:	4a2d      	ldr	r2, [pc, #180]	@ (8006068 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005fb4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005fb8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005fbc:	e04d      	b.n	800605a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005fc4:	d141      	bne.n	800604a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005fc6:	4b28      	ldr	r3, [pc, #160]	@ (8006068 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005fce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005fd2:	d131      	bne.n	8006038 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005fd4:	4b24      	ldr	r3, [pc, #144]	@ (8006068 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005fd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005fda:	4a23      	ldr	r2, [pc, #140]	@ (8006068 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005fdc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005fe0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005fe4:	4b20      	ldr	r3, [pc, #128]	@ (8006068 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005fec:	4a1e      	ldr	r2, [pc, #120]	@ (8006068 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005fee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005ff2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005ff4:	4b1d      	ldr	r3, [pc, #116]	@ (800606c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	2232      	movs	r2, #50	@ 0x32
 8005ffa:	fb02 f303 	mul.w	r3, r2, r3
 8005ffe:	4a1c      	ldr	r2, [pc, #112]	@ (8006070 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006000:	fba2 2303 	umull	r2, r3, r2, r3
 8006004:	0c9b      	lsrs	r3, r3, #18
 8006006:	3301      	adds	r3, #1
 8006008:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800600a:	e002      	b.n	8006012 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	3b01      	subs	r3, #1
 8006010:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006012:	4b15      	ldr	r3, [pc, #84]	@ (8006068 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006014:	695b      	ldr	r3, [r3, #20]
 8006016:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800601a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800601e:	d102      	bne.n	8006026 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d1f2      	bne.n	800600c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006026:	4b10      	ldr	r3, [pc, #64]	@ (8006068 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006028:	695b      	ldr	r3, [r3, #20]
 800602a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800602e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006032:	d112      	bne.n	800605a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006034:	2303      	movs	r3, #3
 8006036:	e011      	b.n	800605c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006038:	4b0b      	ldr	r3, [pc, #44]	@ (8006068 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800603a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800603e:	4a0a      	ldr	r2, [pc, #40]	@ (8006068 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006040:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006044:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006048:	e007      	b.n	800605a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800604a:	4b07      	ldr	r3, [pc, #28]	@ (8006068 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006052:	4a05      	ldr	r2, [pc, #20]	@ (8006068 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006054:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006058:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800605a:	2300      	movs	r3, #0
}
 800605c:	4618      	mov	r0, r3
 800605e:	3714      	adds	r7, #20
 8006060:	46bd      	mov	sp, r7
 8006062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006066:	4770      	bx	lr
 8006068:	40007000 	.word	0x40007000
 800606c:	20000018 	.word	0x20000018
 8006070:	431bde83 	.word	0x431bde83

08006074 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8006074:	b480      	push	{r7}
 8006076:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006078:	4b05      	ldr	r3, [pc, #20]	@ (8006090 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800607a:	689b      	ldr	r3, [r3, #8]
 800607c:	4a04      	ldr	r2, [pc, #16]	@ (8006090 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800607e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006082:	6093      	str	r3, [r2, #8]
}
 8006084:	bf00      	nop
 8006086:	46bd      	mov	sp, r7
 8006088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608c:	4770      	bx	lr
 800608e:	bf00      	nop
 8006090:	40007000 	.word	0x40007000

08006094 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b088      	sub	sp, #32
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d101      	bne.n	80060a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80060a2:	2301      	movs	r3, #1
 80060a4:	e2fe      	b.n	80066a4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f003 0301 	and.w	r3, r3, #1
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d075      	beq.n	800619e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80060b2:	4b97      	ldr	r3, [pc, #604]	@ (8006310 <HAL_RCC_OscConfig+0x27c>)
 80060b4:	689b      	ldr	r3, [r3, #8]
 80060b6:	f003 030c 	and.w	r3, r3, #12
 80060ba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80060bc:	4b94      	ldr	r3, [pc, #592]	@ (8006310 <HAL_RCC_OscConfig+0x27c>)
 80060be:	68db      	ldr	r3, [r3, #12]
 80060c0:	f003 0303 	and.w	r3, r3, #3
 80060c4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80060c6:	69bb      	ldr	r3, [r7, #24]
 80060c8:	2b0c      	cmp	r3, #12
 80060ca:	d102      	bne.n	80060d2 <HAL_RCC_OscConfig+0x3e>
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	2b03      	cmp	r3, #3
 80060d0:	d002      	beq.n	80060d8 <HAL_RCC_OscConfig+0x44>
 80060d2:	69bb      	ldr	r3, [r7, #24]
 80060d4:	2b08      	cmp	r3, #8
 80060d6:	d10b      	bne.n	80060f0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060d8:	4b8d      	ldr	r3, [pc, #564]	@ (8006310 <HAL_RCC_OscConfig+0x27c>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d05b      	beq.n	800619c <HAL_RCC_OscConfig+0x108>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d157      	bne.n	800619c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80060ec:	2301      	movs	r3, #1
 80060ee:	e2d9      	b.n	80066a4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	685b      	ldr	r3, [r3, #4]
 80060f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060f8:	d106      	bne.n	8006108 <HAL_RCC_OscConfig+0x74>
 80060fa:	4b85      	ldr	r3, [pc, #532]	@ (8006310 <HAL_RCC_OscConfig+0x27c>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a84      	ldr	r2, [pc, #528]	@ (8006310 <HAL_RCC_OscConfig+0x27c>)
 8006100:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006104:	6013      	str	r3, [r2, #0]
 8006106:	e01d      	b.n	8006144 <HAL_RCC_OscConfig+0xb0>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006110:	d10c      	bne.n	800612c <HAL_RCC_OscConfig+0x98>
 8006112:	4b7f      	ldr	r3, [pc, #508]	@ (8006310 <HAL_RCC_OscConfig+0x27c>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a7e      	ldr	r2, [pc, #504]	@ (8006310 <HAL_RCC_OscConfig+0x27c>)
 8006118:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800611c:	6013      	str	r3, [r2, #0]
 800611e:	4b7c      	ldr	r3, [pc, #496]	@ (8006310 <HAL_RCC_OscConfig+0x27c>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a7b      	ldr	r2, [pc, #492]	@ (8006310 <HAL_RCC_OscConfig+0x27c>)
 8006124:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006128:	6013      	str	r3, [r2, #0]
 800612a:	e00b      	b.n	8006144 <HAL_RCC_OscConfig+0xb0>
 800612c:	4b78      	ldr	r3, [pc, #480]	@ (8006310 <HAL_RCC_OscConfig+0x27c>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a77      	ldr	r2, [pc, #476]	@ (8006310 <HAL_RCC_OscConfig+0x27c>)
 8006132:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006136:	6013      	str	r3, [r2, #0]
 8006138:	4b75      	ldr	r3, [pc, #468]	@ (8006310 <HAL_RCC_OscConfig+0x27c>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a74      	ldr	r2, [pc, #464]	@ (8006310 <HAL_RCC_OscConfig+0x27c>)
 800613e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006142:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d013      	beq.n	8006174 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800614c:	f7fd fd50 	bl	8003bf0 <HAL_GetTick>
 8006150:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006152:	e008      	b.n	8006166 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006154:	f7fd fd4c 	bl	8003bf0 <HAL_GetTick>
 8006158:	4602      	mov	r2, r0
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	1ad3      	subs	r3, r2, r3
 800615e:	2b64      	cmp	r3, #100	@ 0x64
 8006160:	d901      	bls.n	8006166 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006162:	2303      	movs	r3, #3
 8006164:	e29e      	b.n	80066a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006166:	4b6a      	ldr	r3, [pc, #424]	@ (8006310 <HAL_RCC_OscConfig+0x27c>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800616e:	2b00      	cmp	r3, #0
 8006170:	d0f0      	beq.n	8006154 <HAL_RCC_OscConfig+0xc0>
 8006172:	e014      	b.n	800619e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006174:	f7fd fd3c 	bl	8003bf0 <HAL_GetTick>
 8006178:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800617a:	e008      	b.n	800618e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800617c:	f7fd fd38 	bl	8003bf0 <HAL_GetTick>
 8006180:	4602      	mov	r2, r0
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	1ad3      	subs	r3, r2, r3
 8006186:	2b64      	cmp	r3, #100	@ 0x64
 8006188:	d901      	bls.n	800618e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800618a:	2303      	movs	r3, #3
 800618c:	e28a      	b.n	80066a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800618e:	4b60      	ldr	r3, [pc, #384]	@ (8006310 <HAL_RCC_OscConfig+0x27c>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006196:	2b00      	cmp	r3, #0
 8006198:	d1f0      	bne.n	800617c <HAL_RCC_OscConfig+0xe8>
 800619a:	e000      	b.n	800619e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800619c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f003 0302 	and.w	r3, r3, #2
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d075      	beq.n	8006296 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80061aa:	4b59      	ldr	r3, [pc, #356]	@ (8006310 <HAL_RCC_OscConfig+0x27c>)
 80061ac:	689b      	ldr	r3, [r3, #8]
 80061ae:	f003 030c 	and.w	r3, r3, #12
 80061b2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80061b4:	4b56      	ldr	r3, [pc, #344]	@ (8006310 <HAL_RCC_OscConfig+0x27c>)
 80061b6:	68db      	ldr	r3, [r3, #12]
 80061b8:	f003 0303 	and.w	r3, r3, #3
 80061bc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80061be:	69bb      	ldr	r3, [r7, #24]
 80061c0:	2b0c      	cmp	r3, #12
 80061c2:	d102      	bne.n	80061ca <HAL_RCC_OscConfig+0x136>
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	2b02      	cmp	r3, #2
 80061c8:	d002      	beq.n	80061d0 <HAL_RCC_OscConfig+0x13c>
 80061ca:	69bb      	ldr	r3, [r7, #24]
 80061cc:	2b04      	cmp	r3, #4
 80061ce:	d11f      	bne.n	8006210 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80061d0:	4b4f      	ldr	r3, [pc, #316]	@ (8006310 <HAL_RCC_OscConfig+0x27c>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d005      	beq.n	80061e8 <HAL_RCC_OscConfig+0x154>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	68db      	ldr	r3, [r3, #12]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d101      	bne.n	80061e8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80061e4:	2301      	movs	r3, #1
 80061e6:	e25d      	b.n	80066a4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061e8:	4b49      	ldr	r3, [pc, #292]	@ (8006310 <HAL_RCC_OscConfig+0x27c>)
 80061ea:	685b      	ldr	r3, [r3, #4]
 80061ec:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	691b      	ldr	r3, [r3, #16]
 80061f4:	061b      	lsls	r3, r3, #24
 80061f6:	4946      	ldr	r1, [pc, #280]	@ (8006310 <HAL_RCC_OscConfig+0x27c>)
 80061f8:	4313      	orrs	r3, r2
 80061fa:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80061fc:	4b45      	ldr	r3, [pc, #276]	@ (8006314 <HAL_RCC_OscConfig+0x280>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4618      	mov	r0, r3
 8006202:	f7fd fca9 	bl	8003b58 <HAL_InitTick>
 8006206:	4603      	mov	r3, r0
 8006208:	2b00      	cmp	r3, #0
 800620a:	d043      	beq.n	8006294 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800620c:	2301      	movs	r3, #1
 800620e:	e249      	b.n	80066a4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	68db      	ldr	r3, [r3, #12]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d023      	beq.n	8006260 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006218:	4b3d      	ldr	r3, [pc, #244]	@ (8006310 <HAL_RCC_OscConfig+0x27c>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a3c      	ldr	r2, [pc, #240]	@ (8006310 <HAL_RCC_OscConfig+0x27c>)
 800621e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006222:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006224:	f7fd fce4 	bl	8003bf0 <HAL_GetTick>
 8006228:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800622a:	e008      	b.n	800623e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800622c:	f7fd fce0 	bl	8003bf0 <HAL_GetTick>
 8006230:	4602      	mov	r2, r0
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	1ad3      	subs	r3, r2, r3
 8006236:	2b02      	cmp	r3, #2
 8006238:	d901      	bls.n	800623e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800623a:	2303      	movs	r3, #3
 800623c:	e232      	b.n	80066a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800623e:	4b34      	ldr	r3, [pc, #208]	@ (8006310 <HAL_RCC_OscConfig+0x27c>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006246:	2b00      	cmp	r3, #0
 8006248:	d0f0      	beq.n	800622c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800624a:	4b31      	ldr	r3, [pc, #196]	@ (8006310 <HAL_RCC_OscConfig+0x27c>)
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	691b      	ldr	r3, [r3, #16]
 8006256:	061b      	lsls	r3, r3, #24
 8006258:	492d      	ldr	r1, [pc, #180]	@ (8006310 <HAL_RCC_OscConfig+0x27c>)
 800625a:	4313      	orrs	r3, r2
 800625c:	604b      	str	r3, [r1, #4]
 800625e:	e01a      	b.n	8006296 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006260:	4b2b      	ldr	r3, [pc, #172]	@ (8006310 <HAL_RCC_OscConfig+0x27c>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a2a      	ldr	r2, [pc, #168]	@ (8006310 <HAL_RCC_OscConfig+0x27c>)
 8006266:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800626a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800626c:	f7fd fcc0 	bl	8003bf0 <HAL_GetTick>
 8006270:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006272:	e008      	b.n	8006286 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006274:	f7fd fcbc 	bl	8003bf0 <HAL_GetTick>
 8006278:	4602      	mov	r2, r0
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	1ad3      	subs	r3, r2, r3
 800627e:	2b02      	cmp	r3, #2
 8006280:	d901      	bls.n	8006286 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006282:	2303      	movs	r3, #3
 8006284:	e20e      	b.n	80066a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006286:	4b22      	ldr	r3, [pc, #136]	@ (8006310 <HAL_RCC_OscConfig+0x27c>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800628e:	2b00      	cmp	r3, #0
 8006290:	d1f0      	bne.n	8006274 <HAL_RCC_OscConfig+0x1e0>
 8006292:	e000      	b.n	8006296 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006294:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f003 0308 	and.w	r3, r3, #8
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d041      	beq.n	8006326 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	695b      	ldr	r3, [r3, #20]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d01c      	beq.n	80062e4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80062aa:	4b19      	ldr	r3, [pc, #100]	@ (8006310 <HAL_RCC_OscConfig+0x27c>)
 80062ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80062b0:	4a17      	ldr	r2, [pc, #92]	@ (8006310 <HAL_RCC_OscConfig+0x27c>)
 80062b2:	f043 0301 	orr.w	r3, r3, #1
 80062b6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062ba:	f7fd fc99 	bl	8003bf0 <HAL_GetTick>
 80062be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80062c0:	e008      	b.n	80062d4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80062c2:	f7fd fc95 	bl	8003bf0 <HAL_GetTick>
 80062c6:	4602      	mov	r2, r0
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	1ad3      	subs	r3, r2, r3
 80062cc:	2b02      	cmp	r3, #2
 80062ce:	d901      	bls.n	80062d4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80062d0:	2303      	movs	r3, #3
 80062d2:	e1e7      	b.n	80066a4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80062d4:	4b0e      	ldr	r3, [pc, #56]	@ (8006310 <HAL_RCC_OscConfig+0x27c>)
 80062d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80062da:	f003 0302 	and.w	r3, r3, #2
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d0ef      	beq.n	80062c2 <HAL_RCC_OscConfig+0x22e>
 80062e2:	e020      	b.n	8006326 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80062e4:	4b0a      	ldr	r3, [pc, #40]	@ (8006310 <HAL_RCC_OscConfig+0x27c>)
 80062e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80062ea:	4a09      	ldr	r2, [pc, #36]	@ (8006310 <HAL_RCC_OscConfig+0x27c>)
 80062ec:	f023 0301 	bic.w	r3, r3, #1
 80062f0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062f4:	f7fd fc7c 	bl	8003bf0 <HAL_GetTick>
 80062f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80062fa:	e00d      	b.n	8006318 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80062fc:	f7fd fc78 	bl	8003bf0 <HAL_GetTick>
 8006300:	4602      	mov	r2, r0
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	1ad3      	subs	r3, r2, r3
 8006306:	2b02      	cmp	r3, #2
 8006308:	d906      	bls.n	8006318 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800630a:	2303      	movs	r3, #3
 800630c:	e1ca      	b.n	80066a4 <HAL_RCC_OscConfig+0x610>
 800630e:	bf00      	nop
 8006310:	40021000 	.word	0x40021000
 8006314:	2000001c 	.word	0x2000001c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006318:	4b8c      	ldr	r3, [pc, #560]	@ (800654c <HAL_RCC_OscConfig+0x4b8>)
 800631a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800631e:	f003 0302 	and.w	r3, r3, #2
 8006322:	2b00      	cmp	r3, #0
 8006324:	d1ea      	bne.n	80062fc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f003 0304 	and.w	r3, r3, #4
 800632e:	2b00      	cmp	r3, #0
 8006330:	f000 80a6 	beq.w	8006480 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006334:	2300      	movs	r3, #0
 8006336:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006338:	4b84      	ldr	r3, [pc, #528]	@ (800654c <HAL_RCC_OscConfig+0x4b8>)
 800633a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800633c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006340:	2b00      	cmp	r3, #0
 8006342:	d101      	bne.n	8006348 <HAL_RCC_OscConfig+0x2b4>
 8006344:	2301      	movs	r3, #1
 8006346:	e000      	b.n	800634a <HAL_RCC_OscConfig+0x2b6>
 8006348:	2300      	movs	r3, #0
 800634a:	2b00      	cmp	r3, #0
 800634c:	d00d      	beq.n	800636a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800634e:	4b7f      	ldr	r3, [pc, #508]	@ (800654c <HAL_RCC_OscConfig+0x4b8>)
 8006350:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006352:	4a7e      	ldr	r2, [pc, #504]	@ (800654c <HAL_RCC_OscConfig+0x4b8>)
 8006354:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006358:	6593      	str	r3, [r2, #88]	@ 0x58
 800635a:	4b7c      	ldr	r3, [pc, #496]	@ (800654c <HAL_RCC_OscConfig+0x4b8>)
 800635c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800635e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006362:	60fb      	str	r3, [r7, #12]
 8006364:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006366:	2301      	movs	r3, #1
 8006368:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800636a:	4b79      	ldr	r3, [pc, #484]	@ (8006550 <HAL_RCC_OscConfig+0x4bc>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006372:	2b00      	cmp	r3, #0
 8006374:	d118      	bne.n	80063a8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006376:	4b76      	ldr	r3, [pc, #472]	@ (8006550 <HAL_RCC_OscConfig+0x4bc>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a75      	ldr	r2, [pc, #468]	@ (8006550 <HAL_RCC_OscConfig+0x4bc>)
 800637c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006380:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006382:	f7fd fc35 	bl	8003bf0 <HAL_GetTick>
 8006386:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006388:	e008      	b.n	800639c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800638a:	f7fd fc31 	bl	8003bf0 <HAL_GetTick>
 800638e:	4602      	mov	r2, r0
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	1ad3      	subs	r3, r2, r3
 8006394:	2b02      	cmp	r3, #2
 8006396:	d901      	bls.n	800639c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006398:	2303      	movs	r3, #3
 800639a:	e183      	b.n	80066a4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800639c:	4b6c      	ldr	r3, [pc, #432]	@ (8006550 <HAL_RCC_OscConfig+0x4bc>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d0f0      	beq.n	800638a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	689b      	ldr	r3, [r3, #8]
 80063ac:	2b01      	cmp	r3, #1
 80063ae:	d108      	bne.n	80063c2 <HAL_RCC_OscConfig+0x32e>
 80063b0:	4b66      	ldr	r3, [pc, #408]	@ (800654c <HAL_RCC_OscConfig+0x4b8>)
 80063b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063b6:	4a65      	ldr	r2, [pc, #404]	@ (800654c <HAL_RCC_OscConfig+0x4b8>)
 80063b8:	f043 0301 	orr.w	r3, r3, #1
 80063bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80063c0:	e024      	b.n	800640c <HAL_RCC_OscConfig+0x378>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	689b      	ldr	r3, [r3, #8]
 80063c6:	2b05      	cmp	r3, #5
 80063c8:	d110      	bne.n	80063ec <HAL_RCC_OscConfig+0x358>
 80063ca:	4b60      	ldr	r3, [pc, #384]	@ (800654c <HAL_RCC_OscConfig+0x4b8>)
 80063cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063d0:	4a5e      	ldr	r2, [pc, #376]	@ (800654c <HAL_RCC_OscConfig+0x4b8>)
 80063d2:	f043 0304 	orr.w	r3, r3, #4
 80063d6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80063da:	4b5c      	ldr	r3, [pc, #368]	@ (800654c <HAL_RCC_OscConfig+0x4b8>)
 80063dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063e0:	4a5a      	ldr	r2, [pc, #360]	@ (800654c <HAL_RCC_OscConfig+0x4b8>)
 80063e2:	f043 0301 	orr.w	r3, r3, #1
 80063e6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80063ea:	e00f      	b.n	800640c <HAL_RCC_OscConfig+0x378>
 80063ec:	4b57      	ldr	r3, [pc, #348]	@ (800654c <HAL_RCC_OscConfig+0x4b8>)
 80063ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063f2:	4a56      	ldr	r2, [pc, #344]	@ (800654c <HAL_RCC_OscConfig+0x4b8>)
 80063f4:	f023 0301 	bic.w	r3, r3, #1
 80063f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80063fc:	4b53      	ldr	r3, [pc, #332]	@ (800654c <HAL_RCC_OscConfig+0x4b8>)
 80063fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006402:	4a52      	ldr	r2, [pc, #328]	@ (800654c <HAL_RCC_OscConfig+0x4b8>)
 8006404:	f023 0304 	bic.w	r3, r3, #4
 8006408:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	689b      	ldr	r3, [r3, #8]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d016      	beq.n	8006442 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006414:	f7fd fbec 	bl	8003bf0 <HAL_GetTick>
 8006418:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800641a:	e00a      	b.n	8006432 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800641c:	f7fd fbe8 	bl	8003bf0 <HAL_GetTick>
 8006420:	4602      	mov	r2, r0
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	1ad3      	subs	r3, r2, r3
 8006426:	f241 3288 	movw	r2, #5000	@ 0x1388
 800642a:	4293      	cmp	r3, r2
 800642c:	d901      	bls.n	8006432 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800642e:	2303      	movs	r3, #3
 8006430:	e138      	b.n	80066a4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006432:	4b46      	ldr	r3, [pc, #280]	@ (800654c <HAL_RCC_OscConfig+0x4b8>)
 8006434:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006438:	f003 0302 	and.w	r3, r3, #2
 800643c:	2b00      	cmp	r3, #0
 800643e:	d0ed      	beq.n	800641c <HAL_RCC_OscConfig+0x388>
 8006440:	e015      	b.n	800646e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006442:	f7fd fbd5 	bl	8003bf0 <HAL_GetTick>
 8006446:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006448:	e00a      	b.n	8006460 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800644a:	f7fd fbd1 	bl	8003bf0 <HAL_GetTick>
 800644e:	4602      	mov	r2, r0
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	1ad3      	subs	r3, r2, r3
 8006454:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006458:	4293      	cmp	r3, r2
 800645a:	d901      	bls.n	8006460 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800645c:	2303      	movs	r3, #3
 800645e:	e121      	b.n	80066a4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006460:	4b3a      	ldr	r3, [pc, #232]	@ (800654c <HAL_RCC_OscConfig+0x4b8>)
 8006462:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006466:	f003 0302 	and.w	r3, r3, #2
 800646a:	2b00      	cmp	r3, #0
 800646c:	d1ed      	bne.n	800644a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800646e:	7ffb      	ldrb	r3, [r7, #31]
 8006470:	2b01      	cmp	r3, #1
 8006472:	d105      	bne.n	8006480 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006474:	4b35      	ldr	r3, [pc, #212]	@ (800654c <HAL_RCC_OscConfig+0x4b8>)
 8006476:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006478:	4a34      	ldr	r2, [pc, #208]	@ (800654c <HAL_RCC_OscConfig+0x4b8>)
 800647a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800647e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f003 0320 	and.w	r3, r3, #32
 8006488:	2b00      	cmp	r3, #0
 800648a:	d03c      	beq.n	8006506 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	699b      	ldr	r3, [r3, #24]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d01c      	beq.n	80064ce <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006494:	4b2d      	ldr	r3, [pc, #180]	@ (800654c <HAL_RCC_OscConfig+0x4b8>)
 8006496:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800649a:	4a2c      	ldr	r2, [pc, #176]	@ (800654c <HAL_RCC_OscConfig+0x4b8>)
 800649c:	f043 0301 	orr.w	r3, r3, #1
 80064a0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064a4:	f7fd fba4 	bl	8003bf0 <HAL_GetTick>
 80064a8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80064aa:	e008      	b.n	80064be <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80064ac:	f7fd fba0 	bl	8003bf0 <HAL_GetTick>
 80064b0:	4602      	mov	r2, r0
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	1ad3      	subs	r3, r2, r3
 80064b6:	2b02      	cmp	r3, #2
 80064b8:	d901      	bls.n	80064be <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80064ba:	2303      	movs	r3, #3
 80064bc:	e0f2      	b.n	80066a4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80064be:	4b23      	ldr	r3, [pc, #140]	@ (800654c <HAL_RCC_OscConfig+0x4b8>)
 80064c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80064c4:	f003 0302 	and.w	r3, r3, #2
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d0ef      	beq.n	80064ac <HAL_RCC_OscConfig+0x418>
 80064cc:	e01b      	b.n	8006506 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80064ce:	4b1f      	ldr	r3, [pc, #124]	@ (800654c <HAL_RCC_OscConfig+0x4b8>)
 80064d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80064d4:	4a1d      	ldr	r2, [pc, #116]	@ (800654c <HAL_RCC_OscConfig+0x4b8>)
 80064d6:	f023 0301 	bic.w	r3, r3, #1
 80064da:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064de:	f7fd fb87 	bl	8003bf0 <HAL_GetTick>
 80064e2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80064e4:	e008      	b.n	80064f8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80064e6:	f7fd fb83 	bl	8003bf0 <HAL_GetTick>
 80064ea:	4602      	mov	r2, r0
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	1ad3      	subs	r3, r2, r3
 80064f0:	2b02      	cmp	r3, #2
 80064f2:	d901      	bls.n	80064f8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80064f4:	2303      	movs	r3, #3
 80064f6:	e0d5      	b.n	80066a4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80064f8:	4b14      	ldr	r3, [pc, #80]	@ (800654c <HAL_RCC_OscConfig+0x4b8>)
 80064fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80064fe:	f003 0302 	and.w	r3, r3, #2
 8006502:	2b00      	cmp	r3, #0
 8006504:	d1ef      	bne.n	80064e6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	69db      	ldr	r3, [r3, #28]
 800650a:	2b00      	cmp	r3, #0
 800650c:	f000 80c9 	beq.w	80066a2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006510:	4b0e      	ldr	r3, [pc, #56]	@ (800654c <HAL_RCC_OscConfig+0x4b8>)
 8006512:	689b      	ldr	r3, [r3, #8]
 8006514:	f003 030c 	and.w	r3, r3, #12
 8006518:	2b0c      	cmp	r3, #12
 800651a:	f000 8083 	beq.w	8006624 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	69db      	ldr	r3, [r3, #28]
 8006522:	2b02      	cmp	r3, #2
 8006524:	d15e      	bne.n	80065e4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006526:	4b09      	ldr	r3, [pc, #36]	@ (800654c <HAL_RCC_OscConfig+0x4b8>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a08      	ldr	r2, [pc, #32]	@ (800654c <HAL_RCC_OscConfig+0x4b8>)
 800652c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006530:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006532:	f7fd fb5d 	bl	8003bf0 <HAL_GetTick>
 8006536:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006538:	e00c      	b.n	8006554 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800653a:	f7fd fb59 	bl	8003bf0 <HAL_GetTick>
 800653e:	4602      	mov	r2, r0
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	1ad3      	subs	r3, r2, r3
 8006544:	2b02      	cmp	r3, #2
 8006546:	d905      	bls.n	8006554 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006548:	2303      	movs	r3, #3
 800654a:	e0ab      	b.n	80066a4 <HAL_RCC_OscConfig+0x610>
 800654c:	40021000 	.word	0x40021000
 8006550:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006554:	4b55      	ldr	r3, [pc, #340]	@ (80066ac <HAL_RCC_OscConfig+0x618>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800655c:	2b00      	cmp	r3, #0
 800655e:	d1ec      	bne.n	800653a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006560:	4b52      	ldr	r3, [pc, #328]	@ (80066ac <HAL_RCC_OscConfig+0x618>)
 8006562:	68da      	ldr	r2, [r3, #12]
 8006564:	4b52      	ldr	r3, [pc, #328]	@ (80066b0 <HAL_RCC_OscConfig+0x61c>)
 8006566:	4013      	ands	r3, r2
 8006568:	687a      	ldr	r2, [r7, #4]
 800656a:	6a11      	ldr	r1, [r2, #32]
 800656c:	687a      	ldr	r2, [r7, #4]
 800656e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006570:	3a01      	subs	r2, #1
 8006572:	0112      	lsls	r2, r2, #4
 8006574:	4311      	orrs	r1, r2
 8006576:	687a      	ldr	r2, [r7, #4]
 8006578:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800657a:	0212      	lsls	r2, r2, #8
 800657c:	4311      	orrs	r1, r2
 800657e:	687a      	ldr	r2, [r7, #4]
 8006580:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006582:	0852      	lsrs	r2, r2, #1
 8006584:	3a01      	subs	r2, #1
 8006586:	0552      	lsls	r2, r2, #21
 8006588:	4311      	orrs	r1, r2
 800658a:	687a      	ldr	r2, [r7, #4]
 800658c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800658e:	0852      	lsrs	r2, r2, #1
 8006590:	3a01      	subs	r2, #1
 8006592:	0652      	lsls	r2, r2, #25
 8006594:	4311      	orrs	r1, r2
 8006596:	687a      	ldr	r2, [r7, #4]
 8006598:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800659a:	06d2      	lsls	r2, r2, #27
 800659c:	430a      	orrs	r2, r1
 800659e:	4943      	ldr	r1, [pc, #268]	@ (80066ac <HAL_RCC_OscConfig+0x618>)
 80065a0:	4313      	orrs	r3, r2
 80065a2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80065a4:	4b41      	ldr	r3, [pc, #260]	@ (80066ac <HAL_RCC_OscConfig+0x618>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a40      	ldr	r2, [pc, #256]	@ (80066ac <HAL_RCC_OscConfig+0x618>)
 80065aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80065ae:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80065b0:	4b3e      	ldr	r3, [pc, #248]	@ (80066ac <HAL_RCC_OscConfig+0x618>)
 80065b2:	68db      	ldr	r3, [r3, #12]
 80065b4:	4a3d      	ldr	r2, [pc, #244]	@ (80066ac <HAL_RCC_OscConfig+0x618>)
 80065b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80065ba:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065bc:	f7fd fb18 	bl	8003bf0 <HAL_GetTick>
 80065c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80065c2:	e008      	b.n	80065d6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065c4:	f7fd fb14 	bl	8003bf0 <HAL_GetTick>
 80065c8:	4602      	mov	r2, r0
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	1ad3      	subs	r3, r2, r3
 80065ce:	2b02      	cmp	r3, #2
 80065d0:	d901      	bls.n	80065d6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80065d2:	2303      	movs	r3, #3
 80065d4:	e066      	b.n	80066a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80065d6:	4b35      	ldr	r3, [pc, #212]	@ (80066ac <HAL_RCC_OscConfig+0x618>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d0f0      	beq.n	80065c4 <HAL_RCC_OscConfig+0x530>
 80065e2:	e05e      	b.n	80066a2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065e4:	4b31      	ldr	r3, [pc, #196]	@ (80066ac <HAL_RCC_OscConfig+0x618>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a30      	ldr	r2, [pc, #192]	@ (80066ac <HAL_RCC_OscConfig+0x618>)
 80065ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80065ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065f0:	f7fd fafe 	bl	8003bf0 <HAL_GetTick>
 80065f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80065f6:	e008      	b.n	800660a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065f8:	f7fd fafa 	bl	8003bf0 <HAL_GetTick>
 80065fc:	4602      	mov	r2, r0
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	1ad3      	subs	r3, r2, r3
 8006602:	2b02      	cmp	r3, #2
 8006604:	d901      	bls.n	800660a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8006606:	2303      	movs	r3, #3
 8006608:	e04c      	b.n	80066a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800660a:	4b28      	ldr	r3, [pc, #160]	@ (80066ac <HAL_RCC_OscConfig+0x618>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006612:	2b00      	cmp	r3, #0
 8006614:	d1f0      	bne.n	80065f8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006616:	4b25      	ldr	r3, [pc, #148]	@ (80066ac <HAL_RCC_OscConfig+0x618>)
 8006618:	68da      	ldr	r2, [r3, #12]
 800661a:	4924      	ldr	r1, [pc, #144]	@ (80066ac <HAL_RCC_OscConfig+0x618>)
 800661c:	4b25      	ldr	r3, [pc, #148]	@ (80066b4 <HAL_RCC_OscConfig+0x620>)
 800661e:	4013      	ands	r3, r2
 8006620:	60cb      	str	r3, [r1, #12]
 8006622:	e03e      	b.n	80066a2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	69db      	ldr	r3, [r3, #28]
 8006628:	2b01      	cmp	r3, #1
 800662a:	d101      	bne.n	8006630 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800662c:	2301      	movs	r3, #1
 800662e:	e039      	b.n	80066a4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006630:	4b1e      	ldr	r3, [pc, #120]	@ (80066ac <HAL_RCC_OscConfig+0x618>)
 8006632:	68db      	ldr	r3, [r3, #12]
 8006634:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	f003 0203 	and.w	r2, r3, #3
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6a1b      	ldr	r3, [r3, #32]
 8006640:	429a      	cmp	r2, r3
 8006642:	d12c      	bne.n	800669e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800664e:	3b01      	subs	r3, #1
 8006650:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006652:	429a      	cmp	r2, r3
 8006654:	d123      	bne.n	800669e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006660:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006662:	429a      	cmp	r2, r3
 8006664:	d11b      	bne.n	800669e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006670:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006672:	429a      	cmp	r2, r3
 8006674:	d113      	bne.n	800669e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006680:	085b      	lsrs	r3, r3, #1
 8006682:	3b01      	subs	r3, #1
 8006684:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006686:	429a      	cmp	r2, r3
 8006688:	d109      	bne.n	800669e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006694:	085b      	lsrs	r3, r3, #1
 8006696:	3b01      	subs	r3, #1
 8006698:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800669a:	429a      	cmp	r2, r3
 800669c:	d001      	beq.n	80066a2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800669e:	2301      	movs	r3, #1
 80066a0:	e000      	b.n	80066a4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80066a2:	2300      	movs	r3, #0
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	3720      	adds	r7, #32
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bd80      	pop	{r7, pc}
 80066ac:	40021000 	.word	0x40021000
 80066b0:	019f800c 	.word	0x019f800c
 80066b4:	feeefffc 	.word	0xfeeefffc

080066b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b086      	sub	sp, #24
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
 80066c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80066c2:	2300      	movs	r3, #0
 80066c4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d101      	bne.n	80066d0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80066cc:	2301      	movs	r3, #1
 80066ce:	e11e      	b.n	800690e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80066d0:	4b91      	ldr	r3, [pc, #580]	@ (8006918 <HAL_RCC_ClockConfig+0x260>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f003 030f 	and.w	r3, r3, #15
 80066d8:	683a      	ldr	r2, [r7, #0]
 80066da:	429a      	cmp	r2, r3
 80066dc:	d910      	bls.n	8006700 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066de:	4b8e      	ldr	r3, [pc, #568]	@ (8006918 <HAL_RCC_ClockConfig+0x260>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f023 020f 	bic.w	r2, r3, #15
 80066e6:	498c      	ldr	r1, [pc, #560]	@ (8006918 <HAL_RCC_ClockConfig+0x260>)
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	4313      	orrs	r3, r2
 80066ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80066ee:	4b8a      	ldr	r3, [pc, #552]	@ (8006918 <HAL_RCC_ClockConfig+0x260>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f003 030f 	and.w	r3, r3, #15
 80066f6:	683a      	ldr	r2, [r7, #0]
 80066f8:	429a      	cmp	r2, r3
 80066fa:	d001      	beq.n	8006700 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80066fc:	2301      	movs	r3, #1
 80066fe:	e106      	b.n	800690e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f003 0301 	and.w	r3, r3, #1
 8006708:	2b00      	cmp	r3, #0
 800670a:	d073      	beq.n	80067f4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	2b03      	cmp	r3, #3
 8006712:	d129      	bne.n	8006768 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006714:	4b81      	ldr	r3, [pc, #516]	@ (800691c <HAL_RCC_ClockConfig+0x264>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800671c:	2b00      	cmp	r3, #0
 800671e:	d101      	bne.n	8006724 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006720:	2301      	movs	r3, #1
 8006722:	e0f4      	b.n	800690e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006724:	f000 f99e 	bl	8006a64 <RCC_GetSysClockFreqFromPLLSource>
 8006728:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	4a7c      	ldr	r2, [pc, #496]	@ (8006920 <HAL_RCC_ClockConfig+0x268>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d93f      	bls.n	80067b2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006732:	4b7a      	ldr	r3, [pc, #488]	@ (800691c <HAL_RCC_ClockConfig+0x264>)
 8006734:	689b      	ldr	r3, [r3, #8]
 8006736:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800673a:	2b00      	cmp	r3, #0
 800673c:	d009      	beq.n	8006752 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006746:	2b00      	cmp	r3, #0
 8006748:	d033      	beq.n	80067b2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800674e:	2b00      	cmp	r3, #0
 8006750:	d12f      	bne.n	80067b2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006752:	4b72      	ldr	r3, [pc, #456]	@ (800691c <HAL_RCC_ClockConfig+0x264>)
 8006754:	689b      	ldr	r3, [r3, #8]
 8006756:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800675a:	4a70      	ldr	r2, [pc, #448]	@ (800691c <HAL_RCC_ClockConfig+0x264>)
 800675c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006760:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006762:	2380      	movs	r3, #128	@ 0x80
 8006764:	617b      	str	r3, [r7, #20]
 8006766:	e024      	b.n	80067b2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	2b02      	cmp	r3, #2
 800676e:	d107      	bne.n	8006780 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006770:	4b6a      	ldr	r3, [pc, #424]	@ (800691c <HAL_RCC_ClockConfig+0x264>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006778:	2b00      	cmp	r3, #0
 800677a:	d109      	bne.n	8006790 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800677c:	2301      	movs	r3, #1
 800677e:	e0c6      	b.n	800690e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006780:	4b66      	ldr	r3, [pc, #408]	@ (800691c <HAL_RCC_ClockConfig+0x264>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006788:	2b00      	cmp	r3, #0
 800678a:	d101      	bne.n	8006790 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800678c:	2301      	movs	r3, #1
 800678e:	e0be      	b.n	800690e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006790:	f000 f8ce 	bl	8006930 <HAL_RCC_GetSysClockFreq>
 8006794:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	4a61      	ldr	r2, [pc, #388]	@ (8006920 <HAL_RCC_ClockConfig+0x268>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d909      	bls.n	80067b2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800679e:	4b5f      	ldr	r3, [pc, #380]	@ (800691c <HAL_RCC_ClockConfig+0x264>)
 80067a0:	689b      	ldr	r3, [r3, #8]
 80067a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80067a6:	4a5d      	ldr	r2, [pc, #372]	@ (800691c <HAL_RCC_ClockConfig+0x264>)
 80067a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067ac:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80067ae:	2380      	movs	r3, #128	@ 0x80
 80067b0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80067b2:	4b5a      	ldr	r3, [pc, #360]	@ (800691c <HAL_RCC_ClockConfig+0x264>)
 80067b4:	689b      	ldr	r3, [r3, #8]
 80067b6:	f023 0203 	bic.w	r2, r3, #3
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	4957      	ldr	r1, [pc, #348]	@ (800691c <HAL_RCC_ClockConfig+0x264>)
 80067c0:	4313      	orrs	r3, r2
 80067c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80067c4:	f7fd fa14 	bl	8003bf0 <HAL_GetTick>
 80067c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067ca:	e00a      	b.n	80067e2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80067cc:	f7fd fa10 	bl	8003bf0 <HAL_GetTick>
 80067d0:	4602      	mov	r2, r0
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	1ad3      	subs	r3, r2, r3
 80067d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80067da:	4293      	cmp	r3, r2
 80067dc:	d901      	bls.n	80067e2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80067de:	2303      	movs	r3, #3
 80067e0:	e095      	b.n	800690e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067e2:	4b4e      	ldr	r3, [pc, #312]	@ (800691c <HAL_RCC_ClockConfig+0x264>)
 80067e4:	689b      	ldr	r3, [r3, #8]
 80067e6:	f003 020c 	and.w	r2, r3, #12
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	009b      	lsls	r3, r3, #2
 80067f0:	429a      	cmp	r2, r3
 80067f2:	d1eb      	bne.n	80067cc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f003 0302 	and.w	r3, r3, #2
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d023      	beq.n	8006848 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f003 0304 	and.w	r3, r3, #4
 8006808:	2b00      	cmp	r3, #0
 800680a:	d005      	beq.n	8006818 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800680c:	4b43      	ldr	r3, [pc, #268]	@ (800691c <HAL_RCC_ClockConfig+0x264>)
 800680e:	689b      	ldr	r3, [r3, #8]
 8006810:	4a42      	ldr	r2, [pc, #264]	@ (800691c <HAL_RCC_ClockConfig+0x264>)
 8006812:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006816:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f003 0308 	and.w	r3, r3, #8
 8006820:	2b00      	cmp	r3, #0
 8006822:	d007      	beq.n	8006834 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006824:	4b3d      	ldr	r3, [pc, #244]	@ (800691c <HAL_RCC_ClockConfig+0x264>)
 8006826:	689b      	ldr	r3, [r3, #8]
 8006828:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800682c:	4a3b      	ldr	r2, [pc, #236]	@ (800691c <HAL_RCC_ClockConfig+0x264>)
 800682e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006832:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006834:	4b39      	ldr	r3, [pc, #228]	@ (800691c <HAL_RCC_ClockConfig+0x264>)
 8006836:	689b      	ldr	r3, [r3, #8]
 8006838:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	689b      	ldr	r3, [r3, #8]
 8006840:	4936      	ldr	r1, [pc, #216]	@ (800691c <HAL_RCC_ClockConfig+0x264>)
 8006842:	4313      	orrs	r3, r2
 8006844:	608b      	str	r3, [r1, #8]
 8006846:	e008      	b.n	800685a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	2b80      	cmp	r3, #128	@ 0x80
 800684c:	d105      	bne.n	800685a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800684e:	4b33      	ldr	r3, [pc, #204]	@ (800691c <HAL_RCC_ClockConfig+0x264>)
 8006850:	689b      	ldr	r3, [r3, #8]
 8006852:	4a32      	ldr	r2, [pc, #200]	@ (800691c <HAL_RCC_ClockConfig+0x264>)
 8006854:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006858:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800685a:	4b2f      	ldr	r3, [pc, #188]	@ (8006918 <HAL_RCC_ClockConfig+0x260>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f003 030f 	and.w	r3, r3, #15
 8006862:	683a      	ldr	r2, [r7, #0]
 8006864:	429a      	cmp	r2, r3
 8006866:	d21d      	bcs.n	80068a4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006868:	4b2b      	ldr	r3, [pc, #172]	@ (8006918 <HAL_RCC_ClockConfig+0x260>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f023 020f 	bic.w	r2, r3, #15
 8006870:	4929      	ldr	r1, [pc, #164]	@ (8006918 <HAL_RCC_ClockConfig+0x260>)
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	4313      	orrs	r3, r2
 8006876:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006878:	f7fd f9ba 	bl	8003bf0 <HAL_GetTick>
 800687c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800687e:	e00a      	b.n	8006896 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006880:	f7fd f9b6 	bl	8003bf0 <HAL_GetTick>
 8006884:	4602      	mov	r2, r0
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	1ad3      	subs	r3, r2, r3
 800688a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800688e:	4293      	cmp	r3, r2
 8006890:	d901      	bls.n	8006896 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006892:	2303      	movs	r3, #3
 8006894:	e03b      	b.n	800690e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006896:	4b20      	ldr	r3, [pc, #128]	@ (8006918 <HAL_RCC_ClockConfig+0x260>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f003 030f 	and.w	r3, r3, #15
 800689e:	683a      	ldr	r2, [r7, #0]
 80068a0:	429a      	cmp	r2, r3
 80068a2:	d1ed      	bne.n	8006880 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f003 0304 	and.w	r3, r3, #4
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d008      	beq.n	80068c2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80068b0:	4b1a      	ldr	r3, [pc, #104]	@ (800691c <HAL_RCC_ClockConfig+0x264>)
 80068b2:	689b      	ldr	r3, [r3, #8]
 80068b4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	68db      	ldr	r3, [r3, #12]
 80068bc:	4917      	ldr	r1, [pc, #92]	@ (800691c <HAL_RCC_ClockConfig+0x264>)
 80068be:	4313      	orrs	r3, r2
 80068c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f003 0308 	and.w	r3, r3, #8
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d009      	beq.n	80068e2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80068ce:	4b13      	ldr	r3, [pc, #76]	@ (800691c <HAL_RCC_ClockConfig+0x264>)
 80068d0:	689b      	ldr	r3, [r3, #8]
 80068d2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	691b      	ldr	r3, [r3, #16]
 80068da:	00db      	lsls	r3, r3, #3
 80068dc:	490f      	ldr	r1, [pc, #60]	@ (800691c <HAL_RCC_ClockConfig+0x264>)
 80068de:	4313      	orrs	r3, r2
 80068e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80068e2:	f000 f825 	bl	8006930 <HAL_RCC_GetSysClockFreq>
 80068e6:	4602      	mov	r2, r0
 80068e8:	4b0c      	ldr	r3, [pc, #48]	@ (800691c <HAL_RCC_ClockConfig+0x264>)
 80068ea:	689b      	ldr	r3, [r3, #8]
 80068ec:	091b      	lsrs	r3, r3, #4
 80068ee:	f003 030f 	and.w	r3, r3, #15
 80068f2:	490c      	ldr	r1, [pc, #48]	@ (8006924 <HAL_RCC_ClockConfig+0x26c>)
 80068f4:	5ccb      	ldrb	r3, [r1, r3]
 80068f6:	f003 031f 	and.w	r3, r3, #31
 80068fa:	fa22 f303 	lsr.w	r3, r2, r3
 80068fe:	4a0a      	ldr	r2, [pc, #40]	@ (8006928 <HAL_RCC_ClockConfig+0x270>)
 8006900:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006902:	4b0a      	ldr	r3, [pc, #40]	@ (800692c <HAL_RCC_ClockConfig+0x274>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4618      	mov	r0, r3
 8006908:	f7fd f926 	bl	8003b58 <HAL_InitTick>
 800690c:	4603      	mov	r3, r0
}
 800690e:	4618      	mov	r0, r3
 8006910:	3718      	adds	r7, #24
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}
 8006916:	bf00      	nop
 8006918:	40022000 	.word	0x40022000
 800691c:	40021000 	.word	0x40021000
 8006920:	04c4b400 	.word	0x04c4b400
 8006924:	0800af64 	.word	0x0800af64
 8006928:	20000018 	.word	0x20000018
 800692c:	2000001c 	.word	0x2000001c

08006930 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006930:	b480      	push	{r7}
 8006932:	b087      	sub	sp, #28
 8006934:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006936:	4b2c      	ldr	r3, [pc, #176]	@ (80069e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006938:	689b      	ldr	r3, [r3, #8]
 800693a:	f003 030c 	and.w	r3, r3, #12
 800693e:	2b04      	cmp	r3, #4
 8006940:	d102      	bne.n	8006948 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006942:	4b2a      	ldr	r3, [pc, #168]	@ (80069ec <HAL_RCC_GetSysClockFreq+0xbc>)
 8006944:	613b      	str	r3, [r7, #16]
 8006946:	e047      	b.n	80069d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006948:	4b27      	ldr	r3, [pc, #156]	@ (80069e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800694a:	689b      	ldr	r3, [r3, #8]
 800694c:	f003 030c 	and.w	r3, r3, #12
 8006950:	2b08      	cmp	r3, #8
 8006952:	d102      	bne.n	800695a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006954:	4b26      	ldr	r3, [pc, #152]	@ (80069f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006956:	613b      	str	r3, [r7, #16]
 8006958:	e03e      	b.n	80069d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800695a:	4b23      	ldr	r3, [pc, #140]	@ (80069e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800695c:	689b      	ldr	r3, [r3, #8]
 800695e:	f003 030c 	and.w	r3, r3, #12
 8006962:	2b0c      	cmp	r3, #12
 8006964:	d136      	bne.n	80069d4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006966:	4b20      	ldr	r3, [pc, #128]	@ (80069e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006968:	68db      	ldr	r3, [r3, #12]
 800696a:	f003 0303 	and.w	r3, r3, #3
 800696e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006970:	4b1d      	ldr	r3, [pc, #116]	@ (80069e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006972:	68db      	ldr	r3, [r3, #12]
 8006974:	091b      	lsrs	r3, r3, #4
 8006976:	f003 030f 	and.w	r3, r3, #15
 800697a:	3301      	adds	r3, #1
 800697c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2b03      	cmp	r3, #3
 8006982:	d10c      	bne.n	800699e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006984:	4a1a      	ldr	r2, [pc, #104]	@ (80069f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	fbb2 f3f3 	udiv	r3, r2, r3
 800698c:	4a16      	ldr	r2, [pc, #88]	@ (80069e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800698e:	68d2      	ldr	r2, [r2, #12]
 8006990:	0a12      	lsrs	r2, r2, #8
 8006992:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006996:	fb02 f303 	mul.w	r3, r2, r3
 800699a:	617b      	str	r3, [r7, #20]
      break;
 800699c:	e00c      	b.n	80069b8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800699e:	4a13      	ldr	r2, [pc, #76]	@ (80069ec <HAL_RCC_GetSysClockFreq+0xbc>)
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80069a6:	4a10      	ldr	r2, [pc, #64]	@ (80069e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80069a8:	68d2      	ldr	r2, [r2, #12]
 80069aa:	0a12      	lsrs	r2, r2, #8
 80069ac:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80069b0:	fb02 f303 	mul.w	r3, r2, r3
 80069b4:	617b      	str	r3, [r7, #20]
      break;
 80069b6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80069b8:	4b0b      	ldr	r3, [pc, #44]	@ (80069e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80069ba:	68db      	ldr	r3, [r3, #12]
 80069bc:	0e5b      	lsrs	r3, r3, #25
 80069be:	f003 0303 	and.w	r3, r3, #3
 80069c2:	3301      	adds	r3, #1
 80069c4:	005b      	lsls	r3, r3, #1
 80069c6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80069c8:	697a      	ldr	r2, [r7, #20]
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80069d0:	613b      	str	r3, [r7, #16]
 80069d2:	e001      	b.n	80069d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80069d4:	2300      	movs	r3, #0
 80069d6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80069d8:	693b      	ldr	r3, [r7, #16]
}
 80069da:	4618      	mov	r0, r3
 80069dc:	371c      	adds	r7, #28
 80069de:	46bd      	mov	sp, r7
 80069e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e4:	4770      	bx	lr
 80069e6:	bf00      	nop
 80069e8:	40021000 	.word	0x40021000
 80069ec:	00f42400 	.word	0x00f42400
 80069f0:	016e3600 	.word	0x016e3600

080069f4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80069f4:	b480      	push	{r7}
 80069f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80069f8:	4b03      	ldr	r3, [pc, #12]	@ (8006a08 <HAL_RCC_GetHCLKFreq+0x14>)
 80069fa:	681b      	ldr	r3, [r3, #0]
}
 80069fc:	4618      	mov	r0, r3
 80069fe:	46bd      	mov	sp, r7
 8006a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a04:	4770      	bx	lr
 8006a06:	bf00      	nop
 8006a08:	20000018 	.word	0x20000018

08006a0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006a10:	f7ff fff0 	bl	80069f4 <HAL_RCC_GetHCLKFreq>
 8006a14:	4602      	mov	r2, r0
 8006a16:	4b06      	ldr	r3, [pc, #24]	@ (8006a30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006a18:	689b      	ldr	r3, [r3, #8]
 8006a1a:	0a1b      	lsrs	r3, r3, #8
 8006a1c:	f003 0307 	and.w	r3, r3, #7
 8006a20:	4904      	ldr	r1, [pc, #16]	@ (8006a34 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006a22:	5ccb      	ldrb	r3, [r1, r3]
 8006a24:	f003 031f 	and.w	r3, r3, #31
 8006a28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	bd80      	pop	{r7, pc}
 8006a30:	40021000 	.word	0x40021000
 8006a34:	0800af74 	.word	0x0800af74

08006a38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006a3c:	f7ff ffda 	bl	80069f4 <HAL_RCC_GetHCLKFreq>
 8006a40:	4602      	mov	r2, r0
 8006a42:	4b06      	ldr	r3, [pc, #24]	@ (8006a5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006a44:	689b      	ldr	r3, [r3, #8]
 8006a46:	0adb      	lsrs	r3, r3, #11
 8006a48:	f003 0307 	and.w	r3, r3, #7
 8006a4c:	4904      	ldr	r1, [pc, #16]	@ (8006a60 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006a4e:	5ccb      	ldrb	r3, [r1, r3]
 8006a50:	f003 031f 	and.w	r3, r3, #31
 8006a54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	bd80      	pop	{r7, pc}
 8006a5c:	40021000 	.word	0x40021000
 8006a60:	0800af74 	.word	0x0800af74

08006a64 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006a64:	b480      	push	{r7}
 8006a66:	b087      	sub	sp, #28
 8006a68:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006a6a:	4b1e      	ldr	r3, [pc, #120]	@ (8006ae4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006a6c:	68db      	ldr	r3, [r3, #12]
 8006a6e:	f003 0303 	and.w	r3, r3, #3
 8006a72:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006a74:	4b1b      	ldr	r3, [pc, #108]	@ (8006ae4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006a76:	68db      	ldr	r3, [r3, #12]
 8006a78:	091b      	lsrs	r3, r3, #4
 8006a7a:	f003 030f 	and.w	r3, r3, #15
 8006a7e:	3301      	adds	r3, #1
 8006a80:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	2b03      	cmp	r3, #3
 8006a86:	d10c      	bne.n	8006aa2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006a88:	4a17      	ldr	r2, [pc, #92]	@ (8006ae8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a90:	4a14      	ldr	r2, [pc, #80]	@ (8006ae4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006a92:	68d2      	ldr	r2, [r2, #12]
 8006a94:	0a12      	lsrs	r2, r2, #8
 8006a96:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006a9a:	fb02 f303 	mul.w	r3, r2, r3
 8006a9e:	617b      	str	r3, [r7, #20]
    break;
 8006aa0:	e00c      	b.n	8006abc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006aa2:	4a12      	ldr	r2, [pc, #72]	@ (8006aec <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006aaa:	4a0e      	ldr	r2, [pc, #56]	@ (8006ae4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006aac:	68d2      	ldr	r2, [r2, #12]
 8006aae:	0a12      	lsrs	r2, r2, #8
 8006ab0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006ab4:	fb02 f303 	mul.w	r3, r2, r3
 8006ab8:	617b      	str	r3, [r7, #20]
    break;
 8006aba:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006abc:	4b09      	ldr	r3, [pc, #36]	@ (8006ae4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006abe:	68db      	ldr	r3, [r3, #12]
 8006ac0:	0e5b      	lsrs	r3, r3, #25
 8006ac2:	f003 0303 	and.w	r3, r3, #3
 8006ac6:	3301      	adds	r3, #1
 8006ac8:	005b      	lsls	r3, r3, #1
 8006aca:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006acc:	697a      	ldr	r2, [r7, #20]
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ad4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006ad6:	687b      	ldr	r3, [r7, #4]
}
 8006ad8:	4618      	mov	r0, r3
 8006ada:	371c      	adds	r7, #28
 8006adc:	46bd      	mov	sp, r7
 8006ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae2:	4770      	bx	lr
 8006ae4:	40021000 	.word	0x40021000
 8006ae8:	016e3600 	.word	0x016e3600
 8006aec:	00f42400 	.word	0x00f42400

08006af0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b086      	sub	sp, #24
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006af8:	2300      	movs	r3, #0
 8006afa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006afc:	2300      	movs	r3, #0
 8006afe:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	f000 8098 	beq.w	8006c3e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006b12:	4b43      	ldr	r3, [pc, #268]	@ (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006b14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d10d      	bne.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b1e:	4b40      	ldr	r3, [pc, #256]	@ (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006b20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b22:	4a3f      	ldr	r2, [pc, #252]	@ (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006b24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b28:	6593      	str	r3, [r2, #88]	@ 0x58
 8006b2a:	4b3d      	ldr	r3, [pc, #244]	@ (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006b2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b32:	60bb      	str	r3, [r7, #8]
 8006b34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006b36:	2301      	movs	r3, #1
 8006b38:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006b3a:	4b3a      	ldr	r3, [pc, #232]	@ (8006c24 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4a39      	ldr	r2, [pc, #228]	@ (8006c24 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006b40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006b44:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006b46:	f7fd f853 	bl	8003bf0 <HAL_GetTick>
 8006b4a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006b4c:	e009      	b.n	8006b62 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b4e:	f7fd f84f 	bl	8003bf0 <HAL_GetTick>
 8006b52:	4602      	mov	r2, r0
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	1ad3      	subs	r3, r2, r3
 8006b58:	2b02      	cmp	r3, #2
 8006b5a:	d902      	bls.n	8006b62 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006b5c:	2303      	movs	r3, #3
 8006b5e:	74fb      	strb	r3, [r7, #19]
        break;
 8006b60:	e005      	b.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006b62:	4b30      	ldr	r3, [pc, #192]	@ (8006c24 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d0ef      	beq.n	8006b4e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006b6e:	7cfb      	ldrb	r3, [r7, #19]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d159      	bne.n	8006c28 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006b74:	4b2a      	ldr	r3, [pc, #168]	@ (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006b7e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d01e      	beq.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b8a:	697a      	ldr	r2, [r7, #20]
 8006b8c:	429a      	cmp	r2, r3
 8006b8e:	d019      	beq.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006b90:	4b23      	ldr	r3, [pc, #140]	@ (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b96:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006b9a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006b9c:	4b20      	ldr	r3, [pc, #128]	@ (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ba2:	4a1f      	ldr	r2, [pc, #124]	@ (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ba4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006ba8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006bac:	4b1c      	ldr	r3, [pc, #112]	@ (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006bae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006bb2:	4a1b      	ldr	r2, [pc, #108]	@ (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006bb4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006bb8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006bbc:	4a18      	ldr	r2, [pc, #96]	@ (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	f003 0301 	and.w	r3, r3, #1
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d016      	beq.n	8006bfc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bce:	f7fd f80f 	bl	8003bf0 <HAL_GetTick>
 8006bd2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006bd4:	e00b      	b.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006bd6:	f7fd f80b 	bl	8003bf0 <HAL_GetTick>
 8006bda:	4602      	mov	r2, r0
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	1ad3      	subs	r3, r2, r3
 8006be0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d902      	bls.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006be8:	2303      	movs	r3, #3
 8006bea:	74fb      	strb	r3, [r7, #19]
            break;
 8006bec:	e006      	b.n	8006bfc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006bee:	4b0c      	ldr	r3, [pc, #48]	@ (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006bf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006bf4:	f003 0302 	and.w	r3, r3, #2
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d0ec      	beq.n	8006bd6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006bfc:	7cfb      	ldrb	r3, [r7, #19]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d10b      	bne.n	8006c1a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006c02:	4b07      	ldr	r3, [pc, #28]	@ (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006c04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c08:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c10:	4903      	ldr	r1, [pc, #12]	@ (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006c12:	4313      	orrs	r3, r2
 8006c14:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006c18:	e008      	b.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006c1a:	7cfb      	ldrb	r3, [r7, #19]
 8006c1c:	74bb      	strb	r3, [r7, #18]
 8006c1e:	e005      	b.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006c20:	40021000 	.word	0x40021000
 8006c24:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c28:	7cfb      	ldrb	r3, [r7, #19]
 8006c2a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006c2c:	7c7b      	ldrb	r3, [r7, #17]
 8006c2e:	2b01      	cmp	r3, #1
 8006c30:	d105      	bne.n	8006c3e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c32:	4ba7      	ldr	r3, [pc, #668]	@ (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c36:	4aa6      	ldr	r2, [pc, #664]	@ (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c38:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006c3c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f003 0301 	and.w	r3, r3, #1
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d00a      	beq.n	8006c60 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006c4a:	4ba1      	ldr	r3, [pc, #644]	@ (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c50:	f023 0203 	bic.w	r2, r3, #3
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	685b      	ldr	r3, [r3, #4]
 8006c58:	499d      	ldr	r1, [pc, #628]	@ (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f003 0302 	and.w	r3, r3, #2
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d00a      	beq.n	8006c82 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006c6c:	4b98      	ldr	r3, [pc, #608]	@ (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c72:	f023 020c 	bic.w	r2, r3, #12
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	689b      	ldr	r3, [r3, #8]
 8006c7a:	4995      	ldr	r1, [pc, #596]	@ (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f003 0304 	and.w	r3, r3, #4
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d00a      	beq.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006c8e:	4b90      	ldr	r3, [pc, #576]	@ (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c94:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	68db      	ldr	r3, [r3, #12]
 8006c9c:	498c      	ldr	r1, [pc, #560]	@ (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f003 0308 	and.w	r3, r3, #8
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d00a      	beq.n	8006cc6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006cb0:	4b87      	ldr	r3, [pc, #540]	@ (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cb6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	691b      	ldr	r3, [r3, #16]
 8006cbe:	4984      	ldr	r1, [pc, #528]	@ (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f003 0310 	and.w	r3, r3, #16
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d00a      	beq.n	8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006cd2:	4b7f      	ldr	r3, [pc, #508]	@ (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006cd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cd8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	695b      	ldr	r3, [r3, #20]
 8006ce0:	497b      	ldr	r1, [pc, #492]	@ (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f003 0320 	and.w	r3, r3, #32
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d00a      	beq.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006cf4:	4b76      	ldr	r3, [pc, #472]	@ (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cfa:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	699b      	ldr	r3, [r3, #24]
 8006d02:	4973      	ldr	r1, [pc, #460]	@ (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d04:	4313      	orrs	r3, r2
 8006d06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d00a      	beq.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006d16:	4b6e      	ldr	r3, [pc, #440]	@ (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d1c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	69db      	ldr	r3, [r3, #28]
 8006d24:	496a      	ldr	r1, [pc, #424]	@ (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d26:	4313      	orrs	r3, r2
 8006d28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d00a      	beq.n	8006d4e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006d38:	4b65      	ldr	r3, [pc, #404]	@ (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d3e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6a1b      	ldr	r3, [r3, #32]
 8006d46:	4962      	ldr	r1, [pc, #392]	@ (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d00a      	beq.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006d5a:	4b5d      	ldr	r3, [pc, #372]	@ (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d60:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d68:	4959      	ldr	r1, [pc, #356]	@ (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d00a      	beq.n	8006d92 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006d7c:	4b54      	ldr	r3, [pc, #336]	@ (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006d82:	f023 0203 	bic.w	r2, r3, #3
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d8a:	4951      	ldr	r1, [pc, #324]	@ (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d8c:	4313      	orrs	r3, r2
 8006d8e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d00a      	beq.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006d9e:	4b4c      	ldr	r3, [pc, #304]	@ (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006da0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006da4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dac:	4948      	ldr	r1, [pc, #288]	@ (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006dae:	4313      	orrs	r3, r2
 8006db0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d015      	beq.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006dc0:	4b43      	ldr	r3, [pc, #268]	@ (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006dc6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dce:	4940      	ldr	r1, [pc, #256]	@ (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006dd0:	4313      	orrs	r3, r2
 8006dd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dda:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006dde:	d105      	bne.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006de0:	4b3b      	ldr	r3, [pc, #236]	@ (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006de2:	68db      	ldr	r3, [r3, #12]
 8006de4:	4a3a      	ldr	r2, [pc, #232]	@ (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006de6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006dea:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d015      	beq.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006df8:	4b35      	ldr	r3, [pc, #212]	@ (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006dfe:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e06:	4932      	ldr	r1, [pc, #200]	@ (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e08:	4313      	orrs	r3, r2
 8006e0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e12:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006e16:	d105      	bne.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006e18:	4b2d      	ldr	r3, [pc, #180]	@ (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e1a:	68db      	ldr	r3, [r3, #12]
 8006e1c:	4a2c      	ldr	r2, [pc, #176]	@ (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e1e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006e22:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d015      	beq.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006e30:	4b27      	ldr	r3, [pc, #156]	@ (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e36:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e3e:	4924      	ldr	r1, [pc, #144]	@ (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e40:	4313      	orrs	r3, r2
 8006e42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e4a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006e4e:	d105      	bne.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006e50:	4b1f      	ldr	r3, [pc, #124]	@ (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e52:	68db      	ldr	r3, [r3, #12]
 8006e54:	4a1e      	ldr	r2, [pc, #120]	@ (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e56:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006e5a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d015      	beq.n	8006e94 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006e68:	4b19      	ldr	r3, [pc, #100]	@ (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e6e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e76:	4916      	ldr	r1, [pc, #88]	@ (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e82:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006e86:	d105      	bne.n	8006e94 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006e88:	4b11      	ldr	r3, [pc, #68]	@ (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e8a:	68db      	ldr	r3, [r3, #12]
 8006e8c:	4a10      	ldr	r2, [pc, #64]	@ (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e8e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006e92:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d019      	beq.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006ea0:	4b0b      	ldr	r3, [pc, #44]	@ (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ea6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006eae:	4908      	ldr	r1, [pc, #32]	@ (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006eb0:	4313      	orrs	r3, r2
 8006eb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006eba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006ebe:	d109      	bne.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006ec0:	4b03      	ldr	r3, [pc, #12]	@ (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ec2:	68db      	ldr	r3, [r3, #12]
 8006ec4:	4a02      	ldr	r2, [pc, #8]	@ (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ec6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006eca:	60d3      	str	r3, [r2, #12]
 8006ecc:	e002      	b.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8006ece:	bf00      	nop
 8006ed0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d015      	beq.n	8006f0c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006ee0:	4b29      	ldr	r3, [pc, #164]	@ (8006f88 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ee6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006eee:	4926      	ldr	r1, [pc, #152]	@ (8006f88 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006ef0:	4313      	orrs	r3, r2
 8006ef2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006efa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006efe:	d105      	bne.n	8006f0c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006f00:	4b21      	ldr	r3, [pc, #132]	@ (8006f88 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006f02:	68db      	ldr	r3, [r3, #12]
 8006f04:	4a20      	ldr	r2, [pc, #128]	@ (8006f88 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006f06:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006f0a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d015      	beq.n	8006f44 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006f18:	4b1b      	ldr	r3, [pc, #108]	@ (8006f88 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f1e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f26:	4918      	ldr	r1, [pc, #96]	@ (8006f88 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006f28:	4313      	orrs	r3, r2
 8006f2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f36:	d105      	bne.n	8006f44 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006f38:	4b13      	ldr	r3, [pc, #76]	@ (8006f88 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006f3a:	68db      	ldr	r3, [r3, #12]
 8006f3c:	4a12      	ldr	r2, [pc, #72]	@ (8006f88 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006f3e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006f42:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d015      	beq.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006f50:	4b0d      	ldr	r3, [pc, #52]	@ (8006f88 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006f52:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006f56:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f5e:	490a      	ldr	r1, [pc, #40]	@ (8006f88 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006f60:	4313      	orrs	r3, r2
 8006f62:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f6a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006f6e:	d105      	bne.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006f70:	4b05      	ldr	r3, [pc, #20]	@ (8006f88 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006f72:	68db      	ldr	r3, [r3, #12]
 8006f74:	4a04      	ldr	r2, [pc, #16]	@ (8006f88 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006f76:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006f7a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006f7c:	7cbb      	ldrb	r3, [r7, #18]
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	3718      	adds	r7, #24
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}
 8006f86:	bf00      	nop
 8006f88:	40021000 	.word	0x40021000

08006f8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b082      	sub	sp, #8
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d101      	bne.n	8006f9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	e054      	b.n	8007048 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006fa4:	b2db      	uxtb	r3, r3
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d111      	bne.n	8006fce <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2200      	movs	r2, #0
 8006fae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f001 feec 	bl	8008d90 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d102      	bne.n	8006fc6 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	4a23      	ldr	r2, [pc, #140]	@ (8007050 <HAL_TIM_Base_Init+0xc4>)
 8006fc4:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2202      	movs	r2, #2
 8006fd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681a      	ldr	r2, [r3, #0]
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	3304      	adds	r3, #4
 8006fde:	4619      	mov	r1, r3
 8006fe0:	4610      	mov	r0, r2
 8006fe2:	f001 fa35 	bl	8008450 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2201      	movs	r2, #1
 8006fea:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2201      	movs	r2, #1
 8006ff2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2201      	movs	r2, #1
 8006ffa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2201      	movs	r2, #1
 8007002:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2201      	movs	r2, #1
 800700a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2201      	movs	r2, #1
 8007012:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2201      	movs	r2, #1
 800701a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2201      	movs	r2, #1
 8007022:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2201      	movs	r2, #1
 800702a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2201      	movs	r2, #1
 8007032:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2201      	movs	r2, #1
 800703a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2201      	movs	r2, #1
 8007042:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007046:	2300      	movs	r3, #0
}
 8007048:	4618      	mov	r0, r3
 800704a:	3708      	adds	r7, #8
 800704c:	46bd      	mov	sp, r7
 800704e:	bd80      	pop	{r7, pc}
 8007050:	080036a1 	.word	0x080036a1

08007054 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007054:	b480      	push	{r7}
 8007056:	b085      	sub	sp, #20
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007062:	b2db      	uxtb	r3, r3
 8007064:	2b01      	cmp	r3, #1
 8007066:	d001      	beq.n	800706c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007068:	2301      	movs	r3, #1
 800706a:	e04c      	b.n	8007106 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2202      	movs	r2, #2
 8007070:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4a26      	ldr	r2, [pc, #152]	@ (8007114 <HAL_TIM_Base_Start+0xc0>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d022      	beq.n	80070c4 <HAL_TIM_Base_Start+0x70>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007086:	d01d      	beq.n	80070c4 <HAL_TIM_Base_Start+0x70>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4a22      	ldr	r2, [pc, #136]	@ (8007118 <HAL_TIM_Base_Start+0xc4>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d018      	beq.n	80070c4 <HAL_TIM_Base_Start+0x70>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4a21      	ldr	r2, [pc, #132]	@ (800711c <HAL_TIM_Base_Start+0xc8>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d013      	beq.n	80070c4 <HAL_TIM_Base_Start+0x70>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4a1f      	ldr	r2, [pc, #124]	@ (8007120 <HAL_TIM_Base_Start+0xcc>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d00e      	beq.n	80070c4 <HAL_TIM_Base_Start+0x70>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	4a1e      	ldr	r2, [pc, #120]	@ (8007124 <HAL_TIM_Base_Start+0xd0>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d009      	beq.n	80070c4 <HAL_TIM_Base_Start+0x70>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4a1c      	ldr	r2, [pc, #112]	@ (8007128 <HAL_TIM_Base_Start+0xd4>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d004      	beq.n	80070c4 <HAL_TIM_Base_Start+0x70>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4a1b      	ldr	r2, [pc, #108]	@ (800712c <HAL_TIM_Base_Start+0xd8>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d115      	bne.n	80070f0 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	689a      	ldr	r2, [r3, #8]
 80070ca:	4b19      	ldr	r3, [pc, #100]	@ (8007130 <HAL_TIM_Base_Start+0xdc>)
 80070cc:	4013      	ands	r3, r2
 80070ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	2b06      	cmp	r3, #6
 80070d4:	d015      	beq.n	8007102 <HAL_TIM_Base_Start+0xae>
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80070dc:	d011      	beq.n	8007102 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	681a      	ldr	r2, [r3, #0]
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f042 0201 	orr.w	r2, r2, #1
 80070ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070ee:	e008      	b.n	8007102 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	681a      	ldr	r2, [r3, #0]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f042 0201 	orr.w	r2, r2, #1
 80070fe:	601a      	str	r2, [r3, #0]
 8007100:	e000      	b.n	8007104 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007102:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007104:	2300      	movs	r3, #0
}
 8007106:	4618      	mov	r0, r3
 8007108:	3714      	adds	r7, #20
 800710a:	46bd      	mov	sp, r7
 800710c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007110:	4770      	bx	lr
 8007112:	bf00      	nop
 8007114:	40012c00 	.word	0x40012c00
 8007118:	40000400 	.word	0x40000400
 800711c:	40000800 	.word	0x40000800
 8007120:	40000c00 	.word	0x40000c00
 8007124:	40013400 	.word	0x40013400
 8007128:	40014000 	.word	0x40014000
 800712c:	40015000 	.word	0x40015000
 8007130:	00010007 	.word	0x00010007

08007134 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007134:	b480      	push	{r7}
 8007136:	b085      	sub	sp, #20
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007142:	b2db      	uxtb	r3, r3
 8007144:	2b01      	cmp	r3, #1
 8007146:	d001      	beq.n	800714c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007148:	2301      	movs	r3, #1
 800714a:	e054      	b.n	80071f6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2202      	movs	r2, #2
 8007150:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	68da      	ldr	r2, [r3, #12]
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f042 0201 	orr.w	r2, r2, #1
 8007162:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a26      	ldr	r2, [pc, #152]	@ (8007204 <HAL_TIM_Base_Start_IT+0xd0>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d022      	beq.n	80071b4 <HAL_TIM_Base_Start_IT+0x80>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007176:	d01d      	beq.n	80071b4 <HAL_TIM_Base_Start_IT+0x80>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4a22      	ldr	r2, [pc, #136]	@ (8007208 <HAL_TIM_Base_Start_IT+0xd4>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d018      	beq.n	80071b4 <HAL_TIM_Base_Start_IT+0x80>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4a21      	ldr	r2, [pc, #132]	@ (800720c <HAL_TIM_Base_Start_IT+0xd8>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d013      	beq.n	80071b4 <HAL_TIM_Base_Start_IT+0x80>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4a1f      	ldr	r2, [pc, #124]	@ (8007210 <HAL_TIM_Base_Start_IT+0xdc>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d00e      	beq.n	80071b4 <HAL_TIM_Base_Start_IT+0x80>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4a1e      	ldr	r2, [pc, #120]	@ (8007214 <HAL_TIM_Base_Start_IT+0xe0>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d009      	beq.n	80071b4 <HAL_TIM_Base_Start_IT+0x80>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4a1c      	ldr	r2, [pc, #112]	@ (8007218 <HAL_TIM_Base_Start_IT+0xe4>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d004      	beq.n	80071b4 <HAL_TIM_Base_Start_IT+0x80>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4a1b      	ldr	r2, [pc, #108]	@ (800721c <HAL_TIM_Base_Start_IT+0xe8>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d115      	bne.n	80071e0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	689a      	ldr	r2, [r3, #8]
 80071ba:	4b19      	ldr	r3, [pc, #100]	@ (8007220 <HAL_TIM_Base_Start_IT+0xec>)
 80071bc:	4013      	ands	r3, r2
 80071be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	2b06      	cmp	r3, #6
 80071c4:	d015      	beq.n	80071f2 <HAL_TIM_Base_Start_IT+0xbe>
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80071cc:	d011      	beq.n	80071f2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	681a      	ldr	r2, [r3, #0]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f042 0201 	orr.w	r2, r2, #1
 80071dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071de:	e008      	b.n	80071f2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	681a      	ldr	r2, [r3, #0]
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f042 0201 	orr.w	r2, r2, #1
 80071ee:	601a      	str	r2, [r3, #0]
 80071f0:	e000      	b.n	80071f4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071f2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80071f4:	2300      	movs	r3, #0
}
 80071f6:	4618      	mov	r0, r3
 80071f8:	3714      	adds	r7, #20
 80071fa:	46bd      	mov	sp, r7
 80071fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007200:	4770      	bx	lr
 8007202:	bf00      	nop
 8007204:	40012c00 	.word	0x40012c00
 8007208:	40000400 	.word	0x40000400
 800720c:	40000800 	.word	0x40000800
 8007210:	40000c00 	.word	0x40000c00
 8007214:	40013400 	.word	0x40013400
 8007218:	40014000 	.word	0x40014000
 800721c:	40015000 	.word	0x40015000
 8007220:	00010007 	.word	0x00010007

08007224 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b082      	sub	sp, #8
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d101      	bne.n	8007236 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007232:	2301      	movs	r3, #1
 8007234:	e054      	b.n	80072e0 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800723c:	b2db      	uxtb	r3, r3
 800723e:	2b00      	cmp	r3, #0
 8007240:	d111      	bne.n	8007266 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2200      	movs	r2, #0
 8007246:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f001 fda0 	bl	8008d90 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007254:	2b00      	cmp	r3, #0
 8007256:	d102      	bne.n	800725e <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	4a23      	ldr	r2, [pc, #140]	@ (80072e8 <HAL_TIM_PWM_Init+0xc4>)
 800725c:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2202      	movs	r2, #2
 800726a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681a      	ldr	r2, [r3, #0]
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	3304      	adds	r3, #4
 8007276:	4619      	mov	r1, r3
 8007278:	4610      	mov	r0, r2
 800727a:	f001 f8e9 	bl	8008450 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2201      	movs	r2, #1
 8007282:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2201      	movs	r2, #1
 800728a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2201      	movs	r2, #1
 8007292:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2201      	movs	r2, #1
 800729a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2201      	movs	r2, #1
 80072a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2201      	movs	r2, #1
 80072aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2201      	movs	r2, #1
 80072b2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2201      	movs	r2, #1
 80072ba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2201      	movs	r2, #1
 80072c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2201      	movs	r2, #1
 80072ca:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2201      	movs	r2, #1
 80072d2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2201      	movs	r2, #1
 80072da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80072de:	2300      	movs	r3, #0
}
 80072e0:	4618      	mov	r0, r3
 80072e2:	3708      	adds	r7, #8
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bd80      	pop	{r7, pc}
 80072e8:	080072ed 	.word	0x080072ed

080072ec <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80072ec:	b480      	push	{r7}
 80072ee:	b083      	sub	sp, #12
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80072f4:	bf00      	nop
 80072f6:	370c      	adds	r7, #12
 80072f8:	46bd      	mov	sp, r7
 80072fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fe:	4770      	bx	lr

08007300 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b084      	sub	sp, #16
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
 8007308:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d109      	bne.n	8007324 <HAL_TIM_PWM_Start+0x24>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007316:	b2db      	uxtb	r3, r3
 8007318:	2b01      	cmp	r3, #1
 800731a:	bf14      	ite	ne
 800731c:	2301      	movne	r3, #1
 800731e:	2300      	moveq	r3, #0
 8007320:	b2db      	uxtb	r3, r3
 8007322:	e03c      	b.n	800739e <HAL_TIM_PWM_Start+0x9e>
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	2b04      	cmp	r3, #4
 8007328:	d109      	bne.n	800733e <HAL_TIM_PWM_Start+0x3e>
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007330:	b2db      	uxtb	r3, r3
 8007332:	2b01      	cmp	r3, #1
 8007334:	bf14      	ite	ne
 8007336:	2301      	movne	r3, #1
 8007338:	2300      	moveq	r3, #0
 800733a:	b2db      	uxtb	r3, r3
 800733c:	e02f      	b.n	800739e <HAL_TIM_PWM_Start+0x9e>
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	2b08      	cmp	r3, #8
 8007342:	d109      	bne.n	8007358 <HAL_TIM_PWM_Start+0x58>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800734a:	b2db      	uxtb	r3, r3
 800734c:	2b01      	cmp	r3, #1
 800734e:	bf14      	ite	ne
 8007350:	2301      	movne	r3, #1
 8007352:	2300      	moveq	r3, #0
 8007354:	b2db      	uxtb	r3, r3
 8007356:	e022      	b.n	800739e <HAL_TIM_PWM_Start+0x9e>
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	2b0c      	cmp	r3, #12
 800735c:	d109      	bne.n	8007372 <HAL_TIM_PWM_Start+0x72>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007364:	b2db      	uxtb	r3, r3
 8007366:	2b01      	cmp	r3, #1
 8007368:	bf14      	ite	ne
 800736a:	2301      	movne	r3, #1
 800736c:	2300      	moveq	r3, #0
 800736e:	b2db      	uxtb	r3, r3
 8007370:	e015      	b.n	800739e <HAL_TIM_PWM_Start+0x9e>
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	2b10      	cmp	r3, #16
 8007376:	d109      	bne.n	800738c <HAL_TIM_PWM_Start+0x8c>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800737e:	b2db      	uxtb	r3, r3
 8007380:	2b01      	cmp	r3, #1
 8007382:	bf14      	ite	ne
 8007384:	2301      	movne	r3, #1
 8007386:	2300      	moveq	r3, #0
 8007388:	b2db      	uxtb	r3, r3
 800738a:	e008      	b.n	800739e <HAL_TIM_PWM_Start+0x9e>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007392:	b2db      	uxtb	r3, r3
 8007394:	2b01      	cmp	r3, #1
 8007396:	bf14      	ite	ne
 8007398:	2301      	movne	r3, #1
 800739a:	2300      	moveq	r3, #0
 800739c:	b2db      	uxtb	r3, r3
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d001      	beq.n	80073a6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80073a2:	2301      	movs	r3, #1
 80073a4:	e0a6      	b.n	80074f4 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d104      	bne.n	80073b6 <HAL_TIM_PWM_Start+0xb6>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2202      	movs	r2, #2
 80073b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80073b4:	e023      	b.n	80073fe <HAL_TIM_PWM_Start+0xfe>
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	2b04      	cmp	r3, #4
 80073ba:	d104      	bne.n	80073c6 <HAL_TIM_PWM_Start+0xc6>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2202      	movs	r2, #2
 80073c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80073c4:	e01b      	b.n	80073fe <HAL_TIM_PWM_Start+0xfe>
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	2b08      	cmp	r3, #8
 80073ca:	d104      	bne.n	80073d6 <HAL_TIM_PWM_Start+0xd6>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2202      	movs	r2, #2
 80073d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80073d4:	e013      	b.n	80073fe <HAL_TIM_PWM_Start+0xfe>
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	2b0c      	cmp	r3, #12
 80073da:	d104      	bne.n	80073e6 <HAL_TIM_PWM_Start+0xe6>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2202      	movs	r2, #2
 80073e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80073e4:	e00b      	b.n	80073fe <HAL_TIM_PWM_Start+0xfe>
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	2b10      	cmp	r3, #16
 80073ea:	d104      	bne.n	80073f6 <HAL_TIM_PWM_Start+0xf6>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2202      	movs	r2, #2
 80073f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80073f4:	e003      	b.n	80073fe <HAL_TIM_PWM_Start+0xfe>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2202      	movs	r2, #2
 80073fa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	2201      	movs	r2, #1
 8007404:	6839      	ldr	r1, [r7, #0]
 8007406:	4618      	mov	r0, r3
 8007408:	f001 fc9c 	bl	8008d44 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4a3a      	ldr	r2, [pc, #232]	@ (80074fc <HAL_TIM_PWM_Start+0x1fc>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d018      	beq.n	8007448 <HAL_TIM_PWM_Start+0x148>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4a39      	ldr	r2, [pc, #228]	@ (8007500 <HAL_TIM_PWM_Start+0x200>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d013      	beq.n	8007448 <HAL_TIM_PWM_Start+0x148>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4a37      	ldr	r2, [pc, #220]	@ (8007504 <HAL_TIM_PWM_Start+0x204>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d00e      	beq.n	8007448 <HAL_TIM_PWM_Start+0x148>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	4a36      	ldr	r2, [pc, #216]	@ (8007508 <HAL_TIM_PWM_Start+0x208>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d009      	beq.n	8007448 <HAL_TIM_PWM_Start+0x148>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4a34      	ldr	r2, [pc, #208]	@ (800750c <HAL_TIM_PWM_Start+0x20c>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d004      	beq.n	8007448 <HAL_TIM_PWM_Start+0x148>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	4a33      	ldr	r2, [pc, #204]	@ (8007510 <HAL_TIM_PWM_Start+0x210>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d101      	bne.n	800744c <HAL_TIM_PWM_Start+0x14c>
 8007448:	2301      	movs	r3, #1
 800744a:	e000      	b.n	800744e <HAL_TIM_PWM_Start+0x14e>
 800744c:	2300      	movs	r3, #0
 800744e:	2b00      	cmp	r3, #0
 8007450:	d007      	beq.n	8007462 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007460:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4a25      	ldr	r2, [pc, #148]	@ (80074fc <HAL_TIM_PWM_Start+0x1fc>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d022      	beq.n	80074b2 <HAL_TIM_PWM_Start+0x1b2>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007474:	d01d      	beq.n	80074b2 <HAL_TIM_PWM_Start+0x1b2>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4a26      	ldr	r2, [pc, #152]	@ (8007514 <HAL_TIM_PWM_Start+0x214>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d018      	beq.n	80074b2 <HAL_TIM_PWM_Start+0x1b2>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4a24      	ldr	r2, [pc, #144]	@ (8007518 <HAL_TIM_PWM_Start+0x218>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d013      	beq.n	80074b2 <HAL_TIM_PWM_Start+0x1b2>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	4a23      	ldr	r2, [pc, #140]	@ (800751c <HAL_TIM_PWM_Start+0x21c>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d00e      	beq.n	80074b2 <HAL_TIM_PWM_Start+0x1b2>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	4a19      	ldr	r2, [pc, #100]	@ (8007500 <HAL_TIM_PWM_Start+0x200>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d009      	beq.n	80074b2 <HAL_TIM_PWM_Start+0x1b2>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	4a18      	ldr	r2, [pc, #96]	@ (8007504 <HAL_TIM_PWM_Start+0x204>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d004      	beq.n	80074b2 <HAL_TIM_PWM_Start+0x1b2>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	4a18      	ldr	r2, [pc, #96]	@ (8007510 <HAL_TIM_PWM_Start+0x210>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d115      	bne.n	80074de <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	689a      	ldr	r2, [r3, #8]
 80074b8:	4b19      	ldr	r3, [pc, #100]	@ (8007520 <HAL_TIM_PWM_Start+0x220>)
 80074ba:	4013      	ands	r3, r2
 80074bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	2b06      	cmp	r3, #6
 80074c2:	d015      	beq.n	80074f0 <HAL_TIM_PWM_Start+0x1f0>
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80074ca:	d011      	beq.n	80074f0 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	681a      	ldr	r2, [r3, #0]
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f042 0201 	orr.w	r2, r2, #1
 80074da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074dc:	e008      	b.n	80074f0 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	681a      	ldr	r2, [r3, #0]
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f042 0201 	orr.w	r2, r2, #1
 80074ec:	601a      	str	r2, [r3, #0]
 80074ee:	e000      	b.n	80074f2 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074f0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80074f2:	2300      	movs	r3, #0
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	3710      	adds	r7, #16
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}
 80074fc:	40012c00 	.word	0x40012c00
 8007500:	40013400 	.word	0x40013400
 8007504:	40014000 	.word	0x40014000
 8007508:	40014400 	.word	0x40014400
 800750c:	40014800 	.word	0x40014800
 8007510:	40015000 	.word	0x40015000
 8007514:	40000400 	.word	0x40000400
 8007518:	40000800 	.word	0x40000800
 800751c:	40000c00 	.word	0x40000c00
 8007520:	00010007 	.word	0x00010007

08007524 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b082      	sub	sp, #8
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
 800752c:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d101      	bne.n	8007538 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8007534:	2301      	movs	r3, #1
 8007536:	e04c      	b.n	80075d2 <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800753e:	b2db      	uxtb	r3, r3
 8007540:	2b00      	cmp	r3, #0
 8007542:	d111      	bne.n	8007568 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2200      	movs	r2, #0
 8007548:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	f001 fc1f 	bl	8008d90 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007556:	2b00      	cmp	r3, #0
 8007558:	d102      	bne.n	8007560 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	4a1f      	ldr	r2, [pc, #124]	@ (80075dc <HAL_TIM_OnePulse_Init+0xb8>)
 800755e:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2202      	movs	r2, #2
 800756c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681a      	ldr	r2, [r3, #0]
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	3304      	adds	r3, #4
 8007578:	4619      	mov	r1, r3
 800757a:	4610      	mov	r0, r2
 800757c:	f000 ff68 	bl	8008450 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	681a      	ldr	r2, [r3, #0]
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f022 0208 	bic.w	r2, r2, #8
 800758e:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	6819      	ldr	r1, [r3, #0]
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	683a      	ldr	r2, [r7, #0]
 800759c:	430a      	orrs	r2, r1
 800759e:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2201      	movs	r2, #1
 80075a4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2201      	movs	r2, #1
 80075ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2201      	movs	r2, #1
 80075b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2201      	movs	r2, #1
 80075bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2201      	movs	r2, #1
 80075c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2201      	movs	r2, #1
 80075cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80075d0:	2300      	movs	r3, #0
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	3708      	adds	r7, #8
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}
 80075da:	bf00      	nop
 80075dc:	080075e1 	.word	0x080075e1

080075e0 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80075e0:	b480      	push	{r7}
 80075e2:	b083      	sub	sp, #12
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 80075e8:	bf00      	nop
 80075ea:	370c      	adds	r7, #12
 80075ec:	46bd      	mov	sp, r7
 80075ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f2:	4770      	bx	lr

080075f4 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b084      	sub	sp, #16
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
 80075fc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007604:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800760c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007614:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800761c:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800761e:	7bfb      	ldrb	r3, [r7, #15]
 8007620:	2b01      	cmp	r3, #1
 8007622:	d108      	bne.n	8007636 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007624:	7bbb      	ldrb	r3, [r7, #14]
 8007626:	2b01      	cmp	r3, #1
 8007628:	d105      	bne.n	8007636 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800762a:	7b7b      	ldrb	r3, [r7, #13]
 800762c:	2b01      	cmp	r3, #1
 800762e:	d102      	bne.n	8007636 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007630:	7b3b      	ldrb	r3, [r7, #12]
 8007632:	2b01      	cmp	r3, #1
 8007634:	d001      	beq.n	800763a <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8007636:	2301      	movs	r3, #1
 8007638:	e059      	b.n	80076ee <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2202      	movs	r2, #2
 800763e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2202      	movs	r2, #2
 8007646:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2202      	movs	r2, #2
 800764e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2202      	movs	r2, #2
 8007656:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	68da      	ldr	r2, [r3, #12]
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f042 0202 	orr.w	r2, r2, #2
 8007668:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	68da      	ldr	r2, [r3, #12]
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f042 0204 	orr.w	r2, r2, #4
 8007678:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	2201      	movs	r2, #1
 8007680:	2100      	movs	r1, #0
 8007682:	4618      	mov	r0, r3
 8007684:	f001 fb5e 	bl	8008d44 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	2201      	movs	r2, #1
 800768e:	2104      	movs	r1, #4
 8007690:	4618      	mov	r0, r3
 8007692:	f001 fb57 	bl	8008d44 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	4a17      	ldr	r2, [pc, #92]	@ (80076f8 <HAL_TIM_OnePulse_Start_IT+0x104>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d018      	beq.n	80076d2 <HAL_TIM_OnePulse_Start_IT+0xde>
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	4a15      	ldr	r2, [pc, #84]	@ (80076fc <HAL_TIM_OnePulse_Start_IT+0x108>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d013      	beq.n	80076d2 <HAL_TIM_OnePulse_Start_IT+0xde>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	4a14      	ldr	r2, [pc, #80]	@ (8007700 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d00e      	beq.n	80076d2 <HAL_TIM_OnePulse_Start_IT+0xde>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	4a12      	ldr	r2, [pc, #72]	@ (8007704 <HAL_TIM_OnePulse_Start_IT+0x110>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d009      	beq.n	80076d2 <HAL_TIM_OnePulse_Start_IT+0xde>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	4a11      	ldr	r2, [pc, #68]	@ (8007708 <HAL_TIM_OnePulse_Start_IT+0x114>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d004      	beq.n	80076d2 <HAL_TIM_OnePulse_Start_IT+0xde>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	4a0f      	ldr	r2, [pc, #60]	@ (800770c <HAL_TIM_OnePulse_Start_IT+0x118>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d101      	bne.n	80076d6 <HAL_TIM_OnePulse_Start_IT+0xe2>
 80076d2:	2301      	movs	r3, #1
 80076d4:	e000      	b.n	80076d8 <HAL_TIM_OnePulse_Start_IT+0xe4>
 80076d6:	2300      	movs	r3, #0
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d007      	beq.n	80076ec <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80076ea:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80076ec:	2300      	movs	r3, #0
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	3710      	adds	r7, #16
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}
 80076f6:	bf00      	nop
 80076f8:	40012c00 	.word	0x40012c00
 80076fc:	40013400 	.word	0x40013400
 8007700:	40014000 	.word	0x40014000
 8007704:	40014400 	.word	0x40014400
 8007708:	40014800 	.word	0x40014800
 800770c:	40015000 	.word	0x40015000

08007710 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b086      	sub	sp, #24
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
 8007718:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d101      	bne.n	8007724 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007720:	2301      	movs	r3, #1
 8007722:	e0a2      	b.n	800786a <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800772a:	b2db      	uxtb	r3, r3
 800772c:	2b00      	cmp	r3, #0
 800772e:	d111      	bne.n	8007754 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2200      	movs	r2, #0
 8007734:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007738:	6878      	ldr	r0, [r7, #4]
 800773a:	f001 fb29 	bl	8008d90 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007742:	2b00      	cmp	r3, #0
 8007744:	d102      	bne.n	800774c <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	4a4a      	ldr	r2, [pc, #296]	@ (8007874 <HAL_TIM_Encoder_Init+0x164>)
 800774a:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2202      	movs	r2, #2
 8007758:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	689b      	ldr	r3, [r3, #8]
 8007762:	687a      	ldr	r2, [r7, #4]
 8007764:	6812      	ldr	r2, [r2, #0]
 8007766:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800776a:	f023 0307 	bic.w	r3, r3, #7
 800776e:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681a      	ldr	r2, [r3, #0]
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	3304      	adds	r3, #4
 8007778:	4619      	mov	r1, r3
 800777a:	4610      	mov	r0, r2
 800777c:	f000 fe68 	bl	8008450 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	689b      	ldr	r3, [r3, #8]
 8007786:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	699b      	ldr	r3, [r3, #24]
 800778e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	6a1b      	ldr	r3, [r3, #32]
 8007796:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	697a      	ldr	r2, [r7, #20]
 800779e:	4313      	orrs	r3, r2
 80077a0:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80077a2:	693b      	ldr	r3, [r7, #16]
 80077a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80077a8:	f023 0303 	bic.w	r3, r3, #3
 80077ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	689a      	ldr	r2, [r3, #8]
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	699b      	ldr	r3, [r3, #24]
 80077b6:	021b      	lsls	r3, r3, #8
 80077b8:	4313      	orrs	r3, r2
 80077ba:	693a      	ldr	r2, [r7, #16]
 80077bc:	4313      	orrs	r3, r2
 80077be:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80077c0:	693b      	ldr	r3, [r7, #16]
 80077c2:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80077c6:	f023 030c 	bic.w	r3, r3, #12
 80077ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80077cc:	693b      	ldr	r3, [r7, #16]
 80077ce:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80077d2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80077d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	68da      	ldr	r2, [r3, #12]
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	69db      	ldr	r3, [r3, #28]
 80077e0:	021b      	lsls	r3, r3, #8
 80077e2:	4313      	orrs	r3, r2
 80077e4:	693a      	ldr	r2, [r7, #16]
 80077e6:	4313      	orrs	r3, r2
 80077e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	691b      	ldr	r3, [r3, #16]
 80077ee:	011a      	lsls	r2, r3, #4
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	6a1b      	ldr	r3, [r3, #32]
 80077f4:	031b      	lsls	r3, r3, #12
 80077f6:	4313      	orrs	r3, r2
 80077f8:	693a      	ldr	r2, [r7, #16]
 80077fa:	4313      	orrs	r3, r2
 80077fc:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8007804:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800780c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	685a      	ldr	r2, [r3, #4]
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	695b      	ldr	r3, [r3, #20]
 8007816:	011b      	lsls	r3, r3, #4
 8007818:	4313      	orrs	r3, r2
 800781a:	68fa      	ldr	r2, [r7, #12]
 800781c:	4313      	orrs	r3, r2
 800781e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	697a      	ldr	r2, [r7, #20]
 8007826:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	693a      	ldr	r2, [r7, #16]
 800782e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	68fa      	ldr	r2, [r7, #12]
 8007836:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2201      	movs	r2, #1
 800783c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2201      	movs	r2, #1
 8007844:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2201      	movs	r2, #1
 800784c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2201      	movs	r2, #1
 8007854:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2201      	movs	r2, #1
 800785c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2201      	movs	r2, #1
 8007864:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007868:	2300      	movs	r3, #0
}
 800786a:	4618      	mov	r0, r3
 800786c:	3718      	adds	r7, #24
 800786e:	46bd      	mov	sp, r7
 8007870:	bd80      	pop	{r7, pc}
 8007872:	bf00      	nop
 8007874:	0800361d 	.word	0x0800361d

08007878 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b084      	sub	sp, #16
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
 8007880:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007888:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007890:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007898:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80078a0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d110      	bne.n	80078ca <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80078a8:	7bfb      	ldrb	r3, [r7, #15]
 80078aa:	2b01      	cmp	r3, #1
 80078ac:	d102      	bne.n	80078b4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80078ae:	7b7b      	ldrb	r3, [r7, #13]
 80078b0:	2b01      	cmp	r3, #1
 80078b2:	d001      	beq.n	80078b8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80078b4:	2301      	movs	r3, #1
 80078b6:	e069      	b.n	800798c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2202      	movs	r2, #2
 80078bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2202      	movs	r2, #2
 80078c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80078c8:	e031      	b.n	800792e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	2b04      	cmp	r3, #4
 80078ce:	d110      	bne.n	80078f2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80078d0:	7bbb      	ldrb	r3, [r7, #14]
 80078d2:	2b01      	cmp	r3, #1
 80078d4:	d102      	bne.n	80078dc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80078d6:	7b3b      	ldrb	r3, [r7, #12]
 80078d8:	2b01      	cmp	r3, #1
 80078da:	d001      	beq.n	80078e0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80078dc:	2301      	movs	r3, #1
 80078de:	e055      	b.n	800798c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2202      	movs	r2, #2
 80078e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2202      	movs	r2, #2
 80078ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80078f0:	e01d      	b.n	800792e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80078f2:	7bfb      	ldrb	r3, [r7, #15]
 80078f4:	2b01      	cmp	r3, #1
 80078f6:	d108      	bne.n	800790a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80078f8:	7bbb      	ldrb	r3, [r7, #14]
 80078fa:	2b01      	cmp	r3, #1
 80078fc:	d105      	bne.n	800790a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80078fe:	7b7b      	ldrb	r3, [r7, #13]
 8007900:	2b01      	cmp	r3, #1
 8007902:	d102      	bne.n	800790a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007904:	7b3b      	ldrb	r3, [r7, #12]
 8007906:	2b01      	cmp	r3, #1
 8007908:	d001      	beq.n	800790e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800790a:	2301      	movs	r3, #1
 800790c:	e03e      	b.n	800798c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2202      	movs	r2, #2
 8007912:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2202      	movs	r2, #2
 800791a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2202      	movs	r2, #2
 8007922:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2202      	movs	r2, #2
 800792a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d003      	beq.n	800793c <HAL_TIM_Encoder_Start+0xc4>
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	2b04      	cmp	r3, #4
 8007938:	d008      	beq.n	800794c <HAL_TIM_Encoder_Start+0xd4>
 800793a:	e00f      	b.n	800795c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	2201      	movs	r2, #1
 8007942:	2100      	movs	r1, #0
 8007944:	4618      	mov	r0, r3
 8007946:	f001 f9fd 	bl	8008d44 <TIM_CCxChannelCmd>
      break;
 800794a:	e016      	b.n	800797a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	2201      	movs	r2, #1
 8007952:	2104      	movs	r1, #4
 8007954:	4618      	mov	r0, r3
 8007956:	f001 f9f5 	bl	8008d44 <TIM_CCxChannelCmd>
      break;
 800795a:	e00e      	b.n	800797a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	2201      	movs	r2, #1
 8007962:	2100      	movs	r1, #0
 8007964:	4618      	mov	r0, r3
 8007966:	f001 f9ed 	bl	8008d44 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	2201      	movs	r2, #1
 8007970:	2104      	movs	r1, #4
 8007972:	4618      	mov	r0, r3
 8007974:	f001 f9e6 	bl	8008d44 <TIM_CCxChannelCmd>
      break;
 8007978:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	681a      	ldr	r2, [r3, #0]
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f042 0201 	orr.w	r2, r2, #1
 8007988:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800798a:	2300      	movs	r3, #0
}
 800798c:	4618      	mov	r0, r3
 800798e:	3710      	adds	r7, #16
 8007990:	46bd      	mov	sp, r7
 8007992:	bd80      	pop	{r7, pc}

08007994 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b084      	sub	sp, #16
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	68db      	ldr	r3, [r3, #12]
 80079a2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	691b      	ldr	r3, [r3, #16]
 80079aa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	f003 0302 	and.w	r3, r3, #2
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d026      	beq.n	8007a04 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	f003 0302 	and.w	r3, r3, #2
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d021      	beq.n	8007a04 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f06f 0202 	mvn.w	r2, #2
 80079c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2201      	movs	r2, #1
 80079ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	699b      	ldr	r3, [r3, #24]
 80079d6:	f003 0303 	and.w	r3, r3, #3
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d005      	beq.n	80079ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	4798      	blx	r3
 80079e8:	e009      	b.n	80079fe <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2200      	movs	r2, #0
 8007a02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	f003 0304 	and.w	r3, r3, #4
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d026      	beq.n	8007a5c <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	f003 0304 	and.w	r3, r3, #4
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d021      	beq.n	8007a5c <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f06f 0204 	mvn.w	r2, #4
 8007a20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2202      	movs	r2, #2
 8007a26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	699b      	ldr	r3, [r3, #24]
 8007a2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d005      	beq.n	8007a42 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	4798      	blx	r3
 8007a40:	e009      	b.n	8007a56 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	f003 0308 	and.w	r3, r3, #8
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d026      	beq.n	8007ab4 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	f003 0308 	and.w	r3, r3, #8
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d021      	beq.n	8007ab4 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f06f 0208 	mvn.w	r2, #8
 8007a78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2204      	movs	r2, #4
 8007a7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	69db      	ldr	r3, [r3, #28]
 8007a86:	f003 0303 	and.w	r3, r3, #3
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d005      	beq.n	8007a9a <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	4798      	blx	r3
 8007a98:	e009      	b.n	8007aae <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007aa0:	6878      	ldr	r0, [r7, #4]
 8007aa2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	f003 0310 	and.w	r3, r3, #16
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d026      	beq.n	8007b0c <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	f003 0310 	and.w	r3, r3, #16
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d021      	beq.n	8007b0c <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f06f 0210 	mvn.w	r2, #16
 8007ad0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2208      	movs	r2, #8
 8007ad6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	69db      	ldr	r3, [r3, #28]
 8007ade:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d005      	beq.n	8007af2 <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	4798      	blx	r3
 8007af0:	e009      	b.n	8007b06 <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2200      	movs	r2, #0
 8007b0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	f003 0301 	and.w	r3, r3, #1
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d00e      	beq.n	8007b34 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	f003 0301 	and.w	r3, r3, #1
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d009      	beq.n	8007b34 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f06f 0201 	mvn.w	r2, #1
 8007b28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d104      	bne.n	8007b48 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d00e      	beq.n	8007b66 <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d009      	beq.n	8007b66 <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007b5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d00e      	beq.n	8007b8e <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d009      	beq.n	8007b8e <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007b82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007b8e:	68bb      	ldr	r3, [r7, #8]
 8007b90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d00e      	beq.n	8007bb6 <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d009      	beq.n	8007bb6 <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007baa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007bb6:	68bb      	ldr	r3, [r7, #8]
 8007bb8:	f003 0320 	and.w	r3, r3, #32
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d00e      	beq.n	8007bde <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	f003 0320 	and.w	r3, r3, #32
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d009      	beq.n	8007bde <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f06f 0220 	mvn.w	r2, #32
 8007bd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d00e      	beq.n	8007c06 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d009      	beq.n	8007c06 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8007bfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8007c06:	68bb      	ldr	r3, [r7, #8]
 8007c08:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d00e      	beq.n	8007c2e <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d009      	beq.n	8007c2e <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8007c22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d00e      	beq.n	8007c56 <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d009      	beq.n	8007c56 <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8007c4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d00e      	beq.n	8007c7e <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d009      	beq.n	8007c7e <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8007c72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007c7e:	bf00      	nop
 8007c80:	3710      	adds	r7, #16
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bd80      	pop	{r7, pc}
	...

08007c88 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b086      	sub	sp, #24
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	60f8      	str	r0, [r7, #12]
 8007c90:	60b9      	str	r1, [r7, #8]
 8007c92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007c94:	2300      	movs	r3, #0
 8007c96:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007c9e:	2b01      	cmp	r3, #1
 8007ca0:	d101      	bne.n	8007ca6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007ca2:	2302      	movs	r3, #2
 8007ca4:	e0ff      	b.n	8007ea6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	2201      	movs	r2, #1
 8007caa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2b14      	cmp	r3, #20
 8007cb2:	f200 80f0 	bhi.w	8007e96 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007cb6:	a201      	add	r2, pc, #4	@ (adr r2, 8007cbc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cbc:	08007d11 	.word	0x08007d11
 8007cc0:	08007e97 	.word	0x08007e97
 8007cc4:	08007e97 	.word	0x08007e97
 8007cc8:	08007e97 	.word	0x08007e97
 8007ccc:	08007d51 	.word	0x08007d51
 8007cd0:	08007e97 	.word	0x08007e97
 8007cd4:	08007e97 	.word	0x08007e97
 8007cd8:	08007e97 	.word	0x08007e97
 8007cdc:	08007d93 	.word	0x08007d93
 8007ce0:	08007e97 	.word	0x08007e97
 8007ce4:	08007e97 	.word	0x08007e97
 8007ce8:	08007e97 	.word	0x08007e97
 8007cec:	08007dd3 	.word	0x08007dd3
 8007cf0:	08007e97 	.word	0x08007e97
 8007cf4:	08007e97 	.word	0x08007e97
 8007cf8:	08007e97 	.word	0x08007e97
 8007cfc:	08007e15 	.word	0x08007e15
 8007d00:	08007e97 	.word	0x08007e97
 8007d04:	08007e97 	.word	0x08007e97
 8007d08:	08007e97 	.word	0x08007e97
 8007d0c:	08007e55 	.word	0x08007e55
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	68b9      	ldr	r1, [r7, #8]
 8007d16:	4618      	mov	r0, r3
 8007d18:	f000 fc4e 	bl	80085b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	699a      	ldr	r2, [r3, #24]
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f042 0208 	orr.w	r2, r2, #8
 8007d2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	699a      	ldr	r2, [r3, #24]
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f022 0204 	bic.w	r2, r2, #4
 8007d3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	6999      	ldr	r1, [r3, #24]
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	691a      	ldr	r2, [r3, #16]
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	430a      	orrs	r2, r1
 8007d4c:	619a      	str	r2, [r3, #24]
      break;
 8007d4e:	e0a5      	b.n	8007e9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	68b9      	ldr	r1, [r7, #8]
 8007d56:	4618      	mov	r0, r3
 8007d58:	f000 fcc8 	bl	80086ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	699a      	ldr	r2, [r3, #24]
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007d6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	699a      	ldr	r2, [r3, #24]
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007d7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	6999      	ldr	r1, [r3, #24]
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	691b      	ldr	r3, [r3, #16]
 8007d86:	021a      	lsls	r2, r3, #8
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	430a      	orrs	r2, r1
 8007d8e:	619a      	str	r2, [r3, #24]
      break;
 8007d90:	e084      	b.n	8007e9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	68b9      	ldr	r1, [r7, #8]
 8007d98:	4618      	mov	r0, r3
 8007d9a:	f000 fd3b 	bl	8008814 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	69da      	ldr	r2, [r3, #28]
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f042 0208 	orr.w	r2, r2, #8
 8007dac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	69da      	ldr	r2, [r3, #28]
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f022 0204 	bic.w	r2, r2, #4
 8007dbc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	69d9      	ldr	r1, [r3, #28]
 8007dc4:	68bb      	ldr	r3, [r7, #8]
 8007dc6:	691a      	ldr	r2, [r3, #16]
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	430a      	orrs	r2, r1
 8007dce:	61da      	str	r2, [r3, #28]
      break;
 8007dd0:	e064      	b.n	8007e9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	68b9      	ldr	r1, [r7, #8]
 8007dd8:	4618      	mov	r0, r3
 8007dda:	f000 fdad 	bl	8008938 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	69da      	ldr	r2, [r3, #28]
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007dec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	69da      	ldr	r2, [r3, #28]
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007dfc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	69d9      	ldr	r1, [r3, #28]
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	691b      	ldr	r3, [r3, #16]
 8007e08:	021a      	lsls	r2, r3, #8
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	430a      	orrs	r2, r1
 8007e10:	61da      	str	r2, [r3, #28]
      break;
 8007e12:	e043      	b.n	8007e9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	68b9      	ldr	r1, [r7, #8]
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	f000 fe20 	bl	8008a60 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f042 0208 	orr.w	r2, r2, #8
 8007e2e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f022 0204 	bic.w	r2, r2, #4
 8007e3e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007e46:	68bb      	ldr	r3, [r7, #8]
 8007e48:	691a      	ldr	r2, [r3, #16]
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	430a      	orrs	r2, r1
 8007e50:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007e52:	e023      	b.n	8007e9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	68b9      	ldr	r1, [r7, #8]
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	f000 fe6a 	bl	8008b34 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007e6e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007e7e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007e86:	68bb      	ldr	r3, [r7, #8]
 8007e88:	691b      	ldr	r3, [r3, #16]
 8007e8a:	021a      	lsls	r2, r3, #8
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	430a      	orrs	r2, r1
 8007e92:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007e94:	e002      	b.n	8007e9c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007e96:	2301      	movs	r3, #1
 8007e98:	75fb      	strb	r3, [r7, #23]
      break;
 8007e9a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007ea4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	3718      	adds	r7, #24
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bd80      	pop	{r7, pc}
 8007eae:	bf00      	nop

08007eb0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b084      	sub	sp, #16
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
 8007eb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007eba:	2300      	movs	r3, #0
 8007ebc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007ec4:	2b01      	cmp	r3, #1
 8007ec6:	d101      	bne.n	8007ecc <HAL_TIM_ConfigClockSource+0x1c>
 8007ec8:	2302      	movs	r3, #2
 8007eca:	e0f6      	b.n	80080ba <HAL_TIM_ConfigClockSource+0x20a>
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2201      	movs	r2, #1
 8007ed0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2202      	movs	r2, #2
 8007ed8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	689b      	ldr	r3, [r3, #8]
 8007ee2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8007eea:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007eee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ef0:	68bb      	ldr	r3, [r7, #8]
 8007ef2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007ef6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	68ba      	ldr	r2, [r7, #8]
 8007efe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	4a6f      	ldr	r2, [pc, #444]	@ (80080c4 <HAL_TIM_ConfigClockSource+0x214>)
 8007f06:	4293      	cmp	r3, r2
 8007f08:	f000 80c1 	beq.w	800808e <HAL_TIM_ConfigClockSource+0x1de>
 8007f0c:	4a6d      	ldr	r2, [pc, #436]	@ (80080c4 <HAL_TIM_ConfigClockSource+0x214>)
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	f200 80c6 	bhi.w	80080a0 <HAL_TIM_ConfigClockSource+0x1f0>
 8007f14:	4a6c      	ldr	r2, [pc, #432]	@ (80080c8 <HAL_TIM_ConfigClockSource+0x218>)
 8007f16:	4293      	cmp	r3, r2
 8007f18:	f000 80b9 	beq.w	800808e <HAL_TIM_ConfigClockSource+0x1de>
 8007f1c:	4a6a      	ldr	r2, [pc, #424]	@ (80080c8 <HAL_TIM_ConfigClockSource+0x218>)
 8007f1e:	4293      	cmp	r3, r2
 8007f20:	f200 80be 	bhi.w	80080a0 <HAL_TIM_ConfigClockSource+0x1f0>
 8007f24:	4a69      	ldr	r2, [pc, #420]	@ (80080cc <HAL_TIM_ConfigClockSource+0x21c>)
 8007f26:	4293      	cmp	r3, r2
 8007f28:	f000 80b1 	beq.w	800808e <HAL_TIM_ConfigClockSource+0x1de>
 8007f2c:	4a67      	ldr	r2, [pc, #412]	@ (80080cc <HAL_TIM_ConfigClockSource+0x21c>)
 8007f2e:	4293      	cmp	r3, r2
 8007f30:	f200 80b6 	bhi.w	80080a0 <HAL_TIM_ConfigClockSource+0x1f0>
 8007f34:	4a66      	ldr	r2, [pc, #408]	@ (80080d0 <HAL_TIM_ConfigClockSource+0x220>)
 8007f36:	4293      	cmp	r3, r2
 8007f38:	f000 80a9 	beq.w	800808e <HAL_TIM_ConfigClockSource+0x1de>
 8007f3c:	4a64      	ldr	r2, [pc, #400]	@ (80080d0 <HAL_TIM_ConfigClockSource+0x220>)
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	f200 80ae 	bhi.w	80080a0 <HAL_TIM_ConfigClockSource+0x1f0>
 8007f44:	4a63      	ldr	r2, [pc, #396]	@ (80080d4 <HAL_TIM_ConfigClockSource+0x224>)
 8007f46:	4293      	cmp	r3, r2
 8007f48:	f000 80a1 	beq.w	800808e <HAL_TIM_ConfigClockSource+0x1de>
 8007f4c:	4a61      	ldr	r2, [pc, #388]	@ (80080d4 <HAL_TIM_ConfigClockSource+0x224>)
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	f200 80a6 	bhi.w	80080a0 <HAL_TIM_ConfigClockSource+0x1f0>
 8007f54:	4a60      	ldr	r2, [pc, #384]	@ (80080d8 <HAL_TIM_ConfigClockSource+0x228>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	f000 8099 	beq.w	800808e <HAL_TIM_ConfigClockSource+0x1de>
 8007f5c:	4a5e      	ldr	r2, [pc, #376]	@ (80080d8 <HAL_TIM_ConfigClockSource+0x228>)
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	f200 809e 	bhi.w	80080a0 <HAL_TIM_ConfigClockSource+0x1f0>
 8007f64:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007f68:	f000 8091 	beq.w	800808e <HAL_TIM_ConfigClockSource+0x1de>
 8007f6c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007f70:	f200 8096 	bhi.w	80080a0 <HAL_TIM_ConfigClockSource+0x1f0>
 8007f74:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007f78:	f000 8089 	beq.w	800808e <HAL_TIM_ConfigClockSource+0x1de>
 8007f7c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007f80:	f200 808e 	bhi.w	80080a0 <HAL_TIM_ConfigClockSource+0x1f0>
 8007f84:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007f88:	d03e      	beq.n	8008008 <HAL_TIM_ConfigClockSource+0x158>
 8007f8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007f8e:	f200 8087 	bhi.w	80080a0 <HAL_TIM_ConfigClockSource+0x1f0>
 8007f92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f96:	f000 8086 	beq.w	80080a6 <HAL_TIM_ConfigClockSource+0x1f6>
 8007f9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f9e:	d87f      	bhi.n	80080a0 <HAL_TIM_ConfigClockSource+0x1f0>
 8007fa0:	2b70      	cmp	r3, #112	@ 0x70
 8007fa2:	d01a      	beq.n	8007fda <HAL_TIM_ConfigClockSource+0x12a>
 8007fa4:	2b70      	cmp	r3, #112	@ 0x70
 8007fa6:	d87b      	bhi.n	80080a0 <HAL_TIM_ConfigClockSource+0x1f0>
 8007fa8:	2b60      	cmp	r3, #96	@ 0x60
 8007faa:	d050      	beq.n	800804e <HAL_TIM_ConfigClockSource+0x19e>
 8007fac:	2b60      	cmp	r3, #96	@ 0x60
 8007fae:	d877      	bhi.n	80080a0 <HAL_TIM_ConfigClockSource+0x1f0>
 8007fb0:	2b50      	cmp	r3, #80	@ 0x50
 8007fb2:	d03c      	beq.n	800802e <HAL_TIM_ConfigClockSource+0x17e>
 8007fb4:	2b50      	cmp	r3, #80	@ 0x50
 8007fb6:	d873      	bhi.n	80080a0 <HAL_TIM_ConfigClockSource+0x1f0>
 8007fb8:	2b40      	cmp	r3, #64	@ 0x40
 8007fba:	d058      	beq.n	800806e <HAL_TIM_ConfigClockSource+0x1be>
 8007fbc:	2b40      	cmp	r3, #64	@ 0x40
 8007fbe:	d86f      	bhi.n	80080a0 <HAL_TIM_ConfigClockSource+0x1f0>
 8007fc0:	2b30      	cmp	r3, #48	@ 0x30
 8007fc2:	d064      	beq.n	800808e <HAL_TIM_ConfigClockSource+0x1de>
 8007fc4:	2b30      	cmp	r3, #48	@ 0x30
 8007fc6:	d86b      	bhi.n	80080a0 <HAL_TIM_ConfigClockSource+0x1f0>
 8007fc8:	2b20      	cmp	r3, #32
 8007fca:	d060      	beq.n	800808e <HAL_TIM_ConfigClockSource+0x1de>
 8007fcc:	2b20      	cmp	r3, #32
 8007fce:	d867      	bhi.n	80080a0 <HAL_TIM_ConfigClockSource+0x1f0>
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d05c      	beq.n	800808e <HAL_TIM_ConfigClockSource+0x1de>
 8007fd4:	2b10      	cmp	r3, #16
 8007fd6:	d05a      	beq.n	800808e <HAL_TIM_ConfigClockSource+0x1de>
 8007fd8:	e062      	b.n	80080a0 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007fea:	f000 fe8b 	bl	8008d04 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	689b      	ldr	r3, [r3, #8]
 8007ff4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007ff6:	68bb      	ldr	r3, [r7, #8]
 8007ff8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007ffc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	68ba      	ldr	r2, [r7, #8]
 8008004:	609a      	str	r2, [r3, #8]
      break;
 8008006:	e04f      	b.n	80080a8 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008018:	f000 fe74 	bl	8008d04 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	689a      	ldr	r2, [r3, #8]
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800802a:	609a      	str	r2, [r3, #8]
      break;
 800802c:	e03c      	b.n	80080a8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800803a:	461a      	mov	r2, r3
 800803c:	f000 fde6 	bl	8008c0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	2150      	movs	r1, #80	@ 0x50
 8008046:	4618      	mov	r0, r3
 8008048:	f000 fe3f 	bl	8008cca <TIM_ITRx_SetConfig>
      break;
 800804c:	e02c      	b.n	80080a8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800805a:	461a      	mov	r2, r3
 800805c:	f000 fe05 	bl	8008c6a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	2160      	movs	r1, #96	@ 0x60
 8008066:	4618      	mov	r0, r3
 8008068:	f000 fe2f 	bl	8008cca <TIM_ITRx_SetConfig>
      break;
 800806c:	e01c      	b.n	80080a8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800807a:	461a      	mov	r2, r3
 800807c:	f000 fdc6 	bl	8008c0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	2140      	movs	r1, #64	@ 0x40
 8008086:	4618      	mov	r0, r3
 8008088:	f000 fe1f 	bl	8008cca <TIM_ITRx_SetConfig>
      break;
 800808c:	e00c      	b.n	80080a8 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681a      	ldr	r2, [r3, #0]
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	4619      	mov	r1, r3
 8008098:	4610      	mov	r0, r2
 800809a:	f000 fe16 	bl	8008cca <TIM_ITRx_SetConfig>
      break;
 800809e:	e003      	b.n	80080a8 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80080a0:	2301      	movs	r3, #1
 80080a2:	73fb      	strb	r3, [r7, #15]
      break;
 80080a4:	e000      	b.n	80080a8 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80080a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2201      	movs	r2, #1
 80080ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2200      	movs	r2, #0
 80080b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80080b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80080ba:	4618      	mov	r0, r3
 80080bc:	3710      	adds	r7, #16
 80080be:	46bd      	mov	sp, r7
 80080c0:	bd80      	pop	{r7, pc}
 80080c2:	bf00      	nop
 80080c4:	00100070 	.word	0x00100070
 80080c8:	00100060 	.word	0x00100060
 80080cc:	00100050 	.word	0x00100050
 80080d0:	00100040 	.word	0x00100040
 80080d4:	00100030 	.word	0x00100030
 80080d8:	00100020 	.word	0x00100020

080080dc <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80080dc:	b480      	push	{r7}
 80080de:	b083      	sub	sp, #12
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 80080e4:	bf00      	nop
 80080e6:	370c      	adds	r7, #12
 80080e8:	46bd      	mov	sp, r7
 80080ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ee:	4770      	bx	lr

080080f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80080f0:	b480      	push	{r7}
 80080f2:	b083      	sub	sp, #12
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80080f8:	bf00      	nop
 80080fa:	370c      	adds	r7, #12
 80080fc:	46bd      	mov	sp, r7
 80080fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008102:	4770      	bx	lr

08008104 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008104:	b480      	push	{r7}
 8008106:	b083      	sub	sp, #12
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800810c:	bf00      	nop
 800810e:	370c      	adds	r7, #12
 8008110:	46bd      	mov	sp, r7
 8008112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008116:	4770      	bx	lr

08008118 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008118:	b480      	push	{r7}
 800811a:	b083      	sub	sp, #12
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8008120:	bf00      	nop
 8008122:	370c      	adds	r7, #12
 8008124:	46bd      	mov	sp, r7
 8008126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812a:	4770      	bx	lr

0800812c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800812c:	b480      	push	{r7}
 800812e:	b083      	sub	sp, #12
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008134:	bf00      	nop
 8008136:	370c      	adds	r7, #12
 8008138:	46bd      	mov	sp, r7
 800813a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813e:	4770      	bx	lr

08008140 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008140:	b480      	push	{r7}
 8008142:	b083      	sub	sp, #12
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8008148:	bf00      	nop
 800814a:	370c      	adds	r7, #12
 800814c:	46bd      	mov	sp, r7
 800814e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008152:	4770      	bx	lr

08008154 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008154:	b480      	push	{r7}
 8008156:	b083      	sub	sp, #12
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800815c:	bf00      	nop
 800815e:	370c      	adds	r7, #12
 8008160:	46bd      	mov	sp, r7
 8008162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008166:	4770      	bx	lr

08008168 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008168:	b480      	push	{r7}
 800816a:	b083      	sub	sp, #12
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8008170:	bf00      	nop
 8008172:	370c      	adds	r7, #12
 8008174:	46bd      	mov	sp, r7
 8008176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817a:	4770      	bx	lr

0800817c <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800817c:	b480      	push	{r7}
 800817e:	b083      	sub	sp, #12
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8008184:	bf00      	nop
 8008186:	370c      	adds	r7, #12
 8008188:	46bd      	mov	sp, r7
 800818a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818e:	4770      	bx	lr

08008190 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8008190:	b480      	push	{r7}
 8008192:	b087      	sub	sp, #28
 8008194:	af00      	add	r7, sp, #0
 8008196:	60f8      	str	r0, [r7, #12]
 8008198:	460b      	mov	r3, r1
 800819a:	607a      	str	r2, [r7, #4]
 800819c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800819e:	2300      	movs	r3, #0
 80081a0:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d101      	bne.n	80081ac <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 80081a8:	2301      	movs	r3, #1
 80081aa:	e14a      	b.n	8008442 <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80081b2:	b2db      	uxtb	r3, r3
 80081b4:	2b01      	cmp	r3, #1
 80081b6:	f040 80dd 	bne.w	8008374 <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 80081ba:	7afb      	ldrb	r3, [r7, #11]
 80081bc:	2b1f      	cmp	r3, #31
 80081be:	f200 80d6 	bhi.w	800836e <HAL_TIM_RegisterCallback+0x1de>
 80081c2:	a201      	add	r2, pc, #4	@ (adr r2, 80081c8 <HAL_TIM_RegisterCallback+0x38>)
 80081c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081c8:	08008249 	.word	0x08008249
 80081cc:	08008251 	.word	0x08008251
 80081d0:	08008259 	.word	0x08008259
 80081d4:	08008261 	.word	0x08008261
 80081d8:	08008269 	.word	0x08008269
 80081dc:	08008271 	.word	0x08008271
 80081e0:	08008279 	.word	0x08008279
 80081e4:	08008281 	.word	0x08008281
 80081e8:	08008289 	.word	0x08008289
 80081ec:	08008291 	.word	0x08008291
 80081f0:	08008299 	.word	0x08008299
 80081f4:	080082a1 	.word	0x080082a1
 80081f8:	080082a9 	.word	0x080082a9
 80081fc:	080082b1 	.word	0x080082b1
 8008200:	080082bb 	.word	0x080082bb
 8008204:	080082c5 	.word	0x080082c5
 8008208:	080082cf 	.word	0x080082cf
 800820c:	080082d9 	.word	0x080082d9
 8008210:	080082e3 	.word	0x080082e3
 8008214:	080082ed 	.word	0x080082ed
 8008218:	080082f7 	.word	0x080082f7
 800821c:	08008301 	.word	0x08008301
 8008220:	0800830b 	.word	0x0800830b
 8008224:	08008315 	.word	0x08008315
 8008228:	0800831f 	.word	0x0800831f
 800822c:	08008329 	.word	0x08008329
 8008230:	08008333 	.word	0x08008333
 8008234:	0800833d 	.word	0x0800833d
 8008238:	08008347 	.word	0x08008347
 800823c:	08008351 	.word	0x08008351
 8008240:	0800835b 	.word	0x0800835b
 8008244:	08008365 	.word	0x08008365
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	687a      	ldr	r2, [r7, #4]
 800824c:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800824e:	e0f7      	b.n	8008440 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	687a      	ldr	r2, [r7, #4]
 8008254:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8008256:	e0f3      	b.n	8008440 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	687a      	ldr	r2, [r7, #4]
 800825c:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800825e:	e0ef      	b.n	8008440 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	687a      	ldr	r2, [r7, #4]
 8008264:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8008266:	e0eb      	b.n	8008440 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	687a      	ldr	r2, [r7, #4]
 800826c:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800826e:	e0e7      	b.n	8008440 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	687a      	ldr	r2, [r7, #4]
 8008274:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8008276:	e0e3      	b.n	8008440 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	687a      	ldr	r2, [r7, #4]
 800827c:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800827e:	e0df      	b.n	8008440 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	687a      	ldr	r2, [r7, #4]
 8008284:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8008286:	e0db      	b.n	8008440 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	687a      	ldr	r2, [r7, #4]
 800828c:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800828e:	e0d7      	b.n	8008440 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	687a      	ldr	r2, [r7, #4]
 8008294:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8008296:	e0d3      	b.n	8008440 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	687a      	ldr	r2, [r7, #4]
 800829c:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800829e:	e0cf      	b.n	8008440 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	687a      	ldr	r2, [r7, #4]
 80082a4:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 80082a6:	e0cb      	b.n	8008440 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	687a      	ldr	r2, [r7, #4]
 80082ac:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 80082ae:	e0c7      	b.n	8008440 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	687a      	ldr	r2, [r7, #4]
 80082b4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 80082b8:	e0c2      	b.n	8008440 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	687a      	ldr	r2, [r7, #4]
 80082be:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 80082c2:	e0bd      	b.n	8008440 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	687a      	ldr	r2, [r7, #4]
 80082c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 80082cc:	e0b8      	b.n	8008440 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	687a      	ldr	r2, [r7, #4]
 80082d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 80082d6:	e0b3      	b.n	8008440 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	687a      	ldr	r2, [r7, #4]
 80082dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 80082e0:	e0ae      	b.n	8008440 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	687a      	ldr	r2, [r7, #4]
 80082e6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 80082ea:	e0a9      	b.n	8008440 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	687a      	ldr	r2, [r7, #4]
 80082f0:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 80082f4:	e0a4      	b.n	8008440 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	687a      	ldr	r2, [r7, #4]
 80082fa:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 80082fe:	e09f      	b.n	8008440 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	687a      	ldr	r2, [r7, #4]
 8008304:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8008308:	e09a      	b.n	8008440 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	687a      	ldr	r2, [r7, #4]
 800830e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8008312:	e095      	b.n	8008440 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	687a      	ldr	r2, [r7, #4]
 8008318:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800831c:	e090      	b.n	8008440 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	687a      	ldr	r2, [r7, #4]
 8008322:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8008326:	e08b      	b.n	8008440 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	687a      	ldr	r2, [r7, #4]
 800832c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8008330:	e086      	b.n	8008440 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	687a      	ldr	r2, [r7, #4]
 8008336:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800833a:	e081      	b.n	8008440 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	687a      	ldr	r2, [r7, #4]
 8008340:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 8008344:	e07c      	b.n	8008440 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	687a      	ldr	r2, [r7, #4]
 800834a:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800834e:	e077      	b.n	8008440 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	687a      	ldr	r2, [r7, #4]
 8008354:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 8008358:	e072      	b.n	8008440 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	687a      	ldr	r2, [r7, #4]
 800835e:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8008362:	e06d      	b.n	8008440 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	687a      	ldr	r2, [r7, #4]
 8008368:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800836c:	e068      	b.n	8008440 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800836e:	2301      	movs	r3, #1
 8008370:	75fb      	strb	r3, [r7, #23]
        break;
 8008372:	e065      	b.n	8008440 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800837a:	b2db      	uxtb	r3, r3
 800837c:	2b00      	cmp	r3, #0
 800837e:	d15d      	bne.n	800843c <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 8008380:	7afb      	ldrb	r3, [r7, #11]
 8008382:	2b0d      	cmp	r3, #13
 8008384:	d857      	bhi.n	8008436 <HAL_TIM_RegisterCallback+0x2a6>
 8008386:	a201      	add	r2, pc, #4	@ (adr r2, 800838c <HAL_TIM_RegisterCallback+0x1fc>)
 8008388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800838c:	080083c5 	.word	0x080083c5
 8008390:	080083cd 	.word	0x080083cd
 8008394:	080083d5 	.word	0x080083d5
 8008398:	080083dd 	.word	0x080083dd
 800839c:	080083e5 	.word	0x080083e5
 80083a0:	080083ed 	.word	0x080083ed
 80083a4:	080083f5 	.word	0x080083f5
 80083a8:	080083fd 	.word	0x080083fd
 80083ac:	08008405 	.word	0x08008405
 80083b0:	0800840d 	.word	0x0800840d
 80083b4:	08008415 	.word	0x08008415
 80083b8:	0800841d 	.word	0x0800841d
 80083bc:	08008425 	.word	0x08008425
 80083c0:	0800842d 	.word	0x0800842d
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	687a      	ldr	r2, [r7, #4]
 80083c8:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 80083ca:	e039      	b.n	8008440 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	687a      	ldr	r2, [r7, #4]
 80083d0:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 80083d2:	e035      	b.n	8008440 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	687a      	ldr	r2, [r7, #4]
 80083d8:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 80083da:	e031      	b.n	8008440 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	687a      	ldr	r2, [r7, #4]
 80083e0:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 80083e2:	e02d      	b.n	8008440 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	687a      	ldr	r2, [r7, #4]
 80083e8:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 80083ea:	e029      	b.n	8008440 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	687a      	ldr	r2, [r7, #4]
 80083f0:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 80083f2:	e025      	b.n	8008440 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	687a      	ldr	r2, [r7, #4]
 80083f8:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 80083fa:	e021      	b.n	8008440 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	687a      	ldr	r2, [r7, #4]
 8008400:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8008402:	e01d      	b.n	8008440 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	687a      	ldr	r2, [r7, #4]
 8008408:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800840a:	e019      	b.n	8008440 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	687a      	ldr	r2, [r7, #4]
 8008410:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8008412:	e015      	b.n	8008440 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	687a      	ldr	r2, [r7, #4]
 8008418:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800841a:	e011      	b.n	8008440 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	687a      	ldr	r2, [r7, #4]
 8008420:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8008422:	e00d      	b.n	8008440 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	687a      	ldr	r2, [r7, #4]
 8008428:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800842a:	e009      	b.n	8008440 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	687a      	ldr	r2, [r7, #4]
 8008430:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8008434:	e004      	b.n	8008440 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8008436:	2301      	movs	r3, #1
 8008438:	75fb      	strb	r3, [r7, #23]
        break;
 800843a:	e001      	b.n	8008440 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 800843c:	2301      	movs	r3, #1
 800843e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8008440:	7dfb      	ldrb	r3, [r7, #23]
}
 8008442:	4618      	mov	r0, r3
 8008444:	371c      	adds	r7, #28
 8008446:	46bd      	mov	sp, r7
 8008448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844c:	4770      	bx	lr
 800844e:	bf00      	nop

08008450 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008450:	b480      	push	{r7}
 8008452:	b085      	sub	sp, #20
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
 8008458:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	4a4c      	ldr	r2, [pc, #304]	@ (8008594 <TIM_Base_SetConfig+0x144>)
 8008464:	4293      	cmp	r3, r2
 8008466:	d017      	beq.n	8008498 <TIM_Base_SetConfig+0x48>
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800846e:	d013      	beq.n	8008498 <TIM_Base_SetConfig+0x48>
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	4a49      	ldr	r2, [pc, #292]	@ (8008598 <TIM_Base_SetConfig+0x148>)
 8008474:	4293      	cmp	r3, r2
 8008476:	d00f      	beq.n	8008498 <TIM_Base_SetConfig+0x48>
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	4a48      	ldr	r2, [pc, #288]	@ (800859c <TIM_Base_SetConfig+0x14c>)
 800847c:	4293      	cmp	r3, r2
 800847e:	d00b      	beq.n	8008498 <TIM_Base_SetConfig+0x48>
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	4a47      	ldr	r2, [pc, #284]	@ (80085a0 <TIM_Base_SetConfig+0x150>)
 8008484:	4293      	cmp	r3, r2
 8008486:	d007      	beq.n	8008498 <TIM_Base_SetConfig+0x48>
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	4a46      	ldr	r2, [pc, #280]	@ (80085a4 <TIM_Base_SetConfig+0x154>)
 800848c:	4293      	cmp	r3, r2
 800848e:	d003      	beq.n	8008498 <TIM_Base_SetConfig+0x48>
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	4a45      	ldr	r2, [pc, #276]	@ (80085a8 <TIM_Base_SetConfig+0x158>)
 8008494:	4293      	cmp	r3, r2
 8008496:	d108      	bne.n	80084aa <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800849e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	685b      	ldr	r3, [r3, #4]
 80084a4:	68fa      	ldr	r2, [r7, #12]
 80084a6:	4313      	orrs	r3, r2
 80084a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	4a39      	ldr	r2, [pc, #228]	@ (8008594 <TIM_Base_SetConfig+0x144>)
 80084ae:	4293      	cmp	r3, r2
 80084b0:	d023      	beq.n	80084fa <TIM_Base_SetConfig+0xaa>
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80084b8:	d01f      	beq.n	80084fa <TIM_Base_SetConfig+0xaa>
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	4a36      	ldr	r2, [pc, #216]	@ (8008598 <TIM_Base_SetConfig+0x148>)
 80084be:	4293      	cmp	r3, r2
 80084c0:	d01b      	beq.n	80084fa <TIM_Base_SetConfig+0xaa>
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	4a35      	ldr	r2, [pc, #212]	@ (800859c <TIM_Base_SetConfig+0x14c>)
 80084c6:	4293      	cmp	r3, r2
 80084c8:	d017      	beq.n	80084fa <TIM_Base_SetConfig+0xaa>
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	4a34      	ldr	r2, [pc, #208]	@ (80085a0 <TIM_Base_SetConfig+0x150>)
 80084ce:	4293      	cmp	r3, r2
 80084d0:	d013      	beq.n	80084fa <TIM_Base_SetConfig+0xaa>
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	4a33      	ldr	r2, [pc, #204]	@ (80085a4 <TIM_Base_SetConfig+0x154>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d00f      	beq.n	80084fa <TIM_Base_SetConfig+0xaa>
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	4a33      	ldr	r2, [pc, #204]	@ (80085ac <TIM_Base_SetConfig+0x15c>)
 80084de:	4293      	cmp	r3, r2
 80084e0:	d00b      	beq.n	80084fa <TIM_Base_SetConfig+0xaa>
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	4a32      	ldr	r2, [pc, #200]	@ (80085b0 <TIM_Base_SetConfig+0x160>)
 80084e6:	4293      	cmp	r3, r2
 80084e8:	d007      	beq.n	80084fa <TIM_Base_SetConfig+0xaa>
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	4a31      	ldr	r2, [pc, #196]	@ (80085b4 <TIM_Base_SetConfig+0x164>)
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d003      	beq.n	80084fa <TIM_Base_SetConfig+0xaa>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	4a2c      	ldr	r2, [pc, #176]	@ (80085a8 <TIM_Base_SetConfig+0x158>)
 80084f6:	4293      	cmp	r3, r2
 80084f8:	d108      	bne.n	800850c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008500:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	68db      	ldr	r3, [r3, #12]
 8008506:	68fa      	ldr	r2, [r7, #12]
 8008508:	4313      	orrs	r3, r2
 800850a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	695b      	ldr	r3, [r3, #20]
 8008516:	4313      	orrs	r3, r2
 8008518:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	68fa      	ldr	r2, [r7, #12]
 800851e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	689a      	ldr	r2, [r3, #8]
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	681a      	ldr	r2, [r3, #0]
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	4a18      	ldr	r2, [pc, #96]	@ (8008594 <TIM_Base_SetConfig+0x144>)
 8008534:	4293      	cmp	r3, r2
 8008536:	d013      	beq.n	8008560 <TIM_Base_SetConfig+0x110>
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	4a1a      	ldr	r2, [pc, #104]	@ (80085a4 <TIM_Base_SetConfig+0x154>)
 800853c:	4293      	cmp	r3, r2
 800853e:	d00f      	beq.n	8008560 <TIM_Base_SetConfig+0x110>
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	4a1a      	ldr	r2, [pc, #104]	@ (80085ac <TIM_Base_SetConfig+0x15c>)
 8008544:	4293      	cmp	r3, r2
 8008546:	d00b      	beq.n	8008560 <TIM_Base_SetConfig+0x110>
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	4a19      	ldr	r2, [pc, #100]	@ (80085b0 <TIM_Base_SetConfig+0x160>)
 800854c:	4293      	cmp	r3, r2
 800854e:	d007      	beq.n	8008560 <TIM_Base_SetConfig+0x110>
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	4a18      	ldr	r2, [pc, #96]	@ (80085b4 <TIM_Base_SetConfig+0x164>)
 8008554:	4293      	cmp	r3, r2
 8008556:	d003      	beq.n	8008560 <TIM_Base_SetConfig+0x110>
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	4a13      	ldr	r2, [pc, #76]	@ (80085a8 <TIM_Base_SetConfig+0x158>)
 800855c:	4293      	cmp	r3, r2
 800855e:	d103      	bne.n	8008568 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	691a      	ldr	r2, [r3, #16]
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2201      	movs	r2, #1
 800856c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	691b      	ldr	r3, [r3, #16]
 8008572:	f003 0301 	and.w	r3, r3, #1
 8008576:	2b01      	cmp	r3, #1
 8008578:	d105      	bne.n	8008586 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	691b      	ldr	r3, [r3, #16]
 800857e:	f023 0201 	bic.w	r2, r3, #1
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	611a      	str	r2, [r3, #16]
  }
}
 8008586:	bf00      	nop
 8008588:	3714      	adds	r7, #20
 800858a:	46bd      	mov	sp, r7
 800858c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008590:	4770      	bx	lr
 8008592:	bf00      	nop
 8008594:	40012c00 	.word	0x40012c00
 8008598:	40000400 	.word	0x40000400
 800859c:	40000800 	.word	0x40000800
 80085a0:	40000c00 	.word	0x40000c00
 80085a4:	40013400 	.word	0x40013400
 80085a8:	40015000 	.word	0x40015000
 80085ac:	40014000 	.word	0x40014000
 80085b0:	40014400 	.word	0x40014400
 80085b4:	40014800 	.word	0x40014800

080085b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80085b8:	b480      	push	{r7}
 80085ba:	b087      	sub	sp, #28
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
 80085c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6a1b      	ldr	r3, [r3, #32]
 80085c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6a1b      	ldr	r3, [r3, #32]
 80085cc:	f023 0201 	bic.w	r2, r3, #1
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	685b      	ldr	r3, [r3, #4]
 80085d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	699b      	ldr	r3, [r3, #24]
 80085de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80085e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80085ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	f023 0303 	bic.w	r3, r3, #3
 80085f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	68fa      	ldr	r2, [r7, #12]
 80085fa:	4313      	orrs	r3, r2
 80085fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80085fe:	697b      	ldr	r3, [r7, #20]
 8008600:	f023 0302 	bic.w	r3, r3, #2
 8008604:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	689b      	ldr	r3, [r3, #8]
 800860a:	697a      	ldr	r2, [r7, #20]
 800860c:	4313      	orrs	r3, r2
 800860e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	4a30      	ldr	r2, [pc, #192]	@ (80086d4 <TIM_OC1_SetConfig+0x11c>)
 8008614:	4293      	cmp	r3, r2
 8008616:	d013      	beq.n	8008640 <TIM_OC1_SetConfig+0x88>
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	4a2f      	ldr	r2, [pc, #188]	@ (80086d8 <TIM_OC1_SetConfig+0x120>)
 800861c:	4293      	cmp	r3, r2
 800861e:	d00f      	beq.n	8008640 <TIM_OC1_SetConfig+0x88>
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	4a2e      	ldr	r2, [pc, #184]	@ (80086dc <TIM_OC1_SetConfig+0x124>)
 8008624:	4293      	cmp	r3, r2
 8008626:	d00b      	beq.n	8008640 <TIM_OC1_SetConfig+0x88>
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	4a2d      	ldr	r2, [pc, #180]	@ (80086e0 <TIM_OC1_SetConfig+0x128>)
 800862c:	4293      	cmp	r3, r2
 800862e:	d007      	beq.n	8008640 <TIM_OC1_SetConfig+0x88>
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	4a2c      	ldr	r2, [pc, #176]	@ (80086e4 <TIM_OC1_SetConfig+0x12c>)
 8008634:	4293      	cmp	r3, r2
 8008636:	d003      	beq.n	8008640 <TIM_OC1_SetConfig+0x88>
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	4a2b      	ldr	r2, [pc, #172]	@ (80086e8 <TIM_OC1_SetConfig+0x130>)
 800863c:	4293      	cmp	r3, r2
 800863e:	d10c      	bne.n	800865a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008640:	697b      	ldr	r3, [r7, #20]
 8008642:	f023 0308 	bic.w	r3, r3, #8
 8008646:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	68db      	ldr	r3, [r3, #12]
 800864c:	697a      	ldr	r2, [r7, #20]
 800864e:	4313      	orrs	r3, r2
 8008650:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008652:	697b      	ldr	r3, [r7, #20]
 8008654:	f023 0304 	bic.w	r3, r3, #4
 8008658:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	4a1d      	ldr	r2, [pc, #116]	@ (80086d4 <TIM_OC1_SetConfig+0x11c>)
 800865e:	4293      	cmp	r3, r2
 8008660:	d013      	beq.n	800868a <TIM_OC1_SetConfig+0xd2>
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	4a1c      	ldr	r2, [pc, #112]	@ (80086d8 <TIM_OC1_SetConfig+0x120>)
 8008666:	4293      	cmp	r3, r2
 8008668:	d00f      	beq.n	800868a <TIM_OC1_SetConfig+0xd2>
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	4a1b      	ldr	r2, [pc, #108]	@ (80086dc <TIM_OC1_SetConfig+0x124>)
 800866e:	4293      	cmp	r3, r2
 8008670:	d00b      	beq.n	800868a <TIM_OC1_SetConfig+0xd2>
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	4a1a      	ldr	r2, [pc, #104]	@ (80086e0 <TIM_OC1_SetConfig+0x128>)
 8008676:	4293      	cmp	r3, r2
 8008678:	d007      	beq.n	800868a <TIM_OC1_SetConfig+0xd2>
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	4a19      	ldr	r2, [pc, #100]	@ (80086e4 <TIM_OC1_SetConfig+0x12c>)
 800867e:	4293      	cmp	r3, r2
 8008680:	d003      	beq.n	800868a <TIM_OC1_SetConfig+0xd2>
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	4a18      	ldr	r2, [pc, #96]	@ (80086e8 <TIM_OC1_SetConfig+0x130>)
 8008686:	4293      	cmp	r3, r2
 8008688:	d111      	bne.n	80086ae <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800868a:	693b      	ldr	r3, [r7, #16]
 800868c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008690:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008692:	693b      	ldr	r3, [r7, #16]
 8008694:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008698:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	695b      	ldr	r3, [r3, #20]
 800869e:	693a      	ldr	r2, [r7, #16]
 80086a0:	4313      	orrs	r3, r2
 80086a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	699b      	ldr	r3, [r3, #24]
 80086a8:	693a      	ldr	r2, [r7, #16]
 80086aa:	4313      	orrs	r3, r2
 80086ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	693a      	ldr	r2, [r7, #16]
 80086b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	68fa      	ldr	r2, [r7, #12]
 80086b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	685a      	ldr	r2, [r3, #4]
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	697a      	ldr	r2, [r7, #20]
 80086c6:	621a      	str	r2, [r3, #32]
}
 80086c8:	bf00      	nop
 80086ca:	371c      	adds	r7, #28
 80086cc:	46bd      	mov	sp, r7
 80086ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d2:	4770      	bx	lr
 80086d4:	40012c00 	.word	0x40012c00
 80086d8:	40013400 	.word	0x40013400
 80086dc:	40014000 	.word	0x40014000
 80086e0:	40014400 	.word	0x40014400
 80086e4:	40014800 	.word	0x40014800
 80086e8:	40015000 	.word	0x40015000

080086ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80086ec:	b480      	push	{r7}
 80086ee:	b087      	sub	sp, #28
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
 80086f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6a1b      	ldr	r3, [r3, #32]
 80086fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	6a1b      	ldr	r3, [r3, #32]
 8008700:	f023 0210 	bic.w	r2, r3, #16
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	685b      	ldr	r3, [r3, #4]
 800870c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	699b      	ldr	r3, [r3, #24]
 8008712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800871a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800871e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008726:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	021b      	lsls	r3, r3, #8
 800872e:	68fa      	ldr	r2, [r7, #12]
 8008730:	4313      	orrs	r3, r2
 8008732:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008734:	697b      	ldr	r3, [r7, #20]
 8008736:	f023 0320 	bic.w	r3, r3, #32
 800873a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	689b      	ldr	r3, [r3, #8]
 8008740:	011b      	lsls	r3, r3, #4
 8008742:	697a      	ldr	r2, [r7, #20]
 8008744:	4313      	orrs	r3, r2
 8008746:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	4a2c      	ldr	r2, [pc, #176]	@ (80087fc <TIM_OC2_SetConfig+0x110>)
 800874c:	4293      	cmp	r3, r2
 800874e:	d007      	beq.n	8008760 <TIM_OC2_SetConfig+0x74>
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	4a2b      	ldr	r2, [pc, #172]	@ (8008800 <TIM_OC2_SetConfig+0x114>)
 8008754:	4293      	cmp	r3, r2
 8008756:	d003      	beq.n	8008760 <TIM_OC2_SetConfig+0x74>
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	4a2a      	ldr	r2, [pc, #168]	@ (8008804 <TIM_OC2_SetConfig+0x118>)
 800875c:	4293      	cmp	r3, r2
 800875e:	d10d      	bne.n	800877c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008760:	697b      	ldr	r3, [r7, #20]
 8008762:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008766:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	68db      	ldr	r3, [r3, #12]
 800876c:	011b      	lsls	r3, r3, #4
 800876e:	697a      	ldr	r2, [r7, #20]
 8008770:	4313      	orrs	r3, r2
 8008772:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008774:	697b      	ldr	r3, [r7, #20]
 8008776:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800877a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	4a1f      	ldr	r2, [pc, #124]	@ (80087fc <TIM_OC2_SetConfig+0x110>)
 8008780:	4293      	cmp	r3, r2
 8008782:	d013      	beq.n	80087ac <TIM_OC2_SetConfig+0xc0>
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	4a1e      	ldr	r2, [pc, #120]	@ (8008800 <TIM_OC2_SetConfig+0x114>)
 8008788:	4293      	cmp	r3, r2
 800878a:	d00f      	beq.n	80087ac <TIM_OC2_SetConfig+0xc0>
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	4a1e      	ldr	r2, [pc, #120]	@ (8008808 <TIM_OC2_SetConfig+0x11c>)
 8008790:	4293      	cmp	r3, r2
 8008792:	d00b      	beq.n	80087ac <TIM_OC2_SetConfig+0xc0>
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	4a1d      	ldr	r2, [pc, #116]	@ (800880c <TIM_OC2_SetConfig+0x120>)
 8008798:	4293      	cmp	r3, r2
 800879a:	d007      	beq.n	80087ac <TIM_OC2_SetConfig+0xc0>
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	4a1c      	ldr	r2, [pc, #112]	@ (8008810 <TIM_OC2_SetConfig+0x124>)
 80087a0:	4293      	cmp	r3, r2
 80087a2:	d003      	beq.n	80087ac <TIM_OC2_SetConfig+0xc0>
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	4a17      	ldr	r2, [pc, #92]	@ (8008804 <TIM_OC2_SetConfig+0x118>)
 80087a8:	4293      	cmp	r3, r2
 80087aa:	d113      	bne.n	80087d4 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80087ac:	693b      	ldr	r3, [r7, #16]
 80087ae:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80087b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80087b4:	693b      	ldr	r3, [r7, #16]
 80087b6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80087ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	695b      	ldr	r3, [r3, #20]
 80087c0:	009b      	lsls	r3, r3, #2
 80087c2:	693a      	ldr	r2, [r7, #16]
 80087c4:	4313      	orrs	r3, r2
 80087c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	699b      	ldr	r3, [r3, #24]
 80087cc:	009b      	lsls	r3, r3, #2
 80087ce:	693a      	ldr	r2, [r7, #16]
 80087d0:	4313      	orrs	r3, r2
 80087d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	693a      	ldr	r2, [r7, #16]
 80087d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	68fa      	ldr	r2, [r7, #12]
 80087de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	685a      	ldr	r2, [r3, #4]
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	697a      	ldr	r2, [r7, #20]
 80087ec:	621a      	str	r2, [r3, #32]
}
 80087ee:	bf00      	nop
 80087f0:	371c      	adds	r7, #28
 80087f2:	46bd      	mov	sp, r7
 80087f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f8:	4770      	bx	lr
 80087fa:	bf00      	nop
 80087fc:	40012c00 	.word	0x40012c00
 8008800:	40013400 	.word	0x40013400
 8008804:	40015000 	.word	0x40015000
 8008808:	40014000 	.word	0x40014000
 800880c:	40014400 	.word	0x40014400
 8008810:	40014800 	.word	0x40014800

08008814 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008814:	b480      	push	{r7}
 8008816:	b087      	sub	sp, #28
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
 800881c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6a1b      	ldr	r3, [r3, #32]
 8008822:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	6a1b      	ldr	r3, [r3, #32]
 8008828:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	685b      	ldr	r3, [r3, #4]
 8008834:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	69db      	ldr	r3, [r3, #28]
 800883a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008842:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008846:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	f023 0303 	bic.w	r3, r3, #3
 800884e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	68fa      	ldr	r2, [r7, #12]
 8008856:	4313      	orrs	r3, r2
 8008858:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800885a:	697b      	ldr	r3, [r7, #20]
 800885c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008860:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	689b      	ldr	r3, [r3, #8]
 8008866:	021b      	lsls	r3, r3, #8
 8008868:	697a      	ldr	r2, [r7, #20]
 800886a:	4313      	orrs	r3, r2
 800886c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	4a2b      	ldr	r2, [pc, #172]	@ (8008920 <TIM_OC3_SetConfig+0x10c>)
 8008872:	4293      	cmp	r3, r2
 8008874:	d007      	beq.n	8008886 <TIM_OC3_SetConfig+0x72>
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	4a2a      	ldr	r2, [pc, #168]	@ (8008924 <TIM_OC3_SetConfig+0x110>)
 800887a:	4293      	cmp	r3, r2
 800887c:	d003      	beq.n	8008886 <TIM_OC3_SetConfig+0x72>
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	4a29      	ldr	r2, [pc, #164]	@ (8008928 <TIM_OC3_SetConfig+0x114>)
 8008882:	4293      	cmp	r3, r2
 8008884:	d10d      	bne.n	80088a2 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008886:	697b      	ldr	r3, [r7, #20]
 8008888:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800888c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	68db      	ldr	r3, [r3, #12]
 8008892:	021b      	lsls	r3, r3, #8
 8008894:	697a      	ldr	r2, [r7, #20]
 8008896:	4313      	orrs	r3, r2
 8008898:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800889a:	697b      	ldr	r3, [r7, #20]
 800889c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80088a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	4a1e      	ldr	r2, [pc, #120]	@ (8008920 <TIM_OC3_SetConfig+0x10c>)
 80088a6:	4293      	cmp	r3, r2
 80088a8:	d013      	beq.n	80088d2 <TIM_OC3_SetConfig+0xbe>
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	4a1d      	ldr	r2, [pc, #116]	@ (8008924 <TIM_OC3_SetConfig+0x110>)
 80088ae:	4293      	cmp	r3, r2
 80088b0:	d00f      	beq.n	80088d2 <TIM_OC3_SetConfig+0xbe>
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	4a1d      	ldr	r2, [pc, #116]	@ (800892c <TIM_OC3_SetConfig+0x118>)
 80088b6:	4293      	cmp	r3, r2
 80088b8:	d00b      	beq.n	80088d2 <TIM_OC3_SetConfig+0xbe>
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	4a1c      	ldr	r2, [pc, #112]	@ (8008930 <TIM_OC3_SetConfig+0x11c>)
 80088be:	4293      	cmp	r3, r2
 80088c0:	d007      	beq.n	80088d2 <TIM_OC3_SetConfig+0xbe>
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	4a1b      	ldr	r2, [pc, #108]	@ (8008934 <TIM_OC3_SetConfig+0x120>)
 80088c6:	4293      	cmp	r3, r2
 80088c8:	d003      	beq.n	80088d2 <TIM_OC3_SetConfig+0xbe>
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	4a16      	ldr	r2, [pc, #88]	@ (8008928 <TIM_OC3_SetConfig+0x114>)
 80088ce:	4293      	cmp	r3, r2
 80088d0:	d113      	bne.n	80088fa <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80088d2:	693b      	ldr	r3, [r7, #16]
 80088d4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80088d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80088da:	693b      	ldr	r3, [r7, #16]
 80088dc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80088e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	695b      	ldr	r3, [r3, #20]
 80088e6:	011b      	lsls	r3, r3, #4
 80088e8:	693a      	ldr	r2, [r7, #16]
 80088ea:	4313      	orrs	r3, r2
 80088ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	699b      	ldr	r3, [r3, #24]
 80088f2:	011b      	lsls	r3, r3, #4
 80088f4:	693a      	ldr	r2, [r7, #16]
 80088f6:	4313      	orrs	r3, r2
 80088f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	693a      	ldr	r2, [r7, #16]
 80088fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	68fa      	ldr	r2, [r7, #12]
 8008904:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	685a      	ldr	r2, [r3, #4]
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	697a      	ldr	r2, [r7, #20]
 8008912:	621a      	str	r2, [r3, #32]
}
 8008914:	bf00      	nop
 8008916:	371c      	adds	r7, #28
 8008918:	46bd      	mov	sp, r7
 800891a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891e:	4770      	bx	lr
 8008920:	40012c00 	.word	0x40012c00
 8008924:	40013400 	.word	0x40013400
 8008928:	40015000 	.word	0x40015000
 800892c:	40014000 	.word	0x40014000
 8008930:	40014400 	.word	0x40014400
 8008934:	40014800 	.word	0x40014800

08008938 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008938:	b480      	push	{r7}
 800893a:	b087      	sub	sp, #28
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
 8008940:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	6a1b      	ldr	r3, [r3, #32]
 8008946:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	6a1b      	ldr	r3, [r3, #32]
 800894c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	685b      	ldr	r3, [r3, #4]
 8008958:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	69db      	ldr	r3, [r3, #28]
 800895e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008966:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800896a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008972:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	021b      	lsls	r3, r3, #8
 800897a:	68fa      	ldr	r2, [r7, #12]
 800897c:	4313      	orrs	r3, r2
 800897e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008980:	697b      	ldr	r3, [r7, #20]
 8008982:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008986:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	689b      	ldr	r3, [r3, #8]
 800898c:	031b      	lsls	r3, r3, #12
 800898e:	697a      	ldr	r2, [r7, #20]
 8008990:	4313      	orrs	r3, r2
 8008992:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	4a2c      	ldr	r2, [pc, #176]	@ (8008a48 <TIM_OC4_SetConfig+0x110>)
 8008998:	4293      	cmp	r3, r2
 800899a:	d007      	beq.n	80089ac <TIM_OC4_SetConfig+0x74>
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	4a2b      	ldr	r2, [pc, #172]	@ (8008a4c <TIM_OC4_SetConfig+0x114>)
 80089a0:	4293      	cmp	r3, r2
 80089a2:	d003      	beq.n	80089ac <TIM_OC4_SetConfig+0x74>
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	4a2a      	ldr	r2, [pc, #168]	@ (8008a50 <TIM_OC4_SetConfig+0x118>)
 80089a8:	4293      	cmp	r3, r2
 80089aa:	d10d      	bne.n	80089c8 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80089ac:	697b      	ldr	r3, [r7, #20]
 80089ae:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80089b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	68db      	ldr	r3, [r3, #12]
 80089b8:	031b      	lsls	r3, r3, #12
 80089ba:	697a      	ldr	r2, [r7, #20]
 80089bc:	4313      	orrs	r3, r2
 80089be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80089c0:	697b      	ldr	r3, [r7, #20]
 80089c2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80089c6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	4a1f      	ldr	r2, [pc, #124]	@ (8008a48 <TIM_OC4_SetConfig+0x110>)
 80089cc:	4293      	cmp	r3, r2
 80089ce:	d013      	beq.n	80089f8 <TIM_OC4_SetConfig+0xc0>
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	4a1e      	ldr	r2, [pc, #120]	@ (8008a4c <TIM_OC4_SetConfig+0x114>)
 80089d4:	4293      	cmp	r3, r2
 80089d6:	d00f      	beq.n	80089f8 <TIM_OC4_SetConfig+0xc0>
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	4a1e      	ldr	r2, [pc, #120]	@ (8008a54 <TIM_OC4_SetConfig+0x11c>)
 80089dc:	4293      	cmp	r3, r2
 80089de:	d00b      	beq.n	80089f8 <TIM_OC4_SetConfig+0xc0>
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	4a1d      	ldr	r2, [pc, #116]	@ (8008a58 <TIM_OC4_SetConfig+0x120>)
 80089e4:	4293      	cmp	r3, r2
 80089e6:	d007      	beq.n	80089f8 <TIM_OC4_SetConfig+0xc0>
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	4a1c      	ldr	r2, [pc, #112]	@ (8008a5c <TIM_OC4_SetConfig+0x124>)
 80089ec:	4293      	cmp	r3, r2
 80089ee:	d003      	beq.n	80089f8 <TIM_OC4_SetConfig+0xc0>
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	4a17      	ldr	r2, [pc, #92]	@ (8008a50 <TIM_OC4_SetConfig+0x118>)
 80089f4:	4293      	cmp	r3, r2
 80089f6:	d113      	bne.n	8008a20 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80089f8:	693b      	ldr	r3, [r7, #16]
 80089fa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80089fe:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8008a00:	693b      	ldr	r3, [r7, #16]
 8008a02:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008a06:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	695b      	ldr	r3, [r3, #20]
 8008a0c:	019b      	lsls	r3, r3, #6
 8008a0e:	693a      	ldr	r2, [r7, #16]
 8008a10:	4313      	orrs	r3, r2
 8008a12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	699b      	ldr	r3, [r3, #24]
 8008a18:	019b      	lsls	r3, r3, #6
 8008a1a:	693a      	ldr	r2, [r7, #16]
 8008a1c:	4313      	orrs	r3, r2
 8008a1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	693a      	ldr	r2, [r7, #16]
 8008a24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	68fa      	ldr	r2, [r7, #12]
 8008a2a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	685a      	ldr	r2, [r3, #4]
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	697a      	ldr	r2, [r7, #20]
 8008a38:	621a      	str	r2, [r3, #32]
}
 8008a3a:	bf00      	nop
 8008a3c:	371c      	adds	r7, #28
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a44:	4770      	bx	lr
 8008a46:	bf00      	nop
 8008a48:	40012c00 	.word	0x40012c00
 8008a4c:	40013400 	.word	0x40013400
 8008a50:	40015000 	.word	0x40015000
 8008a54:	40014000 	.word	0x40014000
 8008a58:	40014400 	.word	0x40014400
 8008a5c:	40014800 	.word	0x40014800

08008a60 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008a60:	b480      	push	{r7}
 8008a62:	b087      	sub	sp, #28
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
 8008a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6a1b      	ldr	r3, [r3, #32]
 8008a6e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	6a1b      	ldr	r3, [r3, #32]
 8008a74:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	685b      	ldr	r3, [r3, #4]
 8008a80:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008a8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	68fa      	ldr	r2, [r7, #12]
 8008a9a:	4313      	orrs	r3, r2
 8008a9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008a9e:	693b      	ldr	r3, [r7, #16]
 8008aa0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008aa4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	689b      	ldr	r3, [r3, #8]
 8008aaa:	041b      	lsls	r3, r3, #16
 8008aac:	693a      	ldr	r2, [r7, #16]
 8008aae:	4313      	orrs	r3, r2
 8008ab0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	4a19      	ldr	r2, [pc, #100]	@ (8008b1c <TIM_OC5_SetConfig+0xbc>)
 8008ab6:	4293      	cmp	r3, r2
 8008ab8:	d013      	beq.n	8008ae2 <TIM_OC5_SetConfig+0x82>
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	4a18      	ldr	r2, [pc, #96]	@ (8008b20 <TIM_OC5_SetConfig+0xc0>)
 8008abe:	4293      	cmp	r3, r2
 8008ac0:	d00f      	beq.n	8008ae2 <TIM_OC5_SetConfig+0x82>
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	4a17      	ldr	r2, [pc, #92]	@ (8008b24 <TIM_OC5_SetConfig+0xc4>)
 8008ac6:	4293      	cmp	r3, r2
 8008ac8:	d00b      	beq.n	8008ae2 <TIM_OC5_SetConfig+0x82>
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	4a16      	ldr	r2, [pc, #88]	@ (8008b28 <TIM_OC5_SetConfig+0xc8>)
 8008ace:	4293      	cmp	r3, r2
 8008ad0:	d007      	beq.n	8008ae2 <TIM_OC5_SetConfig+0x82>
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	4a15      	ldr	r2, [pc, #84]	@ (8008b2c <TIM_OC5_SetConfig+0xcc>)
 8008ad6:	4293      	cmp	r3, r2
 8008ad8:	d003      	beq.n	8008ae2 <TIM_OC5_SetConfig+0x82>
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	4a14      	ldr	r2, [pc, #80]	@ (8008b30 <TIM_OC5_SetConfig+0xd0>)
 8008ade:	4293      	cmp	r3, r2
 8008ae0:	d109      	bne.n	8008af6 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008ae2:	697b      	ldr	r3, [r7, #20]
 8008ae4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008ae8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	695b      	ldr	r3, [r3, #20]
 8008aee:	021b      	lsls	r3, r3, #8
 8008af0:	697a      	ldr	r2, [r7, #20]
 8008af2:	4313      	orrs	r3, r2
 8008af4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	697a      	ldr	r2, [r7, #20]
 8008afa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	68fa      	ldr	r2, [r7, #12]
 8008b00:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	685a      	ldr	r2, [r3, #4]
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	693a      	ldr	r2, [r7, #16]
 8008b0e:	621a      	str	r2, [r3, #32]
}
 8008b10:	bf00      	nop
 8008b12:	371c      	adds	r7, #28
 8008b14:	46bd      	mov	sp, r7
 8008b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1a:	4770      	bx	lr
 8008b1c:	40012c00 	.word	0x40012c00
 8008b20:	40013400 	.word	0x40013400
 8008b24:	40014000 	.word	0x40014000
 8008b28:	40014400 	.word	0x40014400
 8008b2c:	40014800 	.word	0x40014800
 8008b30:	40015000 	.word	0x40015000

08008b34 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008b34:	b480      	push	{r7}
 8008b36:	b087      	sub	sp, #28
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
 8008b3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	6a1b      	ldr	r3, [r3, #32]
 8008b42:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	6a1b      	ldr	r3, [r3, #32]
 8008b48:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	685b      	ldr	r3, [r3, #4]
 8008b54:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008b62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008b66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	021b      	lsls	r3, r3, #8
 8008b6e:	68fa      	ldr	r2, [r7, #12]
 8008b70:	4313      	orrs	r3, r2
 8008b72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008b74:	693b      	ldr	r3, [r7, #16]
 8008b76:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008b7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	689b      	ldr	r3, [r3, #8]
 8008b80:	051b      	lsls	r3, r3, #20
 8008b82:	693a      	ldr	r2, [r7, #16]
 8008b84:	4313      	orrs	r3, r2
 8008b86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	4a1a      	ldr	r2, [pc, #104]	@ (8008bf4 <TIM_OC6_SetConfig+0xc0>)
 8008b8c:	4293      	cmp	r3, r2
 8008b8e:	d013      	beq.n	8008bb8 <TIM_OC6_SetConfig+0x84>
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	4a19      	ldr	r2, [pc, #100]	@ (8008bf8 <TIM_OC6_SetConfig+0xc4>)
 8008b94:	4293      	cmp	r3, r2
 8008b96:	d00f      	beq.n	8008bb8 <TIM_OC6_SetConfig+0x84>
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	4a18      	ldr	r2, [pc, #96]	@ (8008bfc <TIM_OC6_SetConfig+0xc8>)
 8008b9c:	4293      	cmp	r3, r2
 8008b9e:	d00b      	beq.n	8008bb8 <TIM_OC6_SetConfig+0x84>
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	4a17      	ldr	r2, [pc, #92]	@ (8008c00 <TIM_OC6_SetConfig+0xcc>)
 8008ba4:	4293      	cmp	r3, r2
 8008ba6:	d007      	beq.n	8008bb8 <TIM_OC6_SetConfig+0x84>
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	4a16      	ldr	r2, [pc, #88]	@ (8008c04 <TIM_OC6_SetConfig+0xd0>)
 8008bac:	4293      	cmp	r3, r2
 8008bae:	d003      	beq.n	8008bb8 <TIM_OC6_SetConfig+0x84>
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	4a15      	ldr	r2, [pc, #84]	@ (8008c08 <TIM_OC6_SetConfig+0xd4>)
 8008bb4:	4293      	cmp	r3, r2
 8008bb6:	d109      	bne.n	8008bcc <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008bb8:	697b      	ldr	r3, [r7, #20]
 8008bba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008bbe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	695b      	ldr	r3, [r3, #20]
 8008bc4:	029b      	lsls	r3, r3, #10
 8008bc6:	697a      	ldr	r2, [r7, #20]
 8008bc8:	4313      	orrs	r3, r2
 8008bca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	697a      	ldr	r2, [r7, #20]
 8008bd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	68fa      	ldr	r2, [r7, #12]
 8008bd6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	685a      	ldr	r2, [r3, #4]
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	693a      	ldr	r2, [r7, #16]
 8008be4:	621a      	str	r2, [r3, #32]
}
 8008be6:	bf00      	nop
 8008be8:	371c      	adds	r7, #28
 8008bea:	46bd      	mov	sp, r7
 8008bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf0:	4770      	bx	lr
 8008bf2:	bf00      	nop
 8008bf4:	40012c00 	.word	0x40012c00
 8008bf8:	40013400 	.word	0x40013400
 8008bfc:	40014000 	.word	0x40014000
 8008c00:	40014400 	.word	0x40014400
 8008c04:	40014800 	.word	0x40014800
 8008c08:	40015000 	.word	0x40015000

08008c0c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008c0c:	b480      	push	{r7}
 8008c0e:	b087      	sub	sp, #28
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	60f8      	str	r0, [r7, #12]
 8008c14:	60b9      	str	r1, [r7, #8]
 8008c16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	6a1b      	ldr	r3, [r3, #32]
 8008c1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	6a1b      	ldr	r3, [r3, #32]
 8008c22:	f023 0201 	bic.w	r2, r3, #1
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	699b      	ldr	r3, [r3, #24]
 8008c2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008c30:	693b      	ldr	r3, [r7, #16]
 8008c32:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008c36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	011b      	lsls	r3, r3, #4
 8008c3c:	693a      	ldr	r2, [r7, #16]
 8008c3e:	4313      	orrs	r3, r2
 8008c40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008c42:	697b      	ldr	r3, [r7, #20]
 8008c44:	f023 030a 	bic.w	r3, r3, #10
 8008c48:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008c4a:	697a      	ldr	r2, [r7, #20]
 8008c4c:	68bb      	ldr	r3, [r7, #8]
 8008c4e:	4313      	orrs	r3, r2
 8008c50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	693a      	ldr	r2, [r7, #16]
 8008c56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	697a      	ldr	r2, [r7, #20]
 8008c5c:	621a      	str	r2, [r3, #32]
}
 8008c5e:	bf00      	nop
 8008c60:	371c      	adds	r7, #28
 8008c62:	46bd      	mov	sp, r7
 8008c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c68:	4770      	bx	lr

08008c6a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008c6a:	b480      	push	{r7}
 8008c6c:	b087      	sub	sp, #28
 8008c6e:	af00      	add	r7, sp, #0
 8008c70:	60f8      	str	r0, [r7, #12]
 8008c72:	60b9      	str	r1, [r7, #8]
 8008c74:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	6a1b      	ldr	r3, [r3, #32]
 8008c7a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	6a1b      	ldr	r3, [r3, #32]
 8008c80:	f023 0210 	bic.w	r2, r3, #16
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	699b      	ldr	r3, [r3, #24]
 8008c8c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008c8e:	693b      	ldr	r3, [r7, #16]
 8008c90:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008c94:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	031b      	lsls	r3, r3, #12
 8008c9a:	693a      	ldr	r2, [r7, #16]
 8008c9c:	4313      	orrs	r3, r2
 8008c9e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008ca0:	697b      	ldr	r3, [r7, #20]
 8008ca2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008ca6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008ca8:	68bb      	ldr	r3, [r7, #8]
 8008caa:	011b      	lsls	r3, r3, #4
 8008cac:	697a      	ldr	r2, [r7, #20]
 8008cae:	4313      	orrs	r3, r2
 8008cb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	693a      	ldr	r2, [r7, #16]
 8008cb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	697a      	ldr	r2, [r7, #20]
 8008cbc:	621a      	str	r2, [r3, #32]
}
 8008cbe:	bf00      	nop
 8008cc0:	371c      	adds	r7, #28
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc8:	4770      	bx	lr

08008cca <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008cca:	b480      	push	{r7}
 8008ccc:	b085      	sub	sp, #20
 8008cce:	af00      	add	r7, sp, #0
 8008cd0:	6078      	str	r0, [r7, #4]
 8008cd2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	689b      	ldr	r3, [r3, #8]
 8008cd8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8008ce0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ce4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008ce6:	683a      	ldr	r2, [r7, #0]
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	4313      	orrs	r3, r2
 8008cec:	f043 0307 	orr.w	r3, r3, #7
 8008cf0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	68fa      	ldr	r2, [r7, #12]
 8008cf6:	609a      	str	r2, [r3, #8]
}
 8008cf8:	bf00      	nop
 8008cfa:	3714      	adds	r7, #20
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d02:	4770      	bx	lr

08008d04 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008d04:	b480      	push	{r7}
 8008d06:	b087      	sub	sp, #28
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	60f8      	str	r0, [r7, #12]
 8008d0c:	60b9      	str	r1, [r7, #8]
 8008d0e:	607a      	str	r2, [r7, #4]
 8008d10:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	689b      	ldr	r3, [r3, #8]
 8008d16:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008d18:	697b      	ldr	r3, [r7, #20]
 8008d1a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008d1e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	021a      	lsls	r2, r3, #8
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	431a      	orrs	r2, r3
 8008d28:	68bb      	ldr	r3, [r7, #8]
 8008d2a:	4313      	orrs	r3, r2
 8008d2c:	697a      	ldr	r2, [r7, #20]
 8008d2e:	4313      	orrs	r3, r2
 8008d30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	697a      	ldr	r2, [r7, #20]
 8008d36:	609a      	str	r2, [r3, #8]
}
 8008d38:	bf00      	nop
 8008d3a:	371c      	adds	r7, #28
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d42:	4770      	bx	lr

08008d44 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008d44:	b480      	push	{r7}
 8008d46:	b087      	sub	sp, #28
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	60f8      	str	r0, [r7, #12]
 8008d4c:	60b9      	str	r1, [r7, #8]
 8008d4e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008d50:	68bb      	ldr	r3, [r7, #8]
 8008d52:	f003 031f 	and.w	r3, r3, #31
 8008d56:	2201      	movs	r2, #1
 8008d58:	fa02 f303 	lsl.w	r3, r2, r3
 8008d5c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	6a1a      	ldr	r2, [r3, #32]
 8008d62:	697b      	ldr	r3, [r7, #20]
 8008d64:	43db      	mvns	r3, r3
 8008d66:	401a      	ands	r2, r3
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	6a1a      	ldr	r2, [r3, #32]
 8008d70:	68bb      	ldr	r3, [r7, #8]
 8008d72:	f003 031f 	and.w	r3, r3, #31
 8008d76:	6879      	ldr	r1, [r7, #4]
 8008d78:	fa01 f303 	lsl.w	r3, r1, r3
 8008d7c:	431a      	orrs	r2, r3
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	621a      	str	r2, [r3, #32]
}
 8008d82:	bf00      	nop
 8008d84:	371c      	adds	r7, #28
 8008d86:	46bd      	mov	sp, r7
 8008d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8c:	4770      	bx	lr
	...

08008d90 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8008d90:	b480      	push	{r7}
 8008d92:	b083      	sub	sp, #12
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	4a26      	ldr	r2, [pc, #152]	@ (8008e34 <TIM_ResetCallback+0xa4>)
 8008d9c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	4a25      	ldr	r2, [pc, #148]	@ (8008e38 <TIM_ResetCallback+0xa8>)
 8008da4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	4a24      	ldr	r2, [pc, #144]	@ (8008e3c <TIM_ResetCallback+0xac>)
 8008dac:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	4a23      	ldr	r2, [pc, #140]	@ (8008e40 <TIM_ResetCallback+0xb0>)
 8008db4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	4a22      	ldr	r2, [pc, #136]	@ (8008e44 <TIM_ResetCallback+0xb4>)
 8008dbc:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	4a21      	ldr	r2, [pc, #132]	@ (8008e48 <TIM_ResetCallback+0xb8>)
 8008dc4:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	4a20      	ldr	r2, [pc, #128]	@ (8008e4c <TIM_ResetCallback+0xbc>)
 8008dcc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	4a1f      	ldr	r2, [pc, #124]	@ (8008e50 <TIM_ResetCallback+0xc0>)
 8008dd4:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	4a1e      	ldr	r2, [pc, #120]	@ (8008e54 <TIM_ResetCallback+0xc4>)
 8008ddc:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	4a1d      	ldr	r2, [pc, #116]	@ (8008e58 <TIM_ResetCallback+0xc8>)
 8008de4:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	4a1c      	ldr	r2, [pc, #112]	@ (8008e5c <TIM_ResetCallback+0xcc>)
 8008dec:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	4a1b      	ldr	r2, [pc, #108]	@ (8008e60 <TIM_ResetCallback+0xd0>)
 8008df4:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	4a1a      	ldr	r2, [pc, #104]	@ (8008e64 <TIM_ResetCallback+0xd4>)
 8008dfc:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	4a19      	ldr	r2, [pc, #100]	@ (8008e68 <TIM_ResetCallback+0xd8>)
 8008e04:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	4a18      	ldr	r2, [pc, #96]	@ (8008e6c <TIM_ResetCallback+0xdc>)
 8008e0c:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	4a17      	ldr	r2, [pc, #92]	@ (8008e70 <TIM_ResetCallback+0xe0>)
 8008e14:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	4a16      	ldr	r2, [pc, #88]	@ (8008e74 <TIM_ResetCallback+0xe4>)
 8008e1c:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	4a15      	ldr	r2, [pc, #84]	@ (8008e78 <TIM_ResetCallback+0xe8>)
 8008e24:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8008e28:	bf00      	nop
 8008e2a:	370c      	adds	r7, #12
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e32:	4770      	bx	lr
 8008e34:	080020f9 	.word	0x080020f9
 8008e38:	080080dd 	.word	0x080080dd
 8008e3c:	08008155 	.word	0x08008155
 8008e40:	08008169 	.word	0x08008169
 8008e44:	08008105 	.word	0x08008105
 8008e48:	08008119 	.word	0x08008119
 8008e4c:	080080f1 	.word	0x080080f1
 8008e50:	0800812d 	.word	0x0800812d
 8008e54:	08008141 	.word	0x08008141
 8008e58:	0800817d 	.word	0x0800817d
 8008e5c:	08008fa9 	.word	0x08008fa9
 8008e60:	08008fbd 	.word	0x08008fbd
 8008e64:	08008fd1 	.word	0x08008fd1
 8008e68:	08008fe5 	.word	0x08008fe5
 8008e6c:	08008ff9 	.word	0x08008ff9
 8008e70:	0800900d 	.word	0x0800900d
 8008e74:	08009021 	.word	0x08009021
 8008e78:	08009035 	.word	0x08009035

08008e7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008e7c:	b480      	push	{r7}
 8008e7e:	b085      	sub	sp, #20
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
 8008e84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008e8c:	2b01      	cmp	r3, #1
 8008e8e:	d101      	bne.n	8008e94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008e90:	2302      	movs	r3, #2
 8008e92:	e074      	b.n	8008f7e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2201      	movs	r2, #1
 8008e98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2202      	movs	r2, #2
 8008ea0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	685b      	ldr	r3, [r3, #4]
 8008eaa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	689b      	ldr	r3, [r3, #8]
 8008eb2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	4a34      	ldr	r2, [pc, #208]	@ (8008f8c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008eba:	4293      	cmp	r3, r2
 8008ebc:	d009      	beq.n	8008ed2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	4a33      	ldr	r2, [pc, #204]	@ (8008f90 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008ec4:	4293      	cmp	r3, r2
 8008ec6:	d004      	beq.n	8008ed2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	4a31      	ldr	r2, [pc, #196]	@ (8008f94 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008ece:	4293      	cmp	r3, r2
 8008ed0:	d108      	bne.n	8008ee4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008ed8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	685b      	ldr	r3, [r3, #4]
 8008ede:	68fa      	ldr	r2, [r7, #12]
 8008ee0:	4313      	orrs	r3, r2
 8008ee2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8008eea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008eee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008ef0:	683b      	ldr	r3, [r7, #0]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	68fa      	ldr	r2, [r7, #12]
 8008ef6:	4313      	orrs	r3, r2
 8008ef8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	68fa      	ldr	r2, [r7, #12]
 8008f00:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	4a21      	ldr	r2, [pc, #132]	@ (8008f8c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008f08:	4293      	cmp	r3, r2
 8008f0a:	d022      	beq.n	8008f52 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f14:	d01d      	beq.n	8008f52 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	4a1f      	ldr	r2, [pc, #124]	@ (8008f98 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8008f1c:	4293      	cmp	r3, r2
 8008f1e:	d018      	beq.n	8008f52 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	4a1d      	ldr	r2, [pc, #116]	@ (8008f9c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8008f26:	4293      	cmp	r3, r2
 8008f28:	d013      	beq.n	8008f52 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	4a1c      	ldr	r2, [pc, #112]	@ (8008fa0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8008f30:	4293      	cmp	r3, r2
 8008f32:	d00e      	beq.n	8008f52 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	4a15      	ldr	r2, [pc, #84]	@ (8008f90 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008f3a:	4293      	cmp	r3, r2
 8008f3c:	d009      	beq.n	8008f52 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	4a18      	ldr	r2, [pc, #96]	@ (8008fa4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8008f44:	4293      	cmp	r3, r2
 8008f46:	d004      	beq.n	8008f52 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	4a11      	ldr	r2, [pc, #68]	@ (8008f94 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008f4e:	4293      	cmp	r3, r2
 8008f50:	d10c      	bne.n	8008f6c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008f52:	68bb      	ldr	r3, [r7, #8]
 8008f54:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008f58:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	689b      	ldr	r3, [r3, #8]
 8008f5e:	68ba      	ldr	r2, [r7, #8]
 8008f60:	4313      	orrs	r3, r2
 8008f62:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	68ba      	ldr	r2, [r7, #8]
 8008f6a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2201      	movs	r2, #1
 8008f70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2200      	movs	r2, #0
 8008f78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008f7c:	2300      	movs	r3, #0
}
 8008f7e:	4618      	mov	r0, r3
 8008f80:	3714      	adds	r7, #20
 8008f82:	46bd      	mov	sp, r7
 8008f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f88:	4770      	bx	lr
 8008f8a:	bf00      	nop
 8008f8c:	40012c00 	.word	0x40012c00
 8008f90:	40013400 	.word	0x40013400
 8008f94:	40015000 	.word	0x40015000
 8008f98:	40000400 	.word	0x40000400
 8008f9c:	40000800 	.word	0x40000800
 8008fa0:	40000c00 	.word	0x40000c00
 8008fa4:	40014000 	.word	0x40014000

08008fa8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008fa8:	b480      	push	{r7}
 8008faa:	b083      	sub	sp, #12
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008fb0:	bf00      	nop
 8008fb2:	370c      	adds	r7, #12
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fba:	4770      	bx	lr

08008fbc <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008fbc:	b480      	push	{r7}
 8008fbe:	b083      	sub	sp, #12
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8008fc4:	bf00      	nop
 8008fc6:	370c      	adds	r7, #12
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fce:	4770      	bx	lr

08008fd0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008fd0:	b480      	push	{r7}
 8008fd2:	b083      	sub	sp, #12
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008fd8:	bf00      	nop
 8008fda:	370c      	adds	r7, #12
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe2:	4770      	bx	lr

08008fe4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008fe4:	b480      	push	{r7}
 8008fe6:	b083      	sub	sp, #12
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008fec:	bf00      	nop
 8008fee:	370c      	adds	r7, #12
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff6:	4770      	bx	lr

08008ff8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8008ff8:	b480      	push	{r7}
 8008ffa:	b083      	sub	sp, #12
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8009000:	bf00      	nop
 8009002:	370c      	adds	r7, #12
 8009004:	46bd      	mov	sp, r7
 8009006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900a:	4770      	bx	lr

0800900c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800900c:	b480      	push	{r7}
 800900e:	b083      	sub	sp, #12
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8009014:	bf00      	nop
 8009016:	370c      	adds	r7, #12
 8009018:	46bd      	mov	sp, r7
 800901a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901e:	4770      	bx	lr

08009020 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8009020:	b480      	push	{r7}
 8009022:	b083      	sub	sp, #12
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8009028:	bf00      	nop
 800902a:	370c      	adds	r7, #12
 800902c:	46bd      	mov	sp, r7
 800902e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009032:	4770      	bx	lr

08009034 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8009034:	b480      	push	{r7}
 8009036:	b083      	sub	sp, #12
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800903c:	bf00      	nop
 800903e:	370c      	adds	r7, #12
 8009040:	46bd      	mov	sp, r7
 8009042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009046:	4770      	bx	lr

08009048 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b082      	sub	sp, #8
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d101      	bne.n	800905a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009056:	2301      	movs	r3, #1
 8009058:	e050      	b.n	80090fc <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009060:	2b00      	cmp	r3, #0
 8009062:	d114      	bne.n	800908e <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2200      	movs	r2, #0
 8009068:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800906c:	6878      	ldr	r0, [r7, #4]
 800906e:	f000 fd45 	bl	8009afc <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8009078:	2b00      	cmp	r3, #0
 800907a:	d103      	bne.n	8009084 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	4a21      	ldr	r2, [pc, #132]	@ (8009104 <HAL_UART_Init+0xbc>)
 8009080:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800908a:	6878      	ldr	r0, [r7, #4]
 800908c:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2224      	movs	r2, #36	@ 0x24
 8009092:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	681a      	ldr	r2, [r3, #0]
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	f022 0201 	bic.w	r2, r2, #1
 80090a4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d002      	beq.n	80090b4 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f001 f872 	bl	800a198 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80090b4:	6878      	ldr	r0, [r7, #4]
 80090b6:	f000 fd73 	bl	8009ba0 <UART_SetConfig>
 80090ba:	4603      	mov	r3, r0
 80090bc:	2b01      	cmp	r3, #1
 80090be:	d101      	bne.n	80090c4 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 80090c0:	2301      	movs	r3, #1
 80090c2:	e01b      	b.n	80090fc <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	685a      	ldr	r2, [r3, #4]
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80090d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	689a      	ldr	r2, [r3, #8]
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80090e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	681a      	ldr	r2, [r3, #0]
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	f042 0201 	orr.w	r2, r2, #1
 80090f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80090f4:	6878      	ldr	r0, [r7, #4]
 80090f6:	f001 f8f1 	bl	800a2dc <UART_CheckIdleState>
 80090fa:	4603      	mov	r3, r0
}
 80090fc:	4618      	mov	r0, r3
 80090fe:	3708      	adds	r7, #8
 8009100:	46bd      	mov	sp, r7
 8009102:	bd80      	pop	{r7, pc}
 8009104:	0800381d 	.word	0x0800381d

08009108 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 8009108:	b480      	push	{r7}
 800910a:	b087      	sub	sp, #28
 800910c:	af00      	add	r7, sp, #0
 800910e:	60f8      	str	r0, [r7, #12]
 8009110:	460b      	mov	r3, r1
 8009112:	607a      	str	r2, [r7, #4]
 8009114:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8009116:	2300      	movs	r3, #0
 8009118:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d109      	bne.n	8009134 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009126:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 8009130:	2301      	movs	r3, #1
 8009132:	e09c      	b.n	800926e <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800913a:	2b20      	cmp	r3, #32
 800913c:	d16c      	bne.n	8009218 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 800913e:	7afb      	ldrb	r3, [r7, #11]
 8009140:	2b0c      	cmp	r3, #12
 8009142:	d85e      	bhi.n	8009202 <HAL_UART_RegisterCallback+0xfa>
 8009144:	a201      	add	r2, pc, #4	@ (adr r2, 800914c <HAL_UART_RegisterCallback+0x44>)
 8009146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800914a:	bf00      	nop
 800914c:	08009181 	.word	0x08009181
 8009150:	0800918b 	.word	0x0800918b
 8009154:	08009195 	.word	0x08009195
 8009158:	0800919f 	.word	0x0800919f
 800915c:	080091a9 	.word	0x080091a9
 8009160:	080091b3 	.word	0x080091b3
 8009164:	080091bd 	.word	0x080091bd
 8009168:	080091c7 	.word	0x080091c7
 800916c:	080091d1 	.word	0x080091d1
 8009170:	080091db 	.word	0x080091db
 8009174:	080091e5 	.word	0x080091e5
 8009178:	080091ef 	.word	0x080091ef
 800917c:	080091f9 	.word	0x080091f9
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	687a      	ldr	r2, [r7, #4]
 8009184:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8009188:	e070      	b.n	800926c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	687a      	ldr	r2, [r7, #4]
 800918e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8009192:	e06b      	b.n	800926c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	687a      	ldr	r2, [r7, #4]
 8009198:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800919c:	e066      	b.n	800926c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	687a      	ldr	r2, [r7, #4]
 80091a2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 80091a6:	e061      	b.n	800926c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	687a      	ldr	r2, [r7, #4]
 80091ac:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 80091b0:	e05c      	b.n	800926c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	687a      	ldr	r2, [r7, #4]
 80091b6:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 80091ba:	e057      	b.n	800926c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	687a      	ldr	r2, [r7, #4]
 80091c0:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 80091c4:	e052      	b.n	800926c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	687a      	ldr	r2, [r7, #4]
 80091ca:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 80091ce:	e04d      	b.n	800926c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	687a      	ldr	r2, [r7, #4]
 80091d4:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 80091d8:	e048      	b.n	800926c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	687a      	ldr	r2, [r7, #4]
 80091de:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 80091e2:	e043      	b.n	800926c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	687a      	ldr	r2, [r7, #4]
 80091e8:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 80091ec:	e03e      	b.n	800926c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	687a      	ldr	r2, [r7, #4]
 80091f2:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 80091f6:	e039      	b.n	800926c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	687a      	ldr	r2, [r7, #4]
 80091fc:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8009200:	e034      	b.n	800926c <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009208:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 8009212:	2301      	movs	r3, #1
 8009214:	75fb      	strb	r3, [r7, #23]
        break;
 8009216:	e029      	b.n	800926c <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800921e:	2b00      	cmp	r3, #0
 8009220:	d11a      	bne.n	8009258 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 8009222:	7afb      	ldrb	r3, [r7, #11]
 8009224:	2b0b      	cmp	r3, #11
 8009226:	d002      	beq.n	800922e <HAL_UART_RegisterCallback+0x126>
 8009228:	2b0c      	cmp	r3, #12
 800922a:	d005      	beq.n	8009238 <HAL_UART_RegisterCallback+0x130>
 800922c:	e009      	b.n	8009242 <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	687a      	ldr	r2, [r7, #4]
 8009232:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8009236:	e019      	b.n	800926c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	687a      	ldr	r2, [r7, #4]
 800923c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8009240:	e014      	b.n	800926c <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009248:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 8009252:	2301      	movs	r3, #1
 8009254:	75fb      	strb	r3, [r7, #23]
        break;
 8009256:	e009      	b.n	800926c <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800925e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 8009268:	2301      	movs	r3, #1
 800926a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800926c:	7dfb      	ldrb	r3, [r7, #23]
}
 800926e:	4618      	mov	r0, r3
 8009270:	371c      	adds	r7, #28
 8009272:	46bd      	mov	sp, r7
 8009274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009278:	4770      	bx	lr
 800927a:	bf00      	nop

0800927c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b08a      	sub	sp, #40	@ 0x28
 8009280:	af00      	add	r7, sp, #0
 8009282:	60f8      	str	r0, [r7, #12]
 8009284:	60b9      	str	r1, [r7, #8]
 8009286:	4613      	mov	r3, r2
 8009288:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009290:	2b20      	cmp	r3, #32
 8009292:	d137      	bne.n	8009304 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8009294:	68bb      	ldr	r3, [r7, #8]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d002      	beq.n	80092a0 <HAL_UART_Receive_DMA+0x24>
 800929a:	88fb      	ldrh	r3, [r7, #6]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d101      	bne.n	80092a4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80092a0:	2301      	movs	r3, #1
 80092a2:	e030      	b.n	8009306 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	2200      	movs	r2, #0
 80092a8:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	4a18      	ldr	r2, [pc, #96]	@ (8009310 <HAL_UART_Receive_DMA+0x94>)
 80092b0:	4293      	cmp	r3, r2
 80092b2:	d01f      	beq.n	80092f4 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	685b      	ldr	r3, [r3, #4]
 80092ba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d018      	beq.n	80092f4 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092c8:	697b      	ldr	r3, [r7, #20]
 80092ca:	e853 3f00 	ldrex	r3, [r3]
 80092ce:	613b      	str	r3, [r7, #16]
   return(result);
 80092d0:	693b      	ldr	r3, [r7, #16]
 80092d2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80092d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	461a      	mov	r2, r3
 80092de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092e0:	623b      	str	r3, [r7, #32]
 80092e2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092e4:	69f9      	ldr	r1, [r7, #28]
 80092e6:	6a3a      	ldr	r2, [r7, #32]
 80092e8:	e841 2300 	strex	r3, r2, [r1]
 80092ec:	61bb      	str	r3, [r7, #24]
   return(result);
 80092ee:	69bb      	ldr	r3, [r7, #24]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d1e6      	bne.n	80092c2 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80092f4:	88fb      	ldrh	r3, [r7, #6]
 80092f6:	461a      	mov	r2, r3
 80092f8:	68b9      	ldr	r1, [r7, #8]
 80092fa:	68f8      	ldr	r0, [r7, #12]
 80092fc:	f001 f906 	bl	800a50c <UART_Start_Receive_DMA>
 8009300:	4603      	mov	r3, r0
 8009302:	e000      	b.n	8009306 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009304:	2302      	movs	r3, #2
  }
}
 8009306:	4618      	mov	r0, r3
 8009308:	3728      	adds	r7, #40	@ 0x28
 800930a:	46bd      	mov	sp, r7
 800930c:	bd80      	pop	{r7, pc}
 800930e:	bf00      	nop
 8009310:	40008000 	.word	0x40008000

08009314 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009314:	b580      	push	{r7, lr}
 8009316:	b0ba      	sub	sp, #232	@ 0xe8
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	69db      	ldr	r3, [r3, #28]
 8009322:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	689b      	ldr	r3, [r3, #8]
 8009336:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800933a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800933e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8009342:	4013      	ands	r3, r2
 8009344:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8009348:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800934c:	2b00      	cmp	r3, #0
 800934e:	d11b      	bne.n	8009388 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009350:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009354:	f003 0320 	and.w	r3, r3, #32
 8009358:	2b00      	cmp	r3, #0
 800935a:	d015      	beq.n	8009388 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800935c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009360:	f003 0320 	and.w	r3, r3, #32
 8009364:	2b00      	cmp	r3, #0
 8009366:	d105      	bne.n	8009374 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009368:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800936c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009370:	2b00      	cmp	r3, #0
 8009372:	d009      	beq.n	8009388 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009378:	2b00      	cmp	r3, #0
 800937a:	f000 82f3 	beq.w	8009964 <HAL_UART_IRQHandler+0x650>
      {
        huart->RxISR(huart);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	4798      	blx	r3
      }
      return;
 8009386:	e2ed      	b.n	8009964 <HAL_UART_IRQHandler+0x650>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009388:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800938c:	2b00      	cmp	r3, #0
 800938e:	f000 8129 	beq.w	80095e4 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009392:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009396:	4b90      	ldr	r3, [pc, #576]	@ (80095d8 <HAL_UART_IRQHandler+0x2c4>)
 8009398:	4013      	ands	r3, r2
 800939a:	2b00      	cmp	r3, #0
 800939c:	d106      	bne.n	80093ac <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800939e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80093a2:	4b8e      	ldr	r3, [pc, #568]	@ (80095dc <HAL_UART_IRQHandler+0x2c8>)
 80093a4:	4013      	ands	r3, r2
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	f000 811c 	beq.w	80095e4 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80093ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80093b0:	f003 0301 	and.w	r3, r3, #1
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d011      	beq.n	80093dc <HAL_UART_IRQHandler+0xc8>
 80093b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80093bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d00b      	beq.n	80093dc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	2201      	movs	r2, #1
 80093ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093d2:	f043 0201 	orr.w	r2, r3, #1
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80093dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80093e0:	f003 0302 	and.w	r3, r3, #2
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d011      	beq.n	800940c <HAL_UART_IRQHandler+0xf8>
 80093e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80093ec:	f003 0301 	and.w	r3, r3, #1
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d00b      	beq.n	800940c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	2202      	movs	r2, #2
 80093fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009402:	f043 0204 	orr.w	r2, r3, #4
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800940c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009410:	f003 0304 	and.w	r3, r3, #4
 8009414:	2b00      	cmp	r3, #0
 8009416:	d011      	beq.n	800943c <HAL_UART_IRQHandler+0x128>
 8009418:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800941c:	f003 0301 	and.w	r3, r3, #1
 8009420:	2b00      	cmp	r3, #0
 8009422:	d00b      	beq.n	800943c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	2204      	movs	r2, #4
 800942a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009432:	f043 0202 	orr.w	r2, r3, #2
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800943c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009440:	f003 0308 	and.w	r3, r3, #8
 8009444:	2b00      	cmp	r3, #0
 8009446:	d017      	beq.n	8009478 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009448:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800944c:	f003 0320 	and.w	r3, r3, #32
 8009450:	2b00      	cmp	r3, #0
 8009452:	d105      	bne.n	8009460 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009454:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009458:	4b5f      	ldr	r3, [pc, #380]	@ (80095d8 <HAL_UART_IRQHandler+0x2c4>)
 800945a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800945c:	2b00      	cmp	r3, #0
 800945e:	d00b      	beq.n	8009478 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	2208      	movs	r2, #8
 8009466:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800946e:	f043 0208 	orr.w	r2, r3, #8
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009478:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800947c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009480:	2b00      	cmp	r3, #0
 8009482:	d012      	beq.n	80094aa <HAL_UART_IRQHandler+0x196>
 8009484:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009488:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800948c:	2b00      	cmp	r3, #0
 800948e:	d00c      	beq.n	80094aa <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009498:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80094a0:	f043 0220 	orr.w	r2, r3, #32
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	f000 8259 	beq.w	8009968 <HAL_UART_IRQHandler+0x654>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80094b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80094ba:	f003 0320 	and.w	r3, r3, #32
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d013      	beq.n	80094ea <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80094c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80094c6:	f003 0320 	and.w	r3, r3, #32
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d105      	bne.n	80094da <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80094ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80094d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d007      	beq.n	80094ea <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d003      	beq.n	80094ea <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80094f0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	689b      	ldr	r3, [r3, #8]
 80094fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094fe:	2b40      	cmp	r3, #64	@ 0x40
 8009500:	d005      	beq.n	800950e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009502:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009506:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800950a:	2b00      	cmp	r3, #0
 800950c:	d058      	beq.n	80095c0 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800950e:	6878      	ldr	r0, [r7, #4]
 8009510:	f001 f8e3 	bl	800a6da <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	689b      	ldr	r3, [r3, #8]
 800951a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800951e:	2b40      	cmp	r3, #64	@ 0x40
 8009520:	d148      	bne.n	80095b4 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	3308      	adds	r3, #8
 8009528:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800952c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009530:	e853 3f00 	ldrex	r3, [r3]
 8009534:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009538:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800953c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009540:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	3308      	adds	r3, #8
 800954a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800954e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009552:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009556:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800955a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800955e:	e841 2300 	strex	r3, r2, [r1]
 8009562:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009566:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800956a:	2b00      	cmp	r3, #0
 800956c:	d1d9      	bne.n	8009522 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009574:	2b00      	cmp	r3, #0
 8009576:	d017      	beq.n	80095a8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800957e:	4a18      	ldr	r2, [pc, #96]	@ (80095e0 <HAL_UART_IRQHandler+0x2cc>)
 8009580:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009588:	4618      	mov	r0, r3
 800958a:	f7fc f94f 	bl	800582c <HAL_DMA_Abort_IT>
 800958e:	4603      	mov	r3, r0
 8009590:	2b00      	cmp	r3, #0
 8009592:	d01f      	beq.n	80095d4 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800959a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800959c:	687a      	ldr	r2, [r7, #4]
 800959e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80095a2:	4610      	mov	r0, r2
 80095a4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095a6:	e015      	b.n	80095d4 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80095ae:	6878      	ldr	r0, [r7, #4]
 80095b0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095b2:	e00f      	b.n	80095d4 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80095ba:	6878      	ldr	r0, [r7, #4]
 80095bc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095be:	e009      	b.n	80095d4 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80095c6:	6878      	ldr	r0, [r7, #4]
 80095c8:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	2200      	movs	r2, #0
 80095ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80095d2:	e1c9      	b.n	8009968 <HAL_UART_IRQHandler+0x654>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095d4:	bf00      	nop
    return;
 80095d6:	e1c7      	b.n	8009968 <HAL_UART_IRQHandler+0x654>
 80095d8:	10000001 	.word	0x10000001
 80095dc:	04000120 	.word	0x04000120
 80095e0:	0800a9a5 	.word	0x0800a9a5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80095e8:	2b01      	cmp	r3, #1
 80095ea:	f040 8157 	bne.w	800989c <HAL_UART_IRQHandler+0x588>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80095ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80095f2:	f003 0310 	and.w	r3, r3, #16
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	f000 8150 	beq.w	800989c <HAL_UART_IRQHandler+0x588>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80095fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009600:	f003 0310 	and.w	r3, r3, #16
 8009604:	2b00      	cmp	r3, #0
 8009606:	f000 8149 	beq.w	800989c <HAL_UART_IRQHandler+0x588>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	2210      	movs	r2, #16
 8009610:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	689b      	ldr	r3, [r3, #8]
 8009618:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800961c:	2b40      	cmp	r3, #64	@ 0x40
 800961e:	f040 80bd 	bne.w	800979c <HAL_UART_IRQHandler+0x488>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	685b      	ldr	r3, [r3, #4]
 800962c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009630:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009634:	2b00      	cmp	r3, #0
 8009636:	f000 8199 	beq.w	800996c <HAL_UART_IRQHandler+0x658>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009640:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009644:	429a      	cmp	r2, r3
 8009646:	f080 8191 	bcs.w	800996c <HAL_UART_IRQHandler+0x658>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009650:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	f003 0320 	and.w	r3, r3, #32
 8009662:	2b00      	cmp	r3, #0
 8009664:	f040 8087 	bne.w	8009776 <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009670:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009674:	e853 3f00 	ldrex	r3, [r3]
 8009678:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800967c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009680:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009684:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	461a      	mov	r2, r3
 800968e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009692:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009696:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800969a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800969e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80096a2:	e841 2300 	strex	r3, r2, [r1]
 80096a6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80096aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d1da      	bne.n	8009668 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	3308      	adds	r3, #8
 80096b8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096ba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80096bc:	e853 3f00 	ldrex	r3, [r3]
 80096c0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80096c2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80096c4:	f023 0301 	bic.w	r3, r3, #1
 80096c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	3308      	adds	r3, #8
 80096d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80096d6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80096da:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096dc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80096de:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80096e2:	e841 2300 	strex	r3, r2, [r1]
 80096e6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80096e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d1e1      	bne.n	80096b2 <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	3308      	adds	r3, #8
 80096f4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096f6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80096f8:	e853 3f00 	ldrex	r3, [r3]
 80096fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80096fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009700:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009704:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	3308      	adds	r3, #8
 800970e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009712:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009714:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009716:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009718:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800971a:	e841 2300 	strex	r3, r2, [r1]
 800971e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009720:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009722:	2b00      	cmp	r3, #0
 8009724:	d1e3      	bne.n	80096ee <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	2220      	movs	r2, #32
 800972a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	2200      	movs	r2, #0
 8009732:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800973a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800973c:	e853 3f00 	ldrex	r3, [r3]
 8009740:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009742:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009744:	f023 0310 	bic.w	r3, r3, #16
 8009748:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	461a      	mov	r2, r3
 8009752:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009756:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009758:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800975a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800975c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800975e:	e841 2300 	strex	r3, r2, [r1]
 8009762:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009764:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009766:	2b00      	cmp	r3, #0
 8009768:	d1e4      	bne.n	8009734 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009770:	4618      	mov	r0, r3
 8009772:	f7fc f802 	bl	800577a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	2202      	movs	r2, #2
 800977a:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009782:	687a      	ldr	r2, [r7, #4]
 8009784:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 8009788:	687a      	ldr	r2, [r7, #4]
 800978a:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 800978e:	b292      	uxth	r2, r2
 8009790:	1a8a      	subs	r2, r1, r2
 8009792:	b292      	uxth	r2, r2
 8009794:	4611      	mov	r1, r2
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800979a:	e0e7      	b.n	800996c <HAL_UART_IRQHandler+0x658>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80097a8:	b29b      	uxth	r3, r3
 80097aa:	1ad3      	subs	r3, r2, r3
 80097ac:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80097b6:	b29b      	uxth	r3, r3
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	f000 80d9 	beq.w	8009970 <HAL_UART_IRQHandler+0x65c>
          && (nb_rx_data > 0U))
 80097be:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	f000 80d4 	beq.w	8009970 <HAL_UART_IRQHandler+0x65c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097d0:	e853 3f00 	ldrex	r3, [r3]
 80097d4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80097d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80097dc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	461a      	mov	r2, r3
 80097e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80097ea:	647b      	str	r3, [r7, #68]	@ 0x44
 80097ec:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097ee:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80097f0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80097f2:	e841 2300 	strex	r3, r2, [r1]
 80097f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80097f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d1e4      	bne.n	80097c8 <HAL_UART_IRQHandler+0x4b4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	3308      	adds	r3, #8
 8009804:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009808:	e853 3f00 	ldrex	r3, [r3]
 800980c:	623b      	str	r3, [r7, #32]
   return(result);
 800980e:	6a3b      	ldr	r3, [r7, #32]
 8009810:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009814:	f023 0301 	bic.w	r3, r3, #1
 8009818:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	3308      	adds	r3, #8
 8009822:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009826:	633a      	str	r2, [r7, #48]	@ 0x30
 8009828:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800982a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800982c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800982e:	e841 2300 	strex	r3, r2, [r1]
 8009832:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009834:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009836:	2b00      	cmp	r3, #0
 8009838:	d1e1      	bne.n	80097fe <HAL_UART_IRQHandler+0x4ea>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	2220      	movs	r2, #32
 800983e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	2200      	movs	r2, #0
 8009846:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2200      	movs	r2, #0
 800984c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009854:	693b      	ldr	r3, [r7, #16]
 8009856:	e853 3f00 	ldrex	r3, [r3]
 800985a:	60fb      	str	r3, [r7, #12]
   return(result);
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	f023 0310 	bic.w	r3, r3, #16
 8009862:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	461a      	mov	r2, r3
 800986c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009870:	61fb      	str	r3, [r7, #28]
 8009872:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009874:	69b9      	ldr	r1, [r7, #24]
 8009876:	69fa      	ldr	r2, [r7, #28]
 8009878:	e841 2300 	strex	r3, r2, [r1]
 800987c:	617b      	str	r3, [r7, #20]
   return(result);
 800987e:	697b      	ldr	r3, [r7, #20]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d1e4      	bne.n	800984e <HAL_UART_IRQHandler+0x53a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2202      	movs	r2, #2
 8009888:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009890:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 8009894:	4611      	mov	r1, r2
 8009896:	6878      	ldr	r0, [r7, #4]
 8009898:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800989a:	e069      	b.n	8009970 <HAL_UART_IRQHandler+0x65c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800989c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80098a0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d010      	beq.n	80098ca <HAL_UART_IRQHandler+0x5b6>
 80098a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80098ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d00a      	beq.n	80098ca <HAL_UART_IRQHandler+0x5b6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80098bc:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80098c4:	6878      	ldr	r0, [r7, #4]
 80098c6:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80098c8:	e055      	b.n	8009976 <HAL_UART_IRQHandler+0x662>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80098ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80098ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d014      	beq.n	8009900 <HAL_UART_IRQHandler+0x5ec>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80098d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80098da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d105      	bne.n	80098ee <HAL_UART_IRQHandler+0x5da>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80098e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80098e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d008      	beq.n	8009900 <HAL_UART_IRQHandler+0x5ec>
  {
    if (huart->TxISR != NULL)
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d03e      	beq.n	8009974 <HAL_UART_IRQHandler+0x660>
    {
      huart->TxISR(huart);
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80098fa:	6878      	ldr	r0, [r7, #4]
 80098fc:	4798      	blx	r3
    }
    return;
 80098fe:	e039      	b.n	8009974 <HAL_UART_IRQHandler+0x660>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009900:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009904:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009908:	2b00      	cmp	r3, #0
 800990a:	d009      	beq.n	8009920 <HAL_UART_IRQHandler+0x60c>
 800990c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009910:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009914:	2b00      	cmp	r3, #0
 8009916:	d003      	beq.n	8009920 <HAL_UART_IRQHandler+0x60c>
  {
    UART_EndTransmit_IT(huart);
 8009918:	6878      	ldr	r0, [r7, #4]
 800991a:	f001 f85b 	bl	800a9d4 <UART_EndTransmit_IT>
    return;
 800991e:	e02a      	b.n	8009976 <HAL_UART_IRQHandler+0x662>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009920:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009924:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009928:	2b00      	cmp	r3, #0
 800992a:	d00b      	beq.n	8009944 <HAL_UART_IRQHandler+0x630>
 800992c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009930:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009934:	2b00      	cmp	r3, #0
 8009936:	d005      	beq.n	8009944 <HAL_UART_IRQHandler+0x630>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800993e:	6878      	ldr	r0, [r7, #4]
 8009940:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009942:	e018      	b.n	8009976 <HAL_UART_IRQHandler+0x662>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009944:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009948:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800994c:	2b00      	cmp	r3, #0
 800994e:	d012      	beq.n	8009976 <HAL_UART_IRQHandler+0x662>
 8009950:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009954:	2b00      	cmp	r3, #0
 8009956:	da0e      	bge.n	8009976 <HAL_UART_IRQHandler+0x662>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800995e:	6878      	ldr	r0, [r7, #4]
 8009960:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009962:	e008      	b.n	8009976 <HAL_UART_IRQHandler+0x662>
      return;
 8009964:	bf00      	nop
 8009966:	e006      	b.n	8009976 <HAL_UART_IRQHandler+0x662>
    return;
 8009968:	bf00      	nop
 800996a:	e004      	b.n	8009976 <HAL_UART_IRQHandler+0x662>
      return;
 800996c:	bf00      	nop
 800996e:	e002      	b.n	8009976 <HAL_UART_IRQHandler+0x662>
      return;
 8009970:	bf00      	nop
 8009972:	e000      	b.n	8009976 <HAL_UART_IRQHandler+0x662>
    return;
 8009974:	bf00      	nop
  }
}
 8009976:	37e8      	adds	r7, #232	@ 0xe8
 8009978:	46bd      	mov	sp, r7
 800997a:	bd80      	pop	{r7, pc}

0800997c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800997c:	b480      	push	{r7}
 800997e:	b083      	sub	sp, #12
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009984:	bf00      	nop
 8009986:	370c      	adds	r7, #12
 8009988:	46bd      	mov	sp, r7
 800998a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998e:	4770      	bx	lr

08009990 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009990:	b480      	push	{r7}
 8009992:	b083      	sub	sp, #12
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8009998:	bf00      	nop
 800999a:	370c      	adds	r7, #12
 800999c:	46bd      	mov	sp, r7
 800999e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a2:	4770      	bx	lr

080099a4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80099a4:	b480      	push	{r7}
 80099a6:	b083      	sub	sp, #12
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80099ac:	bf00      	nop
 80099ae:	370c      	adds	r7, #12
 80099b0:	46bd      	mov	sp, r7
 80099b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b6:	4770      	bx	lr

080099b8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80099b8:	b480      	push	{r7}
 80099ba:	b083      	sub	sp, #12
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80099c0:	bf00      	nop
 80099c2:	370c      	adds	r7, #12
 80099c4:	46bd      	mov	sp, r7
 80099c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ca:	4770      	bx	lr

080099cc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80099cc:	b480      	push	{r7}
 80099ce:	b083      	sub	sp, #12
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80099d4:	bf00      	nop
 80099d6:	370c      	adds	r7, #12
 80099d8:	46bd      	mov	sp, r7
 80099da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099de:	4770      	bx	lr

080099e0 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 80099e0:	b480      	push	{r7}
 80099e2:	b083      	sub	sp, #12
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 80099e8:	bf00      	nop
 80099ea:	370c      	adds	r7, #12
 80099ec:	46bd      	mov	sp, r7
 80099ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f2:	4770      	bx	lr

080099f4 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 80099f4:	b480      	push	{r7}
 80099f6:	b083      	sub	sp, #12
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 80099fc:	bf00      	nop
 80099fe:	370c      	adds	r7, #12
 8009a00:	46bd      	mov	sp, r7
 8009a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a06:	4770      	bx	lr

08009a08 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8009a08:	b480      	push	{r7}
 8009a0a:	b083      	sub	sp, #12
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8009a10:	bf00      	nop
 8009a12:	370c      	adds	r7, #12
 8009a14:	46bd      	mov	sp, r7
 8009a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1a:	4770      	bx	lr

08009a1c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009a1c:	b480      	push	{r7}
 8009a1e:	b083      	sub	sp, #12
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
 8009a24:	460b      	mov	r3, r1
 8009a26:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009a28:	bf00      	nop
 8009a2a:	370c      	adds	r7, #12
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a32:	4770      	bx	lr

08009a34 <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 8009a34:	b480      	push	{r7}
 8009a36:	b083      	sub	sp, #12
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
 8009a3c:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	4a09      	ldr	r2, [pc, #36]	@ (8009a68 <HAL_UART_ReceiverTimeout_Config+0x34>)
 8009a44:	4293      	cmp	r3, r2
 8009a46:	d009      	beq.n	8009a5c <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	695b      	ldr	r3, [r3, #20]
 8009a4e:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	683a      	ldr	r2, [r7, #0]
 8009a58:	430a      	orrs	r2, r1
 8009a5a:	615a      	str	r2, [r3, #20]
  }
}
 8009a5c:	bf00      	nop
 8009a5e:	370c      	adds	r7, #12
 8009a60:	46bd      	mov	sp, r7
 8009a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a66:	4770      	bx	lr
 8009a68:	40008000 	.word	0x40008000

08009a6c <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 8009a6c:	b480      	push	{r7}
 8009a6e:	b083      	sub	sp, #12
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	4a18      	ldr	r2, [pc, #96]	@ (8009adc <HAL_UART_EnableReceiverTimeout+0x70>)
 8009a7a:	4293      	cmp	r3, r2
 8009a7c:	d027      	beq.n	8009ace <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009a84:	2b20      	cmp	r3, #32
 8009a86:	d120      	bne.n	8009aca <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009a8e:	2b01      	cmp	r3, #1
 8009a90:	d101      	bne.n	8009a96 <HAL_UART_EnableReceiverTimeout+0x2a>
 8009a92:	2302      	movs	r3, #2
 8009a94:	e01c      	b.n	8009ad0 <HAL_UART_EnableReceiverTimeout+0x64>
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	2201      	movs	r2, #1
 8009a9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	2224      	movs	r2, #36	@ 0x24
 8009aa2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	685a      	ldr	r2, [r3, #4]
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8009ab4:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	2220      	movs	r2, #32
 8009aba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	e002      	b.n	8009ad0 <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 8009aca:	2302      	movs	r3, #2
 8009acc:	e000      	b.n	8009ad0 <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 8009ace:	2301      	movs	r3, #1
  }
}
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	370c      	adds	r7, #12
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ada:	4770      	bx	lr
 8009adc:	40008000 	.word	0x40008000

08009ae0 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 8009ae0:	b480      	push	{r7}
 8009ae2:	b083      	sub	sp, #12
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 8009aee:	4618      	mov	r0, r3
 8009af0:	370c      	adds	r7, #12
 8009af2:	46bd      	mov	sp, r7
 8009af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af8:	4770      	bx	lr
	...

08009afc <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8009afc:	b480      	push	{r7}
 8009afe:	b083      	sub	sp, #12
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	4a1a      	ldr	r2, [pc, #104]	@ (8009b70 <UART_InitCallbacksToDefault+0x74>)
 8009b08:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	4a19      	ldr	r2, [pc, #100]	@ (8009b74 <UART_InitCallbacksToDefault+0x78>)
 8009b10:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	4a18      	ldr	r2, [pc, #96]	@ (8009b78 <UART_InitCallbacksToDefault+0x7c>)
 8009b18:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	4a17      	ldr	r2, [pc, #92]	@ (8009b7c <UART_InitCallbacksToDefault+0x80>)
 8009b20:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	4a16      	ldr	r2, [pc, #88]	@ (8009b80 <UART_InitCallbacksToDefault+0x84>)
 8009b28:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	4a15      	ldr	r2, [pc, #84]	@ (8009b84 <UART_InitCallbacksToDefault+0x88>)
 8009b30:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	4a14      	ldr	r2, [pc, #80]	@ (8009b88 <UART_InitCallbacksToDefault+0x8c>)
 8009b38:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	4a13      	ldr	r2, [pc, #76]	@ (8009b8c <UART_InitCallbacksToDefault+0x90>)
 8009b40:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	4a12      	ldr	r2, [pc, #72]	@ (8009b90 <UART_InitCallbacksToDefault+0x94>)
 8009b48:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	4a11      	ldr	r2, [pc, #68]	@ (8009b94 <UART_InitCallbacksToDefault+0x98>)
 8009b50:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	4a10      	ldr	r2, [pc, #64]	@ (8009b98 <UART_InitCallbacksToDefault+0x9c>)
 8009b58:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	4a0f      	ldr	r2, [pc, #60]	@ (8009b9c <UART_InitCallbacksToDefault+0xa0>)
 8009b60:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 8009b64:	bf00      	nop
 8009b66:	370c      	adds	r7, #12
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6e:	4770      	bx	lr
 8009b70:	08009991 	.word	0x08009991
 8009b74:	0800997d 	.word	0x0800997d
 8009b78:	080099b9 	.word	0x080099b9
 8009b7c:	080099a5 	.word	0x080099a5
 8009b80:	080099cd 	.word	0x080099cd
 8009b84:	080099e1 	.word	0x080099e1
 8009b88:	080099f5 	.word	0x080099f5
 8009b8c:	08009a09 	.word	0x08009a09
 8009b90:	0800aa2f 	.word	0x0800aa2f
 8009b94:	0800aa43 	.word	0x0800aa43
 8009b98:	0800aa57 	.word	0x0800aa57
 8009b9c:	08009a1d 	.word	0x08009a1d

08009ba0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009ba0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009ba4:	b08c      	sub	sp, #48	@ 0x30
 8009ba6:	af00      	add	r7, sp, #0
 8009ba8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009baa:	2300      	movs	r3, #0
 8009bac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009bb0:	697b      	ldr	r3, [r7, #20]
 8009bb2:	689a      	ldr	r2, [r3, #8]
 8009bb4:	697b      	ldr	r3, [r7, #20]
 8009bb6:	691b      	ldr	r3, [r3, #16]
 8009bb8:	431a      	orrs	r2, r3
 8009bba:	697b      	ldr	r3, [r7, #20]
 8009bbc:	695b      	ldr	r3, [r3, #20]
 8009bbe:	431a      	orrs	r2, r3
 8009bc0:	697b      	ldr	r3, [r7, #20]
 8009bc2:	69db      	ldr	r3, [r3, #28]
 8009bc4:	4313      	orrs	r3, r2
 8009bc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009bc8:	697b      	ldr	r3, [r7, #20]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	681a      	ldr	r2, [r3, #0]
 8009bce:	4baa      	ldr	r3, [pc, #680]	@ (8009e78 <UART_SetConfig+0x2d8>)
 8009bd0:	4013      	ands	r3, r2
 8009bd2:	697a      	ldr	r2, [r7, #20]
 8009bd4:	6812      	ldr	r2, [r2, #0]
 8009bd6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009bd8:	430b      	orrs	r3, r1
 8009bda:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009bdc:	697b      	ldr	r3, [r7, #20]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	685b      	ldr	r3, [r3, #4]
 8009be2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009be6:	697b      	ldr	r3, [r7, #20]
 8009be8:	68da      	ldr	r2, [r3, #12]
 8009bea:	697b      	ldr	r3, [r7, #20]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	430a      	orrs	r2, r1
 8009bf0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009bf2:	697b      	ldr	r3, [r7, #20]
 8009bf4:	699b      	ldr	r3, [r3, #24]
 8009bf6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009bf8:	697b      	ldr	r3, [r7, #20]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	4a9f      	ldr	r2, [pc, #636]	@ (8009e7c <UART_SetConfig+0x2dc>)
 8009bfe:	4293      	cmp	r3, r2
 8009c00:	d004      	beq.n	8009c0c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009c02:	697b      	ldr	r3, [r7, #20]
 8009c04:	6a1b      	ldr	r3, [r3, #32]
 8009c06:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009c08:	4313      	orrs	r3, r2
 8009c0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009c0c:	697b      	ldr	r3, [r7, #20]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	689b      	ldr	r3, [r3, #8]
 8009c12:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8009c16:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8009c1a:	697a      	ldr	r2, [r7, #20]
 8009c1c:	6812      	ldr	r2, [r2, #0]
 8009c1e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009c20:	430b      	orrs	r3, r1
 8009c22:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009c24:	697b      	ldr	r3, [r7, #20]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c2a:	f023 010f 	bic.w	r1, r3, #15
 8009c2e:	697b      	ldr	r3, [r7, #20]
 8009c30:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009c32:	697b      	ldr	r3, [r7, #20]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	430a      	orrs	r2, r1
 8009c38:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009c3a:	697b      	ldr	r3, [r7, #20]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	4a90      	ldr	r2, [pc, #576]	@ (8009e80 <UART_SetConfig+0x2e0>)
 8009c40:	4293      	cmp	r3, r2
 8009c42:	d125      	bne.n	8009c90 <UART_SetConfig+0xf0>
 8009c44:	4b8f      	ldr	r3, [pc, #572]	@ (8009e84 <UART_SetConfig+0x2e4>)
 8009c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c4a:	f003 0303 	and.w	r3, r3, #3
 8009c4e:	2b03      	cmp	r3, #3
 8009c50:	d81a      	bhi.n	8009c88 <UART_SetConfig+0xe8>
 8009c52:	a201      	add	r2, pc, #4	@ (adr r2, 8009c58 <UART_SetConfig+0xb8>)
 8009c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c58:	08009c69 	.word	0x08009c69
 8009c5c:	08009c79 	.word	0x08009c79
 8009c60:	08009c71 	.word	0x08009c71
 8009c64:	08009c81 	.word	0x08009c81
 8009c68:	2301      	movs	r3, #1
 8009c6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009c6e:	e116      	b.n	8009e9e <UART_SetConfig+0x2fe>
 8009c70:	2302      	movs	r3, #2
 8009c72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009c76:	e112      	b.n	8009e9e <UART_SetConfig+0x2fe>
 8009c78:	2304      	movs	r3, #4
 8009c7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009c7e:	e10e      	b.n	8009e9e <UART_SetConfig+0x2fe>
 8009c80:	2308      	movs	r3, #8
 8009c82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009c86:	e10a      	b.n	8009e9e <UART_SetConfig+0x2fe>
 8009c88:	2310      	movs	r3, #16
 8009c8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009c8e:	e106      	b.n	8009e9e <UART_SetConfig+0x2fe>
 8009c90:	697b      	ldr	r3, [r7, #20]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	4a7c      	ldr	r2, [pc, #496]	@ (8009e88 <UART_SetConfig+0x2e8>)
 8009c96:	4293      	cmp	r3, r2
 8009c98:	d138      	bne.n	8009d0c <UART_SetConfig+0x16c>
 8009c9a:	4b7a      	ldr	r3, [pc, #488]	@ (8009e84 <UART_SetConfig+0x2e4>)
 8009c9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009ca0:	f003 030c 	and.w	r3, r3, #12
 8009ca4:	2b0c      	cmp	r3, #12
 8009ca6:	d82d      	bhi.n	8009d04 <UART_SetConfig+0x164>
 8009ca8:	a201      	add	r2, pc, #4	@ (adr r2, 8009cb0 <UART_SetConfig+0x110>)
 8009caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cae:	bf00      	nop
 8009cb0:	08009ce5 	.word	0x08009ce5
 8009cb4:	08009d05 	.word	0x08009d05
 8009cb8:	08009d05 	.word	0x08009d05
 8009cbc:	08009d05 	.word	0x08009d05
 8009cc0:	08009cf5 	.word	0x08009cf5
 8009cc4:	08009d05 	.word	0x08009d05
 8009cc8:	08009d05 	.word	0x08009d05
 8009ccc:	08009d05 	.word	0x08009d05
 8009cd0:	08009ced 	.word	0x08009ced
 8009cd4:	08009d05 	.word	0x08009d05
 8009cd8:	08009d05 	.word	0x08009d05
 8009cdc:	08009d05 	.word	0x08009d05
 8009ce0:	08009cfd 	.word	0x08009cfd
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009cea:	e0d8      	b.n	8009e9e <UART_SetConfig+0x2fe>
 8009cec:	2302      	movs	r3, #2
 8009cee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009cf2:	e0d4      	b.n	8009e9e <UART_SetConfig+0x2fe>
 8009cf4:	2304      	movs	r3, #4
 8009cf6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009cfa:	e0d0      	b.n	8009e9e <UART_SetConfig+0x2fe>
 8009cfc:	2308      	movs	r3, #8
 8009cfe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009d02:	e0cc      	b.n	8009e9e <UART_SetConfig+0x2fe>
 8009d04:	2310      	movs	r3, #16
 8009d06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009d0a:	e0c8      	b.n	8009e9e <UART_SetConfig+0x2fe>
 8009d0c:	697b      	ldr	r3, [r7, #20]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	4a5e      	ldr	r2, [pc, #376]	@ (8009e8c <UART_SetConfig+0x2ec>)
 8009d12:	4293      	cmp	r3, r2
 8009d14:	d125      	bne.n	8009d62 <UART_SetConfig+0x1c2>
 8009d16:	4b5b      	ldr	r3, [pc, #364]	@ (8009e84 <UART_SetConfig+0x2e4>)
 8009d18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009d1c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009d20:	2b30      	cmp	r3, #48	@ 0x30
 8009d22:	d016      	beq.n	8009d52 <UART_SetConfig+0x1b2>
 8009d24:	2b30      	cmp	r3, #48	@ 0x30
 8009d26:	d818      	bhi.n	8009d5a <UART_SetConfig+0x1ba>
 8009d28:	2b20      	cmp	r3, #32
 8009d2a:	d00a      	beq.n	8009d42 <UART_SetConfig+0x1a2>
 8009d2c:	2b20      	cmp	r3, #32
 8009d2e:	d814      	bhi.n	8009d5a <UART_SetConfig+0x1ba>
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d002      	beq.n	8009d3a <UART_SetConfig+0x19a>
 8009d34:	2b10      	cmp	r3, #16
 8009d36:	d008      	beq.n	8009d4a <UART_SetConfig+0x1aa>
 8009d38:	e00f      	b.n	8009d5a <UART_SetConfig+0x1ba>
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009d40:	e0ad      	b.n	8009e9e <UART_SetConfig+0x2fe>
 8009d42:	2302      	movs	r3, #2
 8009d44:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009d48:	e0a9      	b.n	8009e9e <UART_SetConfig+0x2fe>
 8009d4a:	2304      	movs	r3, #4
 8009d4c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009d50:	e0a5      	b.n	8009e9e <UART_SetConfig+0x2fe>
 8009d52:	2308      	movs	r3, #8
 8009d54:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009d58:	e0a1      	b.n	8009e9e <UART_SetConfig+0x2fe>
 8009d5a:	2310      	movs	r3, #16
 8009d5c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009d60:	e09d      	b.n	8009e9e <UART_SetConfig+0x2fe>
 8009d62:	697b      	ldr	r3, [r7, #20]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	4a4a      	ldr	r2, [pc, #296]	@ (8009e90 <UART_SetConfig+0x2f0>)
 8009d68:	4293      	cmp	r3, r2
 8009d6a:	d125      	bne.n	8009db8 <UART_SetConfig+0x218>
 8009d6c:	4b45      	ldr	r3, [pc, #276]	@ (8009e84 <UART_SetConfig+0x2e4>)
 8009d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009d72:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009d76:	2bc0      	cmp	r3, #192	@ 0xc0
 8009d78:	d016      	beq.n	8009da8 <UART_SetConfig+0x208>
 8009d7a:	2bc0      	cmp	r3, #192	@ 0xc0
 8009d7c:	d818      	bhi.n	8009db0 <UART_SetConfig+0x210>
 8009d7e:	2b80      	cmp	r3, #128	@ 0x80
 8009d80:	d00a      	beq.n	8009d98 <UART_SetConfig+0x1f8>
 8009d82:	2b80      	cmp	r3, #128	@ 0x80
 8009d84:	d814      	bhi.n	8009db0 <UART_SetConfig+0x210>
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d002      	beq.n	8009d90 <UART_SetConfig+0x1f0>
 8009d8a:	2b40      	cmp	r3, #64	@ 0x40
 8009d8c:	d008      	beq.n	8009da0 <UART_SetConfig+0x200>
 8009d8e:	e00f      	b.n	8009db0 <UART_SetConfig+0x210>
 8009d90:	2300      	movs	r3, #0
 8009d92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009d96:	e082      	b.n	8009e9e <UART_SetConfig+0x2fe>
 8009d98:	2302      	movs	r3, #2
 8009d9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009d9e:	e07e      	b.n	8009e9e <UART_SetConfig+0x2fe>
 8009da0:	2304      	movs	r3, #4
 8009da2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009da6:	e07a      	b.n	8009e9e <UART_SetConfig+0x2fe>
 8009da8:	2308      	movs	r3, #8
 8009daa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009dae:	e076      	b.n	8009e9e <UART_SetConfig+0x2fe>
 8009db0:	2310      	movs	r3, #16
 8009db2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009db6:	e072      	b.n	8009e9e <UART_SetConfig+0x2fe>
 8009db8:	697b      	ldr	r3, [r7, #20]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	4a35      	ldr	r2, [pc, #212]	@ (8009e94 <UART_SetConfig+0x2f4>)
 8009dbe:	4293      	cmp	r3, r2
 8009dc0:	d12a      	bne.n	8009e18 <UART_SetConfig+0x278>
 8009dc2:	4b30      	ldr	r3, [pc, #192]	@ (8009e84 <UART_SetConfig+0x2e4>)
 8009dc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009dc8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009dcc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009dd0:	d01a      	beq.n	8009e08 <UART_SetConfig+0x268>
 8009dd2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009dd6:	d81b      	bhi.n	8009e10 <UART_SetConfig+0x270>
 8009dd8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009ddc:	d00c      	beq.n	8009df8 <UART_SetConfig+0x258>
 8009dde:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009de2:	d815      	bhi.n	8009e10 <UART_SetConfig+0x270>
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d003      	beq.n	8009df0 <UART_SetConfig+0x250>
 8009de8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009dec:	d008      	beq.n	8009e00 <UART_SetConfig+0x260>
 8009dee:	e00f      	b.n	8009e10 <UART_SetConfig+0x270>
 8009df0:	2300      	movs	r3, #0
 8009df2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009df6:	e052      	b.n	8009e9e <UART_SetConfig+0x2fe>
 8009df8:	2302      	movs	r3, #2
 8009dfa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009dfe:	e04e      	b.n	8009e9e <UART_SetConfig+0x2fe>
 8009e00:	2304      	movs	r3, #4
 8009e02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e06:	e04a      	b.n	8009e9e <UART_SetConfig+0x2fe>
 8009e08:	2308      	movs	r3, #8
 8009e0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e0e:	e046      	b.n	8009e9e <UART_SetConfig+0x2fe>
 8009e10:	2310      	movs	r3, #16
 8009e12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e16:	e042      	b.n	8009e9e <UART_SetConfig+0x2fe>
 8009e18:	697b      	ldr	r3, [r7, #20]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	4a17      	ldr	r2, [pc, #92]	@ (8009e7c <UART_SetConfig+0x2dc>)
 8009e1e:	4293      	cmp	r3, r2
 8009e20:	d13a      	bne.n	8009e98 <UART_SetConfig+0x2f8>
 8009e22:	4b18      	ldr	r3, [pc, #96]	@ (8009e84 <UART_SetConfig+0x2e4>)
 8009e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009e28:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009e2c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009e30:	d01a      	beq.n	8009e68 <UART_SetConfig+0x2c8>
 8009e32:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009e36:	d81b      	bhi.n	8009e70 <UART_SetConfig+0x2d0>
 8009e38:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009e3c:	d00c      	beq.n	8009e58 <UART_SetConfig+0x2b8>
 8009e3e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009e42:	d815      	bhi.n	8009e70 <UART_SetConfig+0x2d0>
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d003      	beq.n	8009e50 <UART_SetConfig+0x2b0>
 8009e48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009e4c:	d008      	beq.n	8009e60 <UART_SetConfig+0x2c0>
 8009e4e:	e00f      	b.n	8009e70 <UART_SetConfig+0x2d0>
 8009e50:	2300      	movs	r3, #0
 8009e52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e56:	e022      	b.n	8009e9e <UART_SetConfig+0x2fe>
 8009e58:	2302      	movs	r3, #2
 8009e5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e5e:	e01e      	b.n	8009e9e <UART_SetConfig+0x2fe>
 8009e60:	2304      	movs	r3, #4
 8009e62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e66:	e01a      	b.n	8009e9e <UART_SetConfig+0x2fe>
 8009e68:	2308      	movs	r3, #8
 8009e6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e6e:	e016      	b.n	8009e9e <UART_SetConfig+0x2fe>
 8009e70:	2310      	movs	r3, #16
 8009e72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e76:	e012      	b.n	8009e9e <UART_SetConfig+0x2fe>
 8009e78:	cfff69f3 	.word	0xcfff69f3
 8009e7c:	40008000 	.word	0x40008000
 8009e80:	40013800 	.word	0x40013800
 8009e84:	40021000 	.word	0x40021000
 8009e88:	40004400 	.word	0x40004400
 8009e8c:	40004800 	.word	0x40004800
 8009e90:	40004c00 	.word	0x40004c00
 8009e94:	40005000 	.word	0x40005000
 8009e98:	2310      	movs	r3, #16
 8009e9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009e9e:	697b      	ldr	r3, [r7, #20]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	4aae      	ldr	r2, [pc, #696]	@ (800a15c <UART_SetConfig+0x5bc>)
 8009ea4:	4293      	cmp	r3, r2
 8009ea6:	f040 8097 	bne.w	8009fd8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009eaa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009eae:	2b08      	cmp	r3, #8
 8009eb0:	d823      	bhi.n	8009efa <UART_SetConfig+0x35a>
 8009eb2:	a201      	add	r2, pc, #4	@ (adr r2, 8009eb8 <UART_SetConfig+0x318>)
 8009eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009eb8:	08009edd 	.word	0x08009edd
 8009ebc:	08009efb 	.word	0x08009efb
 8009ec0:	08009ee5 	.word	0x08009ee5
 8009ec4:	08009efb 	.word	0x08009efb
 8009ec8:	08009eeb 	.word	0x08009eeb
 8009ecc:	08009efb 	.word	0x08009efb
 8009ed0:	08009efb 	.word	0x08009efb
 8009ed4:	08009efb 	.word	0x08009efb
 8009ed8:	08009ef3 	.word	0x08009ef3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009edc:	f7fc fd96 	bl	8006a0c <HAL_RCC_GetPCLK1Freq>
 8009ee0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009ee2:	e010      	b.n	8009f06 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009ee4:	4b9e      	ldr	r3, [pc, #632]	@ (800a160 <UART_SetConfig+0x5c0>)
 8009ee6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009ee8:	e00d      	b.n	8009f06 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009eea:	f7fc fd21 	bl	8006930 <HAL_RCC_GetSysClockFreq>
 8009eee:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009ef0:	e009      	b.n	8009f06 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009ef2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009ef6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009ef8:	e005      	b.n	8009f06 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8009efa:	2300      	movs	r3, #0
 8009efc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009efe:	2301      	movs	r3, #1
 8009f00:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009f04:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	f000 8130 	beq.w	800a16e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009f0e:	697b      	ldr	r3, [r7, #20]
 8009f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f12:	4a94      	ldr	r2, [pc, #592]	@ (800a164 <UART_SetConfig+0x5c4>)
 8009f14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009f18:	461a      	mov	r2, r3
 8009f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f1c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009f20:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009f22:	697b      	ldr	r3, [r7, #20]
 8009f24:	685a      	ldr	r2, [r3, #4]
 8009f26:	4613      	mov	r3, r2
 8009f28:	005b      	lsls	r3, r3, #1
 8009f2a:	4413      	add	r3, r2
 8009f2c:	69ba      	ldr	r2, [r7, #24]
 8009f2e:	429a      	cmp	r2, r3
 8009f30:	d305      	bcc.n	8009f3e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009f32:	697b      	ldr	r3, [r7, #20]
 8009f34:	685b      	ldr	r3, [r3, #4]
 8009f36:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009f38:	69ba      	ldr	r2, [r7, #24]
 8009f3a:	429a      	cmp	r2, r3
 8009f3c:	d903      	bls.n	8009f46 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8009f3e:	2301      	movs	r3, #1
 8009f40:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009f44:	e113      	b.n	800a16e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f48:	2200      	movs	r2, #0
 8009f4a:	60bb      	str	r3, [r7, #8]
 8009f4c:	60fa      	str	r2, [r7, #12]
 8009f4e:	697b      	ldr	r3, [r7, #20]
 8009f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f52:	4a84      	ldr	r2, [pc, #528]	@ (800a164 <UART_SetConfig+0x5c4>)
 8009f54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009f58:	b29b      	uxth	r3, r3
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	603b      	str	r3, [r7, #0]
 8009f5e:	607a      	str	r2, [r7, #4]
 8009f60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009f64:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009f68:	f7f6 ff40 	bl	8000dec <__aeabi_uldivmod>
 8009f6c:	4602      	mov	r2, r0
 8009f6e:	460b      	mov	r3, r1
 8009f70:	4610      	mov	r0, r2
 8009f72:	4619      	mov	r1, r3
 8009f74:	f04f 0200 	mov.w	r2, #0
 8009f78:	f04f 0300 	mov.w	r3, #0
 8009f7c:	020b      	lsls	r3, r1, #8
 8009f7e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009f82:	0202      	lsls	r2, r0, #8
 8009f84:	6979      	ldr	r1, [r7, #20]
 8009f86:	6849      	ldr	r1, [r1, #4]
 8009f88:	0849      	lsrs	r1, r1, #1
 8009f8a:	2000      	movs	r0, #0
 8009f8c:	460c      	mov	r4, r1
 8009f8e:	4605      	mov	r5, r0
 8009f90:	eb12 0804 	adds.w	r8, r2, r4
 8009f94:	eb43 0905 	adc.w	r9, r3, r5
 8009f98:	697b      	ldr	r3, [r7, #20]
 8009f9a:	685b      	ldr	r3, [r3, #4]
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	469a      	mov	sl, r3
 8009fa0:	4693      	mov	fp, r2
 8009fa2:	4652      	mov	r2, sl
 8009fa4:	465b      	mov	r3, fp
 8009fa6:	4640      	mov	r0, r8
 8009fa8:	4649      	mov	r1, r9
 8009faa:	f7f6 ff1f 	bl	8000dec <__aeabi_uldivmod>
 8009fae:	4602      	mov	r2, r0
 8009fb0:	460b      	mov	r3, r1
 8009fb2:	4613      	mov	r3, r2
 8009fb4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009fb6:	6a3b      	ldr	r3, [r7, #32]
 8009fb8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009fbc:	d308      	bcc.n	8009fd0 <UART_SetConfig+0x430>
 8009fbe:	6a3b      	ldr	r3, [r7, #32]
 8009fc0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009fc4:	d204      	bcs.n	8009fd0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8009fc6:	697b      	ldr	r3, [r7, #20]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	6a3a      	ldr	r2, [r7, #32]
 8009fcc:	60da      	str	r2, [r3, #12]
 8009fce:	e0ce      	b.n	800a16e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8009fd0:	2301      	movs	r3, #1
 8009fd2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009fd6:	e0ca      	b.n	800a16e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009fd8:	697b      	ldr	r3, [r7, #20]
 8009fda:	69db      	ldr	r3, [r3, #28]
 8009fdc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009fe0:	d166      	bne.n	800a0b0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8009fe2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009fe6:	2b08      	cmp	r3, #8
 8009fe8:	d827      	bhi.n	800a03a <UART_SetConfig+0x49a>
 8009fea:	a201      	add	r2, pc, #4	@ (adr r2, 8009ff0 <UART_SetConfig+0x450>)
 8009fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ff0:	0800a015 	.word	0x0800a015
 8009ff4:	0800a01d 	.word	0x0800a01d
 8009ff8:	0800a025 	.word	0x0800a025
 8009ffc:	0800a03b 	.word	0x0800a03b
 800a000:	0800a02b 	.word	0x0800a02b
 800a004:	0800a03b 	.word	0x0800a03b
 800a008:	0800a03b 	.word	0x0800a03b
 800a00c:	0800a03b 	.word	0x0800a03b
 800a010:	0800a033 	.word	0x0800a033
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a014:	f7fc fcfa 	bl	8006a0c <HAL_RCC_GetPCLK1Freq>
 800a018:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a01a:	e014      	b.n	800a046 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a01c:	f7fc fd0c 	bl	8006a38 <HAL_RCC_GetPCLK2Freq>
 800a020:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a022:	e010      	b.n	800a046 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a024:	4b4e      	ldr	r3, [pc, #312]	@ (800a160 <UART_SetConfig+0x5c0>)
 800a026:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a028:	e00d      	b.n	800a046 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a02a:	f7fc fc81 	bl	8006930 <HAL_RCC_GetSysClockFreq>
 800a02e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a030:	e009      	b.n	800a046 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a032:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a036:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a038:	e005      	b.n	800a046 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800a03a:	2300      	movs	r3, #0
 800a03c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a03e:	2301      	movs	r3, #1
 800a040:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a044:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a048:	2b00      	cmp	r3, #0
 800a04a:	f000 8090 	beq.w	800a16e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a04e:	697b      	ldr	r3, [r7, #20]
 800a050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a052:	4a44      	ldr	r2, [pc, #272]	@ (800a164 <UART_SetConfig+0x5c4>)
 800a054:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a058:	461a      	mov	r2, r3
 800a05a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a05c:	fbb3 f3f2 	udiv	r3, r3, r2
 800a060:	005a      	lsls	r2, r3, #1
 800a062:	697b      	ldr	r3, [r7, #20]
 800a064:	685b      	ldr	r3, [r3, #4]
 800a066:	085b      	lsrs	r3, r3, #1
 800a068:	441a      	add	r2, r3
 800a06a:	697b      	ldr	r3, [r7, #20]
 800a06c:	685b      	ldr	r3, [r3, #4]
 800a06e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a072:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a074:	6a3b      	ldr	r3, [r7, #32]
 800a076:	2b0f      	cmp	r3, #15
 800a078:	d916      	bls.n	800a0a8 <UART_SetConfig+0x508>
 800a07a:	6a3b      	ldr	r3, [r7, #32]
 800a07c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a080:	d212      	bcs.n	800a0a8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a082:	6a3b      	ldr	r3, [r7, #32]
 800a084:	b29b      	uxth	r3, r3
 800a086:	f023 030f 	bic.w	r3, r3, #15
 800a08a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a08c:	6a3b      	ldr	r3, [r7, #32]
 800a08e:	085b      	lsrs	r3, r3, #1
 800a090:	b29b      	uxth	r3, r3
 800a092:	f003 0307 	and.w	r3, r3, #7
 800a096:	b29a      	uxth	r2, r3
 800a098:	8bfb      	ldrh	r3, [r7, #30]
 800a09a:	4313      	orrs	r3, r2
 800a09c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800a09e:	697b      	ldr	r3, [r7, #20]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	8bfa      	ldrh	r2, [r7, #30]
 800a0a4:	60da      	str	r2, [r3, #12]
 800a0a6:	e062      	b.n	800a16e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800a0a8:	2301      	movs	r3, #1
 800a0aa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a0ae:	e05e      	b.n	800a16e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a0b0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a0b4:	2b08      	cmp	r3, #8
 800a0b6:	d828      	bhi.n	800a10a <UART_SetConfig+0x56a>
 800a0b8:	a201      	add	r2, pc, #4	@ (adr r2, 800a0c0 <UART_SetConfig+0x520>)
 800a0ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0be:	bf00      	nop
 800a0c0:	0800a0e5 	.word	0x0800a0e5
 800a0c4:	0800a0ed 	.word	0x0800a0ed
 800a0c8:	0800a0f5 	.word	0x0800a0f5
 800a0cc:	0800a10b 	.word	0x0800a10b
 800a0d0:	0800a0fb 	.word	0x0800a0fb
 800a0d4:	0800a10b 	.word	0x0800a10b
 800a0d8:	0800a10b 	.word	0x0800a10b
 800a0dc:	0800a10b 	.word	0x0800a10b
 800a0e0:	0800a103 	.word	0x0800a103
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a0e4:	f7fc fc92 	bl	8006a0c <HAL_RCC_GetPCLK1Freq>
 800a0e8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a0ea:	e014      	b.n	800a116 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a0ec:	f7fc fca4 	bl	8006a38 <HAL_RCC_GetPCLK2Freq>
 800a0f0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a0f2:	e010      	b.n	800a116 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a0f4:	4b1a      	ldr	r3, [pc, #104]	@ (800a160 <UART_SetConfig+0x5c0>)
 800a0f6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a0f8:	e00d      	b.n	800a116 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a0fa:	f7fc fc19 	bl	8006930 <HAL_RCC_GetSysClockFreq>
 800a0fe:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a100:	e009      	b.n	800a116 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a102:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a106:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a108:	e005      	b.n	800a116 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800a10a:	2300      	movs	r3, #0
 800a10c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a10e:	2301      	movs	r3, #1
 800a110:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a114:	bf00      	nop
    }

    if (pclk != 0U)
 800a116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d028      	beq.n	800a16e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a11c:	697b      	ldr	r3, [r7, #20]
 800a11e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a120:	4a10      	ldr	r2, [pc, #64]	@ (800a164 <UART_SetConfig+0x5c4>)
 800a122:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a126:	461a      	mov	r2, r3
 800a128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a12a:	fbb3 f2f2 	udiv	r2, r3, r2
 800a12e:	697b      	ldr	r3, [r7, #20]
 800a130:	685b      	ldr	r3, [r3, #4]
 800a132:	085b      	lsrs	r3, r3, #1
 800a134:	441a      	add	r2, r3
 800a136:	697b      	ldr	r3, [r7, #20]
 800a138:	685b      	ldr	r3, [r3, #4]
 800a13a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a13e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a140:	6a3b      	ldr	r3, [r7, #32]
 800a142:	2b0f      	cmp	r3, #15
 800a144:	d910      	bls.n	800a168 <UART_SetConfig+0x5c8>
 800a146:	6a3b      	ldr	r3, [r7, #32]
 800a148:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a14c:	d20c      	bcs.n	800a168 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a14e:	6a3b      	ldr	r3, [r7, #32]
 800a150:	b29a      	uxth	r2, r3
 800a152:	697b      	ldr	r3, [r7, #20]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	60da      	str	r2, [r3, #12]
 800a158:	e009      	b.n	800a16e <UART_SetConfig+0x5ce>
 800a15a:	bf00      	nop
 800a15c:	40008000 	.word	0x40008000
 800a160:	00f42400 	.word	0x00f42400
 800a164:	0800af7c 	.word	0x0800af7c
      }
      else
      {
        ret = HAL_ERROR;
 800a168:	2301      	movs	r3, #1
 800a16a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a16e:	697b      	ldr	r3, [r7, #20]
 800a170:	2201      	movs	r2, #1
 800a172:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a176:	697b      	ldr	r3, [r7, #20]
 800a178:	2201      	movs	r2, #1
 800a17a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a17e:	697b      	ldr	r3, [r7, #20]
 800a180:	2200      	movs	r2, #0
 800a182:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a184:	697b      	ldr	r3, [r7, #20]
 800a186:	2200      	movs	r2, #0
 800a188:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a18a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800a18e:	4618      	mov	r0, r3
 800a190:	3730      	adds	r7, #48	@ 0x30
 800a192:	46bd      	mov	sp, r7
 800a194:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800a198 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a198:	b480      	push	{r7}
 800a19a:	b083      	sub	sp, #12
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1a4:	f003 0308 	and.w	r3, r3, #8
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d00a      	beq.n	800a1c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	685b      	ldr	r3, [r3, #4]
 800a1b2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	430a      	orrs	r2, r1
 800a1c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1c6:	f003 0301 	and.w	r3, r3, #1
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d00a      	beq.n	800a1e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	685b      	ldr	r3, [r3, #4]
 800a1d4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	430a      	orrs	r2, r1
 800a1e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1e8:	f003 0302 	and.w	r3, r3, #2
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d00a      	beq.n	800a206 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	685b      	ldr	r3, [r3, #4]
 800a1f6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	430a      	orrs	r2, r1
 800a204:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a20a:	f003 0304 	and.w	r3, r3, #4
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d00a      	beq.n	800a228 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	685b      	ldr	r3, [r3, #4]
 800a218:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	430a      	orrs	r2, r1
 800a226:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a22c:	f003 0310 	and.w	r3, r3, #16
 800a230:	2b00      	cmp	r3, #0
 800a232:	d00a      	beq.n	800a24a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	689b      	ldr	r3, [r3, #8]
 800a23a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	430a      	orrs	r2, r1
 800a248:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a24e:	f003 0320 	and.w	r3, r3, #32
 800a252:	2b00      	cmp	r3, #0
 800a254:	d00a      	beq.n	800a26c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	689b      	ldr	r3, [r3, #8]
 800a25c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	430a      	orrs	r2, r1
 800a26a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a270:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a274:	2b00      	cmp	r3, #0
 800a276:	d01a      	beq.n	800a2ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	685b      	ldr	r3, [r3, #4]
 800a27e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	430a      	orrs	r2, r1
 800a28c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a292:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a296:	d10a      	bne.n	800a2ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	685b      	ldr	r3, [r3, #4]
 800a29e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	430a      	orrs	r2, r1
 800a2ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d00a      	beq.n	800a2d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	685b      	ldr	r3, [r3, #4]
 800a2c0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	430a      	orrs	r2, r1
 800a2ce:	605a      	str	r2, [r3, #4]
  }
}
 800a2d0:	bf00      	nop
 800a2d2:	370c      	adds	r7, #12
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2da:	4770      	bx	lr

0800a2dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b098      	sub	sp, #96	@ 0x60
 800a2e0:	af02      	add	r7, sp, #8
 800a2e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a2ec:	f7f9 fc80 	bl	8003bf0 <HAL_GetTick>
 800a2f0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	f003 0308 	and.w	r3, r3, #8
 800a2fc:	2b08      	cmp	r3, #8
 800a2fe:	d12f      	bne.n	800a360 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a300:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a304:	9300      	str	r3, [sp, #0]
 800a306:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a308:	2200      	movs	r2, #0
 800a30a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a30e:	6878      	ldr	r0, [r7, #4]
 800a310:	f000 f88e 	bl	800a430 <UART_WaitOnFlagUntilTimeout>
 800a314:	4603      	mov	r3, r0
 800a316:	2b00      	cmp	r3, #0
 800a318:	d022      	beq.n	800a360 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a320:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a322:	e853 3f00 	ldrex	r3, [r3]
 800a326:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a328:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a32a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a32e:	653b      	str	r3, [r7, #80]	@ 0x50
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	461a      	mov	r2, r3
 800a336:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a338:	647b      	str	r3, [r7, #68]	@ 0x44
 800a33a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a33c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a33e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a340:	e841 2300 	strex	r3, r2, [r1]
 800a344:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a346:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d1e6      	bne.n	800a31a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	2220      	movs	r2, #32
 800a350:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	2200      	movs	r2, #0
 800a358:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a35c:	2303      	movs	r3, #3
 800a35e:	e063      	b.n	800a428 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	f003 0304 	and.w	r3, r3, #4
 800a36a:	2b04      	cmp	r3, #4
 800a36c:	d149      	bne.n	800a402 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a36e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a372:	9300      	str	r3, [sp, #0]
 800a374:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a376:	2200      	movs	r2, #0
 800a378:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a37c:	6878      	ldr	r0, [r7, #4]
 800a37e:	f000 f857 	bl	800a430 <UART_WaitOnFlagUntilTimeout>
 800a382:	4603      	mov	r3, r0
 800a384:	2b00      	cmp	r3, #0
 800a386:	d03c      	beq.n	800a402 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a38e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a390:	e853 3f00 	ldrex	r3, [r3]
 800a394:	623b      	str	r3, [r7, #32]
   return(result);
 800a396:	6a3b      	ldr	r3, [r7, #32]
 800a398:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a39c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	461a      	mov	r2, r3
 800a3a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a3a6:	633b      	str	r3, [r7, #48]	@ 0x30
 800a3a8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a3ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a3ae:	e841 2300 	strex	r3, r2, [r1]
 800a3b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a3b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d1e6      	bne.n	800a388 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	3308      	adds	r3, #8
 800a3c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3c2:	693b      	ldr	r3, [r7, #16]
 800a3c4:	e853 3f00 	ldrex	r3, [r3]
 800a3c8:	60fb      	str	r3, [r7, #12]
   return(result);
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	f023 0301 	bic.w	r3, r3, #1
 800a3d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	3308      	adds	r3, #8
 800a3d8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a3da:	61fa      	str	r2, [r7, #28]
 800a3dc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3de:	69b9      	ldr	r1, [r7, #24]
 800a3e0:	69fa      	ldr	r2, [r7, #28]
 800a3e2:	e841 2300 	strex	r3, r2, [r1]
 800a3e6:	617b      	str	r3, [r7, #20]
   return(result);
 800a3e8:	697b      	ldr	r3, [r7, #20]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d1e5      	bne.n	800a3ba <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	2220      	movs	r2, #32
 800a3f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a3fe:	2303      	movs	r3, #3
 800a400:	e012      	b.n	800a428 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	2220      	movs	r2, #32
 800a406:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	2220      	movs	r2, #32
 800a40e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	2200      	movs	r2, #0
 800a416:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	2200      	movs	r2, #0
 800a41c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	2200      	movs	r2, #0
 800a422:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a426:	2300      	movs	r3, #0
}
 800a428:	4618      	mov	r0, r3
 800a42a:	3758      	adds	r7, #88	@ 0x58
 800a42c:	46bd      	mov	sp, r7
 800a42e:	bd80      	pop	{r7, pc}

0800a430 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a430:	b580      	push	{r7, lr}
 800a432:	b084      	sub	sp, #16
 800a434:	af00      	add	r7, sp, #0
 800a436:	60f8      	str	r0, [r7, #12]
 800a438:	60b9      	str	r1, [r7, #8]
 800a43a:	603b      	str	r3, [r7, #0]
 800a43c:	4613      	mov	r3, r2
 800a43e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a440:	e04f      	b.n	800a4e2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a442:	69bb      	ldr	r3, [r7, #24]
 800a444:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a448:	d04b      	beq.n	800a4e2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a44a:	f7f9 fbd1 	bl	8003bf0 <HAL_GetTick>
 800a44e:	4602      	mov	r2, r0
 800a450:	683b      	ldr	r3, [r7, #0]
 800a452:	1ad3      	subs	r3, r2, r3
 800a454:	69ba      	ldr	r2, [r7, #24]
 800a456:	429a      	cmp	r2, r3
 800a458:	d302      	bcc.n	800a460 <UART_WaitOnFlagUntilTimeout+0x30>
 800a45a:	69bb      	ldr	r3, [r7, #24]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d101      	bne.n	800a464 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a460:	2303      	movs	r3, #3
 800a462:	e04e      	b.n	800a502 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	f003 0304 	and.w	r3, r3, #4
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d037      	beq.n	800a4e2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a472:	68bb      	ldr	r3, [r7, #8]
 800a474:	2b80      	cmp	r3, #128	@ 0x80
 800a476:	d034      	beq.n	800a4e2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a478:	68bb      	ldr	r3, [r7, #8]
 800a47a:	2b40      	cmp	r3, #64	@ 0x40
 800a47c:	d031      	beq.n	800a4e2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	69db      	ldr	r3, [r3, #28]
 800a484:	f003 0308 	and.w	r3, r3, #8
 800a488:	2b08      	cmp	r3, #8
 800a48a:	d110      	bne.n	800a4ae <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	2208      	movs	r2, #8
 800a492:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a494:	68f8      	ldr	r0, [r7, #12]
 800a496:	f000 f920 	bl	800a6da <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	2208      	movs	r2, #8
 800a49e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	2200      	movs	r2, #0
 800a4a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a4aa:	2301      	movs	r3, #1
 800a4ac:	e029      	b.n	800a502 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	69db      	ldr	r3, [r3, #28]
 800a4b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a4b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a4bc:	d111      	bne.n	800a4e2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a4c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a4c8:	68f8      	ldr	r0, [r7, #12]
 800a4ca:	f000 f906 	bl	800a6da <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	2220      	movs	r2, #32
 800a4d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	2200      	movs	r2, #0
 800a4da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a4de:	2303      	movs	r3, #3
 800a4e0:	e00f      	b.n	800a502 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	69da      	ldr	r2, [r3, #28]
 800a4e8:	68bb      	ldr	r3, [r7, #8]
 800a4ea:	4013      	ands	r3, r2
 800a4ec:	68ba      	ldr	r2, [r7, #8]
 800a4ee:	429a      	cmp	r2, r3
 800a4f0:	bf0c      	ite	eq
 800a4f2:	2301      	moveq	r3, #1
 800a4f4:	2300      	movne	r3, #0
 800a4f6:	b2db      	uxtb	r3, r3
 800a4f8:	461a      	mov	r2, r3
 800a4fa:	79fb      	ldrb	r3, [r7, #7]
 800a4fc:	429a      	cmp	r2, r3
 800a4fe:	d0a0      	beq.n	800a442 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a500:	2300      	movs	r3, #0
}
 800a502:	4618      	mov	r0, r3
 800a504:	3710      	adds	r7, #16
 800a506:	46bd      	mov	sp, r7
 800a508:	bd80      	pop	{r7, pc}
	...

0800a50c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b096      	sub	sp, #88	@ 0x58
 800a510:	af00      	add	r7, sp, #0
 800a512:	60f8      	str	r0, [r7, #12]
 800a514:	60b9      	str	r1, [r7, #8]
 800a516:	4613      	mov	r3, r2
 800a518:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	68ba      	ldr	r2, [r7, #8]
 800a51e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	88fa      	ldrh	r2, [r7, #6]
 800a524:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	2200      	movs	r2, #0
 800a52c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	2222      	movs	r2, #34	@ 0x22
 800a534:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d02d      	beq.n	800a59e <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a548:	4a40      	ldr	r2, [pc, #256]	@ (800a64c <UART_Start_Receive_DMA+0x140>)
 800a54a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a552:	4a3f      	ldr	r2, [pc, #252]	@ (800a650 <UART_Start_Receive_DMA+0x144>)
 800a554:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a55c:	4a3d      	ldr	r2, [pc, #244]	@ (800a654 <UART_Start_Receive_DMA+0x148>)
 800a55e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a566:	2200      	movs	r2, #0
 800a568:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	3324      	adds	r3, #36	@ 0x24
 800a576:	4619      	mov	r1, r3
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a57c:	461a      	mov	r2, r3
 800a57e:	88fb      	ldrh	r3, [r7, #6]
 800a580:	f7fb f880 	bl	8005684 <HAL_DMA_Start_IT>
 800a584:	4603      	mov	r3, r0
 800a586:	2b00      	cmp	r3, #0
 800a588:	d009      	beq.n	800a59e <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	2210      	movs	r2, #16
 800a58e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	2220      	movs	r2, #32
 800a596:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800a59a:	2301      	movs	r3, #1
 800a59c:	e051      	b.n	800a642 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	691b      	ldr	r3, [r3, #16]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d018      	beq.n	800a5d8 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a5ae:	e853 3f00 	ldrex	r3, [r3]
 800a5b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a5b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a5ba:	657b      	str	r3, [r7, #84]	@ 0x54
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	461a      	mov	r2, r3
 800a5c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a5c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a5c6:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5c8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a5ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a5cc:	e841 2300 	strex	r3, r2, [r1]
 800a5d0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a5d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d1e6      	bne.n	800a5a6 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	3308      	adds	r3, #8
 800a5de:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5e2:	e853 3f00 	ldrex	r3, [r3]
 800a5e6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a5e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5ea:	f043 0301 	orr.w	r3, r3, #1
 800a5ee:	653b      	str	r3, [r7, #80]	@ 0x50
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	3308      	adds	r3, #8
 800a5f6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a5f8:	637a      	str	r2, [r7, #52]	@ 0x34
 800a5fa:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5fc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a5fe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a600:	e841 2300 	strex	r3, r2, [r1]
 800a604:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a606:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d1e5      	bne.n	800a5d8 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	3308      	adds	r3, #8
 800a612:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a614:	697b      	ldr	r3, [r7, #20]
 800a616:	e853 3f00 	ldrex	r3, [r3]
 800a61a:	613b      	str	r3, [r7, #16]
   return(result);
 800a61c:	693b      	ldr	r3, [r7, #16]
 800a61e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a622:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	3308      	adds	r3, #8
 800a62a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a62c:	623a      	str	r2, [r7, #32]
 800a62e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a630:	69f9      	ldr	r1, [r7, #28]
 800a632:	6a3a      	ldr	r2, [r7, #32]
 800a634:	e841 2300 	strex	r3, r2, [r1]
 800a638:	61bb      	str	r3, [r7, #24]
   return(result);
 800a63a:	69bb      	ldr	r3, [r7, #24]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d1e5      	bne.n	800a60c <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800a640:	2300      	movs	r3, #0
}
 800a642:	4618      	mov	r0, r3
 800a644:	3758      	adds	r7, #88	@ 0x58
 800a646:	46bd      	mov	sp, r7
 800a648:	bd80      	pop	{r7, pc}
 800a64a:	bf00      	nop
 800a64c:	0800a7a7 	.word	0x0800a7a7
 800a650:	0800a8db 	.word	0x0800a8db
 800a654:	0800a921 	.word	0x0800a921

0800a658 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a658:	b480      	push	{r7}
 800a65a:	b08f      	sub	sp, #60	@ 0x3c
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a666:	6a3b      	ldr	r3, [r7, #32]
 800a668:	e853 3f00 	ldrex	r3, [r3]
 800a66c:	61fb      	str	r3, [r7, #28]
   return(result);
 800a66e:	69fb      	ldr	r3, [r7, #28]
 800a670:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a674:	637b      	str	r3, [r7, #52]	@ 0x34
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	461a      	mov	r2, r3
 800a67c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a67e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a680:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a682:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a684:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a686:	e841 2300 	strex	r3, r2, [r1]
 800a68a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a68c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d1e6      	bne.n	800a660 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	3308      	adds	r3, #8
 800a698:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	e853 3f00 	ldrex	r3, [r3]
 800a6a0:	60bb      	str	r3, [r7, #8]
   return(result);
 800a6a2:	68bb      	ldr	r3, [r7, #8]
 800a6a4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800a6a8:	633b      	str	r3, [r7, #48]	@ 0x30
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	3308      	adds	r3, #8
 800a6b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a6b2:	61ba      	str	r2, [r7, #24]
 800a6b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6b6:	6979      	ldr	r1, [r7, #20]
 800a6b8:	69ba      	ldr	r2, [r7, #24]
 800a6ba:	e841 2300 	strex	r3, r2, [r1]
 800a6be:	613b      	str	r3, [r7, #16]
   return(result);
 800a6c0:	693b      	ldr	r3, [r7, #16]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d1e5      	bne.n	800a692 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	2220      	movs	r2, #32
 800a6ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800a6ce:	bf00      	nop
 800a6d0:	373c      	adds	r7, #60	@ 0x3c
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d8:	4770      	bx	lr

0800a6da <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a6da:	b480      	push	{r7}
 800a6dc:	b095      	sub	sp, #84	@ 0x54
 800a6de:	af00      	add	r7, sp, #0
 800a6e0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6ea:	e853 3f00 	ldrex	r3, [r3]
 800a6ee:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a6f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6f2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a6f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	461a      	mov	r2, r3
 800a6fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a700:	643b      	str	r3, [r7, #64]	@ 0x40
 800a702:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a704:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a706:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a708:	e841 2300 	strex	r3, r2, [r1]
 800a70c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a70e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a710:	2b00      	cmp	r3, #0
 800a712:	d1e6      	bne.n	800a6e2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	3308      	adds	r3, #8
 800a71a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a71c:	6a3b      	ldr	r3, [r7, #32]
 800a71e:	e853 3f00 	ldrex	r3, [r3]
 800a722:	61fb      	str	r3, [r7, #28]
   return(result);
 800a724:	69fb      	ldr	r3, [r7, #28]
 800a726:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a72a:	f023 0301 	bic.w	r3, r3, #1
 800a72e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	3308      	adds	r3, #8
 800a736:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a738:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a73a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a73c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a73e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a740:	e841 2300 	strex	r3, r2, [r1]
 800a744:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d1e3      	bne.n	800a714 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a750:	2b01      	cmp	r3, #1
 800a752:	d118      	bne.n	800a786 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	e853 3f00 	ldrex	r3, [r3]
 800a760:	60bb      	str	r3, [r7, #8]
   return(result);
 800a762:	68bb      	ldr	r3, [r7, #8]
 800a764:	f023 0310 	bic.w	r3, r3, #16
 800a768:	647b      	str	r3, [r7, #68]	@ 0x44
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	461a      	mov	r2, r3
 800a770:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a772:	61bb      	str	r3, [r7, #24]
 800a774:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a776:	6979      	ldr	r1, [r7, #20]
 800a778:	69ba      	ldr	r2, [r7, #24]
 800a77a:	e841 2300 	strex	r3, r2, [r1]
 800a77e:	613b      	str	r3, [r7, #16]
   return(result);
 800a780:	693b      	ldr	r3, [r7, #16]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d1e6      	bne.n	800a754 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	2220      	movs	r2, #32
 800a78a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	2200      	movs	r2, #0
 800a792:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	2200      	movs	r2, #0
 800a798:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a79a:	bf00      	nop
 800a79c:	3754      	adds	r7, #84	@ 0x54
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a4:	4770      	bx	lr

0800a7a6 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a7a6:	b580      	push	{r7, lr}
 800a7a8:	b09c      	sub	sp, #112	@ 0x70
 800a7aa:	af00      	add	r7, sp, #0
 800a7ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7b2:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	f003 0320 	and.w	r3, r3, #32
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d171      	bne.n	800a8a6 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800a7c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a7c4:	2200      	movs	r2, #0
 800a7c6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a7ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a7d2:	e853 3f00 	ldrex	r3, [r3]
 800a7d6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a7d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a7da:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a7de:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a7e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	461a      	mov	r2, r3
 800a7e6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a7e8:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a7ea:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7ec:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a7ee:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a7f0:	e841 2300 	strex	r3, r2, [r1]
 800a7f4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a7f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d1e6      	bne.n	800a7ca <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a7fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	3308      	adds	r3, #8
 800a802:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a804:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a806:	e853 3f00 	ldrex	r3, [r3]
 800a80a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a80c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a80e:	f023 0301 	bic.w	r3, r3, #1
 800a812:	667b      	str	r3, [r7, #100]	@ 0x64
 800a814:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	3308      	adds	r3, #8
 800a81a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a81c:	647a      	str	r2, [r7, #68]	@ 0x44
 800a81e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a820:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a822:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a824:	e841 2300 	strex	r3, r2, [r1]
 800a828:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a82a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d1e5      	bne.n	800a7fc <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a830:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	3308      	adds	r3, #8
 800a836:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a83a:	e853 3f00 	ldrex	r3, [r3]
 800a83e:	623b      	str	r3, [r7, #32]
   return(result);
 800a840:	6a3b      	ldr	r3, [r7, #32]
 800a842:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a846:	663b      	str	r3, [r7, #96]	@ 0x60
 800a848:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	3308      	adds	r3, #8
 800a84e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a850:	633a      	str	r2, [r7, #48]	@ 0x30
 800a852:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a854:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a856:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a858:	e841 2300 	strex	r3, r2, [r1]
 800a85c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a85e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a860:	2b00      	cmp	r3, #0
 800a862:	d1e5      	bne.n	800a830 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a864:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a866:	2220      	movs	r2, #32
 800a868:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a86c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a86e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a870:	2b01      	cmp	r3, #1
 800a872:	d118      	bne.n	800a8a6 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a874:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a87a:	693b      	ldr	r3, [r7, #16]
 800a87c:	e853 3f00 	ldrex	r3, [r3]
 800a880:	60fb      	str	r3, [r7, #12]
   return(result);
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	f023 0310 	bic.w	r3, r3, #16
 800a888:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a88a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	461a      	mov	r2, r3
 800a890:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a892:	61fb      	str	r3, [r7, #28]
 800a894:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a896:	69b9      	ldr	r1, [r7, #24]
 800a898:	69fa      	ldr	r2, [r7, #28]
 800a89a:	e841 2300 	strex	r3, r2, [r1]
 800a89e:	617b      	str	r3, [r7, #20]
   return(result);
 800a8a0:	697b      	ldr	r3, [r7, #20]
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d1e6      	bne.n	800a874 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a8a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a8ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a8ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a8b0:	2b01      	cmp	r3, #1
 800a8b2:	d109      	bne.n	800a8c8 <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800a8b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a8b6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a8ba:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a8bc:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800a8c0:	4611      	mov	r1, r2
 800a8c2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a8c4:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a8c6:	e004      	b.n	800a8d2 <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 800a8c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a8ca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a8ce:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a8d0:	4798      	blx	r3
}
 800a8d2:	bf00      	nop
 800a8d4:	3770      	adds	r7, #112	@ 0x70
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	bd80      	pop	{r7, pc}

0800a8da <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a8da:	b580      	push	{r7, lr}
 800a8dc:	b084      	sub	sp, #16
 800a8de:	af00      	add	r7, sp, #0
 800a8e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8e6:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	2201      	movs	r2, #1
 800a8ec:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a8f2:	2b01      	cmp	r3, #1
 800a8f4:	d10b      	bne.n	800a90e <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a8fc:	68fa      	ldr	r2, [r7, #12]
 800a8fe:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800a902:	0852      	lsrs	r2, r2, #1
 800a904:	b292      	uxth	r2, r2
 800a906:	4611      	mov	r1, r2
 800a908:	68f8      	ldr	r0, [r7, #12]
 800a90a:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a90c:	e004      	b.n	800a918 <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a914:	68f8      	ldr	r0, [r7, #12]
 800a916:	4798      	blx	r3
}
 800a918:	bf00      	nop
 800a91a:	3710      	adds	r7, #16
 800a91c:	46bd      	mov	sp, r7
 800a91e:	bd80      	pop	{r7, pc}

0800a920 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a920:	b580      	push	{r7, lr}
 800a922:	b086      	sub	sp, #24
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a92c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a92e:	697b      	ldr	r3, [r7, #20]
 800a930:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a934:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a936:	697b      	ldr	r3, [r7, #20]
 800a938:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a93c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a93e:	697b      	ldr	r3, [r7, #20]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	689b      	ldr	r3, [r3, #8]
 800a944:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a948:	2b80      	cmp	r3, #128	@ 0x80
 800a94a:	d109      	bne.n	800a960 <UART_DMAError+0x40>
 800a94c:	693b      	ldr	r3, [r7, #16]
 800a94e:	2b21      	cmp	r3, #33	@ 0x21
 800a950:	d106      	bne.n	800a960 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a952:	697b      	ldr	r3, [r7, #20]
 800a954:	2200      	movs	r2, #0
 800a956:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800a95a:	6978      	ldr	r0, [r7, #20]
 800a95c:	f7ff fe7c 	bl	800a658 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a960:	697b      	ldr	r3, [r7, #20]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	689b      	ldr	r3, [r3, #8]
 800a966:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a96a:	2b40      	cmp	r3, #64	@ 0x40
 800a96c:	d109      	bne.n	800a982 <UART_DMAError+0x62>
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	2b22      	cmp	r3, #34	@ 0x22
 800a972:	d106      	bne.n	800a982 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a974:	697b      	ldr	r3, [r7, #20]
 800a976:	2200      	movs	r2, #0
 800a978:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800a97c:	6978      	ldr	r0, [r7, #20]
 800a97e:	f7ff feac 	bl	800a6da <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a982:	697b      	ldr	r3, [r7, #20]
 800a984:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a988:	f043 0210 	orr.w	r2, r3, #16
 800a98c:	697b      	ldr	r3, [r7, #20]
 800a98e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800a992:	697b      	ldr	r3, [r7, #20]
 800a994:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a998:	6978      	ldr	r0, [r7, #20]
 800a99a:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a99c:	bf00      	nop
 800a99e:	3718      	adds	r7, #24
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	bd80      	pop	{r7, pc}

0800a9a4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a9a4:	b580      	push	{r7, lr}
 800a9a6:	b084      	sub	sp, #16
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9b0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	2200      	movs	r2, #0
 800a9b6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	2200      	movs	r2, #0
 800a9be:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a9c8:	68f8      	ldr	r0, [r7, #12]
 800a9ca:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a9cc:	bf00      	nop
 800a9ce:	3710      	adds	r7, #16
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	bd80      	pop	{r7, pc}

0800a9d4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	b088      	sub	sp, #32
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	e853 3f00 	ldrex	r3, [r3]
 800a9e8:	60bb      	str	r3, [r7, #8]
   return(result);
 800a9ea:	68bb      	ldr	r3, [r7, #8]
 800a9ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a9f0:	61fb      	str	r3, [r7, #28]
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	461a      	mov	r2, r3
 800a9f8:	69fb      	ldr	r3, [r7, #28]
 800a9fa:	61bb      	str	r3, [r7, #24]
 800a9fc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9fe:	6979      	ldr	r1, [r7, #20]
 800aa00:	69ba      	ldr	r2, [r7, #24]
 800aa02:	e841 2300 	strex	r3, r2, [r1]
 800aa06:	613b      	str	r3, [r7, #16]
   return(result);
 800aa08:	693b      	ldr	r3, [r7, #16]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d1e6      	bne.n	800a9dc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	2220      	movs	r2, #32
 800aa12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	2200      	movs	r2, #0
 800aa1a:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800aa22:	6878      	ldr	r0, [r7, #4]
 800aa24:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aa26:	bf00      	nop
 800aa28:	3720      	adds	r7, #32
 800aa2a:	46bd      	mov	sp, r7
 800aa2c:	bd80      	pop	{r7, pc}

0800aa2e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800aa2e:	b480      	push	{r7}
 800aa30:	b083      	sub	sp, #12
 800aa32:	af00      	add	r7, sp, #0
 800aa34:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800aa36:	bf00      	nop
 800aa38:	370c      	adds	r7, #12
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa40:	4770      	bx	lr

0800aa42 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800aa42:	b480      	push	{r7}
 800aa44:	b083      	sub	sp, #12
 800aa46:	af00      	add	r7, sp, #0
 800aa48:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800aa4a:	bf00      	nop
 800aa4c:	370c      	adds	r7, #12
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa54:	4770      	bx	lr

0800aa56 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800aa56:	b480      	push	{r7}
 800aa58:	b083      	sub	sp, #12
 800aa5a:	af00      	add	r7, sp, #0
 800aa5c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800aa5e:	bf00      	nop
 800aa60:	370c      	adds	r7, #12
 800aa62:	46bd      	mov	sp, r7
 800aa64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa68:	4770      	bx	lr

0800aa6a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800aa6a:	b480      	push	{r7}
 800aa6c:	b085      	sub	sp, #20
 800aa6e:	af00      	add	r7, sp, #0
 800aa70:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800aa78:	2b01      	cmp	r3, #1
 800aa7a:	d101      	bne.n	800aa80 <HAL_UARTEx_DisableFifoMode+0x16>
 800aa7c:	2302      	movs	r3, #2
 800aa7e:	e027      	b.n	800aad0 <HAL_UARTEx_DisableFifoMode+0x66>
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	2201      	movs	r2, #1
 800aa84:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	2224      	movs	r2, #36	@ 0x24
 800aa8c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	681a      	ldr	r2, [r3, #0]
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	f022 0201 	bic.w	r2, r2, #1
 800aaa6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800aaae:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	2200      	movs	r2, #0
 800aab4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	68fa      	ldr	r2, [r7, #12]
 800aabc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	2220      	movs	r2, #32
 800aac2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	2200      	movs	r2, #0
 800aaca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800aace:	2300      	movs	r3, #0
}
 800aad0:	4618      	mov	r0, r3
 800aad2:	3714      	adds	r7, #20
 800aad4:	46bd      	mov	sp, r7
 800aad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aada:	4770      	bx	lr

0800aadc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800aadc:	b580      	push	{r7, lr}
 800aade:	b084      	sub	sp, #16
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
 800aae4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800aaec:	2b01      	cmp	r3, #1
 800aaee:	d101      	bne.n	800aaf4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800aaf0:	2302      	movs	r3, #2
 800aaf2:	e02d      	b.n	800ab50 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	2201      	movs	r2, #1
 800aaf8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	2224      	movs	r2, #36	@ 0x24
 800ab00:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	681a      	ldr	r2, [r3, #0]
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	f022 0201 	bic.w	r2, r2, #1
 800ab1a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	689b      	ldr	r3, [r3, #8]
 800ab22:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	683a      	ldr	r2, [r7, #0]
 800ab2c:	430a      	orrs	r2, r1
 800ab2e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ab30:	6878      	ldr	r0, [r7, #4]
 800ab32:	f000 f84f 	bl	800abd4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	68fa      	ldr	r2, [r7, #12]
 800ab3c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	2220      	movs	r2, #32
 800ab42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	2200      	movs	r2, #0
 800ab4a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ab4e:	2300      	movs	r3, #0
}
 800ab50:	4618      	mov	r0, r3
 800ab52:	3710      	adds	r7, #16
 800ab54:	46bd      	mov	sp, r7
 800ab56:	bd80      	pop	{r7, pc}

0800ab58 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ab58:	b580      	push	{r7, lr}
 800ab5a:	b084      	sub	sp, #16
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
 800ab60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ab68:	2b01      	cmp	r3, #1
 800ab6a:	d101      	bne.n	800ab70 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ab6c:	2302      	movs	r3, #2
 800ab6e:	e02d      	b.n	800abcc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	2201      	movs	r2, #1
 800ab74:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	2224      	movs	r2, #36	@ 0x24
 800ab7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	681a      	ldr	r2, [r3, #0]
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	f022 0201 	bic.w	r2, r2, #1
 800ab96:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	689b      	ldr	r3, [r3, #8]
 800ab9e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	683a      	ldr	r2, [r7, #0]
 800aba8:	430a      	orrs	r2, r1
 800abaa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800abac:	6878      	ldr	r0, [r7, #4]
 800abae:	f000 f811 	bl	800abd4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	68fa      	ldr	r2, [r7, #12]
 800abb8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	2220      	movs	r2, #32
 800abbe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	2200      	movs	r2, #0
 800abc6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800abca:	2300      	movs	r3, #0
}
 800abcc:	4618      	mov	r0, r3
 800abce:	3710      	adds	r7, #16
 800abd0:	46bd      	mov	sp, r7
 800abd2:	bd80      	pop	{r7, pc}

0800abd4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800abd4:	b480      	push	{r7}
 800abd6:	b085      	sub	sp, #20
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d108      	bne.n	800abf6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	2201      	movs	r2, #1
 800abe8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	2201      	movs	r2, #1
 800abf0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800abf4:	e031      	b.n	800ac5a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800abf6:	2308      	movs	r3, #8
 800abf8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800abfa:	2308      	movs	r3, #8
 800abfc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	689b      	ldr	r3, [r3, #8]
 800ac04:	0e5b      	lsrs	r3, r3, #25
 800ac06:	b2db      	uxtb	r3, r3
 800ac08:	f003 0307 	and.w	r3, r3, #7
 800ac0c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	689b      	ldr	r3, [r3, #8]
 800ac14:	0f5b      	lsrs	r3, r3, #29
 800ac16:	b2db      	uxtb	r3, r3
 800ac18:	f003 0307 	and.w	r3, r3, #7
 800ac1c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ac1e:	7bbb      	ldrb	r3, [r7, #14]
 800ac20:	7b3a      	ldrb	r2, [r7, #12]
 800ac22:	4911      	ldr	r1, [pc, #68]	@ (800ac68 <UARTEx_SetNbDataToProcess+0x94>)
 800ac24:	5c8a      	ldrb	r2, [r1, r2]
 800ac26:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ac2a:	7b3a      	ldrb	r2, [r7, #12]
 800ac2c:	490f      	ldr	r1, [pc, #60]	@ (800ac6c <UARTEx_SetNbDataToProcess+0x98>)
 800ac2e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ac30:	fb93 f3f2 	sdiv	r3, r3, r2
 800ac34:	b29a      	uxth	r2, r3
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ac3c:	7bfb      	ldrb	r3, [r7, #15]
 800ac3e:	7b7a      	ldrb	r2, [r7, #13]
 800ac40:	4909      	ldr	r1, [pc, #36]	@ (800ac68 <UARTEx_SetNbDataToProcess+0x94>)
 800ac42:	5c8a      	ldrb	r2, [r1, r2]
 800ac44:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ac48:	7b7a      	ldrb	r2, [r7, #13]
 800ac4a:	4908      	ldr	r1, [pc, #32]	@ (800ac6c <UARTEx_SetNbDataToProcess+0x98>)
 800ac4c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ac4e:	fb93 f3f2 	sdiv	r3, r3, r2
 800ac52:	b29a      	uxth	r2, r3
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800ac5a:	bf00      	nop
 800ac5c:	3714      	adds	r7, #20
 800ac5e:	46bd      	mov	sp, r7
 800ac60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac64:	4770      	bx	lr
 800ac66:	bf00      	nop
 800ac68:	0800af94 	.word	0x0800af94
 800ac6c:	0800af9c 	.word	0x0800af9c

0800ac70 <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 800ac70:	b580      	push	{r7, lr}
 800ac72:	b082      	sub	sp, #8
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	6078      	str	r0, [r7, #4]
 800ac78:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	ed93 7a06 	vldr	s14, [r3, #24]
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	edd3 7a07 	vldr	s15, [r3, #28]
 800ac86:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	edd3 7a08 	vldr	s15, [r3, #32]
 800ac90:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	edd3 7a06 	vldr	s15, [r3, #24]
 800aca0:	eeb1 7a67 	vneg.f32	s14, s15
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	edd3 7a08 	vldr	s15, [r3, #32]
 800acaa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800acae:	ee77 7a67 	vsub.f32	s15, s14, s15
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	6a1a      	ldr	r2, [r3, #32]
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 800acc0:	683b      	ldr	r3, [r7, #0]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d006      	beq.n	800acd4 <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	330c      	adds	r3, #12
 800acca:	220c      	movs	r2, #12
 800accc:	2100      	movs	r1, #0
 800acce:	4618      	mov	r0, r3
 800acd0:	f000 f804 	bl	800acdc <memset>
  }

}
 800acd4:	bf00      	nop
 800acd6:	3708      	adds	r7, #8
 800acd8:	46bd      	mov	sp, r7
 800acda:	bd80      	pop	{r7, pc}

0800acdc <memset>:
 800acdc:	4402      	add	r2, r0
 800acde:	4603      	mov	r3, r0
 800ace0:	4293      	cmp	r3, r2
 800ace2:	d100      	bne.n	800ace6 <memset+0xa>
 800ace4:	4770      	bx	lr
 800ace6:	f803 1b01 	strb.w	r1, [r3], #1
 800acea:	e7f9      	b.n	800ace0 <memset+0x4>

0800acec <__errno>:
 800acec:	4b01      	ldr	r3, [pc, #4]	@ (800acf4 <__errno+0x8>)
 800acee:	6818      	ldr	r0, [r3, #0]
 800acf0:	4770      	bx	lr
 800acf2:	bf00      	nop
 800acf4:	20000024 	.word	0x20000024

0800acf8 <__libc_init_array>:
 800acf8:	b570      	push	{r4, r5, r6, lr}
 800acfa:	4d0d      	ldr	r5, [pc, #52]	@ (800ad30 <__libc_init_array+0x38>)
 800acfc:	4c0d      	ldr	r4, [pc, #52]	@ (800ad34 <__libc_init_array+0x3c>)
 800acfe:	1b64      	subs	r4, r4, r5
 800ad00:	10a4      	asrs	r4, r4, #2
 800ad02:	2600      	movs	r6, #0
 800ad04:	42a6      	cmp	r6, r4
 800ad06:	d109      	bne.n	800ad1c <__libc_init_array+0x24>
 800ad08:	4d0b      	ldr	r5, [pc, #44]	@ (800ad38 <__libc_init_array+0x40>)
 800ad0a:	4c0c      	ldr	r4, [pc, #48]	@ (800ad3c <__libc_init_array+0x44>)
 800ad0c:	f000 f91e 	bl	800af4c <_init>
 800ad10:	1b64      	subs	r4, r4, r5
 800ad12:	10a4      	asrs	r4, r4, #2
 800ad14:	2600      	movs	r6, #0
 800ad16:	42a6      	cmp	r6, r4
 800ad18:	d105      	bne.n	800ad26 <__libc_init_array+0x2e>
 800ad1a:	bd70      	pop	{r4, r5, r6, pc}
 800ad1c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad20:	4798      	blx	r3
 800ad22:	3601      	adds	r6, #1
 800ad24:	e7ee      	b.n	800ad04 <__libc_init_array+0xc>
 800ad26:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad2a:	4798      	blx	r3
 800ad2c:	3601      	adds	r6, #1
 800ad2e:	e7f2      	b.n	800ad16 <__libc_init_array+0x1e>
 800ad30:	0800afac 	.word	0x0800afac
 800ad34:	0800afac 	.word	0x0800afac
 800ad38:	0800afac 	.word	0x0800afac
 800ad3c:	0800afb0 	.word	0x0800afb0

0800ad40 <sqrt>:
 800ad40:	b538      	push	{r3, r4, r5, lr}
 800ad42:	ed2d 8b02 	vpush	{d8}
 800ad46:	ec55 4b10 	vmov	r4, r5, d0
 800ad4a:	f000 f825 	bl	800ad98 <__ieee754_sqrt>
 800ad4e:	4622      	mov	r2, r4
 800ad50:	462b      	mov	r3, r5
 800ad52:	4620      	mov	r0, r4
 800ad54:	4629      	mov	r1, r5
 800ad56:	eeb0 8a40 	vmov.f32	s16, s0
 800ad5a:	eef0 8a60 	vmov.f32	s17, s1
 800ad5e:	f7f5 feb1 	bl	8000ac4 <__aeabi_dcmpun>
 800ad62:	b990      	cbnz	r0, 800ad8a <sqrt+0x4a>
 800ad64:	2200      	movs	r2, #0
 800ad66:	2300      	movs	r3, #0
 800ad68:	4620      	mov	r0, r4
 800ad6a:	4629      	mov	r1, r5
 800ad6c:	f7f5 fe82 	bl	8000a74 <__aeabi_dcmplt>
 800ad70:	b158      	cbz	r0, 800ad8a <sqrt+0x4a>
 800ad72:	f7ff ffbb 	bl	800acec <__errno>
 800ad76:	2321      	movs	r3, #33	@ 0x21
 800ad78:	6003      	str	r3, [r0, #0]
 800ad7a:	2200      	movs	r2, #0
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	4610      	mov	r0, r2
 800ad80:	4619      	mov	r1, r3
 800ad82:	f7f5 fd2f 	bl	80007e4 <__aeabi_ddiv>
 800ad86:	ec41 0b18 	vmov	d8, r0, r1
 800ad8a:	eeb0 0a48 	vmov.f32	s0, s16
 800ad8e:	eef0 0a68 	vmov.f32	s1, s17
 800ad92:	ecbd 8b02 	vpop	{d8}
 800ad96:	bd38      	pop	{r3, r4, r5, pc}

0800ad98 <__ieee754_sqrt>:
 800ad98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad9c:	4a68      	ldr	r2, [pc, #416]	@ (800af40 <__ieee754_sqrt+0x1a8>)
 800ad9e:	ec55 4b10 	vmov	r4, r5, d0
 800ada2:	43aa      	bics	r2, r5
 800ada4:	462b      	mov	r3, r5
 800ada6:	4621      	mov	r1, r4
 800ada8:	d110      	bne.n	800adcc <__ieee754_sqrt+0x34>
 800adaa:	4622      	mov	r2, r4
 800adac:	4620      	mov	r0, r4
 800adae:	4629      	mov	r1, r5
 800adb0:	f7f5 fbee 	bl	8000590 <__aeabi_dmul>
 800adb4:	4602      	mov	r2, r0
 800adb6:	460b      	mov	r3, r1
 800adb8:	4620      	mov	r0, r4
 800adba:	4629      	mov	r1, r5
 800adbc:	f7f5 fa32 	bl	8000224 <__adddf3>
 800adc0:	4604      	mov	r4, r0
 800adc2:	460d      	mov	r5, r1
 800adc4:	ec45 4b10 	vmov	d0, r4, r5
 800adc8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adcc:	2d00      	cmp	r5, #0
 800adce:	dc0e      	bgt.n	800adee <__ieee754_sqrt+0x56>
 800add0:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800add4:	4322      	orrs	r2, r4
 800add6:	d0f5      	beq.n	800adc4 <__ieee754_sqrt+0x2c>
 800add8:	b19d      	cbz	r5, 800ae02 <__ieee754_sqrt+0x6a>
 800adda:	4622      	mov	r2, r4
 800addc:	4620      	mov	r0, r4
 800adde:	4629      	mov	r1, r5
 800ade0:	f7f5 fa1e 	bl	8000220 <__aeabi_dsub>
 800ade4:	4602      	mov	r2, r0
 800ade6:	460b      	mov	r3, r1
 800ade8:	f7f5 fcfc 	bl	80007e4 <__aeabi_ddiv>
 800adec:	e7e8      	b.n	800adc0 <__ieee754_sqrt+0x28>
 800adee:	152a      	asrs	r2, r5, #20
 800adf0:	d115      	bne.n	800ae1e <__ieee754_sqrt+0x86>
 800adf2:	2000      	movs	r0, #0
 800adf4:	e009      	b.n	800ae0a <__ieee754_sqrt+0x72>
 800adf6:	0acb      	lsrs	r3, r1, #11
 800adf8:	3a15      	subs	r2, #21
 800adfa:	0549      	lsls	r1, r1, #21
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d0fa      	beq.n	800adf6 <__ieee754_sqrt+0x5e>
 800ae00:	e7f7      	b.n	800adf2 <__ieee754_sqrt+0x5a>
 800ae02:	462a      	mov	r2, r5
 800ae04:	e7fa      	b.n	800adfc <__ieee754_sqrt+0x64>
 800ae06:	005b      	lsls	r3, r3, #1
 800ae08:	3001      	adds	r0, #1
 800ae0a:	02dc      	lsls	r4, r3, #11
 800ae0c:	d5fb      	bpl.n	800ae06 <__ieee754_sqrt+0x6e>
 800ae0e:	1e44      	subs	r4, r0, #1
 800ae10:	1b12      	subs	r2, r2, r4
 800ae12:	f1c0 0420 	rsb	r4, r0, #32
 800ae16:	fa21 f404 	lsr.w	r4, r1, r4
 800ae1a:	4323      	orrs	r3, r4
 800ae1c:	4081      	lsls	r1, r0
 800ae1e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ae22:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800ae26:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ae2a:	07d2      	lsls	r2, r2, #31
 800ae2c:	bf5c      	itt	pl
 800ae2e:	005b      	lslpl	r3, r3, #1
 800ae30:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800ae34:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ae38:	bf58      	it	pl
 800ae3a:	0049      	lslpl	r1, r1, #1
 800ae3c:	2600      	movs	r6, #0
 800ae3e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800ae42:	106d      	asrs	r5, r5, #1
 800ae44:	0049      	lsls	r1, r1, #1
 800ae46:	2016      	movs	r0, #22
 800ae48:	4632      	mov	r2, r6
 800ae4a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800ae4e:	1917      	adds	r7, r2, r4
 800ae50:	429f      	cmp	r7, r3
 800ae52:	bfde      	ittt	le
 800ae54:	193a      	addle	r2, r7, r4
 800ae56:	1bdb      	suble	r3, r3, r7
 800ae58:	1936      	addle	r6, r6, r4
 800ae5a:	0fcf      	lsrs	r7, r1, #31
 800ae5c:	3801      	subs	r0, #1
 800ae5e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800ae62:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800ae66:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800ae6a:	d1f0      	bne.n	800ae4e <__ieee754_sqrt+0xb6>
 800ae6c:	4604      	mov	r4, r0
 800ae6e:	2720      	movs	r7, #32
 800ae70:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800ae74:	429a      	cmp	r2, r3
 800ae76:	eb00 0e0c 	add.w	lr, r0, ip
 800ae7a:	db02      	blt.n	800ae82 <__ieee754_sqrt+0xea>
 800ae7c:	d113      	bne.n	800aea6 <__ieee754_sqrt+0x10e>
 800ae7e:	458e      	cmp	lr, r1
 800ae80:	d811      	bhi.n	800aea6 <__ieee754_sqrt+0x10e>
 800ae82:	f1be 0f00 	cmp.w	lr, #0
 800ae86:	eb0e 000c 	add.w	r0, lr, ip
 800ae8a:	da42      	bge.n	800af12 <__ieee754_sqrt+0x17a>
 800ae8c:	2800      	cmp	r0, #0
 800ae8e:	db40      	blt.n	800af12 <__ieee754_sqrt+0x17a>
 800ae90:	f102 0801 	add.w	r8, r2, #1
 800ae94:	1a9b      	subs	r3, r3, r2
 800ae96:	458e      	cmp	lr, r1
 800ae98:	bf88      	it	hi
 800ae9a:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 800ae9e:	eba1 010e 	sub.w	r1, r1, lr
 800aea2:	4464      	add	r4, ip
 800aea4:	4642      	mov	r2, r8
 800aea6:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800aeaa:	3f01      	subs	r7, #1
 800aeac:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800aeb0:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800aeb4:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800aeb8:	d1dc      	bne.n	800ae74 <__ieee754_sqrt+0xdc>
 800aeba:	4319      	orrs	r1, r3
 800aebc:	d01b      	beq.n	800aef6 <__ieee754_sqrt+0x15e>
 800aebe:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800af44 <__ieee754_sqrt+0x1ac>
 800aec2:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800af48 <__ieee754_sqrt+0x1b0>
 800aec6:	e9da 0100 	ldrd	r0, r1, [sl]
 800aeca:	e9db 2300 	ldrd	r2, r3, [fp]
 800aece:	f7f5 f9a7 	bl	8000220 <__aeabi_dsub>
 800aed2:	e9da 8900 	ldrd	r8, r9, [sl]
 800aed6:	4602      	mov	r2, r0
 800aed8:	460b      	mov	r3, r1
 800aeda:	4640      	mov	r0, r8
 800aedc:	4649      	mov	r1, r9
 800aede:	f7f5 fdd3 	bl	8000a88 <__aeabi_dcmple>
 800aee2:	b140      	cbz	r0, 800aef6 <__ieee754_sqrt+0x15e>
 800aee4:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 800aee8:	e9da 0100 	ldrd	r0, r1, [sl]
 800aeec:	e9db 2300 	ldrd	r2, r3, [fp]
 800aef0:	d111      	bne.n	800af16 <__ieee754_sqrt+0x17e>
 800aef2:	3601      	adds	r6, #1
 800aef4:	463c      	mov	r4, r7
 800aef6:	1072      	asrs	r2, r6, #1
 800aef8:	0863      	lsrs	r3, r4, #1
 800aefa:	07f1      	lsls	r1, r6, #31
 800aefc:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800af00:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800af04:	bf48      	it	mi
 800af06:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800af0a:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800af0e:	4618      	mov	r0, r3
 800af10:	e756      	b.n	800adc0 <__ieee754_sqrt+0x28>
 800af12:	4690      	mov	r8, r2
 800af14:	e7be      	b.n	800ae94 <__ieee754_sqrt+0xfc>
 800af16:	f7f5 f985 	bl	8000224 <__adddf3>
 800af1a:	e9da 8900 	ldrd	r8, r9, [sl]
 800af1e:	4602      	mov	r2, r0
 800af20:	460b      	mov	r3, r1
 800af22:	4640      	mov	r0, r8
 800af24:	4649      	mov	r1, r9
 800af26:	f7f5 fda5 	bl	8000a74 <__aeabi_dcmplt>
 800af2a:	b120      	cbz	r0, 800af36 <__ieee754_sqrt+0x19e>
 800af2c:	1ca0      	adds	r0, r4, #2
 800af2e:	bf08      	it	eq
 800af30:	3601      	addeq	r6, #1
 800af32:	3402      	adds	r4, #2
 800af34:	e7df      	b.n	800aef6 <__ieee754_sqrt+0x15e>
 800af36:	1c63      	adds	r3, r4, #1
 800af38:	f023 0401 	bic.w	r4, r3, #1
 800af3c:	e7db      	b.n	800aef6 <__ieee754_sqrt+0x15e>
 800af3e:	bf00      	nop
 800af40:	7ff00000 	.word	0x7ff00000
 800af44:	20000080 	.word	0x20000080
 800af48:	20000078 	.word	0x20000078

0800af4c <_init>:
 800af4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af4e:	bf00      	nop
 800af50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af52:	bc08      	pop	{r3}
 800af54:	469e      	mov	lr, r3
 800af56:	4770      	bx	lr

0800af58 <_fini>:
 800af58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af5a:	bf00      	nop
 800af5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af5e:	bc08      	pop	{r3}
 800af60:	469e      	mov	lr, r3
 800af62:	4770      	bx	lr
