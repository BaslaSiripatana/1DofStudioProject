
Studio_readRPM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aeec  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800b0c4  0800b0c4  0000c0c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b104  0800b104  0000d088  2**0
                  CONTENTS
  4 .ARM          00000008  0800b104  0800b104  0000c104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b10c  0800b10c  0000d088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b10c  0800b10c  0000c10c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b110  0800b110  0000c110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800b114  0000d000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000102c  20000088  0800b19c  0000d088  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200010b4  0800b19c  0000d0b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b3a8  00000000  00000000  0000d0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003132  00000000  00000000  00028460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001698  00000000  00000000  0002b598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011b0  00000000  00000000  0002cc30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000290a1  00000000  00000000  0002dde0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a2e9  00000000  00000000  00056e81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001155be  00000000  00000000  0007116a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00186728  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000065cc  00000000  00000000  0018676c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0018cd38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000088 	.word	0x20000088
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800b0ac 	.word	0x0800b0ac

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000008c 	.word	0x2000008c
 8000214:	0800b0ac 	.word	0x0800b0ac

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2uiz>:
 8000af0:	004a      	lsls	r2, r1, #1
 8000af2:	d211      	bcs.n	8000b18 <__aeabi_d2uiz+0x28>
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000af8:	d211      	bcs.n	8000b1e <__aeabi_d2uiz+0x2e>
 8000afa:	d50d      	bpl.n	8000b18 <__aeabi_d2uiz+0x28>
 8000afc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d40e      	bmi.n	8000b24 <__aeabi_d2uiz+0x34>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	fa23 f002 	lsr.w	r0, r3, r2
 8000b16:	4770      	bx	lr
 8000b18:	f04f 0000 	mov.w	r0, #0
 8000b1c:	4770      	bx	lr
 8000b1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b22:	d102      	bne.n	8000b2a <__aeabi_d2uiz+0x3a>
 8000b24:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b28:	4770      	bx	lr
 8000b2a:	f04f 0000 	mov.w	r0, #0
 8000b2e:	4770      	bx	lr

08000b30 <__aeabi_d2f>:
 8000b30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b38:	bf24      	itt	cs
 8000b3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b42:	d90d      	bls.n	8000b60 <__aeabi_d2f+0x30>
 8000b44:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b50:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b58:	bf08      	it	eq
 8000b5a:	f020 0001 	biceq.w	r0, r0, #1
 8000b5e:	4770      	bx	lr
 8000b60:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b64:	d121      	bne.n	8000baa <__aeabi_d2f+0x7a>
 8000b66:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b6a:	bfbc      	itt	lt
 8000b6c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b70:	4770      	bxlt	lr
 8000b72:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b7a:	f1c2 0218 	rsb	r2, r2, #24
 8000b7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b86:	fa20 f002 	lsr.w	r0, r0, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	f040 0001 	orrne.w	r0, r0, #1
 8000b90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b9c:	ea40 000c 	orr.w	r0, r0, ip
 8000ba0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ba4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ba8:	e7cc      	b.n	8000b44 <__aeabi_d2f+0x14>
 8000baa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bae:	d107      	bne.n	8000bc0 <__aeabi_d2f+0x90>
 8000bb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bb4:	bf1e      	ittt	ne
 8000bb6:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bba:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000bbe:	4770      	bxne	lr
 8000bc0:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bc4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bc8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <__aeabi_frsub>:
 8000bd0:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000bd4:	e002      	b.n	8000bdc <__addsf3>
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_fsub>:
 8000bd8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000bdc <__addsf3>:
 8000bdc:	0042      	lsls	r2, r0, #1
 8000bde:	bf1f      	itttt	ne
 8000be0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000be4:	ea92 0f03 	teqne	r2, r3
 8000be8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bec:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bf0:	d06a      	beq.n	8000cc8 <__addsf3+0xec>
 8000bf2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bf6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bfa:	bfc1      	itttt	gt
 8000bfc:	18d2      	addgt	r2, r2, r3
 8000bfe:	4041      	eorgt	r1, r0
 8000c00:	4048      	eorgt	r0, r1
 8000c02:	4041      	eorgt	r1, r0
 8000c04:	bfb8      	it	lt
 8000c06:	425b      	neglt	r3, r3
 8000c08:	2b19      	cmp	r3, #25
 8000c0a:	bf88      	it	hi
 8000c0c:	4770      	bxhi	lr
 8000c0e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c12:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c16:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000c1a:	bf18      	it	ne
 8000c1c:	4240      	negne	r0, r0
 8000c1e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c22:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000c26:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000c2a:	bf18      	it	ne
 8000c2c:	4249      	negne	r1, r1
 8000c2e:	ea92 0f03 	teq	r2, r3
 8000c32:	d03f      	beq.n	8000cb4 <__addsf3+0xd8>
 8000c34:	f1a2 0201 	sub.w	r2, r2, #1
 8000c38:	fa41 fc03 	asr.w	ip, r1, r3
 8000c3c:	eb10 000c 	adds.w	r0, r0, ip
 8000c40:	f1c3 0320 	rsb	r3, r3, #32
 8000c44:	fa01 f103 	lsl.w	r1, r1, r3
 8000c48:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c4c:	d502      	bpl.n	8000c54 <__addsf3+0x78>
 8000c4e:	4249      	negs	r1, r1
 8000c50:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c54:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c58:	d313      	bcc.n	8000c82 <__addsf3+0xa6>
 8000c5a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c5e:	d306      	bcc.n	8000c6e <__addsf3+0x92>
 8000c60:	0840      	lsrs	r0, r0, #1
 8000c62:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c66:	f102 0201 	add.w	r2, r2, #1
 8000c6a:	2afe      	cmp	r2, #254	@ 0xfe
 8000c6c:	d251      	bcs.n	8000d12 <__addsf3+0x136>
 8000c6e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c72:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c76:	bf08      	it	eq
 8000c78:	f020 0001 	biceq.w	r0, r0, #1
 8000c7c:	ea40 0003 	orr.w	r0, r0, r3
 8000c80:	4770      	bx	lr
 8000c82:	0049      	lsls	r1, r1, #1
 8000c84:	eb40 0000 	adc.w	r0, r0, r0
 8000c88:	3a01      	subs	r2, #1
 8000c8a:	bf28      	it	cs
 8000c8c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c90:	d2ed      	bcs.n	8000c6e <__addsf3+0x92>
 8000c92:	fab0 fc80 	clz	ip, r0
 8000c96:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c9a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c9e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000ca2:	bfaa      	itet	ge
 8000ca4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ca8:	4252      	neglt	r2, r2
 8000caa:	4318      	orrge	r0, r3
 8000cac:	bfbc      	itt	lt
 8000cae:	40d0      	lsrlt	r0, r2
 8000cb0:	4318      	orrlt	r0, r3
 8000cb2:	4770      	bx	lr
 8000cb4:	f092 0f00 	teq	r2, #0
 8000cb8:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000cbc:	bf06      	itte	eq
 8000cbe:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000cc2:	3201      	addeq	r2, #1
 8000cc4:	3b01      	subne	r3, #1
 8000cc6:	e7b5      	b.n	8000c34 <__addsf3+0x58>
 8000cc8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ccc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cd0:	bf18      	it	ne
 8000cd2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cd6:	d021      	beq.n	8000d1c <__addsf3+0x140>
 8000cd8:	ea92 0f03 	teq	r2, r3
 8000cdc:	d004      	beq.n	8000ce8 <__addsf3+0x10c>
 8000cde:	f092 0f00 	teq	r2, #0
 8000ce2:	bf08      	it	eq
 8000ce4:	4608      	moveq	r0, r1
 8000ce6:	4770      	bx	lr
 8000ce8:	ea90 0f01 	teq	r0, r1
 8000cec:	bf1c      	itt	ne
 8000cee:	2000      	movne	r0, #0
 8000cf0:	4770      	bxne	lr
 8000cf2:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000cf6:	d104      	bne.n	8000d02 <__addsf3+0x126>
 8000cf8:	0040      	lsls	r0, r0, #1
 8000cfa:	bf28      	it	cs
 8000cfc:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000d00:	4770      	bx	lr
 8000d02:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000d06:	bf3c      	itt	cc
 8000d08:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000d0c:	4770      	bxcc	lr
 8000d0e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d12:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000d16:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d1a:	4770      	bx	lr
 8000d1c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d20:	bf16      	itet	ne
 8000d22:	4608      	movne	r0, r1
 8000d24:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d28:	4601      	movne	r1, r0
 8000d2a:	0242      	lsls	r2, r0, #9
 8000d2c:	bf06      	itte	eq
 8000d2e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d32:	ea90 0f01 	teqeq	r0, r1
 8000d36:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d3a:	4770      	bx	lr

08000d3c <__aeabi_ui2f>:
 8000d3c:	f04f 0300 	mov.w	r3, #0
 8000d40:	e004      	b.n	8000d4c <__aeabi_i2f+0x8>
 8000d42:	bf00      	nop

08000d44 <__aeabi_i2f>:
 8000d44:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d48:	bf48      	it	mi
 8000d4a:	4240      	negmi	r0, r0
 8000d4c:	ea5f 0c00 	movs.w	ip, r0
 8000d50:	bf08      	it	eq
 8000d52:	4770      	bxeq	lr
 8000d54:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d58:	4601      	mov	r1, r0
 8000d5a:	f04f 0000 	mov.w	r0, #0
 8000d5e:	e01c      	b.n	8000d9a <__aeabi_l2f+0x2a>

08000d60 <__aeabi_ul2f>:
 8000d60:	ea50 0201 	orrs.w	r2, r0, r1
 8000d64:	bf08      	it	eq
 8000d66:	4770      	bxeq	lr
 8000d68:	f04f 0300 	mov.w	r3, #0
 8000d6c:	e00a      	b.n	8000d84 <__aeabi_l2f+0x14>
 8000d6e:	bf00      	nop

08000d70 <__aeabi_l2f>:
 8000d70:	ea50 0201 	orrs.w	r2, r0, r1
 8000d74:	bf08      	it	eq
 8000d76:	4770      	bxeq	lr
 8000d78:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d7c:	d502      	bpl.n	8000d84 <__aeabi_l2f+0x14>
 8000d7e:	4240      	negs	r0, r0
 8000d80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d84:	ea5f 0c01 	movs.w	ip, r1
 8000d88:	bf02      	ittt	eq
 8000d8a:	4684      	moveq	ip, r0
 8000d8c:	4601      	moveq	r1, r0
 8000d8e:	2000      	moveq	r0, #0
 8000d90:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d94:	bf08      	it	eq
 8000d96:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d9a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d9e:	fabc f28c 	clz	r2, ip
 8000da2:	3a08      	subs	r2, #8
 8000da4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000da8:	db10      	blt.n	8000dcc <__aeabi_l2f+0x5c>
 8000daa:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dae:	4463      	add	r3, ip
 8000db0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000db4:	f1c2 0220 	rsb	r2, r2, #32
 8000db8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000dbc:	fa20 f202 	lsr.w	r2, r0, r2
 8000dc0:	eb43 0002 	adc.w	r0, r3, r2
 8000dc4:	bf08      	it	eq
 8000dc6:	f020 0001 	biceq.w	r0, r0, #1
 8000dca:	4770      	bx	lr
 8000dcc:	f102 0220 	add.w	r2, r2, #32
 8000dd0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dd4:	f1c2 0220 	rsb	r2, r2, #32
 8000dd8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ddc:	fa21 f202 	lsr.w	r2, r1, r2
 8000de0:	eb43 0002 	adc.w	r0, r3, r2
 8000de4:	bf08      	it	eq
 8000de6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dea:	4770      	bx	lr

08000dec <__aeabi_uldivmod>:
 8000dec:	b953      	cbnz	r3, 8000e04 <__aeabi_uldivmod+0x18>
 8000dee:	b94a      	cbnz	r2, 8000e04 <__aeabi_uldivmod+0x18>
 8000df0:	2900      	cmp	r1, #0
 8000df2:	bf08      	it	eq
 8000df4:	2800      	cmpeq	r0, #0
 8000df6:	bf1c      	itt	ne
 8000df8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000dfc:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000e00:	f000 b96a 	b.w	80010d8 <__aeabi_idiv0>
 8000e04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e0c:	f000 f806 	bl	8000e1c <__udivmoddi4>
 8000e10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e18:	b004      	add	sp, #16
 8000e1a:	4770      	bx	lr

08000e1c <__udivmoddi4>:
 8000e1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e20:	9d08      	ldr	r5, [sp, #32]
 8000e22:	460c      	mov	r4, r1
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d14e      	bne.n	8000ec6 <__udivmoddi4+0xaa>
 8000e28:	4694      	mov	ip, r2
 8000e2a:	458c      	cmp	ip, r1
 8000e2c:	4686      	mov	lr, r0
 8000e2e:	fab2 f282 	clz	r2, r2
 8000e32:	d962      	bls.n	8000efa <__udivmoddi4+0xde>
 8000e34:	b14a      	cbz	r2, 8000e4a <__udivmoddi4+0x2e>
 8000e36:	f1c2 0320 	rsb	r3, r2, #32
 8000e3a:	4091      	lsls	r1, r2
 8000e3c:	fa20 f303 	lsr.w	r3, r0, r3
 8000e40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e44:	4319      	orrs	r1, r3
 8000e46:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e4a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e4e:	fa1f f68c 	uxth.w	r6, ip
 8000e52:	fbb1 f4f7 	udiv	r4, r1, r7
 8000e56:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e5a:	fb07 1114 	mls	r1, r7, r4, r1
 8000e5e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e62:	fb04 f106 	mul.w	r1, r4, r6
 8000e66:	4299      	cmp	r1, r3
 8000e68:	d90a      	bls.n	8000e80 <__udivmoddi4+0x64>
 8000e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000e72:	f080 8112 	bcs.w	800109a <__udivmoddi4+0x27e>
 8000e76:	4299      	cmp	r1, r3
 8000e78:	f240 810f 	bls.w	800109a <__udivmoddi4+0x27e>
 8000e7c:	3c02      	subs	r4, #2
 8000e7e:	4463      	add	r3, ip
 8000e80:	1a59      	subs	r1, r3, r1
 8000e82:	fa1f f38e 	uxth.w	r3, lr
 8000e86:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e8a:	fb07 1110 	mls	r1, r7, r0, r1
 8000e8e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e92:	fb00 f606 	mul.w	r6, r0, r6
 8000e96:	429e      	cmp	r6, r3
 8000e98:	d90a      	bls.n	8000eb0 <__udivmoddi4+0x94>
 8000e9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000ea2:	f080 80fc 	bcs.w	800109e <__udivmoddi4+0x282>
 8000ea6:	429e      	cmp	r6, r3
 8000ea8:	f240 80f9 	bls.w	800109e <__udivmoddi4+0x282>
 8000eac:	4463      	add	r3, ip
 8000eae:	3802      	subs	r0, #2
 8000eb0:	1b9b      	subs	r3, r3, r6
 8000eb2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	b11d      	cbz	r5, 8000ec2 <__udivmoddi4+0xa6>
 8000eba:	40d3      	lsrs	r3, r2
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	e9c5 3200 	strd	r3, r2, [r5]
 8000ec2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	d905      	bls.n	8000ed6 <__udivmoddi4+0xba>
 8000eca:	b10d      	cbz	r5, 8000ed0 <__udivmoddi4+0xb4>
 8000ecc:	e9c5 0100 	strd	r0, r1, [r5]
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	4608      	mov	r0, r1
 8000ed4:	e7f5      	b.n	8000ec2 <__udivmoddi4+0xa6>
 8000ed6:	fab3 f183 	clz	r1, r3
 8000eda:	2900      	cmp	r1, #0
 8000edc:	d146      	bne.n	8000f6c <__udivmoddi4+0x150>
 8000ede:	42a3      	cmp	r3, r4
 8000ee0:	d302      	bcc.n	8000ee8 <__udivmoddi4+0xcc>
 8000ee2:	4290      	cmp	r0, r2
 8000ee4:	f0c0 80f0 	bcc.w	80010c8 <__udivmoddi4+0x2ac>
 8000ee8:	1a86      	subs	r6, r0, r2
 8000eea:	eb64 0303 	sbc.w	r3, r4, r3
 8000eee:	2001      	movs	r0, #1
 8000ef0:	2d00      	cmp	r5, #0
 8000ef2:	d0e6      	beq.n	8000ec2 <__udivmoddi4+0xa6>
 8000ef4:	e9c5 6300 	strd	r6, r3, [r5]
 8000ef8:	e7e3      	b.n	8000ec2 <__udivmoddi4+0xa6>
 8000efa:	2a00      	cmp	r2, #0
 8000efc:	f040 8090 	bne.w	8001020 <__udivmoddi4+0x204>
 8000f00:	eba1 040c 	sub.w	r4, r1, ip
 8000f04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f08:	fa1f f78c 	uxth.w	r7, ip
 8000f0c:	2101      	movs	r1, #1
 8000f0e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000f12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000f16:	fb08 4416 	mls	r4, r8, r6, r4
 8000f1a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f1e:	fb07 f006 	mul.w	r0, r7, r6
 8000f22:	4298      	cmp	r0, r3
 8000f24:	d908      	bls.n	8000f38 <__udivmoddi4+0x11c>
 8000f26:	eb1c 0303 	adds.w	r3, ip, r3
 8000f2a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000f2e:	d202      	bcs.n	8000f36 <__udivmoddi4+0x11a>
 8000f30:	4298      	cmp	r0, r3
 8000f32:	f200 80cd 	bhi.w	80010d0 <__udivmoddi4+0x2b4>
 8000f36:	4626      	mov	r6, r4
 8000f38:	1a1c      	subs	r4, r3, r0
 8000f3a:	fa1f f38e 	uxth.w	r3, lr
 8000f3e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000f42:	fb08 4410 	mls	r4, r8, r0, r4
 8000f46:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f4a:	fb00 f707 	mul.w	r7, r0, r7
 8000f4e:	429f      	cmp	r7, r3
 8000f50:	d908      	bls.n	8000f64 <__udivmoddi4+0x148>
 8000f52:	eb1c 0303 	adds.w	r3, ip, r3
 8000f56:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000f5a:	d202      	bcs.n	8000f62 <__udivmoddi4+0x146>
 8000f5c:	429f      	cmp	r7, r3
 8000f5e:	f200 80b0 	bhi.w	80010c2 <__udivmoddi4+0x2a6>
 8000f62:	4620      	mov	r0, r4
 8000f64:	1bdb      	subs	r3, r3, r7
 8000f66:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f6a:	e7a5      	b.n	8000eb8 <__udivmoddi4+0x9c>
 8000f6c:	f1c1 0620 	rsb	r6, r1, #32
 8000f70:	408b      	lsls	r3, r1
 8000f72:	fa22 f706 	lsr.w	r7, r2, r6
 8000f76:	431f      	orrs	r7, r3
 8000f78:	fa20 fc06 	lsr.w	ip, r0, r6
 8000f7c:	fa04 f301 	lsl.w	r3, r4, r1
 8000f80:	ea43 030c 	orr.w	r3, r3, ip
 8000f84:	40f4      	lsrs	r4, r6
 8000f86:	fa00 f801 	lsl.w	r8, r0, r1
 8000f8a:	0c38      	lsrs	r0, r7, #16
 8000f8c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000f90:	fbb4 fef0 	udiv	lr, r4, r0
 8000f94:	fa1f fc87 	uxth.w	ip, r7
 8000f98:	fb00 441e 	mls	r4, r0, lr, r4
 8000f9c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000fa0:	fb0e f90c 	mul.w	r9, lr, ip
 8000fa4:	45a1      	cmp	r9, r4
 8000fa6:	fa02 f201 	lsl.w	r2, r2, r1
 8000faa:	d90a      	bls.n	8000fc2 <__udivmoddi4+0x1a6>
 8000fac:	193c      	adds	r4, r7, r4
 8000fae:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000fb2:	f080 8084 	bcs.w	80010be <__udivmoddi4+0x2a2>
 8000fb6:	45a1      	cmp	r9, r4
 8000fb8:	f240 8081 	bls.w	80010be <__udivmoddi4+0x2a2>
 8000fbc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000fc0:	443c      	add	r4, r7
 8000fc2:	eba4 0409 	sub.w	r4, r4, r9
 8000fc6:	fa1f f983 	uxth.w	r9, r3
 8000fca:	fbb4 f3f0 	udiv	r3, r4, r0
 8000fce:	fb00 4413 	mls	r4, r0, r3, r4
 8000fd2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000fd6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000fda:	45a4      	cmp	ip, r4
 8000fdc:	d907      	bls.n	8000fee <__udivmoddi4+0x1d2>
 8000fde:	193c      	adds	r4, r7, r4
 8000fe0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000fe4:	d267      	bcs.n	80010b6 <__udivmoddi4+0x29a>
 8000fe6:	45a4      	cmp	ip, r4
 8000fe8:	d965      	bls.n	80010b6 <__udivmoddi4+0x29a>
 8000fea:	3b02      	subs	r3, #2
 8000fec:	443c      	add	r4, r7
 8000fee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ff2:	fba0 9302 	umull	r9, r3, r0, r2
 8000ff6:	eba4 040c 	sub.w	r4, r4, ip
 8000ffa:	429c      	cmp	r4, r3
 8000ffc:	46ce      	mov	lr, r9
 8000ffe:	469c      	mov	ip, r3
 8001000:	d351      	bcc.n	80010a6 <__udivmoddi4+0x28a>
 8001002:	d04e      	beq.n	80010a2 <__udivmoddi4+0x286>
 8001004:	b155      	cbz	r5, 800101c <__udivmoddi4+0x200>
 8001006:	ebb8 030e 	subs.w	r3, r8, lr
 800100a:	eb64 040c 	sbc.w	r4, r4, ip
 800100e:	fa04 f606 	lsl.w	r6, r4, r6
 8001012:	40cb      	lsrs	r3, r1
 8001014:	431e      	orrs	r6, r3
 8001016:	40cc      	lsrs	r4, r1
 8001018:	e9c5 6400 	strd	r6, r4, [r5]
 800101c:	2100      	movs	r1, #0
 800101e:	e750      	b.n	8000ec2 <__udivmoddi4+0xa6>
 8001020:	f1c2 0320 	rsb	r3, r2, #32
 8001024:	fa20 f103 	lsr.w	r1, r0, r3
 8001028:	fa0c fc02 	lsl.w	ip, ip, r2
 800102c:	fa24 f303 	lsr.w	r3, r4, r3
 8001030:	4094      	lsls	r4, r2
 8001032:	430c      	orrs	r4, r1
 8001034:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001038:	fa00 fe02 	lsl.w	lr, r0, r2
 800103c:	fa1f f78c 	uxth.w	r7, ip
 8001040:	fbb3 f0f8 	udiv	r0, r3, r8
 8001044:	fb08 3110 	mls	r1, r8, r0, r3
 8001048:	0c23      	lsrs	r3, r4, #16
 800104a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800104e:	fb00 f107 	mul.w	r1, r0, r7
 8001052:	4299      	cmp	r1, r3
 8001054:	d908      	bls.n	8001068 <__udivmoddi4+0x24c>
 8001056:	eb1c 0303 	adds.w	r3, ip, r3
 800105a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800105e:	d22c      	bcs.n	80010ba <__udivmoddi4+0x29e>
 8001060:	4299      	cmp	r1, r3
 8001062:	d92a      	bls.n	80010ba <__udivmoddi4+0x29e>
 8001064:	3802      	subs	r0, #2
 8001066:	4463      	add	r3, ip
 8001068:	1a5b      	subs	r3, r3, r1
 800106a:	b2a4      	uxth	r4, r4
 800106c:	fbb3 f1f8 	udiv	r1, r3, r8
 8001070:	fb08 3311 	mls	r3, r8, r1, r3
 8001074:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001078:	fb01 f307 	mul.w	r3, r1, r7
 800107c:	42a3      	cmp	r3, r4
 800107e:	d908      	bls.n	8001092 <__udivmoddi4+0x276>
 8001080:	eb1c 0404 	adds.w	r4, ip, r4
 8001084:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8001088:	d213      	bcs.n	80010b2 <__udivmoddi4+0x296>
 800108a:	42a3      	cmp	r3, r4
 800108c:	d911      	bls.n	80010b2 <__udivmoddi4+0x296>
 800108e:	3902      	subs	r1, #2
 8001090:	4464      	add	r4, ip
 8001092:	1ae4      	subs	r4, r4, r3
 8001094:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001098:	e739      	b.n	8000f0e <__udivmoddi4+0xf2>
 800109a:	4604      	mov	r4, r0
 800109c:	e6f0      	b.n	8000e80 <__udivmoddi4+0x64>
 800109e:	4608      	mov	r0, r1
 80010a0:	e706      	b.n	8000eb0 <__udivmoddi4+0x94>
 80010a2:	45c8      	cmp	r8, r9
 80010a4:	d2ae      	bcs.n	8001004 <__udivmoddi4+0x1e8>
 80010a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80010aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80010ae:	3801      	subs	r0, #1
 80010b0:	e7a8      	b.n	8001004 <__udivmoddi4+0x1e8>
 80010b2:	4631      	mov	r1, r6
 80010b4:	e7ed      	b.n	8001092 <__udivmoddi4+0x276>
 80010b6:	4603      	mov	r3, r0
 80010b8:	e799      	b.n	8000fee <__udivmoddi4+0x1d2>
 80010ba:	4630      	mov	r0, r6
 80010bc:	e7d4      	b.n	8001068 <__udivmoddi4+0x24c>
 80010be:	46d6      	mov	lr, sl
 80010c0:	e77f      	b.n	8000fc2 <__udivmoddi4+0x1a6>
 80010c2:	4463      	add	r3, ip
 80010c4:	3802      	subs	r0, #2
 80010c6:	e74d      	b.n	8000f64 <__udivmoddi4+0x148>
 80010c8:	4606      	mov	r6, r0
 80010ca:	4623      	mov	r3, r4
 80010cc:	4608      	mov	r0, r1
 80010ce:	e70f      	b.n	8000ef0 <__udivmoddi4+0xd4>
 80010d0:	3e02      	subs	r6, #2
 80010d2:	4463      	add	r3, ip
 80010d4:	e730      	b.n	8000f38 <__udivmoddi4+0x11c>
 80010d6:	bf00      	nop

080010d8 <__aeabi_idiv0>:
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop

080010dc <modbus_1t5_Timeout>:
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);
void Hearthbeat();

// function for interrupt
void modbus_1t5_Timeout()
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 80010e0:	4b0d      	ldr	r3, [pc, #52]	@ (8001118 <modbus_1t5_Timeout+0x3c>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	2201      	movs	r2, #1
 80010e6:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 80010e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001118 <modbus_1t5_Timeout+0x3c>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	691b      	ldr	r3, [r3, #16]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	2200      	movs	r2, #0
 80010f2:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 80010f4:	4b08      	ldr	r3, [pc, #32]	@ (8001118 <modbus_1t5_Timeout+0x3c>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	691b      	ldr	r3, [r3, #16]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	4b06      	ldr	r3, [pc, #24]	@ (8001118 <modbus_1t5_Timeout+0x3c>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	691b      	ldr	r3, [r3, #16]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f042 0201 	orr.w	r2, r2, #1
 800110a:	601a      	str	r2, [r3, #0]
}
 800110c:	bf00      	nop
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	200000a4 	.word	0x200000a4

0800111c <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8001124:	4b04      	ldr	r3, [pc, #16]	@ (8001138 <modbus_3t5_Timeout+0x1c>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	2201      	movs	r2, #1
 800112a:	755a      	strb	r2, [r3, #21]

}
 800112c:	bf00      	nop
 800112e:	370c      	adds	r7, #12
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr
 8001138:	200000a4 	.word	0x200000a4

0800113c <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 8001144:	6878      	ldr	r0, [r7, #4]
 8001146:	f008 fd7b 	bl	8009c40 <HAL_UART_GetError>
 800114a:	4603      	mov	r3, r0
 800114c:	2b20      	cmp	r3, #32
 800114e:	d101      	bne.n	8001154 <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 8001150:	f7ff ffc4 	bl	80010dc <modbus_1t5_Timeout>

	}
}
 8001154:	bf00      	nop
 8001156:	3708      	adds	r7, #8
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}

0800115c <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 8001166:	4a25      	ldr	r2, [pc, #148]	@ (80011fc <Modbus_init+0xa0>)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 800116c:	4b23      	ldr	r3, [pc, #140]	@ (80011fc <Modbus_init+0xa0>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	683a      	ldr	r2, [r7, #0]
 8001172:	605a      	str	r2, [r3, #4]

	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	691b      	ldr	r3, [r3, #16]
 8001178:	4a21      	ldr	r2, [pc, #132]	@ (8001200 <Modbus_init+0xa4>)
 800117a:	210e      	movs	r1, #14
 800117c:	4618      	mov	r0, r3
 800117e:	f007 f8b7 	bl	80082f0 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	68db      	ldr	r3, [r3, #12]
 8001186:	2110      	movs	r1, #16
 8001188:	4618      	mov	r0, r3
 800118a:	f008 fd03 	bl	8009b94 <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	68db      	ldr	r3, [r3, #12]
 8001192:	4618      	mov	r0, r3
 8001194:	f008 fd1a 	bl	8009bcc <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	4a19      	ldr	r2, [pc, #100]	@ (8001204 <Modbus_init+0xa8>)
 800119e:	2104      	movs	r1, #4
 80011a0:	4618      	mov	r0, r3
 80011a2:	f008 f861 	bl	8009268 <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 80011a6:	4b15      	ldr	r3, [pc, #84]	@ (80011fc <Modbus_init+0xa0>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 80011ac:	4b13      	ldr	r3, [pc, #76]	@ (80011fc <Modbus_init+0xa0>)
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	4b12      	ldr	r3, [pc, #72]	@ (80011fc <Modbus_init+0xa0>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 80011b8:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 80011bc:	4413      	add	r3, r2
 80011be:	3302      	adds	r3, #2
 80011c0:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80011c4:	4619      	mov	r1, r3
 80011c6:	f008 f909 	bl	80093dc <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 80011ca:	4b0c      	ldr	r3, [pc, #48]	@ (80011fc <Modbus_init+0xa0>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	691b      	ldr	r3, [r3, #16]
 80011d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d10c      	bne.n	80011f4 <Modbus_init+0x98>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 80011da:	4b08      	ldr	r3, [pc, #32]	@ (80011fc <Modbus_init+0xa0>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	691b      	ldr	r3, [r3, #16]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f006 f857 	bl	8007294 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 80011e6:	4b05      	ldr	r3, [pc, #20]	@ (80011fc <Modbus_init+0xa0>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	691b      	ldr	r3, [r3, #16]
 80011ec:	2100      	movs	r1, #0
 80011ee:	4618      	mov	r0, r3
 80011f0:	f006 fab0 	bl	8007754 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 80011f4:	bf00      	nop
 80011f6:	3708      	adds	r7, #8
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	200000a4 	.word	0x200000a4
 8001200:	0800111d 	.word	0x0800111d
 8001204:	0800113d 	.word	0x0800113d

08001208 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001208:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800120c:	b08c      	sub	sp, #48	@ 0x30
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001210:	f002 fd39 	bl	8003c86 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001214:	f000 fb16 	bl	8001844 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001218:	f000 fe4e 	bl	8001eb8 <MX_GPIO_Init>
  MX_DMA_Init();
 800121c:	f000 fe06 	bl	8001e2c <MX_DMA_Init>
  MX_TIM3_Init();
 8001220:	f000 fc3a 	bl	8001a98 <MX_TIM3_Init>
  MX_TIM2_Init();
 8001224:	f000 fbe4 	bl	80019f0 <MX_TIM2_Init>
  MX_TIM5_Init();
 8001228:	f000 fcfc 	bl	8001c24 <MX_TIM5_Init>
  MX_ADC1_Init();
 800122c:	f000 fb56 	bl	80018dc <MX_ADC1_Init>
  MX_TIM4_Init();
 8001230:	f000 fcaa 	bl	8001b88 <MX_TIM4_Init>
  MX_TIM6_Init();
 8001234:	f000 fd44 	bl	8001cc0 <MX_TIM6_Init>
  MX_TIM16_Init();
 8001238:	f000 fd7a 	bl	8001d30 <MX_TIM16_Init>
  MX_USART2_UART_Init();
 800123c:	f000 fda8 	bl	8001d90 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  //PWM Motor
  HAL_TIM_Base_Start(&htim3);
 8001240:	48b3      	ldr	r0, [pc, #716]	@ (8001510 <main+0x308>)
 8001242:	f005 ffb7 	bl	80071b4 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001246:	2100      	movs	r1, #0
 8001248:	48b1      	ldr	r0, [pc, #708]	@ (8001510 <main+0x308>)
 800124a:	f006 f909 	bl	8007460 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 500);
 800124e:	4bb0      	ldr	r3, [pc, #704]	@ (8001510 <main+0x308>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001256:	635a      	str	r2, [r3, #52]	@ 0x34

  //Read Encoder
  HAL_TIM_Encoder_Start(&htim2,TIM_CHANNEL_ALL);
 8001258:	213c      	movs	r1, #60	@ 0x3c
 800125a:	48ae      	ldr	r0, [pc, #696]	@ (8001514 <main+0x30c>)
 800125c:	f006 fbbc 	bl	80079d8 <HAL_TIM_Encoder_Start>

  //time microsec
  HAL_TIM_Base_Start_IT(&htim5);
 8001260:	48ad      	ldr	r0, [pc, #692]	@ (8001518 <main+0x310>)
 8001262:	f006 f817 	bl	8007294 <HAL_TIM_Base_Start_IT>

  //Read joystick
  HAL_ADC_Start_DMA(&hadc1, ADCBuffer, 2);
 8001266:	2202      	movs	r2, #2
 8001268:	49ac      	ldr	r1, [pc, #688]	@ (800151c <main+0x314>)
 800126a:	48ad      	ldr	r0, [pc, #692]	@ (8001520 <main+0x318>)
 800126c:	f003 f978 	bl	8004560 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim4);
 8001270:	48ac      	ldr	r0, [pc, #688]	@ (8001524 <main+0x31c>)
 8001272:	f005 ff9f 	bl	80071b4 <HAL_TIM_Base_Start>

  //PID Control Position
  PID1.Kp = 7.5; // 7.5
 8001276:	4bac      	ldr	r3, [pc, #688]	@ (8001528 <main+0x320>)
 8001278:	4aac      	ldr	r2, [pc, #688]	@ (800152c <main+0x324>)
 800127a:	619a      	str	r2, [r3, #24]
  PID1.Ki = 0.00005; // 0.0025
 800127c:	4baa      	ldr	r3, [pc, #680]	@ (8001528 <main+0x320>)
 800127e:	4aac      	ldr	r2, [pc, #688]	@ (8001530 <main+0x328>)
 8001280:	61da      	str	r2, [r3, #28]
  PID1.Kd = 3; // 3
 8001282:	4ba9      	ldr	r3, [pc, #676]	@ (8001528 <main+0x320>)
 8001284:	4aab      	ldr	r2, [pc, #684]	@ (8001534 <main+0x32c>)
 8001286:	621a      	str	r2, [r3, #32]
  arm_pid_init_f32(&PID1, 0);
 8001288:	2100      	movs	r1, #0
 800128a:	48a7      	ldr	r0, [pc, #668]	@ (8001528 <main+0x320>)
 800128c:	f009 fda0 	bl	800add0 <arm_pid_init_f32>

  //PID Control Velocity
  PID2.Kp = 0.1; //0.5
 8001290:	4ba9      	ldr	r3, [pc, #676]	@ (8001538 <main+0x330>)
 8001292:	4aaa      	ldr	r2, [pc, #680]	@ (800153c <main+0x334>)
 8001294:	619a      	str	r2, [r3, #24]
  PID2.Ki = 0.0006; // 0.006
 8001296:	4ba8      	ldr	r3, [pc, #672]	@ (8001538 <main+0x330>)
 8001298:	4aa9      	ldr	r2, [pc, #676]	@ (8001540 <main+0x338>)
 800129a:	61da      	str	r2, [r3, #28]
  PID2.Kd = 0.025; // 0.05
 800129c:	4ba6      	ldr	r3, [pc, #664]	@ (8001538 <main+0x330>)
 800129e:	4aa9      	ldr	r2, [pc, #676]	@ (8001544 <main+0x33c>)
 80012a0:	621a      	str	r2, [r3, #32]
  arm_pid_init_f32(&PID2, 0);
 80012a2:	2100      	movs	r1, #0
 80012a4:	48a4      	ldr	r0, [pc, #656]	@ (8001538 <main+0x330>)
 80012a6:	f009 fd93 	bl	800add0 <arm_pid_init_f32>

  //Modbus Setting
  // manaul add
  HAL_TIM_Base_Start_IT(&htim6);
 80012aa:	48a7      	ldr	r0, [pc, #668]	@ (8001548 <main+0x340>)
 80012ac:	f005 fff2 	bl	8007294 <HAL_TIM_Base_Start_IT>

  //  modbus
  hmodbus.huart = &huart2;
 80012b0:	4ba6      	ldr	r3, [pc, #664]	@ (800154c <main+0x344>)
 80012b2:	4aa7      	ldr	r2, [pc, #668]	@ (8001550 <main+0x348>)
 80012b4:	60da      	str	r2, [r3, #12]
  hmodbus.htim = &htim16;
 80012b6:	4ba5      	ldr	r3, [pc, #660]	@ (800154c <main+0x344>)
 80012b8:	4aa6      	ldr	r2, [pc, #664]	@ (8001554 <main+0x34c>)
 80012ba:	611a      	str	r2, [r3, #16]
  hmodbus.slaveAddress = 0x15;
 80012bc:	4ba3      	ldr	r3, [pc, #652]	@ (800154c <main+0x344>)
 80012be:	2215      	movs	r2, #21
 80012c0:	701a      	strb	r2, [r3, #0]
  hmodbus.RegisterSize =200;
 80012c2:	4ba2      	ldr	r3, [pc, #648]	@ (800154c <main+0x344>)
 80012c4:	22c8      	movs	r2, #200	@ 0xc8
 80012c6:	609a      	str	r2, [r3, #8]
  Modbus_init(&hmodbus, registerFrame);
 80012c8:	49a3      	ldr	r1, [pc, #652]	@ (8001558 <main+0x350>)
 80012ca:	48a0      	ldr	r0, [pc, #640]	@ (800154c <main+0x344>)
 80012cc:	f7ff ff46 	bl	800115c <Modbus_init>
//	  Run_jog();

	  static uint64_t timestamp = 0;
	  static uint64_t timestamp2 = 0;

	  int64_t currentTime = micros();
 80012d0:	f000 ff16 	bl	8002100 <micros>
 80012d4:	4602      	mov	r2, r0
 80012d6:	460b      	mov	r3, r1
 80012d8:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	  if (max_velo < QEIdata.linearVel)
 80012dc:	4b9f      	ldr	r3, [pc, #636]	@ (800155c <main+0x354>)
 80012de:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 80012e2:	4b9f      	ldr	r3, [pc, #636]	@ (8001560 <main+0x358>)
 80012e4:	edd3 7a00 	vldr	s15, [r3]
 80012e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012f0:	dd03      	ble.n	80012fa <main+0xf2>
	  {
		  max_velo = QEIdata.linearVel;
 80012f2:	4b9a      	ldr	r3, [pc, #616]	@ (800155c <main+0x354>)
 80012f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012f6:	4a9a      	ldr	r2, [pc, #616]	@ (8001560 <main+0x358>)
 80012f8:	6013      	str	r3, [r2, #0]
	  }

	  if(currentTime > timestamp2){
 80012fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80012fe:	4999      	ldr	r1, [pc, #612]	@ (8001564 <main+0x35c>)
 8001300:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001304:	4290      	cmp	r0, r2
 8001306:	eb71 0303 	sbcs.w	r3, r1, r3
 800130a:	f080 8157 	bcs.w	80015bc <main+0x3b4>
		  timestamp2 = currentTime + 167; //6,000 Hz
 800130e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001312:	f112 04a7 	adds.w	r4, r2, #167	@ 0xa7
 8001316:	f143 0500 	adc.w	r5, r3, #0
 800131a:	4622      	mov	r2, r4
 800131c:	462b      	mov	r3, r5
 800131e:	4991      	ldr	r1, [pc, #580]	@ (8001564 <main+0x35c>)
 8001320:	e9c1 2300 	strd	r2, r3, [r1]

		  //Read encoder
		  QEIEncoderPosVel_Update();
 8001324:	f000 ff08 	bl	8002138 <QEIEncoderPosVel_Update>

		  //Create Trajectory
		  q_f = setPosition;
 8001328:	4b8f      	ldr	r3, [pc, #572]	@ (8001568 <main+0x360>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a8f      	ldr	r2, [pc, #572]	@ (800156c <main+0x364>)
 800132e:	6013      	str	r3, [r2, #0]
		  checkStartMoving();
 8001330:	f001 f82a 	bl	8002388 <checkStartMoving>
		  createTrajectory();
 8001334:	f001 fa58 	bl	80027e8 <createTrajectory>

		  if(mode == 1){
 8001338:	4b8d      	ldr	r3, [pc, #564]	@ (8001570 <main+0x368>)
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	2b01      	cmp	r3, #1
 800133e:	f040 80d2 	bne.w	80014e6 <main+0x2de>
			  LED_Auto();
 8001342:	f002 f92d 	bl	80035a0 <LED_Auto>
			  //LED_Manual();
			  if(fabs(setPosition - QEIdata.linearPos) < 0.1){
 8001346:	4b88      	ldr	r3, [pc, #544]	@ (8001568 <main+0x360>)
 8001348:	ed93 7a00 	vldr	s14, [r3]
 800134c:	4b83      	ldr	r3, [pc, #524]	@ (800155c <main+0x354>)
 800134e:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001352:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001356:	eef0 7ae7 	vabs.f32	s15, s15
 800135a:	ee17 0a90 	vmov	r0, s15
 800135e:	f7ff f8bf 	bl	80004e0 <__aeabi_f2d>
 8001362:	a367      	add	r3, pc, #412	@ (adr r3, 8001500 <main+0x2f8>)
 8001364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001368:	f7ff fb84 	bl	8000a74 <__aeabi_dcmplt>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d004      	beq.n	800137c <main+0x174>
				  Vin = 0;
 8001372:	4b80      	ldr	r3, [pc, #512]	@ (8001574 <main+0x36c>)
 8001374:	f04f 0200 	mov.w	r2, #0
 8001378:	601a      	str	r2, [r3, #0]
 800137a:	e099      	b.n	80014b0 <main+0x2a8>
			  }
			  else if(setPosition - QEIdata.linearPos < 3 && setPosition - QEIdata.linearPos > 0.1){
 800137c:	4b7a      	ldr	r3, [pc, #488]	@ (8001568 <main+0x360>)
 800137e:	ed93 7a00 	vldr	s14, [r3]
 8001382:	4b76      	ldr	r3, [pc, #472]	@ (800155c <main+0x354>)
 8001384:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001388:	ee77 7a67 	vsub.f32	s15, s14, s15
 800138c:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8001390:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001394:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001398:	d51a      	bpl.n	80013d0 <main+0x1c8>
 800139a:	4b73      	ldr	r3, [pc, #460]	@ (8001568 <main+0x360>)
 800139c:	ed93 7a00 	vldr	s14, [r3]
 80013a0:	4b6e      	ldr	r3, [pc, #440]	@ (800155c <main+0x354>)
 80013a2:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80013a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013aa:	ee17 0a90 	vmov	r0, s15
 80013ae:	f7ff f897 	bl	80004e0 <__aeabi_f2d>
 80013b2:	a353      	add	r3, pc, #332	@ (adr r3, 8001500 <main+0x2f8>)
 80013b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b8:	f7ff fb7a 	bl	8000ab0 <__aeabi_dcmpgt>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d006      	beq.n	80013d0 <main+0x1c8>
				  Vin = 3.2;
 80013c2:	4b6c      	ldr	r3, [pc, #432]	@ (8001574 <main+0x36c>)
 80013c4:	4a6c      	ldr	r2, [pc, #432]	@ (8001578 <main+0x370>)
 80013c6:	601a      	str	r2, [r3, #0]
				  check = 1;
 80013c8:	4b6c      	ldr	r3, [pc, #432]	@ (800157c <main+0x374>)
 80013ca:	2201      	movs	r2, #1
 80013cc:	601a      	str	r2, [r3, #0]
 80013ce:	e06f      	b.n	80014b0 <main+0x2a8>
			  }
			  else if(setPosition - QEIdata.linearPos > -3 && setPosition - QEIdata.linearPos < -0.1){
 80013d0:	4b65      	ldr	r3, [pc, #404]	@ (8001568 <main+0x360>)
 80013d2:	ed93 7a00 	vldr	s14, [r3]
 80013d6:	4b61      	ldr	r3, [pc, #388]	@ (800155c <main+0x354>)
 80013d8:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80013dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013e0:	eeb8 7a08 	vmov.f32	s14, #136	@ 0xc0400000 -3.0
 80013e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ec:	dd1c      	ble.n	8001428 <main+0x220>
 80013ee:	4b5e      	ldr	r3, [pc, #376]	@ (8001568 <main+0x360>)
 80013f0:	ed93 7a00 	vldr	s14, [r3]
 80013f4:	4b59      	ldr	r3, [pc, #356]	@ (800155c <main+0x354>)
 80013f6:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80013fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013fe:	ee17 0a90 	vmov	r0, s15
 8001402:	f7ff f86d 	bl	80004e0 <__aeabi_f2d>
 8001406:	a340      	add	r3, pc, #256	@ (adr r3, 8001508 <main+0x300>)
 8001408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800140c:	f7ff fb32 	bl	8000a74 <__aeabi_dcmplt>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d008      	beq.n	8001428 <main+0x220>
			  	  Vin = -2;
 8001416:	4b57      	ldr	r3, [pc, #348]	@ (8001574 <main+0x36c>)
 8001418:	f04f 4240 	mov.w	r2, #3221225472	@ 0xc0000000
 800141c:	601a      	str	r2, [r3, #0]
			  	  check = -1;
 800141e:	4b57      	ldr	r3, [pc, #348]	@ (800157c <main+0x374>)
 8001420:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001424:	601a      	str	r2, [r3, #0]
 8001426:	e043      	b.n	80014b0 <main+0x2a8>
			  }
			  else{
				  Vin = arm_pid_f32(&PID2, (setVelocity + ref_v)/2 - QEIdata.linearVel);
 8001428:	4b55      	ldr	r3, [pc, #340]	@ (8001580 <main+0x378>)
 800142a:	ed93 7a00 	vldr	s14, [r3]
 800142e:	4b55      	ldr	r3, [pc, #340]	@ (8001584 <main+0x37c>)
 8001430:	edd3 7a00 	vldr	s15, [r3]
 8001434:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001438:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800143c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001440:	4b46      	ldr	r3, [pc, #280]	@ (800155c <main+0x354>)
 8001442:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001446:	ee77 7a67 	vsub.f32	s15, s14, s15
 800144a:	4b3b      	ldr	r3, [pc, #236]	@ (8001538 <main+0x330>)
 800144c:	627b      	str	r3, [r7, #36]	@ 0x24
 800144e:	edc7 7a08 	vstr	s15, [r7, #32]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8001452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001454:	ed93 7a00 	vldr	s14, [r3]
 8001458:	edd7 7a08 	vldr	s15, [r7, #32]
 800145c:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001462:	edd3 6a01 	vldr	s13, [r3, #4]
 8001466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001468:	edd3 7a03 	vldr	s15, [r3, #12]
 800146c:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8001470:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001476:	edd3 6a02 	vldr	s13, [r3, #8]
 800147a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800147c:	edd3 7a04 	vldr	s15, [r3, #16]
 8001480:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001484:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800148a:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 800148e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001492:	edc7 7a07 	vstr	s15, [r7, #28]

    /* Update state */
    S->state[1] = S->state[0];
 8001496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001498:	68da      	ldr	r2, [r3, #12]
 800149a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800149c:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 800149e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014a0:	6a3a      	ldr	r2, [r7, #32]
 80014a2:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 80014a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014a6:	69fa      	ldr	r2, [r7, #28]
 80014a8:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	4a31      	ldr	r2, [pc, #196]	@ (8001574 <main+0x36c>)
 80014ae:	6013      	str	r3, [r2, #0]
//				  Vin = arm_pid_f32(&PID2, ref_v - QEIdata.linearVel);
			  }
			  if(Vin > 24){
 80014b0:	4b30      	ldr	r3, [pc, #192]	@ (8001574 <main+0x36c>)
 80014b2:	edd3 7a00 	vldr	s15, [r3]
 80014b6:	eeb3 7a08 	vmov.f32	s14, #56	@ 0x41c00000  24.0
 80014ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014c2:	dd02      	ble.n	80014ca <main+0x2c2>
	  			  Vin = 24;
 80014c4:	4b2b      	ldr	r3, [pc, #172]	@ (8001574 <main+0x36c>)
 80014c6:	4a30      	ldr	r2, [pc, #192]	@ (8001588 <main+0x380>)
 80014c8:	601a      	str	r2, [r3, #0]
			  }
			  if(Vin < -24){
 80014ca:	4b2a      	ldr	r3, [pc, #168]	@ (8001574 <main+0x36c>)
 80014cc:	edd3 7a00 	vldr	s15, [r3]
 80014d0:	eebb 7a08 	vmov.f32	s14, #184	@ 0xc1c00000 -24.0
 80014d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014dc:	d56a      	bpl.n	80015b4 <main+0x3ac>
				  Vin = -24;
 80014de:	4b25      	ldr	r3, [pc, #148]	@ (8001574 <main+0x36c>)
 80014e0:	4a2a      	ldr	r2, [pc, #168]	@ (800158c <main+0x384>)
 80014e2:	601a      	str	r2, [r3, #0]
 80014e4:	e066      	b.n	80015b4 <main+0x3ac>
			  }
		  }
	      else if(mode == 2){ //manual (control with joy stick)
 80014e6:	4b22      	ldr	r3, [pc, #136]	@ (8001570 <main+0x368>)
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	d150      	bne.n	8001590 <main+0x388>
//	    	  LED_Manual();
			  JoystickInput();
 80014ee:	f001 fe0b 	bl	8003108 <JoystickInput>
			  button_up_down_input();
 80014f2:	f001 fe69 	bl	80031c8 <button_up_down_input>
			  button_reset_input(); //set 0;
 80014f6:	f001 ff09 	bl	800330c <button_reset_input>
			  button_save_position();
 80014fa:	f001 ff77 	bl	80033ec <button_save_position>
 80014fe:	e059      	b.n	80015b4 <main+0x3ac>
 8001500:	9999999a 	.word	0x9999999a
 8001504:	3fb99999 	.word	0x3fb99999
 8001508:	9999999a 	.word	0x9999999a
 800150c:	bfb99999 	.word	0xbfb99999
 8001510:	20000240 	.word	0x20000240
 8001514:	20000174 	.word	0x20000174
 8001518:	200003d8 	.word	0x200003d8
 800151c:	20000810 	.word	0x20000810
 8001520:	200000a8 	.word	0x200000a8
 8001524:	2000030c 	.word	0x2000030c
 8001528:	20000888 	.word	0x20000888
 800152c:	40f00000 	.word	0x40f00000
 8001530:	3851b717 	.word	0x3851b717
 8001534:	40400000 	.word	0x40400000
 8001538:	200008ac 	.word	0x200008ac
 800153c:	3dcccccd 	.word	0x3dcccccd
 8001540:	3a1d4952 	.word	0x3a1d4952
 8001544:	3ccccccd 	.word	0x3ccccccd
 8001548:	200004a4 	.word	0x200004a4
 800154c:	200008e8 	.word	0x200008e8
 8001550:	2000063c 	.word	0x2000063c
 8001554:	20000570 	.word	0x20000570
 8001558:	20000dc0 	.word	0x20000dc0
 800155c:	200007c8 	.word	0x200007c8
 8001560:	200008d8 	.word	0x200008d8
 8001564:	20000f68 	.word	0x20000f68
 8001568:	200008d0 	.word	0x200008d0
 800156c:	20000828 	.word	0x20000828
 8001570:	20000000 	.word	0x20000000
 8001574:	20000820 	.word	0x20000820
 8001578:	404ccccd 	.word	0x404ccccd
 800157c:	20000f50 	.word	0x20000f50
 8001580:	200008d4 	.word	0x200008d4
 8001584:	20000838 	.word	0x20000838
 8001588:	41c00000 	.word	0x41c00000
 800158c:	c1c00000 	.word	0xc1c00000
		  }
		  else if(mode == 3){ //stop mode
 8001590:	4b9f      	ldr	r3, [pc, #636]	@ (8001810 <main+0x608>)
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	2b03      	cmp	r3, #3
 8001596:	d103      	bne.n	80015a0 <main+0x398>
			  Vin = -2.5;
 8001598:	4b9e      	ldr	r3, [pc, #632]	@ (8001814 <main+0x60c>)
 800159a:	4a9f      	ldr	r2, [pc, #636]	@ (8001818 <main+0x610>)
 800159c:	601a      	str	r2, [r3, #0]
 800159e:	e009      	b.n	80015b4 <main+0x3ac>
		  }
		  else if(mode == 4){ //Emergency mode
 80015a0:	4b9b      	ldr	r3, [pc, #620]	@ (8001810 <main+0x608>)
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	2b04      	cmp	r3, #4
 80015a6:	d105      	bne.n	80015b4 <main+0x3ac>
			  Vin = 0;
 80015a8:	4b9a      	ldr	r3, [pc, #616]	@ (8001814 <main+0x60c>)
 80015aa:	f04f 0200 	mov.w	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]
			  LED_Emergency();
 80015b0:	f001 ffd0 	bl	8003554 <LED_Emergency>
		  }

		  //software limit
		  SoftwareLimit();
 80015b4:	f001 fd50 	bl	8003058 <SoftwareLimit>

		  //Drive Motor which PWM
		  DriveMotor();
 80015b8:	f001 fcf2 	bl	8002fa0 <DriveMotor>

	  }

	  if(currentTime > timestamp){
 80015bc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80015c0:	4996      	ldr	r1, [pc, #600]	@ (800181c <main+0x614>)
 80015c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80015c6:	4290      	cmp	r0, r2
 80015c8:	eb71 0303 	sbcs.w	r3, r1, r3
 80015cc:	f4bf ae80 	bcs.w	80012d0 <main+0xc8>
		  timestamp = currentTime + 4000; //250 Hz
 80015d0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80015d4:	f512 687a 	adds.w	r8, r2, #4000	@ 0xfa0
 80015d8:	f143 0900 	adc.w	r9, r3, #0
 80015dc:	4642      	mov	r2, r8
 80015de:	464b      	mov	r3, r9
 80015e0:	498e      	ldr	r1, [pc, #568]	@ (800181c <main+0x614>)
 80015e2:	e9c1 2300 	strd	r2, r3, [r1]

		  //control mode
		  if(mode == 1){ //auto
 80015e6:	4b8a      	ldr	r3, [pc, #552]	@ (8001810 <main+0x608>)
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	f47f ae70 	bne.w	80012d0 <main+0xc8>
			  if(fabs(setPosition - QEIdata.linearPos) < 0.1){
 80015f0:	4b8b      	ldr	r3, [pc, #556]	@ (8001820 <main+0x618>)
 80015f2:	ed93 7a00 	vldr	s14, [r3]
 80015f6:	4b8b      	ldr	r3, [pc, #556]	@ (8001824 <main+0x61c>)
 80015f8:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80015fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001600:	eef0 7ae7 	vabs.f32	s15, s15
 8001604:	ee17 0a90 	vmov	r0, s15
 8001608:	f7fe ff6a 	bl	80004e0 <__aeabi_f2d>
 800160c:	a37c      	add	r3, pc, #496	@ (adr r3, 8001800 <main+0x5f8>)
 800160e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001612:	f7ff fa2f 	bl	8000a74 <__aeabi_dcmplt>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	f040 80d0 	bne.w	80017be <main+0x5b6>
				  //Vin = 0;
			  }
			  else if(setPosition - QEIdata.linearPos < 3 && setPosition - QEIdata.linearPos > 0.1){
 800161e:	4b80      	ldr	r3, [pc, #512]	@ (8001820 <main+0x618>)
 8001620:	ed93 7a00 	vldr	s14, [r3]
 8001624:	4b7f      	ldr	r3, [pc, #508]	@ (8001824 <main+0x61c>)
 8001626:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800162a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800162e:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8001632:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001636:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800163a:	d514      	bpl.n	8001666 <main+0x45e>
 800163c:	4b78      	ldr	r3, [pc, #480]	@ (8001820 <main+0x618>)
 800163e:	ed93 7a00 	vldr	s14, [r3]
 8001642:	4b78      	ldr	r3, [pc, #480]	@ (8001824 <main+0x61c>)
 8001644:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001648:	ee77 7a67 	vsub.f32	s15, s14, s15
 800164c:	ee17 0a90 	vmov	r0, s15
 8001650:	f7fe ff46 	bl	80004e0 <__aeabi_f2d>
 8001654:	a36a      	add	r3, pc, #424	@ (adr r3, 8001800 <main+0x5f8>)
 8001656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800165a:	f7ff fa29 	bl	8000ab0 <__aeabi_dcmpgt>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	f040 80ac 	bne.w	80017be <main+0x5b6>
			  	  //Vin = 3.2;
			  	  //check = 2;
			  }
			  else if(setPosition - QEIdata.linearPos > -3 && setPosition - QEIdata.linearPos < -0.1){
 8001666:	4b6e      	ldr	r3, [pc, #440]	@ (8001820 <main+0x618>)
 8001668:	ed93 7a00 	vldr	s14, [r3]
 800166c:	4b6d      	ldr	r3, [pc, #436]	@ (8001824 <main+0x61c>)
 800166e:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001672:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001676:	eeb8 7a08 	vmov.f32	s14, #136	@ 0xc0400000 -3.0
 800167a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800167e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001682:	dd14      	ble.n	80016ae <main+0x4a6>
 8001684:	4b66      	ldr	r3, [pc, #408]	@ (8001820 <main+0x618>)
 8001686:	ed93 7a00 	vldr	s14, [r3]
 800168a:	4b66      	ldr	r3, [pc, #408]	@ (8001824 <main+0x61c>)
 800168c:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001690:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001694:	ee17 0a90 	vmov	r0, s15
 8001698:	f7fe ff22 	bl	80004e0 <__aeabi_f2d>
 800169c:	a35a      	add	r3, pc, #360	@ (adr r3, 8001808 <main+0x600>)
 800169e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a2:	f7ff f9e7 	bl	8000a74 <__aeabi_dcmplt>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	f040 8088 	bne.w	80017be <main+0x5b6>
			  	  //Vin = -2;
			  	  //check = -2;
			  }
			  else{
				  setVelocity = arm_pid_f32(&PID1, (setPosition + ref_p)/2 - QEIdata.linearPos);
 80016ae:	4b5c      	ldr	r3, [pc, #368]	@ (8001820 <main+0x618>)
 80016b0:	ed93 7a00 	vldr	s14, [r3]
 80016b4:	4b5c      	ldr	r3, [pc, #368]	@ (8001828 <main+0x620>)
 80016b6:	edd3 7a00 	vldr	s15, [r3]
 80016ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016be:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80016c2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80016c6:	4b57      	ldr	r3, [pc, #348]	@ (8001824 <main+0x61c>)
 80016c8:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80016cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016d0:	4b56      	ldr	r3, [pc, #344]	@ (800182c <main+0x624>)
 80016d2:	60fb      	str	r3, [r7, #12]
 80016d4:	edc7 7a02 	vstr	s15, [r7, #8]
    out = (S->A0 * in) +
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	ed93 7a00 	vldr	s14, [r3]
 80016de:	edd7 7a02 	vldr	s15, [r7, #8]
 80016e2:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	edd3 6a01 	vldr	s13, [r3, #4]
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	edd3 7a03 	vldr	s15, [r3, #12]
 80016f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 80016f6:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	edd3 6a02 	vldr	s13, [r3, #8]
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	edd3 7a04 	vldr	s15, [r3, #16]
 8001706:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800170a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8001714:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001718:	edc7 7a01 	vstr	s15, [r7, #4]
    S->state[1] = S->state[0];
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	68da      	ldr	r2, [r3, #12]
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	68ba      	ldr	r2, [r7, #8]
 8001728:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	687a      	ldr	r2, [r7, #4]
 800172e:	615a      	str	r2, [r3, #20]
    return (out);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	4a3f      	ldr	r2, [pc, #252]	@ (8001830 <main+0x628>)
 8001734:	6013      	str	r3, [r2, #0]
				  Vin = arm_pid_f32(&PID2, (setVelocity + ref_v)/2 + QEIdata.linearVel);
 8001736:	4b3e      	ldr	r3, [pc, #248]	@ (8001830 <main+0x628>)
 8001738:	ed93 7a00 	vldr	s14, [r3]
 800173c:	4b3d      	ldr	r3, [pc, #244]	@ (8001834 <main+0x62c>)
 800173e:	edd3 7a00 	vldr	s15, [r3]
 8001742:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001746:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800174a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800174e:	4b35      	ldr	r3, [pc, #212]	@ (8001824 <main+0x61c>)
 8001750:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001754:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001758:	4b37      	ldr	r3, [pc, #220]	@ (8001838 <main+0x630>)
 800175a:	61bb      	str	r3, [r7, #24]
 800175c:	edc7 7a05 	vstr	s15, [r7, #20]
    out = (S->A0 * in) +
 8001760:	69bb      	ldr	r3, [r7, #24]
 8001762:	ed93 7a00 	vldr	s14, [r3]
 8001766:	edd7 7a05 	vldr	s15, [r7, #20]
 800176a:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 800176e:	69bb      	ldr	r3, [r7, #24]
 8001770:	edd3 6a01 	vldr	s13, [r3, #4]
 8001774:	69bb      	ldr	r3, [r7, #24]
 8001776:	edd3 7a03 	vldr	s15, [r3, #12]
 800177a:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 800177e:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001782:	69bb      	ldr	r3, [r7, #24]
 8001784:	edd3 6a02 	vldr	s13, [r3, #8]
 8001788:	69bb      	ldr	r3, [r7, #24]
 800178a:	edd3 7a04 	vldr	s15, [r3, #16]
 800178e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001792:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001796:	69bb      	ldr	r3, [r7, #24]
 8001798:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 800179c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017a0:	edc7 7a04 	vstr	s15, [r7, #16]
    S->state[1] = S->state[0];
 80017a4:	69bb      	ldr	r3, [r7, #24]
 80017a6:	68da      	ldr	r2, [r3, #12]
 80017a8:	69bb      	ldr	r3, [r7, #24]
 80017aa:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 80017ac:	69bb      	ldr	r3, [r7, #24]
 80017ae:	697a      	ldr	r2, [r7, #20]
 80017b0:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 80017b2:	69bb      	ldr	r3, [r7, #24]
 80017b4:	693a      	ldr	r2, [r7, #16]
 80017b6:	615a      	str	r2, [r3, #20]
    return (out);
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	4a16      	ldr	r2, [pc, #88]	@ (8001814 <main+0x60c>)
 80017bc:	6013      	str	r3, [r2, #0]
//				  Vin = arm_pid_f32(&PID2, ref_v - QEIdata.linearVel);
			  }

			  if(Vin > 24){
 80017be:	4b15      	ldr	r3, [pc, #84]	@ (8001814 <main+0x60c>)
 80017c0:	edd3 7a00 	vldr	s15, [r3]
 80017c4:	eeb3 7a08 	vmov.f32	s14, #56	@ 0x41c00000  24.0
 80017c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017d0:	dd02      	ble.n	80017d8 <main+0x5d0>
				  Vin = 24;
 80017d2:	4b10      	ldr	r3, [pc, #64]	@ (8001814 <main+0x60c>)
 80017d4:	4a19      	ldr	r2, [pc, #100]	@ (800183c <main+0x634>)
 80017d6:	601a      	str	r2, [r3, #0]
			  }
			  if(Vin < -24){
 80017d8:	4b0e      	ldr	r3, [pc, #56]	@ (8001814 <main+0x60c>)
 80017da:	edd3 7a00 	vldr	s15, [r3]
 80017de:	eebb 7a08 	vmov.f32	s14, #184	@ 0xc1c00000 -24.0
 80017e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017ea:	d502      	bpl.n	80017f2 <main+0x5ea>
				  Vin = -24;
 80017ec:	4b09      	ldr	r3, [pc, #36]	@ (8001814 <main+0x60c>)
 80017ee:	4a14      	ldr	r2, [pc, #80]	@ (8001840 <main+0x638>)
 80017f0:	601a      	str	r2, [r3, #0]
			  }

			  //software limit
			  SoftwareLimit();
 80017f2:	f001 fc31 	bl	8003058 <SoftwareLimit>

			  //Drive Motor which PWM
			  DriveMotor();
 80017f6:	f001 fbd3 	bl	8002fa0 <DriveMotor>
  {
 80017fa:	e569      	b.n	80012d0 <main+0xc8>
 80017fc:	f3af 8000 	nop.w
 8001800:	9999999a 	.word	0x9999999a
 8001804:	3fb99999 	.word	0x3fb99999
 8001808:	9999999a 	.word	0x9999999a
 800180c:	bfb99999 	.word	0xbfb99999
 8001810:	20000000 	.word	0x20000000
 8001814:	20000820 	.word	0x20000820
 8001818:	c0200000 	.word	0xc0200000
 800181c:	20000f70 	.word	0x20000f70
 8001820:	200008d0 	.word	0x200008d0
 8001824:	200007c8 	.word	0x200007c8
 8001828:	20000834 	.word	0x20000834
 800182c:	20000888 	.word	0x20000888
 8001830:	200008d4 	.word	0x200008d4
 8001834:	20000838 	.word	0x20000838
 8001838:	200008ac 	.word	0x200008ac
 800183c:	41c00000 	.word	0x41c00000
 8001840:	c1c00000 	.word	0xc1c00000

08001844 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b094      	sub	sp, #80	@ 0x50
 8001848:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800184a:	f107 0318 	add.w	r3, r7, #24
 800184e:	2238      	movs	r2, #56	@ 0x38
 8001850:	2100      	movs	r1, #0
 8001852:	4618      	mov	r0, r3
 8001854:	f009 faf2 	bl	800ae3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001858:	1d3b      	adds	r3, r7, #4
 800185a:	2200      	movs	r2, #0
 800185c:	601a      	str	r2, [r3, #0]
 800185e:	605a      	str	r2, [r3, #4]
 8001860:	609a      	str	r2, [r3, #8]
 8001862:	60da      	str	r2, [r3, #12]
 8001864:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001866:	2000      	movs	r0, #0
 8001868:	f004 fc10 	bl	800608c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800186c:	2302      	movs	r3, #2
 800186e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001870:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001874:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001876:	2340      	movs	r3, #64	@ 0x40
 8001878:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800187a:	2302      	movs	r3, #2
 800187c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800187e:	2302      	movs	r3, #2
 8001880:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001882:	2304      	movs	r3, #4
 8001884:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001886:	2355      	movs	r3, #85	@ 0x55
 8001888:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800188a:	2302      	movs	r3, #2
 800188c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800188e:	2302      	movs	r3, #2
 8001890:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001892:	2302      	movs	r3, #2
 8001894:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001896:	f107 0318 	add.w	r3, r7, #24
 800189a:	4618      	mov	r0, r3
 800189c:	f004 fcaa 	bl	80061f4 <HAL_RCC_OscConfig>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <SystemClock_Config+0x66>
  {
    Error_Handler();
 80018a6:	f001 fea1 	bl	80035ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018aa:	230f      	movs	r3, #15
 80018ac:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018ae:	2303      	movs	r3, #3
 80018b0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018b2:	2300      	movs	r3, #0
 80018b4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80018b6:	2300      	movs	r3, #0
 80018b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018ba:	2300      	movs	r3, #0
 80018bc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80018be:	1d3b      	adds	r3, r7, #4
 80018c0:	2104      	movs	r1, #4
 80018c2:	4618      	mov	r0, r3
 80018c4:	f004 ffa8 	bl	8006818 <HAL_RCC_ClockConfig>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80018ce:	f001 fe8d 	bl	80035ec <Error_Handler>
  }
}
 80018d2:	bf00      	nop
 80018d4:	3750      	adds	r7, #80	@ 0x50
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
	...

080018dc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b08c      	sub	sp, #48	@ 0x30
 80018e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80018e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018e6:	2200      	movs	r2, #0
 80018e8:	601a      	str	r2, [r3, #0]
 80018ea:	605a      	str	r2, [r3, #4]
 80018ec:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80018ee:	1d3b      	adds	r3, r7, #4
 80018f0:	2220      	movs	r2, #32
 80018f2:	2100      	movs	r1, #0
 80018f4:	4618      	mov	r0, r3
 80018f6:	f009 faa1 	bl	800ae3c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80018fa:	4b3a      	ldr	r3, [pc, #232]	@ (80019e4 <MX_ADC1_Init+0x108>)
 80018fc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001900:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001902:	4b38      	ldr	r3, [pc, #224]	@ (80019e4 <MX_ADC1_Init+0x108>)
 8001904:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001908:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800190a:	4b36      	ldr	r3, [pc, #216]	@ (80019e4 <MX_ADC1_Init+0x108>)
 800190c:	2200      	movs	r2, #0
 800190e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001910:	4b34      	ldr	r3, [pc, #208]	@ (80019e4 <MX_ADC1_Init+0x108>)
 8001912:	2200      	movs	r2, #0
 8001914:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001916:	4b33      	ldr	r3, [pc, #204]	@ (80019e4 <MX_ADC1_Init+0x108>)
 8001918:	2200      	movs	r2, #0
 800191a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800191c:	4b31      	ldr	r3, [pc, #196]	@ (80019e4 <MX_ADC1_Init+0x108>)
 800191e:	2201      	movs	r2, #1
 8001920:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001922:	4b30      	ldr	r3, [pc, #192]	@ (80019e4 <MX_ADC1_Init+0x108>)
 8001924:	2204      	movs	r2, #4
 8001926:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001928:	4b2e      	ldr	r3, [pc, #184]	@ (80019e4 <MX_ADC1_Init+0x108>)
 800192a:	2200      	movs	r2, #0
 800192c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800192e:	4b2d      	ldr	r3, [pc, #180]	@ (80019e4 <MX_ADC1_Init+0x108>)
 8001930:	2200      	movs	r2, #0
 8001932:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 8001934:	4b2b      	ldr	r3, [pc, #172]	@ (80019e4 <MX_ADC1_Init+0x108>)
 8001936:	2202      	movs	r2, #2
 8001938:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800193a:	4b2a      	ldr	r3, [pc, #168]	@ (80019e4 <MX_ADC1_Init+0x108>)
 800193c:	2200      	movs	r2, #0
 800193e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T4_TRGO;
 8001942:	4b28      	ldr	r3, [pc, #160]	@ (80019e4 <MX_ADC1_Init+0x108>)
 8001944:	f44f 62b0 	mov.w	r2, #1408	@ 0x580
 8001948:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800194a:	4b26      	ldr	r3, [pc, #152]	@ (80019e4 <MX_ADC1_Init+0x108>)
 800194c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001950:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001952:	4b24      	ldr	r3, [pc, #144]	@ (80019e4 <MX_ADC1_Init+0x108>)
 8001954:	2201      	movs	r2, #1
 8001956:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800195a:	4b22      	ldr	r3, [pc, #136]	@ (80019e4 <MX_ADC1_Init+0x108>)
 800195c:	2200      	movs	r2, #0
 800195e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001960:	4b20      	ldr	r3, [pc, #128]	@ (80019e4 <MX_ADC1_Init+0x108>)
 8001962:	2200      	movs	r2, #0
 8001964:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001968:	481e      	ldr	r0, [pc, #120]	@ (80019e4 <MX_ADC1_Init+0x108>)
 800196a:	f002 fc3d 	bl	80041e8 <HAL_ADC_Init>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d001      	beq.n	8001978 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8001974:	f001 fe3a 	bl	80035ec <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001978:	2300      	movs	r3, #0
 800197a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800197c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001980:	4619      	mov	r1, r3
 8001982:	4818      	ldr	r0, [pc, #96]	@ (80019e4 <MX_ADC1_Init+0x108>)
 8001984:	f003 fc6e 	bl	8005264 <HAL_ADCEx_MultiModeConfigChannel>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 800198e:	f001 fe2d 	bl	80035ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001992:	4b15      	ldr	r3, [pc, #84]	@ (80019e8 <MX_ADC1_Init+0x10c>)
 8001994:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001996:	2306      	movs	r3, #6
 8001998:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800199a:	2300      	movs	r3, #0
 800199c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800199e:	237f      	movs	r3, #127	@ 0x7f
 80019a0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80019a2:	2304      	movs	r3, #4
 80019a4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80019a6:	2300      	movs	r3, #0
 80019a8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019aa:	1d3b      	adds	r3, r7, #4
 80019ac:	4619      	mov	r1, r3
 80019ae:	480d      	ldr	r0, [pc, #52]	@ (80019e4 <MX_ADC1_Init+0x108>)
 80019b0:	f002 fec8 	bl	8004744 <HAL_ADC_ConfigChannel>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 80019ba:	f001 fe17 	bl	80035ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80019be:	4b0b      	ldr	r3, [pc, #44]	@ (80019ec <MX_ADC1_Init+0x110>)
 80019c0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80019c2:	230c      	movs	r3, #12
 80019c4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019c6:	1d3b      	adds	r3, r7, #4
 80019c8:	4619      	mov	r1, r3
 80019ca:	4806      	ldr	r0, [pc, #24]	@ (80019e4 <MX_ADC1_Init+0x108>)
 80019cc:	f002 feba 	bl	8004744 <HAL_ADC_ConfigChannel>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 80019d6:	f001 fe09 	bl	80035ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80019da:	bf00      	nop
 80019dc:	3730      	adds	r7, #48	@ 0x30
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	200000a8 	.word	0x200000a8
 80019e8:	04300002 	.word	0x04300002
 80019ec:	14f00020 	.word	0x14f00020

080019f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b08c      	sub	sp, #48	@ 0x30
 80019f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80019f6:	f107 030c 	add.w	r3, r7, #12
 80019fa:	2224      	movs	r2, #36	@ 0x24
 80019fc:	2100      	movs	r1, #0
 80019fe:	4618      	mov	r0, r3
 8001a00:	f009 fa1c 	bl	800ae3c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a04:	463b      	mov	r3, r7
 8001a06:	2200      	movs	r2, #0
 8001a08:	601a      	str	r2, [r3, #0]
 8001a0a:	605a      	str	r2, [r3, #4]
 8001a0c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a0e:	4b21      	ldr	r3, [pc, #132]	@ (8001a94 <MX_TIM2_Init+0xa4>)
 8001a10:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001a14:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001a16:	4b1f      	ldr	r3, [pc, #124]	@ (8001a94 <MX_TIM2_Init+0xa4>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a1c:	4b1d      	ldr	r3, [pc, #116]	@ (8001a94 <MX_TIM2_Init+0xa4>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001a22:	4b1c      	ldr	r3, [pc, #112]	@ (8001a94 <MX_TIM2_Init+0xa4>)
 8001a24:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001a28:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a2a:	4b1a      	ldr	r3, [pc, #104]	@ (8001a94 <MX_TIM2_Init+0xa4>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a30:	4b18      	ldr	r3, [pc, #96]	@ (8001a94 <MX_TIM2_Init+0xa4>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001a36:	2303      	movs	r3, #3
 8001a38:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a42:	2300      	movs	r3, #0
 8001a44:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001a46:	2300      	movs	r3, #0
 8001a48:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a52:	2300      	movs	r3, #0
 8001a54:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001a56:	2300      	movs	r3, #0
 8001a58:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001a5a:	f107 030c 	add.w	r3, r7, #12
 8001a5e:	4619      	mov	r1, r3
 8001a60:	480c      	ldr	r0, [pc, #48]	@ (8001a94 <MX_TIM2_Init+0xa4>)
 8001a62:	f005 ff05 	bl	8007870 <HAL_TIM_Encoder_Init>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d001      	beq.n	8001a70 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001a6c:	f001 fdbe 	bl	80035ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a70:	2300      	movs	r3, #0
 8001a72:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a74:	2300      	movs	r3, #0
 8001a76:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a78:	463b      	mov	r3, r7
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	4805      	ldr	r0, [pc, #20]	@ (8001a94 <MX_TIM2_Init+0xa4>)
 8001a7e:	f007 faad 	bl	8008fdc <HAL_TIMEx_MasterConfigSynchronization>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001a88:	f001 fdb0 	bl	80035ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001a8c:	bf00      	nop
 8001a8e:	3730      	adds	r7, #48	@ 0x30
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	20000174 	.word	0x20000174

08001a98 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b08e      	sub	sp, #56	@ 0x38
 8001a9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a9e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	601a      	str	r2, [r3, #0]
 8001aa6:	605a      	str	r2, [r3, #4]
 8001aa8:	609a      	str	r2, [r3, #8]
 8001aaa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001aac:	f107 031c 	add.w	r3, r7, #28
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	601a      	str	r2, [r3, #0]
 8001ab4:	605a      	str	r2, [r3, #4]
 8001ab6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ab8:	463b      	mov	r3, r7
 8001aba:	2200      	movs	r2, #0
 8001abc:	601a      	str	r2, [r3, #0]
 8001abe:	605a      	str	r2, [r3, #4]
 8001ac0:	609a      	str	r2, [r3, #8]
 8001ac2:	60da      	str	r2, [r3, #12]
 8001ac4:	611a      	str	r2, [r3, #16]
 8001ac6:	615a      	str	r2, [r3, #20]
 8001ac8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001aca:	4b2d      	ldr	r3, [pc, #180]	@ (8001b80 <MX_TIM3_Init+0xe8>)
 8001acc:	4a2d      	ldr	r2, [pc, #180]	@ (8001b84 <MX_TIM3_Init+0xec>)
 8001ace:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 169;
 8001ad0:	4b2b      	ldr	r3, [pc, #172]	@ (8001b80 <MX_TIM3_Init+0xe8>)
 8001ad2:	22a9      	movs	r2, #169	@ 0xa9
 8001ad4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ad6:	4b2a      	ldr	r3, [pc, #168]	@ (8001b80 <MX_TIM3_Init+0xe8>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001adc:	4b28      	ldr	r3, [pc, #160]	@ (8001b80 <MX_TIM3_Init+0xe8>)
 8001ade:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001ae2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ae4:	4b26      	ldr	r3, [pc, #152]	@ (8001b80 <MX_TIM3_Init+0xe8>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aea:	4b25      	ldr	r3, [pc, #148]	@ (8001b80 <MX_TIM3_Init+0xe8>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001af0:	4823      	ldr	r0, [pc, #140]	@ (8001b80 <MX_TIM3_Init+0xe8>)
 8001af2:	f005 fafb 	bl	80070ec <HAL_TIM_Base_Init>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001afc:	f001 fd76 	bl	80035ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b00:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b04:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001b06:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	481c      	ldr	r0, [pc, #112]	@ (8001b80 <MX_TIM3_Init+0xe8>)
 8001b0e:	f006 fa7f 	bl	8008010 <HAL_TIM_ConfigClockSource>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001b18:	f001 fd68 	bl	80035ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001b1c:	4818      	ldr	r0, [pc, #96]	@ (8001b80 <MX_TIM3_Init+0xe8>)
 8001b1e:	f005 fc31 	bl	8007384 <HAL_TIM_PWM_Init>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001b28:	f001 fd60 	bl	80035ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b30:	2300      	movs	r3, #0
 8001b32:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b34:	f107 031c 	add.w	r3, r7, #28
 8001b38:	4619      	mov	r1, r3
 8001b3a:	4811      	ldr	r0, [pc, #68]	@ (8001b80 <MX_TIM3_Init+0xe8>)
 8001b3c:	f007 fa4e 	bl	8008fdc <HAL_TIMEx_MasterConfigSynchronization>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001b46:	f001 fd51 	bl	80035ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b4a:	2360      	movs	r3, #96	@ 0x60
 8001b4c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 8001b4e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001b52:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b54:	2300      	movs	r3, #0
 8001b56:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b5c:	463b      	mov	r3, r7
 8001b5e:	2200      	movs	r2, #0
 8001b60:	4619      	mov	r1, r3
 8001b62:	4807      	ldr	r0, [pc, #28]	@ (8001b80 <MX_TIM3_Init+0xe8>)
 8001b64:	f006 f940 	bl	8007de8 <HAL_TIM_PWM_ConfigChannel>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8001b6e:	f001 fd3d 	bl	80035ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001b72:	4803      	ldr	r0, [pc, #12]	@ (8001b80 <MX_TIM3_Init+0xe8>)
 8001b74:	f001 feca 	bl	800390c <HAL_TIM_MspPostInit>

}
 8001b78:	bf00      	nop
 8001b7a:	3738      	adds	r7, #56	@ 0x38
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	20000240 	.word	0x20000240
 8001b84:	40000400 	.word	0x40000400

08001b88 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b088      	sub	sp, #32
 8001b8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b8e:	f107 0310 	add.w	r3, r7, #16
 8001b92:	2200      	movs	r2, #0
 8001b94:	601a      	str	r2, [r3, #0]
 8001b96:	605a      	str	r2, [r3, #4]
 8001b98:	609a      	str	r2, [r3, #8]
 8001b9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b9c:	1d3b      	adds	r3, r7, #4
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	601a      	str	r2, [r3, #0]
 8001ba2:	605a      	str	r2, [r3, #4]
 8001ba4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001ba6:	4b1d      	ldr	r3, [pc, #116]	@ (8001c1c <MX_TIM4_Init+0x94>)
 8001ba8:	4a1d      	ldr	r2, [pc, #116]	@ (8001c20 <MX_TIM4_Init+0x98>)
 8001baa:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 169;
 8001bac:	4b1b      	ldr	r3, [pc, #108]	@ (8001c1c <MX_TIM4_Init+0x94>)
 8001bae:	22a9      	movs	r2, #169	@ 0xa9
 8001bb0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bb2:	4b1a      	ldr	r3, [pc, #104]	@ (8001c1c <MX_TIM4_Init+0x94>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8001bb8:	4b18      	ldr	r3, [pc, #96]	@ (8001c1c <MX_TIM4_Init+0x94>)
 8001bba:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001bbe:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bc0:	4b16      	ldr	r3, [pc, #88]	@ (8001c1c <MX_TIM4_Init+0x94>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bc6:	4b15      	ldr	r3, [pc, #84]	@ (8001c1c <MX_TIM4_Init+0x94>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001bcc:	4813      	ldr	r0, [pc, #76]	@ (8001c1c <MX_TIM4_Init+0x94>)
 8001bce:	f005 fa8d 	bl	80070ec <HAL_TIM_Base_Init>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001bd8:	f001 fd08 	bl	80035ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bdc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001be0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001be2:	f107 0310 	add.w	r3, r7, #16
 8001be6:	4619      	mov	r1, r3
 8001be8:	480c      	ldr	r0, [pc, #48]	@ (8001c1c <MX_TIM4_Init+0x94>)
 8001bea:	f006 fa11 	bl	8008010 <HAL_TIM_ConfigClockSource>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001bf4:	f001 fcfa 	bl	80035ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001bf8:	2320      	movs	r3, #32
 8001bfa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001c00:	1d3b      	adds	r3, r7, #4
 8001c02:	4619      	mov	r1, r3
 8001c04:	4805      	ldr	r0, [pc, #20]	@ (8001c1c <MX_TIM4_Init+0x94>)
 8001c06:	f007 f9e9 	bl	8008fdc <HAL_TIMEx_MasterConfigSynchronization>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d001      	beq.n	8001c14 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001c10:	f001 fcec 	bl	80035ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001c14:	bf00      	nop
 8001c16:	3720      	adds	r7, #32
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	2000030c 	.word	0x2000030c
 8001c20:	40000800 	.word	0x40000800

08001c24 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b088      	sub	sp, #32
 8001c28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c2a:	f107 0310 	add.w	r3, r7, #16
 8001c2e:	2200      	movs	r2, #0
 8001c30:	601a      	str	r2, [r3, #0]
 8001c32:	605a      	str	r2, [r3, #4]
 8001c34:	609a      	str	r2, [r3, #8]
 8001c36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c38:	1d3b      	adds	r3, r7, #4
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	601a      	str	r2, [r3, #0]
 8001c3e:	605a      	str	r2, [r3, #4]
 8001c40:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001c42:	4b1d      	ldr	r3, [pc, #116]	@ (8001cb8 <MX_TIM5_Init+0x94>)
 8001c44:	4a1d      	ldr	r2, [pc, #116]	@ (8001cbc <MX_TIM5_Init+0x98>)
 8001c46:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 8001c48:	4b1b      	ldr	r3, [pc, #108]	@ (8001cb8 <MX_TIM5_Init+0x94>)
 8001c4a:	22a9      	movs	r2, #169	@ 0xa9
 8001c4c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c4e:	4b1a      	ldr	r3, [pc, #104]	@ (8001cb8 <MX_TIM5_Init+0x94>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001c54:	4b18      	ldr	r3, [pc, #96]	@ (8001cb8 <MX_TIM5_Init+0x94>)
 8001c56:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001c5a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c5c:	4b16      	ldr	r3, [pc, #88]	@ (8001cb8 <MX_TIM5_Init+0x94>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c62:	4b15      	ldr	r3, [pc, #84]	@ (8001cb8 <MX_TIM5_Init+0x94>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001c68:	4813      	ldr	r0, [pc, #76]	@ (8001cb8 <MX_TIM5_Init+0x94>)
 8001c6a:	f005 fa3f 	bl	80070ec <HAL_TIM_Base_Init>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d001      	beq.n	8001c78 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001c74:	f001 fcba 	bl	80035ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c78:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c7c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001c7e:	f107 0310 	add.w	r3, r7, #16
 8001c82:	4619      	mov	r1, r3
 8001c84:	480c      	ldr	r0, [pc, #48]	@ (8001cb8 <MX_TIM5_Init+0x94>)
 8001c86:	f006 f9c3 	bl	8008010 <HAL_TIM_ConfigClockSource>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001c90:	f001 fcac 	bl	80035ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c94:	2300      	movs	r3, #0
 8001c96:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001c9c:	1d3b      	adds	r3, r7, #4
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	4805      	ldr	r0, [pc, #20]	@ (8001cb8 <MX_TIM5_Init+0x94>)
 8001ca2:	f007 f99b 	bl	8008fdc <HAL_TIMEx_MasterConfigSynchronization>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d001      	beq.n	8001cb0 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001cac:	f001 fc9e 	bl	80035ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001cb0:	bf00      	nop
 8001cb2:	3720      	adds	r7, #32
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	200003d8 	.word	0x200003d8
 8001cbc:	40000c00 	.word	0x40000c00

08001cc0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b084      	sub	sp, #16
 8001cc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cc6:	1d3b      	adds	r3, r7, #4
 8001cc8:	2200      	movs	r2, #0
 8001cca:	601a      	str	r2, [r3, #0]
 8001ccc:	605a      	str	r2, [r3, #4]
 8001cce:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001cd0:	4b15      	ldr	r3, [pc, #84]	@ (8001d28 <MX_TIM6_Init+0x68>)
 8001cd2:	4a16      	ldr	r2, [pc, #88]	@ (8001d2c <MX_TIM6_Init+0x6c>)
 8001cd4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1699;
 8001cd6:	4b14      	ldr	r3, [pc, #80]	@ (8001d28 <MX_TIM6_Init+0x68>)
 8001cd8:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 8001cdc:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cde:	4b12      	ldr	r3, [pc, #72]	@ (8001d28 <MX_TIM6_Init+0x68>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 20000;
 8001ce4:	4b10      	ldr	r3, [pc, #64]	@ (8001d28 <MX_TIM6_Init+0x68>)
 8001ce6:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8001cea:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cec:	4b0e      	ldr	r3, [pc, #56]	@ (8001d28 <MX_TIM6_Init+0x68>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001cf2:	480d      	ldr	r0, [pc, #52]	@ (8001d28 <MX_TIM6_Init+0x68>)
 8001cf4:	f005 f9fa 	bl	80070ec <HAL_TIM_Base_Init>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8001cfe:	f001 fc75 	bl	80035ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d02:	2300      	movs	r3, #0
 8001d04:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d06:	2300      	movs	r3, #0
 8001d08:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001d0a:	1d3b      	adds	r3, r7, #4
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	4806      	ldr	r0, [pc, #24]	@ (8001d28 <MX_TIM6_Init+0x68>)
 8001d10:	f007 f964 	bl	8008fdc <HAL_TIMEx_MasterConfigSynchronization>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8001d1a:	f001 fc67 	bl	80035ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001d1e:	bf00      	nop
 8001d20:	3710      	adds	r7, #16
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	200004a4 	.word	0x200004a4
 8001d2c:	40001000 	.word	0x40001000

08001d30 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001d34:	4b14      	ldr	r3, [pc, #80]	@ (8001d88 <MX_TIM16_Init+0x58>)
 8001d36:	4a15      	ldr	r2, [pc, #84]	@ (8001d8c <MX_TIM16_Init+0x5c>)
 8001d38:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8001d3a:	4b13      	ldr	r3, [pc, #76]	@ (8001d88 <MX_TIM16_Init+0x58>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d40:	4b11      	ldr	r3, [pc, #68]	@ (8001d88 <MX_TIM16_Init+0x58>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8001d46:	4b10      	ldr	r3, [pc, #64]	@ (8001d88 <MX_TIM16_Init+0x58>)
 8001d48:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d4c:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d4e:	4b0e      	ldr	r3, [pc, #56]	@ (8001d88 <MX_TIM16_Init+0x58>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001d54:	4b0c      	ldr	r3, [pc, #48]	@ (8001d88 <MX_TIM16_Init+0x58>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d5a:	4b0b      	ldr	r3, [pc, #44]	@ (8001d88 <MX_TIM16_Init+0x58>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001d60:	4809      	ldr	r0, [pc, #36]	@ (8001d88 <MX_TIM16_Init+0x58>)
 8001d62:	f005 f9c3 	bl	80070ec <HAL_TIM_Base_Init>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d001      	beq.n	8001d70 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8001d6c:	f001 fc3e 	bl	80035ec <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8001d70:	2108      	movs	r1, #8
 8001d72:	4805      	ldr	r0, [pc, #20]	@ (8001d88 <MX_TIM16_Init+0x58>)
 8001d74:	f005 fc86 	bl	8007684 <HAL_TIM_OnePulse_Init>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d001      	beq.n	8001d82 <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 8001d7e:	f001 fc35 	bl	80035ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001d82:	bf00      	nop
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	20000570 	.word	0x20000570
 8001d8c:	40014400 	.word	0x40014400

08001d90 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d94:	4b23      	ldr	r3, [pc, #140]	@ (8001e24 <MX_USART2_UART_Init+0x94>)
 8001d96:	4a24      	ldr	r2, [pc, #144]	@ (8001e28 <MX_USART2_UART_Init+0x98>)
 8001d98:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8001d9a:	4b22      	ldr	r3, [pc, #136]	@ (8001e24 <MX_USART2_UART_Init+0x94>)
 8001d9c:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8001da0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8001da2:	4b20      	ldr	r3, [pc, #128]	@ (8001e24 <MX_USART2_UART_Init+0x94>)
 8001da4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001da8:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001daa:	4b1e      	ldr	r3, [pc, #120]	@ (8001e24 <MX_USART2_UART_Init+0x94>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8001db0:	4b1c      	ldr	r3, [pc, #112]	@ (8001e24 <MX_USART2_UART_Init+0x94>)
 8001db2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001db6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001db8:	4b1a      	ldr	r3, [pc, #104]	@ (8001e24 <MX_USART2_UART_Init+0x94>)
 8001dba:	220c      	movs	r2, #12
 8001dbc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dbe:	4b19      	ldr	r3, [pc, #100]	@ (8001e24 <MX_USART2_UART_Init+0x94>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dc4:	4b17      	ldr	r3, [pc, #92]	@ (8001e24 <MX_USART2_UART_Init+0x94>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001dca:	4b16      	ldr	r3, [pc, #88]	@ (8001e24 <MX_USART2_UART_Init+0x94>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001dd0:	4b14      	ldr	r3, [pc, #80]	@ (8001e24 <MX_USART2_UART_Init+0x94>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001dd6:	4b13      	ldr	r3, [pc, #76]	@ (8001e24 <MX_USART2_UART_Init+0x94>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ddc:	4811      	ldr	r0, [pc, #68]	@ (8001e24 <MX_USART2_UART_Init+0x94>)
 8001dde:	f007 f9e3 	bl	80091a8 <HAL_UART_Init>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d001      	beq.n	8001dec <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8001de8:	f001 fc00 	bl	80035ec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001dec:	2100      	movs	r1, #0
 8001dee:	480d      	ldr	r0, [pc, #52]	@ (8001e24 <MX_USART2_UART_Init+0x94>)
 8001df0:	f008 ff24 	bl	800ac3c <HAL_UARTEx_SetTxFifoThreshold>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 8001dfa:	f001 fbf7 	bl	80035ec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001dfe:	2100      	movs	r1, #0
 8001e00:	4808      	ldr	r0, [pc, #32]	@ (8001e24 <MX_USART2_UART_Init+0x94>)
 8001e02:	f008 ff59 	bl	800acb8 <HAL_UARTEx_SetRxFifoThreshold>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d001      	beq.n	8001e10 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 8001e0c:	f001 fbee 	bl	80035ec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001e10:	4804      	ldr	r0, [pc, #16]	@ (8001e24 <MX_USART2_UART_Init+0x94>)
 8001e12:	f008 feda 	bl	800abca <HAL_UARTEx_DisableFifoMode>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d001      	beq.n	8001e20 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8001e1c:	f001 fbe6 	bl	80035ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e20:	bf00      	nop
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	2000063c 	.word	0x2000063c
 8001e28:	40004400 	.word	0x40004400

08001e2c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001e32:	4b20      	ldr	r3, [pc, #128]	@ (8001eb4 <MX_DMA_Init+0x88>)
 8001e34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e36:	4a1f      	ldr	r2, [pc, #124]	@ (8001eb4 <MX_DMA_Init+0x88>)
 8001e38:	f043 0304 	orr.w	r3, r3, #4
 8001e3c:	6493      	str	r3, [r2, #72]	@ 0x48
 8001e3e:	4b1d      	ldr	r3, [pc, #116]	@ (8001eb4 <MX_DMA_Init+0x88>)
 8001e40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e42:	f003 0304 	and.w	r3, r3, #4
 8001e46:	60fb      	str	r3, [r7, #12]
 8001e48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001e4a:	4b1a      	ldr	r3, [pc, #104]	@ (8001eb4 <MX_DMA_Init+0x88>)
 8001e4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e4e:	4a19      	ldr	r2, [pc, #100]	@ (8001eb4 <MX_DMA_Init+0x88>)
 8001e50:	f043 0302 	orr.w	r3, r3, #2
 8001e54:	6493      	str	r3, [r2, #72]	@ 0x48
 8001e56:	4b17      	ldr	r3, [pc, #92]	@ (8001eb4 <MX_DMA_Init+0x88>)
 8001e58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e5a:	f003 0302 	and.w	r3, r3, #2
 8001e5e:	60bb      	str	r3, [r7, #8]
 8001e60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e62:	4b14      	ldr	r3, [pc, #80]	@ (8001eb4 <MX_DMA_Init+0x88>)
 8001e64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e66:	4a13      	ldr	r2, [pc, #76]	@ (8001eb4 <MX_DMA_Init+0x88>)
 8001e68:	f043 0301 	orr.w	r3, r3, #1
 8001e6c:	6493      	str	r3, [r2, #72]	@ 0x48
 8001e6e:	4b11      	ldr	r3, [pc, #68]	@ (8001eb4 <MX_DMA_Init+0x88>)
 8001e70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e72:	f003 0301 	and.w	r3, r3, #1
 8001e76:	607b      	str	r3, [r7, #4]
 8001e78:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	2100      	movs	r1, #0
 8001e7e:	200b      	movs	r0, #11
 8001e80:	f003 fbd3 	bl	800562a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001e84:	200b      	movs	r0, #11
 8001e86:	f003 fbea 	bl	800565e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	2100      	movs	r1, #0
 8001e8e:	200c      	movs	r0, #12
 8001e90:	f003 fbcb 	bl	800562a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001e94:	200c      	movs	r0, #12
 8001e96:	f003 fbe2 	bl	800565e <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	2100      	movs	r1, #0
 8001e9e:	2038      	movs	r0, #56	@ 0x38
 8001ea0:	f003 fbc3 	bl	800562a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8001ea4:	2038      	movs	r0, #56	@ 0x38
 8001ea6:	f003 fbda 	bl	800565e <HAL_NVIC_EnableIRQ>

}
 8001eaa:	bf00      	nop
 8001eac:	3710      	adds	r7, #16
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	40021000 	.word	0x40021000

08001eb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b08a      	sub	sp, #40	@ 0x28
 8001ebc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ebe:	f107 0314 	add.w	r3, r7, #20
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	601a      	str	r2, [r3, #0]
 8001ec6:	605a      	str	r2, [r3, #4]
 8001ec8:	609a      	str	r2, [r3, #8]
 8001eca:	60da      	str	r2, [r3, #12]
 8001ecc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ece:	4b76      	ldr	r3, [pc, #472]	@ (80020a8 <MX_GPIO_Init+0x1f0>)
 8001ed0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ed2:	4a75      	ldr	r2, [pc, #468]	@ (80020a8 <MX_GPIO_Init+0x1f0>)
 8001ed4:	f043 0304 	orr.w	r3, r3, #4
 8001ed8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001eda:	4b73      	ldr	r3, [pc, #460]	@ (80020a8 <MX_GPIO_Init+0x1f0>)
 8001edc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ede:	f003 0304 	and.w	r3, r3, #4
 8001ee2:	613b      	str	r3, [r7, #16]
 8001ee4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ee6:	4b70      	ldr	r3, [pc, #448]	@ (80020a8 <MX_GPIO_Init+0x1f0>)
 8001ee8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001eea:	4a6f      	ldr	r2, [pc, #444]	@ (80020a8 <MX_GPIO_Init+0x1f0>)
 8001eec:	f043 0320 	orr.w	r3, r3, #32
 8001ef0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ef2:	4b6d      	ldr	r3, [pc, #436]	@ (80020a8 <MX_GPIO_Init+0x1f0>)
 8001ef4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ef6:	f003 0320 	and.w	r3, r3, #32
 8001efa:	60fb      	str	r3, [r7, #12]
 8001efc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001efe:	4b6a      	ldr	r3, [pc, #424]	@ (80020a8 <MX_GPIO_Init+0x1f0>)
 8001f00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f02:	4a69      	ldr	r2, [pc, #420]	@ (80020a8 <MX_GPIO_Init+0x1f0>)
 8001f04:	f043 0301 	orr.w	r3, r3, #1
 8001f08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f0a:	4b67      	ldr	r3, [pc, #412]	@ (80020a8 <MX_GPIO_Init+0x1f0>)
 8001f0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f0e:	f003 0301 	and.w	r3, r3, #1
 8001f12:	60bb      	str	r3, [r7, #8]
 8001f14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f16:	4b64      	ldr	r3, [pc, #400]	@ (80020a8 <MX_GPIO_Init+0x1f0>)
 8001f18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f1a:	4a63      	ldr	r2, [pc, #396]	@ (80020a8 <MX_GPIO_Init+0x1f0>)
 8001f1c:	f043 0302 	orr.w	r3, r3, #2
 8001f20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f22:	4b61      	ldr	r3, [pc, #388]	@ (80020a8 <MX_GPIO_Init+0x1f0>)
 8001f24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f26:	f003 0302 	and.w	r3, r3, #2
 8001f2a:	607b      	str	r3, [r7, #4]
 8001f2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f2e:	4b5e      	ldr	r3, [pc, #376]	@ (80020a8 <MX_GPIO_Init+0x1f0>)
 8001f30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f32:	4a5d      	ldr	r2, [pc, #372]	@ (80020a8 <MX_GPIO_Init+0x1f0>)
 8001f34:	f043 0308 	orr.w	r3, r3, #8
 8001f38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f3a:	4b5b      	ldr	r3, [pc, #364]	@ (80020a8 <MX_GPIO_Init+0x1f0>)
 8001f3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f3e:	f003 0308 	and.w	r3, r3, #8
 8001f42:	603b      	str	r3, [r7, #0]
 8001f44:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7, GPIO_PIN_RESET);
 8001f46:	2200      	movs	r2, #0
 8001f48:	f244 01b0 	movw	r1, #16560	@ 0x40b0
 8001f4c:	4857      	ldr	r0, [pc, #348]	@ (80020ac <MX_GPIO_Init+0x1f4>)
 8001f4e:	f004 f86d 	bl	800602c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 8001f52:	2200      	movs	r2, #0
 8001f54:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8001f58:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f5c:	f004 f866 	bl	800602c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_6, GPIO_PIN_RESET);
 8001f60:	2200      	movs	r2, #0
 8001f62:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 8001f66:	4852      	ldr	r0, [pc, #328]	@ (80020b0 <MX_GPIO_Init+0x1f8>)
 8001f68:	f004 f860 	bl	800602c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_9;
 8001f6c:	f44f 5308 	mov.w	r3, #8704	@ 0x2200
 8001f70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f72:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001f76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f7c:	f107 0314 	add.w	r3, r7, #20
 8001f80:	4619      	mov	r1, r3
 8001f82:	484a      	ldr	r0, [pc, #296]	@ (80020ac <MX_GPIO_Init+0x1f4>)
 8001f84:	f003 feb8 	bl	8005cf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC4 PC5 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8001f88:	f244 03b0 	movw	r3, #16560	@ 0x40b0
 8001f8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f92:	2300      	movs	r3, #0
 8001f94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f96:	2300      	movs	r3, #0
 8001f98:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f9a:	f107 0314 	add.w	r3, r7, #20
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	4842      	ldr	r0, [pc, #264]	@ (80020ac <MX_GPIO_Init+0x1f4>)
 8001fa2:	f003 fea9 	bl	8005cf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA6 PA7 PA8 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8001fa6:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001faa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fac:	2301      	movs	r3, #1
 8001fae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fb8:	f107 0314 	add.w	r3, r7, #20
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001fc2:	f003 fe99 	bl	8005cf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_6;
 8001fc6:	f44f 6388 	mov.w	r3, #1088	@ 0x440
 8001fca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fd8:	f107 0314 	add.w	r3, r7, #20
 8001fdc:	4619      	mov	r1, r3
 8001fde:	4834      	ldr	r0, [pc, #208]	@ (80020b0 <MX_GPIO_Init+0x1f8>)
 8001fe0:	f003 fe8a 	bl	8005cf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001fe4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001fe8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001fea:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001fee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ff4:	f107 0314 	add.w	r3, r7, #20
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ffe:	f003 fe7b 	bl	8005cf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002002:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002006:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002008:	2300      	movs	r3, #0
 800200a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800200c:	2302      	movs	r3, #2
 800200e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002010:	f107 0314 	add.w	r3, r7, #20
 8002014:	4619      	mov	r1, r3
 8002016:	4825      	ldr	r0, [pc, #148]	@ (80020ac <MX_GPIO_Init+0x1f4>)
 8002018:	f003 fe6e 	bl	8005cf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800201c:	2304      	movs	r3, #4
 800201e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002020:	2300      	movs	r3, #0
 8002022:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002024:	2302      	movs	r3, #2
 8002026:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002028:	f107 0314 	add.w	r3, r7, #20
 800202c:	4619      	mov	r1, r3
 800202e:	4821      	ldr	r0, [pc, #132]	@ (80020b4 <MX_GPIO_Init+0x1fc>)
 8002030:	f003 fe62 	bl	8005cf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002034:	2330      	movs	r3, #48	@ 0x30
 8002036:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002038:	2300      	movs	r3, #0
 800203a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800203c:	2301      	movs	r3, #1
 800203e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002040:	f107 0314 	add.w	r3, r7, #20
 8002044:	4619      	mov	r1, r3
 8002046:	481a      	ldr	r0, [pc, #104]	@ (80020b0 <MX_GPIO_Init+0x1f8>)
 8002048:	f003 fe56 	bl	8005cf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800204c:	2380      	movs	r3, #128	@ 0x80
 800204e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002050:	2300      	movs	r3, #0
 8002052:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002054:	2302      	movs	r3, #2
 8002056:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002058:	f107 0314 	add.w	r3, r7, #20
 800205c:	4619      	mov	r1, r3
 800205e:	4814      	ldr	r0, [pc, #80]	@ (80020b0 <MX_GPIO_Init+0x1f8>)
 8002060:	f003 fe4a 	bl	8005cf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002064:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002068:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800206a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800206e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002070:	2300      	movs	r3, #0
 8002072:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002074:	f107 0314 	add.w	r3, r7, #20
 8002078:	4619      	mov	r1, r3
 800207a:	480d      	ldr	r0, [pc, #52]	@ (80020b0 <MX_GPIO_Init+0x1f8>)
 800207c:	f003 fe3c 	bl	8005cf8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002080:	2200      	movs	r2, #0
 8002082:	2100      	movs	r1, #0
 8002084:	2017      	movs	r0, #23
 8002086:	f003 fad0 	bl	800562a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800208a:	2017      	movs	r0, #23
 800208c:	f003 fae7 	bl	800565e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002090:	2200      	movs	r2, #0
 8002092:	2100      	movs	r1, #0
 8002094:	2028      	movs	r0, #40	@ 0x28
 8002096:	f003 fac8 	bl	800562a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800209a:	2028      	movs	r0, #40	@ 0x28
 800209c:	f003 fadf 	bl	800565e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80020a0:	bf00      	nop
 80020a2:	3728      	adds	r7, #40	@ 0x28
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	40021000 	.word	0x40021000
 80020ac:	48000800 	.word	0x48000800
 80020b0:	48000400 	.word	0x48000400
 80020b4:	48000c00 	.word	0x48000c00

080020b8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
//MicroSecondTimer Implement
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020b8:	b5b0      	push	{r4, r5, r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
	if(htim == &htim5)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	4a0c      	ldr	r2, [pc, #48]	@ (80020f4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d108      	bne.n	80020da <HAL_TIM_PeriodElapsedCallback+0x22>
	{
		_micros += UINT32_MAX;
 80020c8:	4b0b      	ldr	r3, [pc, #44]	@ (80020f8 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80020ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ce:	1e54      	subs	r4, r2, #1
 80020d0:	f143 0500 	adc.w	r5, r3, #0
 80020d4:	4b08      	ldr	r3, [pc, #32]	@ (80020f8 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80020d6:	e9c3 4500 	strd	r4, r5, [r3]
	}
//	 Check which version of the timer triggered this callback and toggle LED
	if (htim == &htim6)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4a07      	ldr	r2, [pc, #28]	@ (80020fc <HAL_TIM_PeriodElapsedCallback+0x44>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d103      	bne.n	80020ea <HAL_TIM_PeriodElapsedCallback+0x32>
	{
	    //check2 +=1;
		Heartbeat();
 80020e2:	f001 f9b3 	bl	800344c <Heartbeat>
		Routine();
 80020e6:	f001 f9bf 	bl	8003468 <Routine>
	}
}
 80020ea:	bf00      	nop
 80020ec:	3708      	adds	r7, #8
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bdb0      	pop	{r4, r5, r7, pc}
 80020f2:	bf00      	nop
 80020f4:	200003d8 	.word	0x200003d8
 80020f8:	20000808 	.word	0x20000808
 80020fc:	200004a4 	.word	0x200004a4

08002100 <micros>:

uint64_t micros()
{
 8002100:	b4b0      	push	{r4, r5, r7}
 8002102:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim5)+_micros;
 8002104:	4b09      	ldr	r3, [pc, #36]	@ (800212c <micros+0x2c>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800210a:	2200      	movs	r2, #0
 800210c:	4618      	mov	r0, r3
 800210e:	4611      	mov	r1, r2
 8002110:	4b07      	ldr	r3, [pc, #28]	@ (8002130 <micros+0x30>)
 8002112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002116:	1884      	adds	r4, r0, r2
 8002118:	eb41 0503 	adc.w	r5, r1, r3
 800211c:	4622      	mov	r2, r4
 800211e:	462b      	mov	r3, r5
}
 8002120:	4610      	mov	r0, r2
 8002122:	4619      	mov	r1, r3
 8002124:	46bd      	mov	sp, r7
 8002126:	bcb0      	pop	{r4, r5, r7}
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	200003d8 	.word	0x200003d8
 8002130:	20000808 	.word	0x20000808
 8002134:	00000000 	.word	0x00000000

08002138 <QEIEncoderPosVel_Update>:

void QEIEncoderPosVel_Update()
{
 8002138:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800213c:	b082      	sub	sp, #8
 800213e:	af00      	add	r7, sp, #0
	//collect data
	QEIdata.TimeStamp[NEW] = micros();
 8002140:	f7ff ffde 	bl	8002100 <micros>
 8002144:	4602      	mov	r2, r0
 8002146:	460b      	mov	r3, r1
 8002148:	4971      	ldr	r1, [pc, #452]	@ (8002310 <QEIEncoderPosVel_Update+0x1d8>)
 800214a:	e9c1 2302 	strd	r2, r3, [r1, #8]
	QEIdata.Position[NEW] = __HAL_TIM_GET_COUNTER(&htim2);
 800214e:	4b71      	ldr	r3, [pc, #452]	@ (8002314 <QEIEncoderPosVel_Update+0x1dc>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002154:	4a6e      	ldr	r2, [pc, #440]	@ (8002310 <QEIEncoderPosVel_Update+0x1d8>)
 8002156:	6013      	str	r3, [r2, #0]
	//Postion 1 turn calculation
	QEIdata.QEIPostion_1turn = QEIdata.Position[NEW] % 8192;
 8002158:	4b6d      	ldr	r3, [pc, #436]	@ (8002310 <QEIEncoderPosVel_Update+0x1d8>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002160:	ee07 3a90 	vmov	s15, r3
 8002164:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002168:	4b69      	ldr	r3, [pc, #420]	@ (8002310 <QEIEncoderPosVel_Update+0x1d8>)
 800216a:	edc3 7a06 	vstr	s15, [r3, #24]
	//calculate dx
	int32_t diffPosition = QEIdata.Position[NEW] - QEIdata.Position[OLD];
 800216e:	4b68      	ldr	r3, [pc, #416]	@ (8002310 <QEIEncoderPosVel_Update+0x1d8>)
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	4b67      	ldr	r3, [pc, #412]	@ (8002310 <QEIEncoderPosVel_Update+0x1d8>)
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	607b      	str	r3, [r7, #4]
	//Handle Warp around
	if(diffPosition > UINT32_MAX/2)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2b00      	cmp	r3, #0
 800217e:	da02      	bge.n	8002186 <QEIEncoderPosVel_Update+0x4e>
		diffPosition -=UINT32_MAX;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	3301      	adds	r3, #1
 8002184:	607b      	str	r3, [r7, #4]
	if(diffPosition < -UINT32_MAX/2)
		diffPosition +=UINT32_MAX;
	//calculate dt
	float diffTime = (QEIdata.TimeStamp[NEW]-QEIdata.TimeStamp[OLD]) * 0.000001; //sec
 8002186:	4b62      	ldr	r3, [pc, #392]	@ (8002310 <QEIEncoderPosVel_Update+0x1d8>)
 8002188:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800218c:	4b60      	ldr	r3, [pc, #384]	@ (8002310 <QEIEncoderPosVel_Update+0x1d8>)
 800218e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002192:	ebb0 0a02 	subs.w	sl, r0, r2
 8002196:	eb61 0b03 	sbc.w	fp, r1, r3
 800219a:	4650      	mov	r0, sl
 800219c:	4659      	mov	r1, fp
 800219e:	f7fe f9c1 	bl	8000524 <__aeabi_ul2d>
 80021a2:	a357      	add	r3, pc, #348	@ (adr r3, 8002300 <QEIEncoderPosVel_Update+0x1c8>)
 80021a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021a8:	f7fe f9f2 	bl	8000590 <__aeabi_dmul>
 80021ac:	4602      	mov	r2, r0
 80021ae:	460b      	mov	r3, r1
 80021b0:	4610      	mov	r0, r2
 80021b2:	4619      	mov	r1, r3
 80021b4:	f7fe fcbc 	bl	8000b30 <__aeabi_d2f>
 80021b8:	4603      	mov	r3, r0
 80021ba:	603b      	str	r3, [r7, #0]
	//calculate anglar velocity
	QEIdata.QEIAngularVelocity = diffPosition / diffTime;  //pulse/sec
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	ee07 3a90 	vmov	s15, r3
 80021c2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80021c6:	ed97 7a00 	vldr	s14, [r7]
 80021ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021ce:	4b50      	ldr	r3, [pc, #320]	@ (8002310 <QEIEncoderPosVel_Update+0x1d8>)
 80021d0:	edc3 7a07 	vstr	s15, [r3, #28]

	QEIdata.rad_s = (QEIdata.QEIAngularVelocity*2*3.14)/8192;
 80021d4:	4b4e      	ldr	r3, [pc, #312]	@ (8002310 <QEIEncoderPosVel_Update+0x1d8>)
 80021d6:	edd3 7a07 	vldr	s15, [r3, #28]
 80021da:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80021de:	ee17 0a90 	vmov	r0, s15
 80021e2:	f7fe f97d 	bl	80004e0 <__aeabi_f2d>
 80021e6:	a348      	add	r3, pc, #288	@ (adr r3, 8002308 <QEIEncoderPosVel_Update+0x1d0>)
 80021e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ec:	f7fe f9d0 	bl	8000590 <__aeabi_dmul>
 80021f0:	4602      	mov	r2, r0
 80021f2:	460b      	mov	r3, r1
 80021f4:	4610      	mov	r0, r2
 80021f6:	4619      	mov	r1, r3
 80021f8:	f04f 0200 	mov.w	r2, #0
 80021fc:	4b46      	ldr	r3, [pc, #280]	@ (8002318 <QEIEncoderPosVel_Update+0x1e0>)
 80021fe:	f7fe faf1 	bl	80007e4 <__aeabi_ddiv>
 8002202:	4602      	mov	r2, r0
 8002204:	460b      	mov	r3, r1
 8002206:	4610      	mov	r0, r2
 8002208:	4619      	mov	r1, r3
 800220a:	f7fe fc91 	bl	8000b30 <__aeabi_d2f>
 800220e:	4603      	mov	r3, r0
 8002210:	4a3f      	ldr	r2, [pc, #252]	@ (8002310 <QEIEncoderPosVel_Update+0x1d8>)
 8002212:	6213      	str	r3, [r2, #32]
	QEIdata.rpm = (QEIdata.QEIAngularVelocity*60)/8192;
 8002214:	4b3e      	ldr	r3, [pc, #248]	@ (8002310 <QEIEncoderPosVel_Update+0x1d8>)
 8002216:	edd3 7a07 	vldr	s15, [r3, #28]
 800221a:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 800231c <QEIEncoderPosVel_Update+0x1e4>
 800221e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002222:	eddf 6a3f 	vldr	s13, [pc, #252]	@ 8002320 <QEIEncoderPosVel_Update+0x1e8>
 8002226:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800222a:	4b39      	ldr	r3, [pc, #228]	@ (8002310 <QEIEncoderPosVel_Update+0x1d8>)
 800222c:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	QEIdata.linearVel = (QEIdata.QEIAngularVelocity*10)/8192; //velocity (mm/s)
 8002230:	4b37      	ldr	r3, [pc, #220]	@ (8002310 <QEIEncoderPosVel_Update+0x1d8>)
 8002232:	edd3 7a07 	vldr	s15, [r3, #28]
 8002236:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800223a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800223e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002320 <QEIEncoderPosVel_Update+0x1e8>
 8002242:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002246:	4b32      	ldr	r3, [pc, #200]	@ (8002310 <QEIEncoderPosVel_Update+0x1d8>)
 8002248:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	QEIdata.Velocity[NEW] = QEIdata.linearVel;
 800224c:	4b30      	ldr	r3, [pc, #192]	@ (8002310 <QEIEncoderPosVel_Update+0x1d8>)
 800224e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002250:	4a2f      	ldr	r2, [pc, #188]	@ (8002310 <QEIEncoderPosVel_Update+0x1d8>)
 8002252:	6313      	str	r3, [r2, #48]	@ 0x30
	QEIdata.linearAcc = (QEIdata.Velocity[NEW]-QEIdata.Velocity[OLD])/diffTime;
 8002254:	4b2e      	ldr	r3, [pc, #184]	@ (8002310 <QEIEncoderPosVel_Update+0x1d8>)
 8002256:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800225a:	4b2d      	ldr	r3, [pc, #180]	@ (8002310 <QEIEncoderPosVel_Update+0x1d8>)
 800225c:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8002260:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002264:	ed97 7a00 	vldr	s14, [r7]
 8002268:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800226c:	4b28      	ldr	r3, [pc, #160]	@ (8002310 <QEIEncoderPosVel_Update+0x1d8>)
 800226e:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38


	if(QEIdata.Position[NEW] < 2147483648){
 8002272:	4b27      	ldr	r3, [pc, #156]	@ (8002310 <QEIEncoderPosVel_Update+0x1d8>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	2b00      	cmp	r3, #0
 8002278:	db11      	blt.n	800229e <QEIEncoderPosVel_Update+0x166>
		QEIdata.linearPos = ((float)QEIdata.Position[NEW]*10)/8192; //position (mm)
 800227a:	4b25      	ldr	r3, [pc, #148]	@ (8002310 <QEIEncoderPosVel_Update+0x1d8>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	ee07 3a90 	vmov	s15, r3
 8002282:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002286:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800228a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800228e:	eddf 6a24 	vldr	s13, [pc, #144]	@ 8002320 <QEIEncoderPosVel_Update+0x1e8>
 8002292:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002296:	4b1e      	ldr	r3, [pc, #120]	@ (8002310 <QEIEncoderPosVel_Update+0x1d8>)
 8002298:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
 800229c:	e01c      	b.n	80022d8 <QEIEncoderPosVel_Update+0x1a0>
	}
	else{
		QEIdata.linearPos = -((float)(4294967295 - QEIdata.Position[NEW])*10)/8192;
 800229e:	4b1c      	ldr	r3, [pc, #112]	@ (8002310 <QEIEncoderPosVel_Update+0x1d8>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	2200      	movs	r2, #0
 80022a4:	461c      	mov	r4, r3
 80022a6:	4615      	mov	r5, r2
 80022a8:	2300      	movs	r3, #0
 80022aa:	f1d4 38ff 	rsbs	r8, r4, #4294967295	@ 0xffffffff
 80022ae:	eb63 0905 	sbc.w	r9, r3, r5
 80022b2:	4640      	mov	r0, r8
 80022b4:	4649      	mov	r1, r9
 80022b6:	f7fe fd5b 	bl	8000d70 <__aeabi_l2f>
 80022ba:	ee07 0a10 	vmov	s14, r0
 80022be:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 80022c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022c6:	eeb1 7a67 	vneg.f32	s14, s15
 80022ca:	eddf 6a15 	vldr	s13, [pc, #84]	@ 8002320 <QEIEncoderPosVel_Update+0x1e8>
 80022ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80022d2:	4b0f      	ldr	r3, [pc, #60]	@ (8002310 <QEIEncoderPosVel_Update+0x1d8>)
 80022d4:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
	}

	//store value for next loop
	QEIdata.Position[OLD] = QEIdata.Position[NEW];
 80022d8:	4b0d      	ldr	r3, [pc, #52]	@ (8002310 <QEIEncoderPosVel_Update+0x1d8>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a0c      	ldr	r2, [pc, #48]	@ (8002310 <QEIEncoderPosVel_Update+0x1d8>)
 80022de:	6053      	str	r3, [r2, #4]
	QEIdata.TimeStamp[OLD]=QEIdata.TimeStamp[NEW];
 80022e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002310 <QEIEncoderPosVel_Update+0x1d8>)
 80022e2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80022e6:	490a      	ldr	r1, [pc, #40]	@ (8002310 <QEIEncoderPosVel_Update+0x1d8>)
 80022e8:	e9c1 2304 	strd	r2, r3, [r1, #16]
	QEIdata.Velocity[OLD] = QEIdata.Velocity[NEW];
 80022ec:	4b08      	ldr	r3, [pc, #32]	@ (8002310 <QEIEncoderPosVel_Update+0x1d8>)
 80022ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022f0:	4a07      	ldr	r2, [pc, #28]	@ (8002310 <QEIEncoderPosVel_Update+0x1d8>)
 80022f2:	6353      	str	r3, [r2, #52]	@ 0x34
}
 80022f4:	bf00      	nop
 80022f6:	3708      	adds	r7, #8
 80022f8:	46bd      	mov	sp, r7
 80022fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80022fe:	bf00      	nop
 8002300:	a0b5ed8d 	.word	0xa0b5ed8d
 8002304:	3eb0c6f7 	.word	0x3eb0c6f7
 8002308:	51eb851f 	.word	0x51eb851f
 800230c:	40091eb8 	.word	0x40091eb8
 8002310:	200007c8 	.word	0x200007c8
 8002314:	20000174 	.word	0x20000174
 8002318:	40c00000 	.word	0x40c00000
 800231c:	42700000 	.word	0x42700000
 8002320:	46000000 	.word	0x46000000

08002324 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	4603      	mov	r3, r0
 800232c:	80fb      	strh	r3, [r7, #6]
//		}
//		else if(mode == 2){
//			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
//		}
//	}
	if(GPIO_Pin == GPIO_PIN_8){ //check top sensor
 800232e:	88fb      	ldrh	r3, [r7, #6]
 8002330:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002334:	d102      	bne.n	800233c <HAL_GPIO_EXTI_Callback+0x18>
		S_top = 1;
 8002336:	4b0f      	ldr	r3, [pc, #60]	@ (8002374 <HAL_GPIO_EXTI_Callback+0x50>)
 8002338:	2201      	movs	r2, #1
 800233a:	601a      	str	r2, [r3, #0]
		//Vin = -2;
//		DriveMotor();
	}
	if(GPIO_Pin == GPIO_PIN_9){ //check down sensor
 800233c:	88fb      	ldrh	r3, [r7, #6]
 800233e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002342:	d102      	bne.n	800234a <HAL_GPIO_EXTI_Callback+0x26>
		S_down = 1;
 8002344:	4b0c      	ldr	r3, [pc, #48]	@ (8002378 <HAL_GPIO_EXTI_Callback+0x54>)
 8002346:	2201      	movs	r2, #1
 8002348:	601a      	str	r2, [r3, #0]
		//Vin = 2;
//		DriveMotor();
	}
	if(GPIO_Pin == GPIO_PIN_10){ //check emergency
 800234a:	88fb      	ldrh	r3, [r7, #6]
 800234c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002350:	d10a      	bne.n	8002368 <HAL_GPIO_EXTI_Callback+0x44>
		mode = 4; //Emergency mode
 8002352:	4b0a      	ldr	r3, [pc, #40]	@ (800237c <HAL_GPIO_EXTI_Callback+0x58>)
 8002354:	2204      	movs	r2, #4
 8002356:	701a      	strb	r2, [r3, #0]
		Vin = 0;
 8002358:	4b09      	ldr	r3, [pc, #36]	@ (8002380 <HAL_GPIO_EXTI_Callback+0x5c>)
 800235a:	f04f 0200 	mov.w	r2, #0
 800235e:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8002360:	4b08      	ldr	r3, [pc, #32]	@ (8002384 <HAL_GPIO_EXTI_Callback+0x60>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2200      	movs	r2, #0
 8002366:	635a      	str	r2, [r3, #52]	@ 0x34
	}
}
 8002368:	bf00      	nop
 800236a:	370c      	adds	r7, #12
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr
 8002374:	200008dc 	.word	0x200008dc
 8002378:	200008e0 	.word	0x200008e0
 800237c:	20000000 	.word	0x20000000
 8002380:	20000820 	.word	0x20000820
 8002384:	20000240 	.word	0x20000240

08002388 <checkStartMoving>:

//-----------------------------------Trajectory------------------------------------------//
void checkStartMoving(){
 8002388:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800238c:	b082      	sub	sp, #8
 800238e:	af00      	add	r7, sp, #0
	if(q_f != q_f_old){
 8002390:	4b9d      	ldr	r3, [pc, #628]	@ (8002608 <checkStartMoving+0x280>)
 8002392:	ed93 7a00 	vldr	s14, [r3]
 8002396:	4b9d      	ldr	r3, [pc, #628]	@ (800260c <checkStartMoving+0x284>)
 8002398:	edd3 7a00 	vldr	s15, [r3]
 800239c:	eeb4 7a67 	vcmp.f32	s14, s15
 80023a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023a4:	f000 8201 	beq.w	80027aa <checkStartMoving+0x422>
		q_i = q_f_old;   //Define q_i
 80023a8:	4b98      	ldr	r3, [pc, #608]	@ (800260c <checkStartMoving+0x284>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a98      	ldr	r2, [pc, #608]	@ (8002610 <checkStartMoving+0x288>)
 80023ae:	6013      	str	r3, [r2, #0]
		delta_q = q_f - q_i;
 80023b0:	4b95      	ldr	r3, [pc, #596]	@ (8002608 <checkStartMoving+0x280>)
 80023b2:	ed93 7a00 	vldr	s14, [r3]
 80023b6:	4b96      	ldr	r3, [pc, #600]	@ (8002610 <checkStartMoving+0x288>)
 80023b8:	edd3 7a00 	vldr	s15, [r3]
 80023bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023c0:	4b94      	ldr	r3, [pc, #592]	@ (8002614 <checkStartMoving+0x28c>)
 80023c2:	edc3 7a00 	vstr	s15, [r3]
		if(delta_q < 0){
 80023c6:	4b93      	ldr	r3, [pc, #588]	@ (8002614 <checkStartMoving+0x28c>)
 80023c8:	edd3 7a00 	vldr	s15, [r3]
 80023cc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80023d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023d4:	d504      	bpl.n	80023e0 <checkStartMoving+0x58>
			dir = -1;
 80023d6:	4b90      	ldr	r3, [pc, #576]	@ (8002618 <checkStartMoving+0x290>)
 80023d8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80023dc:	601a      	str	r2, [r3, #0]
 80023de:	e002      	b.n	80023e6 <checkStartMoving+0x5e>
		}
		else{
			dir = 1;
 80023e0:	4b8d      	ldr	r3, [pc, #564]	@ (8002618 <checkStartMoving+0x290>)
 80023e2:	2201      	movs	r2, #1
 80023e4:	601a      	str	r2, [r3, #0]
		}

		float q_check = fabs(q_d_i + q_2d_max*sqrt(fabs(delta_q)/q_2d_max)*dir);
 80023e6:	4b8d      	ldr	r3, [pc, #564]	@ (800261c <checkStartMoving+0x294>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4618      	mov	r0, r3
 80023ec:	f7fe f878 	bl	80004e0 <__aeabi_f2d>
 80023f0:	4604      	mov	r4, r0
 80023f2:	460d      	mov	r5, r1
 80023f4:	4b8a      	ldr	r3, [pc, #552]	@ (8002620 <checkStartMoving+0x298>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4618      	mov	r0, r3
 80023fa:	f7fe f871 	bl	80004e0 <__aeabi_f2d>
 80023fe:	4680      	mov	r8, r0
 8002400:	4689      	mov	r9, r1
 8002402:	4b84      	ldr	r3, [pc, #528]	@ (8002614 <checkStartMoving+0x28c>)
 8002404:	edd3 7a00 	vldr	s15, [r3]
 8002408:	eef0 7ae7 	vabs.f32	s15, s15
 800240c:	ee17 0a90 	vmov	r0, s15
 8002410:	f7fe f866 	bl	80004e0 <__aeabi_f2d>
 8002414:	4682      	mov	sl, r0
 8002416:	468b      	mov	fp, r1
 8002418:	4b81      	ldr	r3, [pc, #516]	@ (8002620 <checkStartMoving+0x298>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4618      	mov	r0, r3
 800241e:	f7fe f85f 	bl	80004e0 <__aeabi_f2d>
 8002422:	4602      	mov	r2, r0
 8002424:	460b      	mov	r3, r1
 8002426:	4650      	mov	r0, sl
 8002428:	4659      	mov	r1, fp
 800242a:	f7fe f9db 	bl	80007e4 <__aeabi_ddiv>
 800242e:	4602      	mov	r2, r0
 8002430:	460b      	mov	r3, r1
 8002432:	ec43 2b17 	vmov	d7, r2, r3
 8002436:	eeb0 0a47 	vmov.f32	s0, s14
 800243a:	eef0 0a67 	vmov.f32	s1, s15
 800243e:	f008 fd2f 	bl	800aea0 <sqrt>
 8002442:	ec53 2b10 	vmov	r2, r3, d0
 8002446:	4640      	mov	r0, r8
 8002448:	4649      	mov	r1, r9
 800244a:	f7fe f8a1 	bl	8000590 <__aeabi_dmul>
 800244e:	4602      	mov	r2, r0
 8002450:	460b      	mov	r3, r1
 8002452:	4690      	mov	r8, r2
 8002454:	4699      	mov	r9, r3
 8002456:	4b70      	ldr	r3, [pc, #448]	@ (8002618 <checkStartMoving+0x290>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4618      	mov	r0, r3
 800245c:	f7fe f82e 	bl	80004bc <__aeabi_i2d>
 8002460:	4602      	mov	r2, r0
 8002462:	460b      	mov	r3, r1
 8002464:	4640      	mov	r0, r8
 8002466:	4649      	mov	r1, r9
 8002468:	f7fe f892 	bl	8000590 <__aeabi_dmul>
 800246c:	4602      	mov	r2, r0
 800246e:	460b      	mov	r3, r1
 8002470:	4620      	mov	r0, r4
 8002472:	4629      	mov	r1, r5
 8002474:	f7fd fed6 	bl	8000224 <__adddf3>
 8002478:	4602      	mov	r2, r0
 800247a:	460b      	mov	r3, r1
 800247c:	4610      	mov	r0, r2
 800247e:	4619      	mov	r1, r3
 8002480:	f7fe fb56 	bl	8000b30 <__aeabi_d2f>
 8002484:	ee07 0a90 	vmov	s15, r0
 8002488:	eef0 7ae7 	vabs.f32	s15, s15
 800248c:	edc7 7a01 	vstr	s15, [r7, #4]

		if(q_check >= q_d_max){ //Accelerate to maximum speed
 8002490:	4b64      	ldr	r3, [pc, #400]	@ (8002624 <checkStartMoving+0x29c>)
 8002492:	edd3 7a00 	vldr	s15, [r3]
 8002496:	ed97 7a01 	vldr	s14, [r7, #4]
 800249a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800249e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024a2:	f2c0 80cf 	blt.w	8002644 <checkStartMoving+0x2bc>
			calmode = 1;
 80024a6:	4b60      	ldr	r3, [pc, #384]	@ (8002628 <checkStartMoving+0x2a0>)
 80024a8:	2201      	movs	r2, #1
 80024aa:	701a      	strb	r2, [r3, #0]
			t_acc = fabs((q_d_max-q_d_i)/q_2d_max);
 80024ac:	4b5d      	ldr	r3, [pc, #372]	@ (8002624 <checkStartMoving+0x29c>)
 80024ae:	ed93 7a00 	vldr	s14, [r3]
 80024b2:	4b5a      	ldr	r3, [pc, #360]	@ (800261c <checkStartMoving+0x294>)
 80024b4:	edd3 7a00 	vldr	s15, [r3]
 80024b8:	ee77 6a67 	vsub.f32	s13, s14, s15
 80024bc:	4b58      	ldr	r3, [pc, #352]	@ (8002620 <checkStartMoving+0x298>)
 80024be:	ed93 7a00 	vldr	s14, [r3]
 80024c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024c6:	eef0 7ae7 	vabs.f32	s15, s15
 80024ca:	4b58      	ldr	r3, [pc, #352]	@ (800262c <checkStartMoving+0x2a4>)
 80024cc:	edc3 7a00 	vstr	s15, [r3]
			q_acc = q_d_i*t_acc*dir + 0.5*q_2d_max*t_acc*t_acc*dir;
 80024d0:	4b52      	ldr	r3, [pc, #328]	@ (800261c <checkStartMoving+0x294>)
 80024d2:	ed93 7a00 	vldr	s14, [r3]
 80024d6:	4b55      	ldr	r3, [pc, #340]	@ (800262c <checkStartMoving+0x2a4>)
 80024d8:	edd3 7a00 	vldr	s15, [r3]
 80024dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024e0:	4b4d      	ldr	r3, [pc, #308]	@ (8002618 <checkStartMoving+0x290>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	ee07 3a90 	vmov	s15, r3
 80024e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024f0:	ee17 0a90 	vmov	r0, s15
 80024f4:	f7fd fff4 	bl	80004e0 <__aeabi_f2d>
 80024f8:	4604      	mov	r4, r0
 80024fa:	460d      	mov	r5, r1
 80024fc:	4b48      	ldr	r3, [pc, #288]	@ (8002620 <checkStartMoving+0x298>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4618      	mov	r0, r3
 8002502:	f7fd ffed 	bl	80004e0 <__aeabi_f2d>
 8002506:	f04f 0200 	mov.w	r2, #0
 800250a:	4b49      	ldr	r3, [pc, #292]	@ (8002630 <checkStartMoving+0x2a8>)
 800250c:	f7fe f840 	bl	8000590 <__aeabi_dmul>
 8002510:	4602      	mov	r2, r0
 8002512:	460b      	mov	r3, r1
 8002514:	4690      	mov	r8, r2
 8002516:	4699      	mov	r9, r3
 8002518:	4b44      	ldr	r3, [pc, #272]	@ (800262c <checkStartMoving+0x2a4>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4618      	mov	r0, r3
 800251e:	f7fd ffdf 	bl	80004e0 <__aeabi_f2d>
 8002522:	4602      	mov	r2, r0
 8002524:	460b      	mov	r3, r1
 8002526:	4640      	mov	r0, r8
 8002528:	4649      	mov	r1, r9
 800252a:	f7fe f831 	bl	8000590 <__aeabi_dmul>
 800252e:	4602      	mov	r2, r0
 8002530:	460b      	mov	r3, r1
 8002532:	4690      	mov	r8, r2
 8002534:	4699      	mov	r9, r3
 8002536:	4b3d      	ldr	r3, [pc, #244]	@ (800262c <checkStartMoving+0x2a4>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4618      	mov	r0, r3
 800253c:	f7fd ffd0 	bl	80004e0 <__aeabi_f2d>
 8002540:	4602      	mov	r2, r0
 8002542:	460b      	mov	r3, r1
 8002544:	4640      	mov	r0, r8
 8002546:	4649      	mov	r1, r9
 8002548:	f7fe f822 	bl	8000590 <__aeabi_dmul>
 800254c:	4602      	mov	r2, r0
 800254e:	460b      	mov	r3, r1
 8002550:	4690      	mov	r8, r2
 8002552:	4699      	mov	r9, r3
 8002554:	4b30      	ldr	r3, [pc, #192]	@ (8002618 <checkStartMoving+0x290>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4618      	mov	r0, r3
 800255a:	f7fd ffaf 	bl	80004bc <__aeabi_i2d>
 800255e:	4602      	mov	r2, r0
 8002560:	460b      	mov	r3, r1
 8002562:	4640      	mov	r0, r8
 8002564:	4649      	mov	r1, r9
 8002566:	f7fe f813 	bl	8000590 <__aeabi_dmul>
 800256a:	4602      	mov	r2, r0
 800256c:	460b      	mov	r3, r1
 800256e:	4620      	mov	r0, r4
 8002570:	4629      	mov	r1, r5
 8002572:	f7fd fe57 	bl	8000224 <__adddf3>
 8002576:	4602      	mov	r2, r0
 8002578:	460b      	mov	r3, r1
 800257a:	4610      	mov	r0, r2
 800257c:	4619      	mov	r1, r3
 800257e:	f7fe fad7 	bl	8000b30 <__aeabi_d2f>
 8002582:	4603      	mov	r3, r0
 8002584:	4a2b      	ldr	r2, [pc, #172]	@ (8002634 <checkStartMoving+0x2ac>)
 8002586:	6013      	str	r3, [r2, #0]
			t_const = fabs((q_f-q_i-2*q_acc)/q_d_max);
 8002588:	4b1f      	ldr	r3, [pc, #124]	@ (8002608 <checkStartMoving+0x280>)
 800258a:	ed93 7a00 	vldr	s14, [r3]
 800258e:	4b20      	ldr	r3, [pc, #128]	@ (8002610 <checkStartMoving+0x288>)
 8002590:	edd3 7a00 	vldr	s15, [r3]
 8002594:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002598:	4b26      	ldr	r3, [pc, #152]	@ (8002634 <checkStartMoving+0x2ac>)
 800259a:	edd3 7a00 	vldr	s15, [r3]
 800259e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80025a2:	ee77 6a67 	vsub.f32	s13, s14, s15
 80025a6:	4b1f      	ldr	r3, [pc, #124]	@ (8002624 <checkStartMoving+0x29c>)
 80025a8:	ed93 7a00 	vldr	s14, [r3]
 80025ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025b0:	eef0 7ae7 	vabs.f32	s15, s15
 80025b4:	4b20      	ldr	r3, [pc, #128]	@ (8002638 <checkStartMoving+0x2b0>)
 80025b6:	edc3 7a00 	vstr	s15, [r3]
			q_const = q_acc + q_d_max*t_const*dir;
 80025ba:	4b1a      	ldr	r3, [pc, #104]	@ (8002624 <checkStartMoving+0x29c>)
 80025bc:	ed93 7a00 	vldr	s14, [r3]
 80025c0:	4b1d      	ldr	r3, [pc, #116]	@ (8002638 <checkStartMoving+0x2b0>)
 80025c2:	edd3 7a00 	vldr	s15, [r3]
 80025c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025ca:	4b13      	ldr	r3, [pc, #76]	@ (8002618 <checkStartMoving+0x290>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	ee07 3a90 	vmov	s15, r3
 80025d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025da:	4b16      	ldr	r3, [pc, #88]	@ (8002634 <checkStartMoving+0x2ac>)
 80025dc:	edd3 7a00 	vldr	s15, [r3]
 80025e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025e4:	4b15      	ldr	r3, [pc, #84]	@ (800263c <checkStartMoving+0x2b4>)
 80025e6:	edc3 7a00 	vstr	s15, [r3]
			total_t = 2*t_acc + t_const;
 80025ea:	4b10      	ldr	r3, [pc, #64]	@ (800262c <checkStartMoving+0x2a4>)
 80025ec:	edd3 7a00 	vldr	s15, [r3]
 80025f0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80025f4:	4b10      	ldr	r3, [pc, #64]	@ (8002638 <checkStartMoving+0x2b0>)
 80025f6:	edd3 7a00 	vldr	s15, [r3]
 80025fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025fe:	4b10      	ldr	r3, [pc, #64]	@ (8002640 <checkStartMoving+0x2b8>)
 8002600:	edc3 7a00 	vstr	s15, [r3]
 8002604:	e0c6      	b.n	8002794 <checkStartMoving+0x40c>
 8002606:	bf00      	nop
 8002608:	20000828 	.word	0x20000828
 800260c:	20000840 	.word	0x20000840
 8002610:	2000082c 	.word	0x2000082c
 8002614:	20000830 	.word	0x20000830
 8002618:	20000014 	.word	0x20000014
 800261c:	20000824 	.word	0x20000824
 8002620:	2000000c 	.word	0x2000000c
 8002624:	20000008 	.word	0x20000008
 8002628:	20000010 	.word	0x20000010
 800262c:	20000844 	.word	0x20000844
 8002630:	3fe00000 	.word	0x3fe00000
 8002634:	20000848 	.word	0x20000848
 8002638:	2000084c 	.word	0x2000084c
 800263c:	20000850 	.word	0x20000850
 8002640:	20000864 	.word	0x20000864
		}
		else{ //Accelerating does not reach maximum speed
			calmode = 2;
 8002644:	4b5b      	ldr	r3, [pc, #364]	@ (80027b4 <checkStartMoving+0x42c>)
 8002646:	2202      	movs	r2, #2
 8002648:	701a      	strb	r2, [r3, #0]
			t_acc = sqrt(fabs(delta_q)/q_2d_max);
 800264a:	4b5b      	ldr	r3, [pc, #364]	@ (80027b8 <checkStartMoving+0x430>)
 800264c:	edd3 7a00 	vldr	s15, [r3]
 8002650:	eef0 7ae7 	vabs.f32	s15, s15
 8002654:	ee17 0a90 	vmov	r0, s15
 8002658:	f7fd ff42 	bl	80004e0 <__aeabi_f2d>
 800265c:	4604      	mov	r4, r0
 800265e:	460d      	mov	r5, r1
 8002660:	4b56      	ldr	r3, [pc, #344]	@ (80027bc <checkStartMoving+0x434>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4618      	mov	r0, r3
 8002666:	f7fd ff3b 	bl	80004e0 <__aeabi_f2d>
 800266a:	4602      	mov	r2, r0
 800266c:	460b      	mov	r3, r1
 800266e:	4620      	mov	r0, r4
 8002670:	4629      	mov	r1, r5
 8002672:	f7fe f8b7 	bl	80007e4 <__aeabi_ddiv>
 8002676:	4602      	mov	r2, r0
 8002678:	460b      	mov	r3, r1
 800267a:	ec43 2b17 	vmov	d7, r2, r3
 800267e:	eeb0 0a47 	vmov.f32	s0, s14
 8002682:	eef0 0a67 	vmov.f32	s1, s15
 8002686:	f008 fc0b 	bl	800aea0 <sqrt>
 800268a:	ec53 2b10 	vmov	r2, r3, d0
 800268e:	4610      	mov	r0, r2
 8002690:	4619      	mov	r1, r3
 8002692:	f7fe fa4d 	bl	8000b30 <__aeabi_d2f>
 8002696:	4603      	mov	r3, r0
 8002698:	4a49      	ldr	r2, [pc, #292]	@ (80027c0 <checkStartMoving+0x438>)
 800269a:	6013      	str	r3, [r2, #0]
			q_acc = q_d_i*t_acc*dir + 0.5*q_2d_max*t_acc*t_acc*dir;
 800269c:	4b49      	ldr	r3, [pc, #292]	@ (80027c4 <checkStartMoving+0x43c>)
 800269e:	ed93 7a00 	vldr	s14, [r3]
 80026a2:	4b47      	ldr	r3, [pc, #284]	@ (80027c0 <checkStartMoving+0x438>)
 80026a4:	edd3 7a00 	vldr	s15, [r3]
 80026a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026ac:	4b46      	ldr	r3, [pc, #280]	@ (80027c8 <checkStartMoving+0x440>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	ee07 3a90 	vmov	s15, r3
 80026b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026bc:	ee17 0a90 	vmov	r0, s15
 80026c0:	f7fd ff0e 	bl	80004e0 <__aeabi_f2d>
 80026c4:	4604      	mov	r4, r0
 80026c6:	460d      	mov	r5, r1
 80026c8:	4b3c      	ldr	r3, [pc, #240]	@ (80027bc <checkStartMoving+0x434>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4618      	mov	r0, r3
 80026ce:	f7fd ff07 	bl	80004e0 <__aeabi_f2d>
 80026d2:	f04f 0200 	mov.w	r2, #0
 80026d6:	4b3d      	ldr	r3, [pc, #244]	@ (80027cc <checkStartMoving+0x444>)
 80026d8:	f7fd ff5a 	bl	8000590 <__aeabi_dmul>
 80026dc:	4602      	mov	r2, r0
 80026de:	460b      	mov	r3, r1
 80026e0:	4690      	mov	r8, r2
 80026e2:	4699      	mov	r9, r3
 80026e4:	4b36      	ldr	r3, [pc, #216]	@ (80027c0 <checkStartMoving+0x438>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4618      	mov	r0, r3
 80026ea:	f7fd fef9 	bl	80004e0 <__aeabi_f2d>
 80026ee:	4602      	mov	r2, r0
 80026f0:	460b      	mov	r3, r1
 80026f2:	4640      	mov	r0, r8
 80026f4:	4649      	mov	r1, r9
 80026f6:	f7fd ff4b 	bl	8000590 <__aeabi_dmul>
 80026fa:	4602      	mov	r2, r0
 80026fc:	460b      	mov	r3, r1
 80026fe:	4690      	mov	r8, r2
 8002700:	4699      	mov	r9, r3
 8002702:	4b2f      	ldr	r3, [pc, #188]	@ (80027c0 <checkStartMoving+0x438>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4618      	mov	r0, r3
 8002708:	f7fd feea 	bl	80004e0 <__aeabi_f2d>
 800270c:	4602      	mov	r2, r0
 800270e:	460b      	mov	r3, r1
 8002710:	4640      	mov	r0, r8
 8002712:	4649      	mov	r1, r9
 8002714:	f7fd ff3c 	bl	8000590 <__aeabi_dmul>
 8002718:	4602      	mov	r2, r0
 800271a:	460b      	mov	r3, r1
 800271c:	4690      	mov	r8, r2
 800271e:	4699      	mov	r9, r3
 8002720:	4b29      	ldr	r3, [pc, #164]	@ (80027c8 <checkStartMoving+0x440>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4618      	mov	r0, r3
 8002726:	f7fd fec9 	bl	80004bc <__aeabi_i2d>
 800272a:	4602      	mov	r2, r0
 800272c:	460b      	mov	r3, r1
 800272e:	4640      	mov	r0, r8
 8002730:	4649      	mov	r1, r9
 8002732:	f7fd ff2d 	bl	8000590 <__aeabi_dmul>
 8002736:	4602      	mov	r2, r0
 8002738:	460b      	mov	r3, r1
 800273a:	4620      	mov	r0, r4
 800273c:	4629      	mov	r1, r5
 800273e:	f7fd fd71 	bl	8000224 <__adddf3>
 8002742:	4602      	mov	r2, r0
 8002744:	460b      	mov	r3, r1
 8002746:	4610      	mov	r0, r2
 8002748:	4619      	mov	r1, r3
 800274a:	f7fe f9f1 	bl	8000b30 <__aeabi_d2f>
 800274e:	4603      	mov	r3, r0
 8002750:	4a1f      	ldr	r2, [pc, #124]	@ (80027d0 <checkStartMoving+0x448>)
 8002752:	6013      	str	r3, [r2, #0]
			q_d_acc = q_d_i + q_2d_max*t_acc*dir;
 8002754:	4b19      	ldr	r3, [pc, #100]	@ (80027bc <checkStartMoving+0x434>)
 8002756:	ed93 7a00 	vldr	s14, [r3]
 800275a:	4b19      	ldr	r3, [pc, #100]	@ (80027c0 <checkStartMoving+0x438>)
 800275c:	edd3 7a00 	vldr	s15, [r3]
 8002760:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002764:	4b18      	ldr	r3, [pc, #96]	@ (80027c8 <checkStartMoving+0x440>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	ee07 3a90 	vmov	s15, r3
 800276c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002770:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002774:	4b13      	ldr	r3, [pc, #76]	@ (80027c4 <checkStartMoving+0x43c>)
 8002776:	edd3 7a00 	vldr	s15, [r3]
 800277a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800277e:	4b15      	ldr	r3, [pc, #84]	@ (80027d4 <checkStartMoving+0x44c>)
 8002780:	edc3 7a00 	vstr	s15, [r3]
			total_t = 2*t_acc;
 8002784:	4b0e      	ldr	r3, [pc, #56]	@ (80027c0 <checkStartMoving+0x438>)
 8002786:	edd3 7a00 	vldr	s15, [r3]
 800278a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800278e:	4b12      	ldr	r3, [pc, #72]	@ (80027d8 <checkStartMoving+0x450>)
 8002790:	edc3 7a00 	vstr	s15, [r3]
		}
		T_start = micros();
 8002794:	f7ff fcb4 	bl	8002100 <micros>
 8002798:	4602      	mov	r2, r0
 800279a:	460b      	mov	r3, r1
 800279c:	490f      	ldr	r1, [pc, #60]	@ (80027dc <checkStartMoving+0x454>)
 800279e:	e9c1 2300 	strd	r2, r3, [r1]
		q_f_old = q_f;
 80027a2:	4b0f      	ldr	r3, [pc, #60]	@ (80027e0 <checkStartMoving+0x458>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a0f      	ldr	r2, [pc, #60]	@ (80027e4 <checkStartMoving+0x45c>)
 80027a8:	6013      	str	r3, [r2, #0]
	}
}
 80027aa:	bf00      	nop
 80027ac:	3708      	adds	r7, #8
 80027ae:	46bd      	mov	sp, r7
 80027b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027b4:	20000010 	.word	0x20000010
 80027b8:	20000830 	.word	0x20000830
 80027bc:	2000000c 	.word	0x2000000c
 80027c0:	20000844 	.word	0x20000844
 80027c4:	20000824 	.word	0x20000824
 80027c8:	20000014 	.word	0x20000014
 80027cc:	3fe00000 	.word	0x3fe00000
 80027d0:	20000848 	.word	0x20000848
 80027d4:	20000854 	.word	0x20000854
 80027d8:	20000864 	.word	0x20000864
 80027dc:	20000858 	.word	0x20000858
 80027e0:	20000828 	.word	0x20000828
 80027e4:	20000840 	.word	0x20000840

080027e8 <createTrajectory>:

void createTrajectory(){
 80027e8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80027ec:	af00      	add	r7, sp, #0
	if(calmode == 1){
 80027ee:	4b84      	ldr	r3, [pc, #528]	@ (8002a00 <createTrajectory+0x218>)
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	f040 822c 	bne.w	8002c50 <createTrajectory+0x468>
		t = (float)(micros()-T_start)/1000000; //sec
 80027f8:	f7ff fc82 	bl	8002100 <micros>
 80027fc:	4b81      	ldr	r3, [pc, #516]	@ (8002a04 <createTrajectory+0x21c>)
 80027fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002802:	ebb0 0802 	subs.w	r8, r0, r2
 8002806:	eb61 0903 	sbc.w	r9, r1, r3
 800280a:	4640      	mov	r0, r8
 800280c:	4649      	mov	r1, r9
 800280e:	f7fe faa7 	bl	8000d60 <__aeabi_ul2f>
 8002812:	ee06 0a90 	vmov	s13, r0
 8002816:	ed9f 7a7c 	vldr	s14, [pc, #496]	@ 8002a08 <createTrajectory+0x220>
 800281a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800281e:	4b7b      	ldr	r3, [pc, #492]	@ (8002a0c <createTrajectory+0x224>)
 8002820:	edc3 7a00 	vstr	s15, [r3]
		if((0 <= t) && (t < t_acc)){ //Acceleration Segment
 8002824:	4b79      	ldr	r3, [pc, #484]	@ (8002a0c <createTrajectory+0x224>)
 8002826:	edd3 7a00 	vldr	s15, [r3]
 800282a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800282e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002832:	f2c0 8094 	blt.w	800295e <createTrajectory+0x176>
 8002836:	4b75      	ldr	r3, [pc, #468]	@ (8002a0c <createTrajectory+0x224>)
 8002838:	ed93 7a00 	vldr	s14, [r3]
 800283c:	4b74      	ldr	r3, [pc, #464]	@ (8002a10 <createTrajectory+0x228>)
 800283e:	edd3 7a00 	vldr	s15, [r3]
 8002842:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800284a:	f140 8088 	bpl.w	800295e <createTrajectory+0x176>
			ref_p = q_i + q_d_i*t*dir + 0.5*q_2d_max*t*t*dir;
 800284e:	4b71      	ldr	r3, [pc, #452]	@ (8002a14 <createTrajectory+0x22c>)
 8002850:	ed93 7a00 	vldr	s14, [r3]
 8002854:	4b6d      	ldr	r3, [pc, #436]	@ (8002a0c <createTrajectory+0x224>)
 8002856:	edd3 7a00 	vldr	s15, [r3]
 800285a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800285e:	4b6e      	ldr	r3, [pc, #440]	@ (8002a18 <createTrajectory+0x230>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	ee07 3a90 	vmov	s15, r3
 8002866:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800286a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800286e:	4b6b      	ldr	r3, [pc, #428]	@ (8002a1c <createTrajectory+0x234>)
 8002870:	edd3 7a00 	vldr	s15, [r3]
 8002874:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002878:	ee17 0a90 	vmov	r0, s15
 800287c:	f7fd fe30 	bl	80004e0 <__aeabi_f2d>
 8002880:	4604      	mov	r4, r0
 8002882:	460d      	mov	r5, r1
 8002884:	4b66      	ldr	r3, [pc, #408]	@ (8002a20 <createTrajectory+0x238>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4618      	mov	r0, r3
 800288a:	f7fd fe29 	bl	80004e0 <__aeabi_f2d>
 800288e:	f04f 0200 	mov.w	r2, #0
 8002892:	4b64      	ldr	r3, [pc, #400]	@ (8002a24 <createTrajectory+0x23c>)
 8002894:	f7fd fe7c 	bl	8000590 <__aeabi_dmul>
 8002898:	4602      	mov	r2, r0
 800289a:	460b      	mov	r3, r1
 800289c:	4690      	mov	r8, r2
 800289e:	4699      	mov	r9, r3
 80028a0:	4b5a      	ldr	r3, [pc, #360]	@ (8002a0c <createTrajectory+0x224>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4618      	mov	r0, r3
 80028a6:	f7fd fe1b 	bl	80004e0 <__aeabi_f2d>
 80028aa:	4602      	mov	r2, r0
 80028ac:	460b      	mov	r3, r1
 80028ae:	4640      	mov	r0, r8
 80028b0:	4649      	mov	r1, r9
 80028b2:	f7fd fe6d 	bl	8000590 <__aeabi_dmul>
 80028b6:	4602      	mov	r2, r0
 80028b8:	460b      	mov	r3, r1
 80028ba:	4690      	mov	r8, r2
 80028bc:	4699      	mov	r9, r3
 80028be:	4b53      	ldr	r3, [pc, #332]	@ (8002a0c <createTrajectory+0x224>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4618      	mov	r0, r3
 80028c4:	f7fd fe0c 	bl	80004e0 <__aeabi_f2d>
 80028c8:	4602      	mov	r2, r0
 80028ca:	460b      	mov	r3, r1
 80028cc:	4640      	mov	r0, r8
 80028ce:	4649      	mov	r1, r9
 80028d0:	f7fd fe5e 	bl	8000590 <__aeabi_dmul>
 80028d4:	4602      	mov	r2, r0
 80028d6:	460b      	mov	r3, r1
 80028d8:	4690      	mov	r8, r2
 80028da:	4699      	mov	r9, r3
 80028dc:	4b4e      	ldr	r3, [pc, #312]	@ (8002a18 <createTrajectory+0x230>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4618      	mov	r0, r3
 80028e2:	f7fd fdeb 	bl	80004bc <__aeabi_i2d>
 80028e6:	4602      	mov	r2, r0
 80028e8:	460b      	mov	r3, r1
 80028ea:	4640      	mov	r0, r8
 80028ec:	4649      	mov	r1, r9
 80028ee:	f7fd fe4f 	bl	8000590 <__aeabi_dmul>
 80028f2:	4602      	mov	r2, r0
 80028f4:	460b      	mov	r3, r1
 80028f6:	4620      	mov	r0, r4
 80028f8:	4629      	mov	r1, r5
 80028fa:	f7fd fc93 	bl	8000224 <__adddf3>
 80028fe:	4602      	mov	r2, r0
 8002900:	460b      	mov	r3, r1
 8002902:	4610      	mov	r0, r2
 8002904:	4619      	mov	r1, r3
 8002906:	f7fe f913 	bl	8000b30 <__aeabi_d2f>
 800290a:	4603      	mov	r3, r0
 800290c:	4a46      	ldr	r2, [pc, #280]	@ (8002a28 <createTrajectory+0x240>)
 800290e:	6013      	str	r3, [r2, #0]
			ref_v = q_d_i + q_2d_max*t*dir;
 8002910:	4b43      	ldr	r3, [pc, #268]	@ (8002a20 <createTrajectory+0x238>)
 8002912:	ed93 7a00 	vldr	s14, [r3]
 8002916:	4b3d      	ldr	r3, [pc, #244]	@ (8002a0c <createTrajectory+0x224>)
 8002918:	edd3 7a00 	vldr	s15, [r3]
 800291c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002920:	4b3d      	ldr	r3, [pc, #244]	@ (8002a18 <createTrajectory+0x230>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	ee07 3a90 	vmov	s15, r3
 8002928:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800292c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002930:	4b38      	ldr	r3, [pc, #224]	@ (8002a14 <createTrajectory+0x22c>)
 8002932:	edd3 7a00 	vldr	s15, [r3]
 8002936:	ee77 7a27 	vadd.f32	s15, s14, s15
 800293a:	4b3c      	ldr	r3, [pc, #240]	@ (8002a2c <createTrajectory+0x244>)
 800293c:	edc3 7a00 	vstr	s15, [r3]
			ref_a = q_2d_max*dir;
 8002940:	4b35      	ldr	r3, [pc, #212]	@ (8002a18 <createTrajectory+0x230>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	ee07 3a90 	vmov	s15, r3
 8002948:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800294c:	4b34      	ldr	r3, [pc, #208]	@ (8002a20 <createTrajectory+0x238>)
 800294e:	edd3 7a00 	vldr	s15, [r3]
 8002952:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002956:	4b36      	ldr	r3, [pc, #216]	@ (8002a30 <createTrajectory+0x248>)
 8002958:	edc3 7a00 	vstr	s15, [r3]
 800295c:	e2fd      	b.n	8002f5a <createTrajectory+0x772>
		}
		else if((t_acc <= t) && (t < t_acc+t_const)){ //Constant Velocity Segment
 800295e:	4b2c      	ldr	r3, [pc, #176]	@ (8002a10 <createTrajectory+0x228>)
 8002960:	ed93 7a00 	vldr	s14, [r3]
 8002964:	4b29      	ldr	r3, [pc, #164]	@ (8002a0c <createTrajectory+0x224>)
 8002966:	edd3 7a00 	vldr	s15, [r3]
 800296a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800296e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002972:	d865      	bhi.n	8002a40 <createTrajectory+0x258>
 8002974:	4b26      	ldr	r3, [pc, #152]	@ (8002a10 <createTrajectory+0x228>)
 8002976:	ed93 7a00 	vldr	s14, [r3]
 800297a:	4b2e      	ldr	r3, [pc, #184]	@ (8002a34 <createTrajectory+0x24c>)
 800297c:	edd3 7a00 	vldr	s15, [r3]
 8002980:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002984:	4b21      	ldr	r3, [pc, #132]	@ (8002a0c <createTrajectory+0x224>)
 8002986:	edd3 7a00 	vldr	s15, [r3]
 800298a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800298e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002992:	dd55      	ble.n	8002a40 <createTrajectory+0x258>
			ref_p = q_i + q_acc + q_d_max*(t-t_acc)*dir;
 8002994:	4b21      	ldr	r3, [pc, #132]	@ (8002a1c <createTrajectory+0x234>)
 8002996:	ed93 7a00 	vldr	s14, [r3]
 800299a:	4b27      	ldr	r3, [pc, #156]	@ (8002a38 <createTrajectory+0x250>)
 800299c:	edd3 7a00 	vldr	s15, [r3]
 80029a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029a4:	4b19      	ldr	r3, [pc, #100]	@ (8002a0c <createTrajectory+0x224>)
 80029a6:	edd3 6a00 	vldr	s13, [r3]
 80029aa:	4b19      	ldr	r3, [pc, #100]	@ (8002a10 <createTrajectory+0x228>)
 80029ac:	edd3 7a00 	vldr	s15, [r3]
 80029b0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80029b4:	4b21      	ldr	r3, [pc, #132]	@ (8002a3c <createTrajectory+0x254>)
 80029b6:	edd3 7a00 	vldr	s15, [r3]
 80029ba:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80029be:	4b16      	ldr	r3, [pc, #88]	@ (8002a18 <createTrajectory+0x230>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	ee07 3a90 	vmov	s15, r3
 80029c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029d2:	4b15      	ldr	r3, [pc, #84]	@ (8002a28 <createTrajectory+0x240>)
 80029d4:	edc3 7a00 	vstr	s15, [r3]
			ref_v = q_d_max*dir;
 80029d8:	4b0f      	ldr	r3, [pc, #60]	@ (8002a18 <createTrajectory+0x230>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	ee07 3a90 	vmov	s15, r3
 80029e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80029e4:	4b15      	ldr	r3, [pc, #84]	@ (8002a3c <createTrajectory+0x254>)
 80029e6:	edd3 7a00 	vldr	s15, [r3]
 80029ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029ee:	4b0f      	ldr	r3, [pc, #60]	@ (8002a2c <createTrajectory+0x244>)
 80029f0:	edc3 7a00 	vstr	s15, [r3]
			ref_a = 0;
 80029f4:	4b0e      	ldr	r3, [pc, #56]	@ (8002a30 <createTrajectory+0x248>)
 80029f6:	f04f 0200 	mov.w	r2, #0
 80029fa:	601a      	str	r2, [r3, #0]
 80029fc:	e2ad      	b.n	8002f5a <createTrajectory+0x772>
 80029fe:	bf00      	nop
 8002a00:	20000010 	.word	0x20000010
 8002a04:	20000858 	.word	0x20000858
 8002a08:	49742400 	.word	0x49742400
 8002a0c:	20000860 	.word	0x20000860
 8002a10:	20000844 	.word	0x20000844
 8002a14:	20000824 	.word	0x20000824
 8002a18:	20000014 	.word	0x20000014
 8002a1c:	2000082c 	.word	0x2000082c
 8002a20:	2000000c 	.word	0x2000000c
 8002a24:	3fe00000 	.word	0x3fe00000
 8002a28:	20000834 	.word	0x20000834
 8002a2c:	20000838 	.word	0x20000838
 8002a30:	2000083c 	.word	0x2000083c
 8002a34:	2000084c 	.word	0x2000084c
 8002a38:	20000848 	.word	0x20000848
 8002a3c:	20000008 	.word	0x20000008
		}
		else if((t_acc+t_const <= t) && (t < 2*t_acc+t_const)){ //Deceleration Segment
 8002a40:	4b76      	ldr	r3, [pc, #472]	@ (8002c1c <createTrajectory+0x434>)
 8002a42:	ed93 7a00 	vldr	s14, [r3]
 8002a46:	4b76      	ldr	r3, [pc, #472]	@ (8002c20 <createTrajectory+0x438>)
 8002a48:	edd3 7a00 	vldr	s15, [r3]
 8002a4c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a50:	4b74      	ldr	r3, [pc, #464]	@ (8002c24 <createTrajectory+0x43c>)
 8002a52:	edd3 7a00 	vldr	s15, [r3]
 8002a56:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a5e:	f200 80d8 	bhi.w	8002c12 <createTrajectory+0x42a>
 8002a62:	4b6e      	ldr	r3, [pc, #440]	@ (8002c1c <createTrajectory+0x434>)
 8002a64:	edd3 7a00 	vldr	s15, [r3]
 8002a68:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002a6c:	4b6c      	ldr	r3, [pc, #432]	@ (8002c20 <createTrajectory+0x438>)
 8002a6e:	edd3 7a00 	vldr	s15, [r3]
 8002a72:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a76:	4b6b      	ldr	r3, [pc, #428]	@ (8002c24 <createTrajectory+0x43c>)
 8002a78:	edd3 7a00 	vldr	s15, [r3]
 8002a7c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a84:	f340 80c5 	ble.w	8002c12 <createTrajectory+0x42a>
			ref_p = q_i + q_const + q_d_max*(t-t_acc-t_const)*dir-0.5*q_2d_max*(t-t_acc-t_const)*(t-t_acc-t_const)*dir;
 8002a88:	4b67      	ldr	r3, [pc, #412]	@ (8002c28 <createTrajectory+0x440>)
 8002a8a:	ed93 7a00 	vldr	s14, [r3]
 8002a8e:	4b67      	ldr	r3, [pc, #412]	@ (8002c2c <createTrajectory+0x444>)
 8002a90:	edd3 7a00 	vldr	s15, [r3]
 8002a94:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a98:	4b62      	ldr	r3, [pc, #392]	@ (8002c24 <createTrajectory+0x43c>)
 8002a9a:	edd3 6a00 	vldr	s13, [r3]
 8002a9e:	4b5f      	ldr	r3, [pc, #380]	@ (8002c1c <createTrajectory+0x434>)
 8002aa0:	edd3 7a00 	vldr	s15, [r3]
 8002aa4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002aa8:	4b5d      	ldr	r3, [pc, #372]	@ (8002c20 <createTrajectory+0x438>)
 8002aaa:	edd3 7a00 	vldr	s15, [r3]
 8002aae:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002ab2:	4b5f      	ldr	r3, [pc, #380]	@ (8002c30 <createTrajectory+0x448>)
 8002ab4:	edd3 7a00 	vldr	s15, [r3]
 8002ab8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002abc:	4b5d      	ldr	r3, [pc, #372]	@ (8002c34 <createTrajectory+0x44c>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	ee07 3a90 	vmov	s15, r3
 8002ac4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ac8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002acc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ad0:	ee17 0a90 	vmov	r0, s15
 8002ad4:	f7fd fd04 	bl	80004e0 <__aeabi_f2d>
 8002ad8:	4604      	mov	r4, r0
 8002ada:	460d      	mov	r5, r1
 8002adc:	4b56      	ldr	r3, [pc, #344]	@ (8002c38 <createTrajectory+0x450>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f7fd fcfd 	bl	80004e0 <__aeabi_f2d>
 8002ae6:	f04f 0200 	mov.w	r2, #0
 8002aea:	4b54      	ldr	r3, [pc, #336]	@ (8002c3c <createTrajectory+0x454>)
 8002aec:	f7fd fd50 	bl	8000590 <__aeabi_dmul>
 8002af0:	4602      	mov	r2, r0
 8002af2:	460b      	mov	r3, r1
 8002af4:	4690      	mov	r8, r2
 8002af6:	4699      	mov	r9, r3
 8002af8:	4b4a      	ldr	r3, [pc, #296]	@ (8002c24 <createTrajectory+0x43c>)
 8002afa:	ed93 7a00 	vldr	s14, [r3]
 8002afe:	4b47      	ldr	r3, [pc, #284]	@ (8002c1c <createTrajectory+0x434>)
 8002b00:	edd3 7a00 	vldr	s15, [r3]
 8002b04:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b08:	4b45      	ldr	r3, [pc, #276]	@ (8002c20 <createTrajectory+0x438>)
 8002b0a:	edd3 7a00 	vldr	s15, [r3]
 8002b0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b12:	ee17 0a90 	vmov	r0, s15
 8002b16:	f7fd fce3 	bl	80004e0 <__aeabi_f2d>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	460b      	mov	r3, r1
 8002b1e:	4640      	mov	r0, r8
 8002b20:	4649      	mov	r1, r9
 8002b22:	f7fd fd35 	bl	8000590 <__aeabi_dmul>
 8002b26:	4602      	mov	r2, r0
 8002b28:	460b      	mov	r3, r1
 8002b2a:	4690      	mov	r8, r2
 8002b2c:	4699      	mov	r9, r3
 8002b2e:	4b3d      	ldr	r3, [pc, #244]	@ (8002c24 <createTrajectory+0x43c>)
 8002b30:	ed93 7a00 	vldr	s14, [r3]
 8002b34:	4b39      	ldr	r3, [pc, #228]	@ (8002c1c <createTrajectory+0x434>)
 8002b36:	edd3 7a00 	vldr	s15, [r3]
 8002b3a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b3e:	4b38      	ldr	r3, [pc, #224]	@ (8002c20 <createTrajectory+0x438>)
 8002b40:	edd3 7a00 	vldr	s15, [r3]
 8002b44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b48:	ee17 0a90 	vmov	r0, s15
 8002b4c:	f7fd fcc8 	bl	80004e0 <__aeabi_f2d>
 8002b50:	4602      	mov	r2, r0
 8002b52:	460b      	mov	r3, r1
 8002b54:	4640      	mov	r0, r8
 8002b56:	4649      	mov	r1, r9
 8002b58:	f7fd fd1a 	bl	8000590 <__aeabi_dmul>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	460b      	mov	r3, r1
 8002b60:	4690      	mov	r8, r2
 8002b62:	4699      	mov	r9, r3
 8002b64:	4b33      	ldr	r3, [pc, #204]	@ (8002c34 <createTrajectory+0x44c>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f7fd fca7 	bl	80004bc <__aeabi_i2d>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	460b      	mov	r3, r1
 8002b72:	4640      	mov	r0, r8
 8002b74:	4649      	mov	r1, r9
 8002b76:	f7fd fd0b 	bl	8000590 <__aeabi_dmul>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	460b      	mov	r3, r1
 8002b7e:	4620      	mov	r0, r4
 8002b80:	4629      	mov	r1, r5
 8002b82:	f7fd fb4d 	bl	8000220 <__aeabi_dsub>
 8002b86:	4602      	mov	r2, r0
 8002b88:	460b      	mov	r3, r1
 8002b8a:	4610      	mov	r0, r2
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	f7fd ffcf 	bl	8000b30 <__aeabi_d2f>
 8002b92:	4603      	mov	r3, r0
 8002b94:	4a2a      	ldr	r2, [pc, #168]	@ (8002c40 <createTrajectory+0x458>)
 8002b96:	6013      	str	r3, [r2, #0]
			ref_v = -q_2d_max*(t-t_acc-t_const)*dir + q_d_max*dir;
 8002b98:	4b27      	ldr	r3, [pc, #156]	@ (8002c38 <createTrajectory+0x450>)
 8002b9a:	edd3 7a00 	vldr	s15, [r3]
 8002b9e:	eeb1 7a67 	vneg.f32	s14, s15
 8002ba2:	4b20      	ldr	r3, [pc, #128]	@ (8002c24 <createTrajectory+0x43c>)
 8002ba4:	edd3 6a00 	vldr	s13, [r3]
 8002ba8:	4b1c      	ldr	r3, [pc, #112]	@ (8002c1c <createTrajectory+0x434>)
 8002baa:	edd3 7a00 	vldr	s15, [r3]
 8002bae:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002bb2:	4b1b      	ldr	r3, [pc, #108]	@ (8002c20 <createTrajectory+0x438>)
 8002bb4:	edd3 7a00 	vldr	s15, [r3]
 8002bb8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002bbc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002bc0:	4b1c      	ldr	r3, [pc, #112]	@ (8002c34 <createTrajectory+0x44c>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	ee07 3a90 	vmov	s15, r3
 8002bc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bcc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002bd0:	4b18      	ldr	r3, [pc, #96]	@ (8002c34 <createTrajectory+0x44c>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	ee07 3a90 	vmov	s15, r3
 8002bd8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002bdc:	4b14      	ldr	r3, [pc, #80]	@ (8002c30 <createTrajectory+0x448>)
 8002bde:	edd3 7a00 	vldr	s15, [r3]
 8002be2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002be6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bea:	4b16      	ldr	r3, [pc, #88]	@ (8002c44 <createTrajectory+0x45c>)
 8002bec:	edc3 7a00 	vstr	s15, [r3]
			ref_a = -q_2d_max*dir;
 8002bf0:	4b11      	ldr	r3, [pc, #68]	@ (8002c38 <createTrajectory+0x450>)
 8002bf2:	edd3 7a00 	vldr	s15, [r3]
 8002bf6:	eeb1 7a67 	vneg.f32	s14, s15
 8002bfa:	4b0e      	ldr	r3, [pc, #56]	@ (8002c34 <createTrajectory+0x44c>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	ee07 3a90 	vmov	s15, r3
 8002c02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c0a:	4b0f      	ldr	r3, [pc, #60]	@ (8002c48 <createTrajectory+0x460>)
 8002c0c:	edc3 7a00 	vstr	s15, [r3]
 8002c10:	e1a3      	b.n	8002f5a <createTrajectory+0x772>
		}
		else{
			calmode = 3;
 8002c12:	4b0e      	ldr	r3, [pc, #56]	@ (8002c4c <createTrajectory+0x464>)
 8002c14:	2203      	movs	r2, #3
 8002c16:	701a      	strb	r2, [r3, #0]
	else if(calmode == 3){ //stop
		ref_p = q_f;
		ref_v = 0;
		ref_a = 0;
	}
}
 8002c18:	e19f      	b.n	8002f5a <createTrajectory+0x772>
 8002c1a:	bf00      	nop
 8002c1c:	20000844 	.word	0x20000844
 8002c20:	2000084c 	.word	0x2000084c
 8002c24:	20000860 	.word	0x20000860
 8002c28:	2000082c 	.word	0x2000082c
 8002c2c:	20000850 	.word	0x20000850
 8002c30:	20000008 	.word	0x20000008
 8002c34:	20000014 	.word	0x20000014
 8002c38:	2000000c 	.word	0x2000000c
 8002c3c:	3fe00000 	.word	0x3fe00000
 8002c40:	20000834 	.word	0x20000834
 8002c44:	20000838 	.word	0x20000838
 8002c48:	2000083c 	.word	0x2000083c
 8002c4c:	20000010 	.word	0x20000010
	else if(calmode == 2){
 8002c50:	4bc3      	ldr	r3, [pc, #780]	@ (8002f60 <createTrajectory+0x778>)
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	f040 816f 	bne.w	8002f38 <createTrajectory+0x750>
		t = (float)(micros()-T_start)/1000000; //sec
 8002c5a:	f7ff fa51 	bl	8002100 <micros>
 8002c5e:	4bc1      	ldr	r3, [pc, #772]	@ (8002f64 <createTrajectory+0x77c>)
 8002c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c64:	1a84      	subs	r4, r0, r2
 8002c66:	eb61 0503 	sbc.w	r5, r1, r3
 8002c6a:	4620      	mov	r0, r4
 8002c6c:	4629      	mov	r1, r5
 8002c6e:	f7fe f877 	bl	8000d60 <__aeabi_ul2f>
 8002c72:	ee06 0a90 	vmov	s13, r0
 8002c76:	ed9f 7abc 	vldr	s14, [pc, #752]	@ 8002f68 <createTrajectory+0x780>
 8002c7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c7e:	4bbb      	ldr	r3, [pc, #748]	@ (8002f6c <createTrajectory+0x784>)
 8002c80:	edc3 7a00 	vstr	s15, [r3]
		if((0 <= t) && (t < t_acc)){ //Acceleration Segment
 8002c84:	4bb9      	ldr	r3, [pc, #740]	@ (8002f6c <createTrajectory+0x784>)
 8002c86:	edd3 7a00 	vldr	s15, [r3]
 8002c8a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c92:	f2c0 8094 	blt.w	8002dbe <createTrajectory+0x5d6>
 8002c96:	4bb5      	ldr	r3, [pc, #724]	@ (8002f6c <createTrajectory+0x784>)
 8002c98:	ed93 7a00 	vldr	s14, [r3]
 8002c9c:	4bb4      	ldr	r3, [pc, #720]	@ (8002f70 <createTrajectory+0x788>)
 8002c9e:	edd3 7a00 	vldr	s15, [r3]
 8002ca2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ca6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002caa:	f140 8088 	bpl.w	8002dbe <createTrajectory+0x5d6>
			ref_p = q_i + q_d_i*t*dir + 0.5*q_2d_max*t*t*dir;
 8002cae:	4bb1      	ldr	r3, [pc, #708]	@ (8002f74 <createTrajectory+0x78c>)
 8002cb0:	ed93 7a00 	vldr	s14, [r3]
 8002cb4:	4bad      	ldr	r3, [pc, #692]	@ (8002f6c <createTrajectory+0x784>)
 8002cb6:	edd3 7a00 	vldr	s15, [r3]
 8002cba:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002cbe:	4bae      	ldr	r3, [pc, #696]	@ (8002f78 <createTrajectory+0x790>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	ee07 3a90 	vmov	s15, r3
 8002cc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002cca:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002cce:	4bab      	ldr	r3, [pc, #684]	@ (8002f7c <createTrajectory+0x794>)
 8002cd0:	edd3 7a00 	vldr	s15, [r3]
 8002cd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cd8:	ee17 0a90 	vmov	r0, s15
 8002cdc:	f7fd fc00 	bl	80004e0 <__aeabi_f2d>
 8002ce0:	4604      	mov	r4, r0
 8002ce2:	460d      	mov	r5, r1
 8002ce4:	4ba6      	ldr	r3, [pc, #664]	@ (8002f80 <createTrajectory+0x798>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f7fd fbf9 	bl	80004e0 <__aeabi_f2d>
 8002cee:	f04f 0200 	mov.w	r2, #0
 8002cf2:	4ba4      	ldr	r3, [pc, #656]	@ (8002f84 <createTrajectory+0x79c>)
 8002cf4:	f7fd fc4c 	bl	8000590 <__aeabi_dmul>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	460b      	mov	r3, r1
 8002cfc:	4690      	mov	r8, r2
 8002cfe:	4699      	mov	r9, r3
 8002d00:	4b9a      	ldr	r3, [pc, #616]	@ (8002f6c <createTrajectory+0x784>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4618      	mov	r0, r3
 8002d06:	f7fd fbeb 	bl	80004e0 <__aeabi_f2d>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	460b      	mov	r3, r1
 8002d0e:	4640      	mov	r0, r8
 8002d10:	4649      	mov	r1, r9
 8002d12:	f7fd fc3d 	bl	8000590 <__aeabi_dmul>
 8002d16:	4602      	mov	r2, r0
 8002d18:	460b      	mov	r3, r1
 8002d1a:	4690      	mov	r8, r2
 8002d1c:	4699      	mov	r9, r3
 8002d1e:	4b93      	ldr	r3, [pc, #588]	@ (8002f6c <createTrajectory+0x784>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4618      	mov	r0, r3
 8002d24:	f7fd fbdc 	bl	80004e0 <__aeabi_f2d>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	460b      	mov	r3, r1
 8002d2c:	4640      	mov	r0, r8
 8002d2e:	4649      	mov	r1, r9
 8002d30:	f7fd fc2e 	bl	8000590 <__aeabi_dmul>
 8002d34:	4602      	mov	r2, r0
 8002d36:	460b      	mov	r3, r1
 8002d38:	4690      	mov	r8, r2
 8002d3a:	4699      	mov	r9, r3
 8002d3c:	4b8e      	ldr	r3, [pc, #568]	@ (8002f78 <createTrajectory+0x790>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4618      	mov	r0, r3
 8002d42:	f7fd fbbb 	bl	80004bc <__aeabi_i2d>
 8002d46:	4602      	mov	r2, r0
 8002d48:	460b      	mov	r3, r1
 8002d4a:	4640      	mov	r0, r8
 8002d4c:	4649      	mov	r1, r9
 8002d4e:	f7fd fc1f 	bl	8000590 <__aeabi_dmul>
 8002d52:	4602      	mov	r2, r0
 8002d54:	460b      	mov	r3, r1
 8002d56:	4620      	mov	r0, r4
 8002d58:	4629      	mov	r1, r5
 8002d5a:	f7fd fa63 	bl	8000224 <__adddf3>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	460b      	mov	r3, r1
 8002d62:	4610      	mov	r0, r2
 8002d64:	4619      	mov	r1, r3
 8002d66:	f7fd fee3 	bl	8000b30 <__aeabi_d2f>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	4a86      	ldr	r2, [pc, #536]	@ (8002f88 <createTrajectory+0x7a0>)
 8002d6e:	6013      	str	r3, [r2, #0]
			ref_v = q_d_i + q_2d_max*t*dir;
 8002d70:	4b83      	ldr	r3, [pc, #524]	@ (8002f80 <createTrajectory+0x798>)
 8002d72:	ed93 7a00 	vldr	s14, [r3]
 8002d76:	4b7d      	ldr	r3, [pc, #500]	@ (8002f6c <createTrajectory+0x784>)
 8002d78:	edd3 7a00 	vldr	s15, [r3]
 8002d7c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d80:	4b7d      	ldr	r3, [pc, #500]	@ (8002f78 <createTrajectory+0x790>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	ee07 3a90 	vmov	s15, r3
 8002d88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d8c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d90:	4b78      	ldr	r3, [pc, #480]	@ (8002f74 <createTrajectory+0x78c>)
 8002d92:	edd3 7a00 	vldr	s15, [r3]
 8002d96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d9a:	4b7c      	ldr	r3, [pc, #496]	@ (8002f8c <createTrajectory+0x7a4>)
 8002d9c:	edc3 7a00 	vstr	s15, [r3]
			ref_a = q_2d_max*dir;
 8002da0:	4b75      	ldr	r3, [pc, #468]	@ (8002f78 <createTrajectory+0x790>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	ee07 3a90 	vmov	s15, r3
 8002da8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002dac:	4b74      	ldr	r3, [pc, #464]	@ (8002f80 <createTrajectory+0x798>)
 8002dae:	edd3 7a00 	vldr	s15, [r3]
 8002db2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002db6:	4b76      	ldr	r3, [pc, #472]	@ (8002f90 <createTrajectory+0x7a8>)
 8002db8:	edc3 7a00 	vstr	s15, [r3]
 8002dbc:	e0cd      	b.n	8002f5a <createTrajectory+0x772>
		else if((t_acc <= t) && (t < t_acc*2)){
 8002dbe:	4b6c      	ldr	r3, [pc, #432]	@ (8002f70 <createTrajectory+0x788>)
 8002dc0:	ed93 7a00 	vldr	s14, [r3]
 8002dc4:	4b69      	ldr	r3, [pc, #420]	@ (8002f6c <createTrajectory+0x784>)
 8002dc6:	edd3 7a00 	vldr	s15, [r3]
 8002dca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002dce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dd2:	f200 80ad 	bhi.w	8002f30 <createTrajectory+0x748>
 8002dd6:	4b66      	ldr	r3, [pc, #408]	@ (8002f70 <createTrajectory+0x788>)
 8002dd8:	edd3 7a00 	vldr	s15, [r3]
 8002ddc:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002de0:	4b62      	ldr	r3, [pc, #392]	@ (8002f6c <createTrajectory+0x784>)
 8002de2:	edd3 7a00 	vldr	s15, [r3]
 8002de6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002dea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dee:	f340 809f 	ble.w	8002f30 <createTrajectory+0x748>
			ref_p = q_i + q_acc + q_d_acc*(t-t_acc) - 0.5*q_2d_max*(t-t_acc)*(t-t_acc)*dir;
 8002df2:	4b62      	ldr	r3, [pc, #392]	@ (8002f7c <createTrajectory+0x794>)
 8002df4:	ed93 7a00 	vldr	s14, [r3]
 8002df8:	4b66      	ldr	r3, [pc, #408]	@ (8002f94 <createTrajectory+0x7ac>)
 8002dfa:	edd3 7a00 	vldr	s15, [r3]
 8002dfe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e02:	4b5a      	ldr	r3, [pc, #360]	@ (8002f6c <createTrajectory+0x784>)
 8002e04:	edd3 6a00 	vldr	s13, [r3]
 8002e08:	4b59      	ldr	r3, [pc, #356]	@ (8002f70 <createTrajectory+0x788>)
 8002e0a:	edd3 7a00 	vldr	s15, [r3]
 8002e0e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002e12:	4b61      	ldr	r3, [pc, #388]	@ (8002f98 <createTrajectory+0x7b0>)
 8002e14:	edd3 7a00 	vldr	s15, [r3]
 8002e18:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e20:	ee17 0a90 	vmov	r0, s15
 8002e24:	f7fd fb5c 	bl	80004e0 <__aeabi_f2d>
 8002e28:	4604      	mov	r4, r0
 8002e2a:	460d      	mov	r5, r1
 8002e2c:	4b54      	ldr	r3, [pc, #336]	@ (8002f80 <createTrajectory+0x798>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4618      	mov	r0, r3
 8002e32:	f7fd fb55 	bl	80004e0 <__aeabi_f2d>
 8002e36:	f04f 0200 	mov.w	r2, #0
 8002e3a:	4b52      	ldr	r3, [pc, #328]	@ (8002f84 <createTrajectory+0x79c>)
 8002e3c:	f7fd fba8 	bl	8000590 <__aeabi_dmul>
 8002e40:	4602      	mov	r2, r0
 8002e42:	460b      	mov	r3, r1
 8002e44:	4690      	mov	r8, r2
 8002e46:	4699      	mov	r9, r3
 8002e48:	4b48      	ldr	r3, [pc, #288]	@ (8002f6c <createTrajectory+0x784>)
 8002e4a:	ed93 7a00 	vldr	s14, [r3]
 8002e4e:	4b48      	ldr	r3, [pc, #288]	@ (8002f70 <createTrajectory+0x788>)
 8002e50:	edd3 7a00 	vldr	s15, [r3]
 8002e54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e58:	ee17 0a90 	vmov	r0, s15
 8002e5c:	f7fd fb40 	bl	80004e0 <__aeabi_f2d>
 8002e60:	4602      	mov	r2, r0
 8002e62:	460b      	mov	r3, r1
 8002e64:	4640      	mov	r0, r8
 8002e66:	4649      	mov	r1, r9
 8002e68:	f7fd fb92 	bl	8000590 <__aeabi_dmul>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	460b      	mov	r3, r1
 8002e70:	4690      	mov	r8, r2
 8002e72:	4699      	mov	r9, r3
 8002e74:	4b3d      	ldr	r3, [pc, #244]	@ (8002f6c <createTrajectory+0x784>)
 8002e76:	ed93 7a00 	vldr	s14, [r3]
 8002e7a:	4b3d      	ldr	r3, [pc, #244]	@ (8002f70 <createTrajectory+0x788>)
 8002e7c:	edd3 7a00 	vldr	s15, [r3]
 8002e80:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e84:	ee17 0a90 	vmov	r0, s15
 8002e88:	f7fd fb2a 	bl	80004e0 <__aeabi_f2d>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	460b      	mov	r3, r1
 8002e90:	4640      	mov	r0, r8
 8002e92:	4649      	mov	r1, r9
 8002e94:	f7fd fb7c 	bl	8000590 <__aeabi_dmul>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	460b      	mov	r3, r1
 8002e9c:	4690      	mov	r8, r2
 8002e9e:	4699      	mov	r9, r3
 8002ea0:	4b35      	ldr	r3, [pc, #212]	@ (8002f78 <createTrajectory+0x790>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f7fd fb09 	bl	80004bc <__aeabi_i2d>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	460b      	mov	r3, r1
 8002eae:	4640      	mov	r0, r8
 8002eb0:	4649      	mov	r1, r9
 8002eb2:	f7fd fb6d 	bl	8000590 <__aeabi_dmul>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	460b      	mov	r3, r1
 8002eba:	4620      	mov	r0, r4
 8002ebc:	4629      	mov	r1, r5
 8002ebe:	f7fd f9af 	bl	8000220 <__aeabi_dsub>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	460b      	mov	r3, r1
 8002ec6:	4610      	mov	r0, r2
 8002ec8:	4619      	mov	r1, r3
 8002eca:	f7fd fe31 	bl	8000b30 <__aeabi_d2f>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	4a2d      	ldr	r2, [pc, #180]	@ (8002f88 <createTrajectory+0x7a0>)
 8002ed2:	6013      	str	r3, [r2, #0]
			ref_v = q_d_acc - q_2d_max*(t-t_acc)*dir;
 8002ed4:	4b30      	ldr	r3, [pc, #192]	@ (8002f98 <createTrajectory+0x7b0>)
 8002ed6:	ed93 7a00 	vldr	s14, [r3]
 8002eda:	4b24      	ldr	r3, [pc, #144]	@ (8002f6c <createTrajectory+0x784>)
 8002edc:	edd3 6a00 	vldr	s13, [r3]
 8002ee0:	4b23      	ldr	r3, [pc, #140]	@ (8002f70 <createTrajectory+0x788>)
 8002ee2:	edd3 7a00 	vldr	s15, [r3]
 8002ee6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002eea:	4b25      	ldr	r3, [pc, #148]	@ (8002f80 <createTrajectory+0x798>)
 8002eec:	edd3 7a00 	vldr	s15, [r3]
 8002ef0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002ef4:	4b20      	ldr	r3, [pc, #128]	@ (8002f78 <createTrajectory+0x790>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	ee07 3a90 	vmov	s15, r3
 8002efc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f00:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f08:	4b20      	ldr	r3, [pc, #128]	@ (8002f8c <createTrajectory+0x7a4>)
 8002f0a:	edc3 7a00 	vstr	s15, [r3]
			ref_a = -q_2d_max*dir;
 8002f0e:	4b1c      	ldr	r3, [pc, #112]	@ (8002f80 <createTrajectory+0x798>)
 8002f10:	edd3 7a00 	vldr	s15, [r3]
 8002f14:	eeb1 7a67 	vneg.f32	s14, s15
 8002f18:	4b17      	ldr	r3, [pc, #92]	@ (8002f78 <createTrajectory+0x790>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	ee07 3a90 	vmov	s15, r3
 8002f20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f28:	4b19      	ldr	r3, [pc, #100]	@ (8002f90 <createTrajectory+0x7a8>)
 8002f2a:	edc3 7a00 	vstr	s15, [r3]
 8002f2e:	e014      	b.n	8002f5a <createTrajectory+0x772>
			calmode = 3;
 8002f30:	4b0b      	ldr	r3, [pc, #44]	@ (8002f60 <createTrajectory+0x778>)
 8002f32:	2203      	movs	r2, #3
 8002f34:	701a      	strb	r2, [r3, #0]
}
 8002f36:	e010      	b.n	8002f5a <createTrajectory+0x772>
	else if(calmode == 3){ //stop
 8002f38:	4b09      	ldr	r3, [pc, #36]	@ (8002f60 <createTrajectory+0x778>)
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	2b03      	cmp	r3, #3
 8002f3e:	d10c      	bne.n	8002f5a <createTrajectory+0x772>
		ref_p = q_f;
 8002f40:	4b16      	ldr	r3, [pc, #88]	@ (8002f9c <createTrajectory+0x7b4>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a10      	ldr	r2, [pc, #64]	@ (8002f88 <createTrajectory+0x7a0>)
 8002f46:	6013      	str	r3, [r2, #0]
		ref_v = 0;
 8002f48:	4b10      	ldr	r3, [pc, #64]	@ (8002f8c <createTrajectory+0x7a4>)
 8002f4a:	f04f 0200 	mov.w	r2, #0
 8002f4e:	601a      	str	r2, [r3, #0]
		ref_a = 0;
 8002f50:	4b0f      	ldr	r3, [pc, #60]	@ (8002f90 <createTrajectory+0x7a8>)
 8002f52:	f04f 0200 	mov.w	r2, #0
 8002f56:	601a      	str	r2, [r3, #0]
}
 8002f58:	e7ff      	b.n	8002f5a <createTrajectory+0x772>
 8002f5a:	bf00      	nop
 8002f5c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002f60:	20000010 	.word	0x20000010
 8002f64:	20000858 	.word	0x20000858
 8002f68:	49742400 	.word	0x49742400
 8002f6c:	20000860 	.word	0x20000860
 8002f70:	20000844 	.word	0x20000844
 8002f74:	20000824 	.word	0x20000824
 8002f78:	20000014 	.word	0x20000014
 8002f7c:	2000082c 	.word	0x2000082c
 8002f80:	2000000c 	.word	0x2000000c
 8002f84:	3fe00000 	.word	0x3fe00000
 8002f88:	20000834 	.word	0x20000834
 8002f8c:	20000838 	.word	0x20000838
 8002f90:	2000083c 	.word	0x2000083c
 8002f94:	20000848 	.word	0x20000848
 8002f98:	20000854 	.word	0x20000854
 8002f9c:	20000828 	.word	0x20000828

08002fa0 <DriveMotor>:

//--------------------------Drive Motor----------------//

void DriveMotor(){
 8002fa0:	b598      	push	{r3, r4, r7, lr}
 8002fa2:	af00      	add	r7, sp, #0
	//PWM Motor
	duty_cycle = (fabs(Vin)*100)/24;
 8002fa4:	4b26      	ldr	r3, [pc, #152]	@ (8003040 <DriveMotor+0xa0>)
 8002fa6:	edd3 7a00 	vldr	s15, [r3]
 8002faa:	eef0 7ae7 	vabs.f32	s15, s15
 8002fae:	ee17 0a90 	vmov	r0, s15
 8002fb2:	f7fd fa95 	bl	80004e0 <__aeabi_f2d>
 8002fb6:	f04f 0200 	mov.w	r2, #0
 8002fba:	4b22      	ldr	r3, [pc, #136]	@ (8003044 <DriveMotor+0xa4>)
 8002fbc:	f7fd fae8 	bl	8000590 <__aeabi_dmul>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	460b      	mov	r3, r1
 8002fc4:	4610      	mov	r0, r2
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	f04f 0200 	mov.w	r2, #0
 8002fcc:	4b1e      	ldr	r3, [pc, #120]	@ (8003048 <DriveMotor+0xa8>)
 8002fce:	f7fd fc09 	bl	80007e4 <__aeabi_ddiv>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	460b      	mov	r3, r1
 8002fd6:	4610      	mov	r0, r2
 8002fd8:	4619      	mov	r1, r3
 8002fda:	f7fd fda9 	bl	8000b30 <__aeabi_d2f>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	4a1a      	ldr	r2, [pc, #104]	@ (800304c <DriveMotor+0xac>)
 8002fe2:	6013      	str	r3, [r2, #0]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, duty_cycle*9.99);
 8002fe4:	4b19      	ldr	r3, [pc, #100]	@ (800304c <DriveMotor+0xac>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f7fd fa79 	bl	80004e0 <__aeabi_f2d>
 8002fee:	a312      	add	r3, pc, #72	@ (adr r3, 8003038 <DriveMotor+0x98>)
 8002ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ff4:	f7fd facc 	bl	8000590 <__aeabi_dmul>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	460b      	mov	r3, r1
 8002ffc:	4914      	ldr	r1, [pc, #80]	@ (8003050 <DriveMotor+0xb0>)
 8002ffe:	680c      	ldr	r4, [r1, #0]
 8003000:	4610      	mov	r0, r2
 8003002:	4619      	mov	r1, r3
 8003004:	f7fd fd74 	bl	8000af0 <__aeabi_d2uiz>
 8003008:	4603      	mov	r3, r0
 800300a:	6363      	str	r3, [r4, #52]	@ 0x34

	//Control Motor Direction
	if(Vin < 0){
 800300c:	4b0c      	ldr	r3, [pc, #48]	@ (8003040 <DriveMotor+0xa0>)
 800300e:	edd3 7a00 	vldr	s15, [r3]
 8003012:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003016:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800301a:	d505      	bpl.n	8003028 <DriveMotor+0x88>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, 1);
 800301c:	2201      	movs	r2, #1
 800301e:	2120      	movs	r1, #32
 8003020:	480c      	ldr	r0, [pc, #48]	@ (8003054 <DriveMotor+0xb4>)
 8003022:	f003 f803 	bl	800602c <HAL_GPIO_WritePin>
	}
	else{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, 0);
	}
}
 8003026:	e004      	b.n	8003032 <DriveMotor+0x92>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, 0);
 8003028:	2200      	movs	r2, #0
 800302a:	2120      	movs	r1, #32
 800302c:	4809      	ldr	r0, [pc, #36]	@ (8003054 <DriveMotor+0xb4>)
 800302e:	f002 fffd 	bl	800602c <HAL_GPIO_WritePin>
}
 8003032:	bf00      	nop
 8003034:	bd98      	pop	{r3, r4, r7, pc}
 8003036:	bf00      	nop
 8003038:	47ae147b 	.word	0x47ae147b
 800303c:	4023fae1 	.word	0x4023fae1
 8003040:	20000820 	.word	0x20000820
 8003044:	40590000 	.word	0x40590000
 8003048:	40380000 	.word	0x40380000
 800304c:	20000004 	.word	0x20000004
 8003050:	20000240 	.word	0x20000240
 8003054:	48000800 	.word	0x48000800

08003058 <SoftwareLimit>:

void SoftwareLimit(){
 8003058:	b480      	push	{r7}
 800305a:	af00      	add	r7, sp, #0
	if(S_top == 1 && Vin >= -2){
 800305c:	4b26      	ldr	r3, [pc, #152]	@ (80030f8 <SoftwareLimit+0xa0>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	2b01      	cmp	r3, #1
 8003062:	d10e      	bne.n	8003082 <SoftwareLimit+0x2a>
 8003064:	4b25      	ldr	r3, [pc, #148]	@ (80030fc <SoftwareLimit+0xa4>)
 8003066:	edd3 7a00 	vldr	s15, [r3]
 800306a:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 800306e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003072:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003076:	db04      	blt.n	8003082 <SoftwareLimit+0x2a>
		Vin = 0;
 8003078:	4b20      	ldr	r3, [pc, #128]	@ (80030fc <SoftwareLimit+0xa4>)
 800307a:	f04f 0200 	mov.w	r2, #0
 800307e:	601a      	str	r2, [r3, #0]
 8003080:	e010      	b.n	80030a4 <SoftwareLimit+0x4c>
	}
	else if(S_top == 1 && Vin < -2){
 8003082:	4b1d      	ldr	r3, [pc, #116]	@ (80030f8 <SoftwareLimit+0xa0>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2b01      	cmp	r3, #1
 8003088:	d10c      	bne.n	80030a4 <SoftwareLimit+0x4c>
 800308a:	4b1c      	ldr	r3, [pc, #112]	@ (80030fc <SoftwareLimit+0xa4>)
 800308c:	edd3 7a00 	vldr	s15, [r3]
 8003090:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 8003094:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003098:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800309c:	d502      	bpl.n	80030a4 <SoftwareLimit+0x4c>
		S_top = 0;
 800309e:	4b16      	ldr	r3, [pc, #88]	@ (80030f8 <SoftwareLimit+0xa0>)
 80030a0:	2200      	movs	r2, #0
 80030a2:	601a      	str	r2, [r3, #0]
	}

	if(S_down == 1 && Vin <= 2){
 80030a4:	4b16      	ldr	r3, [pc, #88]	@ (8003100 <SoftwareLimit+0xa8>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d10e      	bne.n	80030ca <SoftwareLimit+0x72>
 80030ac:	4b13      	ldr	r3, [pc, #76]	@ (80030fc <SoftwareLimit+0xa4>)
 80030ae:	edd3 7a00 	vldr	s15, [r3]
 80030b2:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80030b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030be:	d804      	bhi.n	80030ca <SoftwareLimit+0x72>
		Vin = 0;
 80030c0:	4b0e      	ldr	r3, [pc, #56]	@ (80030fc <SoftwareLimit+0xa4>)
 80030c2:	f04f 0200 	mov.w	r2, #0
 80030c6:	601a      	str	r2, [r3, #0]
	}
	else if(S_down == 1 && Vin > 2){
		S_down = 0;
	}

}
 80030c8:	e011      	b.n	80030ee <SoftwareLimit+0x96>
	else if(S_down == 1 && Vin > 2){
 80030ca:	4b0d      	ldr	r3, [pc, #52]	@ (8003100 <SoftwareLimit+0xa8>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d10d      	bne.n	80030ee <SoftwareLimit+0x96>
 80030d2:	4b0a      	ldr	r3, [pc, #40]	@ (80030fc <SoftwareLimit+0xa4>)
 80030d4:	edd3 7a00 	vldr	s15, [r3]
 80030d8:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80030dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030e4:	dc00      	bgt.n	80030e8 <SoftwareLimit+0x90>
}
 80030e6:	e002      	b.n	80030ee <SoftwareLimit+0x96>
		S_down = 0;
 80030e8:	4b05      	ldr	r3, [pc, #20]	@ (8003100 <SoftwareLimit+0xa8>)
 80030ea:	2200      	movs	r2, #0
 80030ec:	601a      	str	r2, [r3, #0]
}
 80030ee:	bf00      	nop
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr
 80030f8:	200008dc 	.word	0x200008dc
 80030fc:	20000820 	.word	0x20000820
 8003100:	200008e0 	.word	0x200008e0
 8003104:	00000000 	.word	0x00000000

08003108 <JoystickInput>:


//------------------------------------Joy---------------------------------------//

void JoystickInput(){
 8003108:	b5b0      	push	{r4, r5, r7, lr}
 800310a:	af00      	add	r7, sp, #0
	//Control y-axis by joy
	Vin = (float)(ADCBuffer[1]-1850)*24/2048; //0->24V
 800310c:	4b2a      	ldr	r3, [pc, #168]	@ (80031b8 <JoystickInput+0xb0>)
 800310e:	885b      	ldrh	r3, [r3, #2]
 8003110:	f2a3 733a 	subw	r3, r3, #1850	@ 0x73a
 8003114:	ee07 3a90 	vmov	s15, r3
 8003118:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800311c:	eeb3 7a08 	vmov.f32	s14, #56	@ 0x41c00000  24.0
 8003120:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003124:	eddf 6a25 	vldr	s13, [pc, #148]	@ 80031bc <JoystickInput+0xb4>
 8003128:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800312c:	4b24      	ldr	r3, [pc, #144]	@ (80031c0 <JoystickInput+0xb8>)
 800312e:	edc3 7a00 	vstr	s15, [r3]
	if(Vin > -3 && Vin < 3){
 8003132:	4b23      	ldr	r3, [pc, #140]	@ (80031c0 <JoystickInput+0xb8>)
 8003134:	edd3 7a00 	vldr	s15, [r3]
 8003138:	eeb8 7a08 	vmov.f32	s14, #136	@ 0xc0400000 -3.0
 800313c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003140:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003144:	dd0d      	ble.n	8003162 <JoystickInput+0x5a>
 8003146:	4b1e      	ldr	r3, [pc, #120]	@ (80031c0 <JoystickInput+0xb8>)
 8003148:	edd3 7a00 	vldr	s15, [r3]
 800314c:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8003150:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003154:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003158:	d503      	bpl.n	8003162 <JoystickInput+0x5a>
		Vin = 0;
 800315a:	4b19      	ldr	r3, [pc, #100]	@ (80031c0 <JoystickInput+0xb8>)
 800315c:	f04f 0200 	mov.w	r2, #0
 8003160:	601a      	str	r2, [r3, #0]
	}

	//Control x-axis by joy
	x_position += ((ADCBuffer[0]-2048)*0.005);
 8003162:	4b18      	ldr	r3, [pc, #96]	@ (80031c4 <JoystickInput+0xbc>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4618      	mov	r0, r3
 8003168:	f7fd f9ba 	bl	80004e0 <__aeabi_f2d>
 800316c:	4604      	mov	r4, r0
 800316e:	460d      	mov	r5, r1
 8003170:	4b11      	ldr	r3, [pc, #68]	@ (80031b8 <JoystickInput+0xb0>)
 8003172:	881b      	ldrh	r3, [r3, #0]
 8003174:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8003178:	4618      	mov	r0, r3
 800317a:	f7fd f99f 	bl	80004bc <__aeabi_i2d>
 800317e:	a30c      	add	r3, pc, #48	@ (adr r3, 80031b0 <JoystickInput+0xa8>)
 8003180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003184:	f7fd fa04 	bl	8000590 <__aeabi_dmul>
 8003188:	4602      	mov	r2, r0
 800318a:	460b      	mov	r3, r1
 800318c:	4620      	mov	r0, r4
 800318e:	4629      	mov	r1, r5
 8003190:	f7fd f848 	bl	8000224 <__adddf3>
 8003194:	4602      	mov	r2, r0
 8003196:	460b      	mov	r3, r1
 8003198:	4610      	mov	r0, r2
 800319a:	4619      	mov	r1, r3
 800319c:	f7fd fcc8 	bl	8000b30 <__aeabi_d2f>
 80031a0:	4603      	mov	r3, r0
 80031a2:	4a08      	ldr	r2, [pc, #32]	@ (80031c4 <JoystickInput+0xbc>)
 80031a4:	6013      	str	r3, [r2, #0]
}
 80031a6:	bf00      	nop
 80031a8:	bdb0      	pop	{r4, r5, r7, pc}
 80031aa:	bf00      	nop
 80031ac:	f3af 8000 	nop.w
 80031b0:	47ae147b 	.word	0x47ae147b
 80031b4:	3f747ae1 	.word	0x3f747ae1
 80031b8:	20000810 	.word	0x20000810
 80031bc:	45000000 	.word	0x45000000
 80031c0:	20000820 	.word	0x20000820
 80031c4:	20000814 	.word	0x20000814

080031c8 <button_up_down_input>:

void button_up_down_input(){
 80031c8:	b580      	push	{r7, lr}
 80031ca:	af00      	add	r7, sp, #0
	//check button up
	if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_11) == 1){
 80031cc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80031d0:	4843      	ldr	r0, [pc, #268]	@ (80032e0 <button_up_down_input+0x118>)
 80031d2:	f002 ff13 	bl	8005ffc <HAL_GPIO_ReadPin>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d113      	bne.n	8003204 <button_up_down_input+0x3c>
		set_manual_point = QEIdata.linearPos + 10; //stem 10 mm
 80031dc:	4b41      	ldr	r3, [pc, #260]	@ (80032e4 <button_up_down_input+0x11c>)
 80031de:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80031e2:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80031e6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80031ea:	4b3f      	ldr	r3, [pc, #252]	@ (80032e8 <button_up_down_input+0x120>)
 80031ec:	edc3 7a00 	vstr	s15, [r3]
		check_up = 1;
 80031f0:	4b3e      	ldr	r3, [pc, #248]	@ (80032ec <button_up_down_input+0x124>)
 80031f2:	2201      	movs	r2, #1
 80031f4:	701a      	strb	r2, [r3, #0]
		B_up = 1;
 80031f6:	4b3e      	ldr	r3, [pc, #248]	@ (80032f0 <button_up_down_input+0x128>)
 80031f8:	2201      	movs	r2, #1
 80031fa:	701a      	strb	r2, [r3, #0]
		check_state_B = 1;
 80031fc:	4b3d      	ldr	r3, [pc, #244]	@ (80032f4 <button_up_down_input+0x12c>)
 80031fe:	2201      	movs	r2, #1
 8003200:	601a      	str	r2, [r3, #0]
 8003202:	e005      	b.n	8003210 <button_up_down_input+0x48>
	}
	else{
		B_up = 0;
 8003204:	4b3a      	ldr	r3, [pc, #232]	@ (80032f0 <button_up_down_input+0x128>)
 8003206:	2200      	movs	r2, #0
 8003208:	701a      	strb	r2, [r3, #0]
		check_state_B = 2;
 800320a:	4b3a      	ldr	r3, [pc, #232]	@ (80032f4 <button_up_down_input+0x12c>)
 800320c:	2202      	movs	r2, #2
 800320e:	601a      	str	r2, [r3, #0]
	}
	if(QEIdata.linearPos < set_manual_point && check_up == 1){
 8003210:	4b34      	ldr	r3, [pc, #208]	@ (80032e4 <button_up_down_input+0x11c>)
 8003212:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8003216:	4b34      	ldr	r3, [pc, #208]	@ (80032e8 <button_up_down_input+0x120>)
 8003218:	edd3 7a00 	vldr	s15, [r3]
 800321c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003224:	d50a      	bpl.n	800323c <button_up_down_input+0x74>
 8003226:	4b31      	ldr	r3, [pc, #196]	@ (80032ec <button_up_down_input+0x124>)
 8003228:	781b      	ldrb	r3, [r3, #0]
 800322a:	2b01      	cmp	r3, #1
 800322c:	d106      	bne.n	800323c <button_up_down_input+0x74>
		Vin = 4.5;
 800322e:	4b32      	ldr	r3, [pc, #200]	@ (80032f8 <button_up_down_input+0x130>)
 8003230:	4a32      	ldr	r2, [pc, #200]	@ (80032fc <button_up_down_input+0x134>)
 8003232:	601a      	str	r2, [r3, #0]
		check_state_B = 3;
 8003234:	4b2f      	ldr	r3, [pc, #188]	@ (80032f4 <button_up_down_input+0x12c>)
 8003236:	2203      	movs	r2, #3
 8003238:	601a      	str	r2, [r3, #0]
 800323a:	e005      	b.n	8003248 <button_up_down_input+0x80>
	}
	else{
		check_up = 0;
 800323c:	4b2b      	ldr	r3, [pc, #172]	@ (80032ec <button_up_down_input+0x124>)
 800323e:	2200      	movs	r2, #0
 8003240:	701a      	strb	r2, [r3, #0]
		check_state_B = 4;
 8003242:	4b2c      	ldr	r3, [pc, #176]	@ (80032f4 <button_up_down_input+0x12c>)
 8003244:	2204      	movs	r2, #4
 8003246:	601a      	str	r2, [r3, #0]
	}

	//check button down
	if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_12) == 1){
 8003248:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800324c:	4824      	ldr	r0, [pc, #144]	@ (80032e0 <button_up_down_input+0x118>)
 800324e:	f002 fed5 	bl	8005ffc <HAL_GPIO_ReadPin>
 8003252:	4603      	mov	r3, r0
 8003254:	2b01      	cmp	r3, #1
 8003256:	d113      	bne.n	8003280 <button_up_down_input+0xb8>
		set_manual_point = QEIdata.linearPos - 10;
 8003258:	4b22      	ldr	r3, [pc, #136]	@ (80032e4 <button_up_down_input+0x11c>)
 800325a:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800325e:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8003262:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003266:	4b20      	ldr	r3, [pc, #128]	@ (80032e8 <button_up_down_input+0x120>)
 8003268:	edc3 7a00 	vstr	s15, [r3]
		check_down = 1;
 800326c:	4b24      	ldr	r3, [pc, #144]	@ (8003300 <button_up_down_input+0x138>)
 800326e:	2201      	movs	r2, #1
 8003270:	701a      	strb	r2, [r3, #0]
		B_down = 1;
 8003272:	4b24      	ldr	r3, [pc, #144]	@ (8003304 <button_up_down_input+0x13c>)
 8003274:	2201      	movs	r2, #1
 8003276:	701a      	strb	r2, [r3, #0]
		check_state_B = 5;
 8003278:	4b1e      	ldr	r3, [pc, #120]	@ (80032f4 <button_up_down_input+0x12c>)
 800327a:	2205      	movs	r2, #5
 800327c:	601a      	str	r2, [r3, #0]
 800327e:	e005      	b.n	800328c <button_up_down_input+0xc4>
	}
	else{
		B_down = 0;
 8003280:	4b20      	ldr	r3, [pc, #128]	@ (8003304 <button_up_down_input+0x13c>)
 8003282:	2200      	movs	r2, #0
 8003284:	701a      	strb	r2, [r3, #0]
		check_state_B = 6;
 8003286:	4b1b      	ldr	r3, [pc, #108]	@ (80032f4 <button_up_down_input+0x12c>)
 8003288:	2206      	movs	r2, #6
 800328a:	601a      	str	r2, [r3, #0]
	}
	if(QEIdata.linearPos > set_manual_point && check_down == 1){
 800328c:	4b15      	ldr	r3, [pc, #84]	@ (80032e4 <button_up_down_input+0x11c>)
 800328e:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8003292:	4b15      	ldr	r3, [pc, #84]	@ (80032e8 <button_up_down_input+0x120>)
 8003294:	edd3 7a00 	vldr	s15, [r3]
 8003298:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800329c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032a0:	dd0a      	ble.n	80032b8 <button_up_down_input+0xf0>
 80032a2:	4b17      	ldr	r3, [pc, #92]	@ (8003300 <button_up_down_input+0x138>)
 80032a4:	781b      	ldrb	r3, [r3, #0]
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d106      	bne.n	80032b8 <button_up_down_input+0xf0>
		Vin = -3.5;
 80032aa:	4b13      	ldr	r3, [pc, #76]	@ (80032f8 <button_up_down_input+0x130>)
 80032ac:	4a16      	ldr	r2, [pc, #88]	@ (8003308 <button_up_down_input+0x140>)
 80032ae:	601a      	str	r2, [r3, #0]
		check_state_B = 7;
 80032b0:	4b10      	ldr	r3, [pc, #64]	@ (80032f4 <button_up_down_input+0x12c>)
 80032b2:	2207      	movs	r2, #7
 80032b4:	601a      	str	r2, [r3, #0]
 80032b6:	e005      	b.n	80032c4 <button_up_down_input+0xfc>
	}
	else{
		check_down = 0;
 80032b8:	4b11      	ldr	r3, [pc, #68]	@ (8003300 <button_up_down_input+0x138>)
 80032ba:	2200      	movs	r2, #0
 80032bc:	701a      	strb	r2, [r3, #0]
		check_state_B = 8;
 80032be:	4b0d      	ldr	r3, [pc, #52]	@ (80032f4 <button_up_down_input+0x12c>)
 80032c0:	2208      	movs	r2, #8
 80032c2:	601a      	str	r2, [r3, #0]
	}

	if(check_up == 0 && check_down == 0){
 80032c4:	4b09      	ldr	r3, [pc, #36]	@ (80032ec <button_up_down_input+0x124>)
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d107      	bne.n	80032dc <button_up_down_input+0x114>
 80032cc:	4b0c      	ldr	r3, [pc, #48]	@ (8003300 <button_up_down_input+0x138>)
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d103      	bne.n	80032dc <button_up_down_input+0x114>
		Vin = 0;
 80032d4:	4b08      	ldr	r3, [pc, #32]	@ (80032f8 <button_up_down_input+0x130>)
 80032d6:	f04f 0200 	mov.w	r2, #0
 80032da:	601a      	str	r2, [r3, #0]
	}
}
 80032dc:	bf00      	nop
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	48000800 	.word	0x48000800
 80032e4:	200007c8 	.word	0x200007c8
 80032e8:	20000818 	.word	0x20000818
 80032ec:	2000081c 	.word	0x2000081c
 80032f0:	20000868 	.word	0x20000868
 80032f4:	200008e4 	.word	0x200008e4
 80032f8:	20000820 	.word	0x20000820
 80032fc:	40900000 	.word	0x40900000
 8003300:	2000081d 	.word	0x2000081d
 8003304:	20000869 	.word	0x20000869
 8003308:	c0600000 	.word	0xc0600000

0800330c <button_reset_input>:

void button_reset_input(){
 800330c:	b580      	push	{r7, lr}
 800330e:	af00      	add	r7, sp, #0
	//check button reset
	if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2) == 1 || (Home_state_triger == 0 && set_Home_state == 1)){
 8003310:	2104      	movs	r1, #4
 8003312:	482d      	ldr	r0, [pc, #180]	@ (80033c8 <button_reset_input+0xbc>)
 8003314:	f002 fe72 	bl	8005ffc <HAL_GPIO_ReadPin>
 8003318:	4603      	mov	r3, r0
 800331a:	2b01      	cmp	r3, #1
 800331c:	d007      	beq.n	800332e <button_reset_input+0x22>
 800331e:	4b2b      	ldr	r3, [pc, #172]	@ (80033cc <button_reset_input+0xc0>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d149      	bne.n	80033ba <button_reset_input+0xae>
 8003326:	4b2a      	ldr	r3, [pc, #168]	@ (80033d0 <button_reset_input+0xc4>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	2b01      	cmp	r3, #1
 800332c:	d145      	bne.n	80033ba <button_reset_input+0xae>
		B_reset = 1;
 800332e:	4b29      	ldr	r3, [pc, #164]	@ (80033d4 <button_reset_input+0xc8>)
 8003330:	2201      	movs	r2, #1
 8003332:	701a      	strb	r2, [r3, #0]
		while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9) == 0){
 8003334:	e006      	b.n	8003344 <button_reset_input+0x38>
			Vin = -3.5;
 8003336:	4b28      	ldr	r3, [pc, #160]	@ (80033d8 <button_reset_input+0xcc>)
 8003338:	4a28      	ldr	r2, [pc, #160]	@ (80033dc <button_reset_input+0xd0>)
 800333a:	601a      	str	r2, [r3, #0]
			//software limit
			SoftwareLimit();
 800333c:	f7ff fe8c 	bl	8003058 <SoftwareLimit>
			//Drive Motor which PWM
			DriveMotor();
 8003340:	f7ff fe2e 	bl	8002fa0 <DriveMotor>
		while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9) == 0){
 8003344:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003348:	4825      	ldr	r0, [pc, #148]	@ (80033e0 <button_reset_input+0xd4>)
 800334a:	f002 fe57 	bl	8005ffc <HAL_GPIO_ReadPin>
 800334e:	4603      	mov	r3, r0
 8003350:	2b00      	cmp	r3, #0
 8003352:	d0f0      	beq.n	8003336 <button_reset_input+0x2a>
		}

		Vin = 2.1;
 8003354:	4b20      	ldr	r3, [pc, #128]	@ (80033d8 <button_reset_input+0xcc>)
 8003356:	4a23      	ldr	r2, [pc, #140]	@ (80033e4 <button_reset_input+0xd8>)
 8003358:	601a      	str	r2, [r3, #0]
		SoftwareLimit();
 800335a:	f7ff fe7d 	bl	8003058 <SoftwareLimit>
		DriveMotor();
 800335e:	f7ff fe1f 	bl	8002fa0 <DriveMotor>
		HAL_Delay(500);
 8003362:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003366:	f000 fcff 	bl	8003d68 <HAL_Delay>

		while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9) == 0){
 800336a:	e007      	b.n	800337c <button_reset_input+0x70>
			Vin = -2;
 800336c:	4b1a      	ldr	r3, [pc, #104]	@ (80033d8 <button_reset_input+0xcc>)
 800336e:	f04f 4240 	mov.w	r2, #3221225472	@ 0xc0000000
 8003372:	601a      	str	r2, [r3, #0]
			//software limit
			SoftwareLimit();
 8003374:	f7ff fe70 	bl	8003058 <SoftwareLimit>
			//Drive Motor which PWM
			DriveMotor();
 8003378:	f7ff fe12 	bl	8002fa0 <DriveMotor>
		while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9) == 0){
 800337c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003380:	4817      	ldr	r0, [pc, #92]	@ (80033e0 <button_reset_input+0xd4>)
 8003382:	f002 fe3b 	bl	8005ffc <HAL_GPIO_ReadPin>
 8003386:	4603      	mov	r3, r0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d0ef      	beq.n	800336c <button_reset_input+0x60>
		}
		Vin = 0;
 800338c:	4b12      	ldr	r3, [pc, #72]	@ (80033d8 <button_reset_input+0xcc>)
 800338e:	f04f 0200 	mov.w	r2, #0
 8003392:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_COUNTER(&htim2, 0); //set position to 0
 8003394:	4b14      	ldr	r3, [pc, #80]	@ (80033e8 <button_reset_input+0xdc>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	2200      	movs	r2, #0
 800339a:	625a      	str	r2, [r3, #36]	@ 0x24

		if(Home_state_triger == 0 && set_Home_state == 1){
 800339c:	4b0b      	ldr	r3, [pc, #44]	@ (80033cc <button_reset_input+0xc0>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d10e      	bne.n	80033c2 <button_reset_input+0xb6>
 80033a4:	4b0a      	ldr	r3, [pc, #40]	@ (80033d0 <button_reset_input+0xc4>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d10a      	bne.n	80033c2 <button_reset_input+0xb6>
			Home_state_triger = 1;
 80033ac:	4b07      	ldr	r3, [pc, #28]	@ (80033cc <button_reset_input+0xc0>)
 80033ae:	2201      	movs	r2, #1
 80033b0:	601a      	str	r2, [r3, #0]
			B_reset = 0;
 80033b2:	4b08      	ldr	r3, [pc, #32]	@ (80033d4 <button_reset_input+0xc8>)
 80033b4:	2200      	movs	r2, #0
 80033b6:	701a      	strb	r2, [r3, #0]
		if(Home_state_triger == 0 && set_Home_state == 1){
 80033b8:	e003      	b.n	80033c2 <button_reset_input+0xb6>
		}
	}
	else{
		B_reset = 0;
 80033ba:	4b06      	ldr	r3, [pc, #24]	@ (80033d4 <button_reset_input+0xc8>)
 80033bc:	2200      	movs	r2, #0
 80033be:	701a      	strb	r2, [r3, #0]
	}
}
 80033c0:	e000      	b.n	80033c4 <button_reset_input+0xb8>
		if(Home_state_triger == 0 && set_Home_state == 1){
 80033c2:	bf00      	nop
}
 80033c4:	bf00      	nop
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	48000c00 	.word	0x48000c00
 80033cc:	20000f5c 	.word	0x20000f5c
 80033d0:	20000f58 	.word	0x20000f58
 80033d4:	2000086a 	.word	0x2000086a
 80033d8:	20000820 	.word	0x20000820
 80033dc:	c0600000 	.word	0xc0600000
 80033e0:	48000800 	.word	0x48000800
 80033e4:	40066666 	.word	0x40066666
 80033e8:	20000174 	.word	0x20000174

080033ec <button_save_position>:

void button_save_position(){
 80033ec:	b580      	push	{r7, lr}
 80033ee:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == 1 && B_save == 0){
 80033f0:	2180      	movs	r1, #128	@ 0x80
 80033f2:	4811      	ldr	r0, [pc, #68]	@ (8003438 <button_save_position+0x4c>)
 80033f4:	f002 fe02 	bl	8005ffc <HAL_GPIO_ReadPin>
 80033f8:	4603      	mov	r3, r0
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d116      	bne.n	800342c <button_save_position+0x40>
 80033fe:	4b0f      	ldr	r3, [pc, #60]	@ (800343c <button_save_position+0x50>)
 8003400:	781b      	ldrb	r3, [r3, #0]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d112      	bne.n	800342c <button_save_position+0x40>
		B_save = 1;
 8003406:	4b0d      	ldr	r3, [pc, #52]	@ (800343c <button_save_position+0x50>)
 8003408:	2201      	movs	r2, #1
 800340a:	701a      	strb	r2, [r3, #0]
		count_save += 1;
 800340c:	4b0c      	ldr	r3, [pc, #48]	@ (8003440 <button_save_position+0x54>)
 800340e:	781b      	ldrb	r3, [r3, #0]
 8003410:	3301      	adds	r3, #1
 8003412:	b2da      	uxtb	r2, r3
 8003414:	4b0a      	ldr	r3, [pc, #40]	@ (8003440 <button_save_position+0x54>)
 8003416:	701a      	strb	r2, [r3, #0]
		shelves_pos[count_save] = QEIdata.linearPos;
 8003418:	4b09      	ldr	r3, [pc, #36]	@ (8003440 <button_save_position+0x54>)
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	4618      	mov	r0, r3
 800341e:	4b09      	ldr	r3, [pc, #36]	@ (8003444 <button_save_position+0x58>)
 8003420:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003422:	4909      	ldr	r1, [pc, #36]	@ (8003448 <button_save_position+0x5c>)
 8003424:	0083      	lsls	r3, r0, #2
 8003426:	440b      	add	r3, r1
 8003428:	601a      	str	r2, [r3, #0]
 800342a:	e003      	b.n	8003434 <button_save_position+0x48>
	}
	else{
		B_save = 0;
 800342c:	4b03      	ldr	r3, [pc, #12]	@ (800343c <button_save_position+0x50>)
 800342e:	2200      	movs	r2, #0
 8003430:	701a      	strb	r2, [r3, #0]
	}
}
 8003432:	bf00      	nop
 8003434:	bf00      	nop
 8003436:	bd80      	pop	{r7, pc}
 8003438:	48000400 	.word	0x48000400
 800343c:	2000086b 	.word	0x2000086b
 8003440:	2000086c 	.word	0x2000086c
 8003444:	200007c8 	.word	0x200007c8
 8003448:	20000870 	.word	0x20000870

0800344c <Heartbeat>:

//-------------------------------------------------//
//-------------------------MODBUS FUNCTIONS--------------------------//
void Heartbeat(){
 800344c:	b480      	push	{r7}
 800344e:	af00      	add	r7, sp, #0
	registerFrame[0x00].U16 = 22881;
 8003450:	4b04      	ldr	r3, [pc, #16]	@ (8003464 <Heartbeat+0x18>)
 8003452:	f645 1261 	movw	r2, #22881	@ 0x5961
 8003456:	801a      	strh	r2, [r3, #0]
}
 8003458:	bf00      	nop
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr
 8003462:	bf00      	nop
 8003464:	20000dc0 	.word	0x20000dc0

08003468 <Routine>:

void Routine(){
 8003468:	b580      	push	{r7, lr}
 800346a:	af00      	add	r7, sp, #0
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == 1 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) == 0){
 800346c:	2110      	movs	r1, #16
 800346e:	4833      	ldr	r0, [pc, #204]	@ (800353c <Routine+0xd4>)
 8003470:	f002 fdc4 	bl	8005ffc <HAL_GPIO_ReadPin>
 8003474:	4603      	mov	r3, r0
 8003476:	2b01      	cmp	r3, #1
 8003478:	d10a      	bne.n	8003490 <Routine+0x28>
 800347a:	2120      	movs	r1, #32
 800347c:	482f      	ldr	r0, [pc, #188]	@ (800353c <Routine+0xd4>)
 800347e:	f002 fdbd 	bl	8005ffc <HAL_GPIO_ReadPin>
 8003482:	4603      	mov	r3, r0
 8003484:	2b00      	cmp	r3, #0
 8003486:	d103      	bne.n	8003490 <Routine+0x28>
			gripper_status = 0;
 8003488:	4b2d      	ldr	r3, [pc, #180]	@ (8003540 <Routine+0xd8>)
 800348a:	2200      	movs	r2, #0
 800348c:	601a      	str	r2, [r3, #0]
 800348e:	e010      	b.n	80034b2 <Routine+0x4a>
		}
		else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == 0 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) == 1){
 8003490:	2110      	movs	r1, #16
 8003492:	482a      	ldr	r0, [pc, #168]	@ (800353c <Routine+0xd4>)
 8003494:	f002 fdb2 	bl	8005ffc <HAL_GPIO_ReadPin>
 8003498:	4603      	mov	r3, r0
 800349a:	2b00      	cmp	r3, #0
 800349c:	d109      	bne.n	80034b2 <Routine+0x4a>
 800349e:	2120      	movs	r1, #32
 80034a0:	4826      	ldr	r0, [pc, #152]	@ (800353c <Routine+0xd4>)
 80034a2:	f002 fdab 	bl	8005ffc <HAL_GPIO_ReadPin>
 80034a6:	4603      	mov	r3, r0
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d102      	bne.n	80034b2 <Routine+0x4a>
			gripper_status = 1;
 80034ac:	4b24      	ldr	r3, [pc, #144]	@ (8003540 <Routine+0xd8>)
 80034ae:	2201      	movs	r2, #1
 80034b0:	601a      	str	r2, [r3, #0]
		}
		if (gripper_status == 0 ) // not suck  in
 80034b2:	4b23      	ldr	r3, [pc, #140]	@ (8003540 <Routine+0xd8>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d106      	bne.n	80034c8 <Routine+0x60>
		{
			registerFrame[0x04].U16 = 0b0000;
 80034ba:	4b22      	ldr	r3, [pc, #136]	@ (8003544 <Routine+0xdc>)
 80034bc:	2200      	movs	r2, #0
 80034be:	811a      	strh	r2, [r3, #8]
			registerFrame[0x04].U16 = 0b0001;
 80034c0:	4b20      	ldr	r3, [pc, #128]	@ (8003544 <Routine+0xdc>)
 80034c2:	2201      	movs	r2, #1
 80034c4:	811a      	strh	r2, [r3, #8]
 80034c6:	e009      	b.n	80034dc <Routine+0x74>
		}
		else if (gripper_status == 1) // suck in
 80034c8:	4b1d      	ldr	r3, [pc, #116]	@ (8003540 <Routine+0xd8>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d105      	bne.n	80034dc <Routine+0x74>
		{
			registerFrame[0x04].U16 = 0b0000;
 80034d0:	4b1c      	ldr	r3, [pc, #112]	@ (8003544 <Routine+0xdc>)
 80034d2:	2200      	movs	r2, #0
 80034d4:	811a      	strh	r2, [r3, #8]
			registerFrame[0x04].U16 = 0b0010;
 80034d6:	4b1b      	ldr	r3, [pc, #108]	@ (8003544 <Routine+0xdc>)
 80034d8:	2202      	movs	r2, #2
 80034da:	811a      	strh	r2, [r3, #8]
		}
		registerFrame[0x10].U16 = Moving_status;
 80034dc:	4b1a      	ldr	r3, [pc, #104]	@ (8003548 <Routine+0xe0>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	b29a      	uxth	r2, r3
 80034e2:	4b18      	ldr	r3, [pc, #96]	@ (8003544 <Routine+0xdc>)
 80034e4:	841a      	strh	r2, [r3, #32]
		registerFrame[0x11].U16 = QEIdata.linearPos;
 80034e6:	4b19      	ldr	r3, [pc, #100]	@ (800354c <Routine+0xe4>)
 80034e8:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80034ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80034f0:	ee17 3a90 	vmov	r3, s15
 80034f4:	b29a      	uxth	r2, r3
 80034f6:	4b13      	ldr	r3, [pc, #76]	@ (8003544 <Routine+0xdc>)
 80034f8:	845a      	strh	r2, [r3, #34]	@ 0x22
		registerFrame[0x12].U16 = QEIdata.linearVel;
 80034fa:	4b14      	ldr	r3, [pc, #80]	@ (800354c <Routine+0xe4>)
 80034fc:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8003500:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003504:	ee17 3a90 	vmov	r3, s15
 8003508:	b29a      	uxth	r2, r3
 800350a:	4b0e      	ldr	r3, [pc, #56]	@ (8003544 <Routine+0xdc>)
 800350c:	849a      	strh	r2, [r3, #36]	@ 0x24
		registerFrame[0x13].U16 = QEIdata.linearAcc;
 800350e:	4b0f      	ldr	r3, [pc, #60]	@ (800354c <Routine+0xe4>)
 8003510:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8003514:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003518:	ee17 3a90 	vmov	r3, s15
 800351c:	b29a      	uxth	r2, r3
 800351e:	4b09      	ldr	r3, [pc, #36]	@ (8003544 <Routine+0xdc>)
 8003520:	84da      	strh	r2, [r3, #38]	@ 0x26
		registerFrame[0x40].U16 = x_position;
 8003522:	4b0b      	ldr	r3, [pc, #44]	@ (8003550 <Routine+0xe8>)
 8003524:	edd3 7a00 	vldr	s15, [r3]
 8003528:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800352c:	ee17 3a90 	vmov	r3, s15
 8003530:	b29a      	uxth	r2, r3
 8003532:	4b04      	ldr	r3, [pc, #16]	@ (8003544 <Routine+0xdc>)
 8003534:	f8a3 2080 	strh.w	r2, [r3, #128]	@ 0x80
}
 8003538:	bf00      	nop
 800353a:	bd80      	pop	{r7, pc}
 800353c:	48000400 	.word	0x48000400
 8003540:	20000f54 	.word	0x20000f54
 8003544:	20000dc0 	.word	0x20000dc0
 8003548:	20000f60 	.word	0x20000f60
 800354c:	200007c8 	.word	0x200007c8
 8003550:	20000814 	.word	0x20000814

08003554 <LED_Emergency>:
}
//-----------------------------------------------------------//

//-----------------------LED STATUS--------------------------//

void LED_Emergency(){
 8003554:	b580      	push	{r7, lr}
 8003556:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 8003558:	2200      	movs	r2, #0
 800355a:	2140      	movs	r1, #64	@ 0x40
 800355c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003560:	f002 fd64 	bl	800602c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);
 8003564:	2201      	movs	r2, #1
 8003566:	2180      	movs	r1, #128	@ 0x80
 8003568:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800356c:	f002 fd5e 	bl	800602c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 1);
 8003570:	2201      	movs	r2, #1
 8003572:	2140      	movs	r1, #64	@ 0x40
 8003574:	4808      	ldr	r0, [pc, #32]	@ (8003598 <LED_Emergency+0x44>)
 8003576:	f002 fd59 	bl	800602c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);
 800357a:	2201      	movs	r2, #1
 800357c:	2180      	movs	r1, #128	@ 0x80
 800357e:	4807      	ldr	r0, [pc, #28]	@ (800359c <LED_Emergency+0x48>)
 8003580:	f002 fd54 	bl	800602c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);
 8003584:	2201      	movs	r2, #1
 8003586:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800358a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800358e:	f002 fd4d 	bl	800602c <HAL_GPIO_WritePin>
}
 8003592:	bf00      	nop
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	48000400 	.word	0x48000400
 800359c:	48000800 	.word	0x48000800

080035a0 <LED_Auto>:
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0);
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);
}

void LED_Auto(){
 80035a0:	b580      	push	{r7, lr}
 80035a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 80035a4:	2201      	movs	r2, #1
 80035a6:	2140      	movs	r1, #64	@ 0x40
 80035a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80035ac:	f002 fd3e 	bl	800602c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);
 80035b0:	2201      	movs	r2, #1
 80035b2:	2180      	movs	r1, #128	@ 0x80
 80035b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80035b8:	f002 fd38 	bl	800602c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 1);
 80035bc:	2201      	movs	r2, #1
 80035be:	2140      	movs	r1, #64	@ 0x40
 80035c0:	4808      	ldr	r0, [pc, #32]	@ (80035e4 <LED_Auto+0x44>)
 80035c2:	f002 fd33 	bl	800602c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);
 80035c6:	2200      	movs	r2, #0
 80035c8:	2180      	movs	r1, #128	@ 0x80
 80035ca:	4807      	ldr	r0, [pc, #28]	@ (80035e8 <LED_Auto+0x48>)
 80035cc:	f002 fd2e 	bl	800602c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);
 80035d0:	2201      	movs	r2, #1
 80035d2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80035d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80035da:	f002 fd27 	bl	800602c <HAL_GPIO_WritePin>
}
 80035de:	bf00      	nop
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	bf00      	nop
 80035e4:	48000400 	.word	0x48000400
 80035e8:	48000800 	.word	0x48000800

080035ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80035ec:	b480      	push	{r7}
 80035ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80035f0:	b672      	cpsid	i
}
 80035f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80035f4:	bf00      	nop
 80035f6:	e7fd      	b.n	80035f4 <Error_Handler+0x8>

080035f8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b082      	sub	sp, #8
 80035fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035fe:	4b0f      	ldr	r3, [pc, #60]	@ (800363c <HAL_MspInit+0x44>)
 8003600:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003602:	4a0e      	ldr	r2, [pc, #56]	@ (800363c <HAL_MspInit+0x44>)
 8003604:	f043 0301 	orr.w	r3, r3, #1
 8003608:	6613      	str	r3, [r2, #96]	@ 0x60
 800360a:	4b0c      	ldr	r3, [pc, #48]	@ (800363c <HAL_MspInit+0x44>)
 800360c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800360e:	f003 0301 	and.w	r3, r3, #1
 8003612:	607b      	str	r3, [r7, #4]
 8003614:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003616:	4b09      	ldr	r3, [pc, #36]	@ (800363c <HAL_MspInit+0x44>)
 8003618:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800361a:	4a08      	ldr	r2, [pc, #32]	@ (800363c <HAL_MspInit+0x44>)
 800361c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003620:	6593      	str	r3, [r2, #88]	@ 0x58
 8003622:	4b06      	ldr	r3, [pc, #24]	@ (800363c <HAL_MspInit+0x44>)
 8003624:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003626:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800362a:	603b      	str	r3, [r7, #0]
 800362c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800362e:	f002 fdd1 	bl	80061d4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003632:	bf00      	nop
 8003634:	3708      	adds	r7, #8
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop
 800363c:	40021000 	.word	0x40021000

08003640 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b0a0      	sub	sp, #128	@ 0x80
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003648:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800364c:	2200      	movs	r2, #0
 800364e:	601a      	str	r2, [r3, #0]
 8003650:	605a      	str	r2, [r3, #4]
 8003652:	609a      	str	r2, [r3, #8]
 8003654:	60da      	str	r2, [r3, #12]
 8003656:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003658:	f107 0318 	add.w	r3, r7, #24
 800365c:	2254      	movs	r2, #84	@ 0x54
 800365e:	2100      	movs	r1, #0
 8003660:	4618      	mov	r0, r3
 8003662:	f007 fbeb 	bl	800ae3c <memset>
  if(hadc->Instance==ADC1)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800366e:	d178      	bne.n	8003762 <HAL_ADC_MspInit+0x122>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8003670:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003674:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8003676:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800367a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800367c:	f107 0318 	add.w	r3, r7, #24
 8003680:	4618      	mov	r0, r3
 8003682:	f003 fae5 	bl	8006c50 <HAL_RCCEx_PeriphCLKConfig>
 8003686:	4603      	mov	r3, r0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d001      	beq.n	8003690 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800368c:	f7ff ffae 	bl	80035ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003690:	4b36      	ldr	r3, [pc, #216]	@ (800376c <HAL_ADC_MspInit+0x12c>)
 8003692:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003694:	4a35      	ldr	r2, [pc, #212]	@ (800376c <HAL_ADC_MspInit+0x12c>)
 8003696:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800369a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800369c:	4b33      	ldr	r3, [pc, #204]	@ (800376c <HAL_ADC_MspInit+0x12c>)
 800369e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80036a4:	617b      	str	r3, [r7, #20]
 80036a6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036a8:	4b30      	ldr	r3, [pc, #192]	@ (800376c <HAL_ADC_MspInit+0x12c>)
 80036aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036ac:	4a2f      	ldr	r2, [pc, #188]	@ (800376c <HAL_ADC_MspInit+0x12c>)
 80036ae:	f043 0301 	orr.w	r3, r3, #1
 80036b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80036b4:	4b2d      	ldr	r3, [pc, #180]	@ (800376c <HAL_ADC_MspInit+0x12c>)
 80036b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036b8:	f003 0301 	and.w	r3, r3, #1
 80036bc:	613b      	str	r3, [r7, #16]
 80036be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036c0:	4b2a      	ldr	r3, [pc, #168]	@ (800376c <HAL_ADC_MspInit+0x12c>)
 80036c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036c4:	4a29      	ldr	r2, [pc, #164]	@ (800376c <HAL_ADC_MspInit+0x12c>)
 80036c6:	f043 0302 	orr.w	r3, r3, #2
 80036ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80036cc:	4b27      	ldr	r3, [pc, #156]	@ (800376c <HAL_ADC_MspInit+0x12c>)
 80036ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036d0:	f003 0302 	and.w	r3, r3, #2
 80036d4:	60fb      	str	r3, [r7, #12]
 80036d6:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PB14     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80036d8:	2301      	movs	r3, #1
 80036da:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80036dc:	2303      	movs	r3, #3
 80036de:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036e0:	2300      	movs	r3, #0
 80036e2:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036e4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80036e8:	4619      	mov	r1, r3
 80036ea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80036ee:	f002 fb03 	bl	8005cf8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80036f2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80036f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80036f8:	2303      	movs	r3, #3
 80036fa:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036fc:	2300      	movs	r3, #0
 80036fe:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003700:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003704:	4619      	mov	r1, r3
 8003706:	481a      	ldr	r0, [pc, #104]	@ (8003770 <HAL_ADC_MspInit+0x130>)
 8003708:	f002 faf6 	bl	8005cf8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Channel1;
 800370c:	4b19      	ldr	r3, [pc, #100]	@ (8003774 <HAL_ADC_MspInit+0x134>)
 800370e:	4a1a      	ldr	r2, [pc, #104]	@ (8003778 <HAL_ADC_MspInit+0x138>)
 8003710:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8003712:	4b18      	ldr	r3, [pc, #96]	@ (8003774 <HAL_ADC_MspInit+0x134>)
 8003714:	2205      	movs	r2, #5
 8003716:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003718:	4b16      	ldr	r3, [pc, #88]	@ (8003774 <HAL_ADC_MspInit+0x134>)
 800371a:	2200      	movs	r2, #0
 800371c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800371e:	4b15      	ldr	r3, [pc, #84]	@ (8003774 <HAL_ADC_MspInit+0x134>)
 8003720:	2200      	movs	r2, #0
 8003722:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003724:	4b13      	ldr	r3, [pc, #76]	@ (8003774 <HAL_ADC_MspInit+0x134>)
 8003726:	2280      	movs	r2, #128	@ 0x80
 8003728:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800372a:	4b12      	ldr	r3, [pc, #72]	@ (8003774 <HAL_ADC_MspInit+0x134>)
 800372c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003730:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003732:	4b10      	ldr	r3, [pc, #64]	@ (8003774 <HAL_ADC_MspInit+0x134>)
 8003734:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003738:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800373a:	4b0e      	ldr	r3, [pc, #56]	@ (8003774 <HAL_ADC_MspInit+0x134>)
 800373c:	2220      	movs	r2, #32
 800373e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003740:	4b0c      	ldr	r3, [pc, #48]	@ (8003774 <HAL_ADC_MspInit+0x134>)
 8003742:	2200      	movs	r2, #0
 8003744:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003746:	480b      	ldr	r0, [pc, #44]	@ (8003774 <HAL_ADC_MspInit+0x134>)
 8003748:	f001 ffa4 	bl	8005694 <HAL_DMA_Init>
 800374c:	4603      	mov	r3, r0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d001      	beq.n	8003756 <HAL_ADC_MspInit+0x116>
    {
      Error_Handler();
 8003752:	f7ff ff4b 	bl	80035ec <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	4a06      	ldr	r2, [pc, #24]	@ (8003774 <HAL_ADC_MspInit+0x134>)
 800375a:	655a      	str	r2, [r3, #84]	@ 0x54
 800375c:	4a05      	ldr	r2, [pc, #20]	@ (8003774 <HAL_ADC_MspInit+0x134>)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003762:	bf00      	nop
 8003764:	3780      	adds	r7, #128	@ 0x80
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	40021000 	.word	0x40021000
 8003770:	48000400 	.word	0x48000400
 8003774:	20000114 	.word	0x20000114
 8003778:	40020408 	.word	0x40020408

0800377c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b08a      	sub	sp, #40	@ 0x28
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003784:	f107 0314 	add.w	r3, r7, #20
 8003788:	2200      	movs	r2, #0
 800378a:	601a      	str	r2, [r3, #0]
 800378c:	605a      	str	r2, [r3, #4]
 800378e:	609a      	str	r2, [r3, #8]
 8003790:	60da      	str	r2, [r3, #12]
 8003792:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800379c:	d129      	bne.n	80037f2 <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800379e:	4b17      	ldr	r3, [pc, #92]	@ (80037fc <HAL_TIM_Encoder_MspInit+0x80>)
 80037a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037a2:	4a16      	ldr	r2, [pc, #88]	@ (80037fc <HAL_TIM_Encoder_MspInit+0x80>)
 80037a4:	f043 0301 	orr.w	r3, r3, #1
 80037a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80037aa:	4b14      	ldr	r3, [pc, #80]	@ (80037fc <HAL_TIM_Encoder_MspInit+0x80>)
 80037ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037ae:	f003 0301 	and.w	r3, r3, #1
 80037b2:	613b      	str	r3, [r7, #16]
 80037b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037b6:	4b11      	ldr	r3, [pc, #68]	@ (80037fc <HAL_TIM_Encoder_MspInit+0x80>)
 80037b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037ba:	4a10      	ldr	r2, [pc, #64]	@ (80037fc <HAL_TIM_Encoder_MspInit+0x80>)
 80037bc:	f043 0301 	orr.w	r3, r3, #1
 80037c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80037c2:	4b0e      	ldr	r3, [pc, #56]	@ (80037fc <HAL_TIM_Encoder_MspInit+0x80>)
 80037c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037c6:	f003 0301 	and.w	r3, r3, #1
 80037ca:	60fb      	str	r3, [r7, #12]
 80037cc:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_15;
 80037ce:	f248 0302 	movw	r3, #32770	@ 0x8002
 80037d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037d4:	2302      	movs	r3, #2
 80037d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037d8:	2300      	movs	r3, #0
 80037da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037dc:	2300      	movs	r3, #0
 80037de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80037e0:	2301      	movs	r3, #1
 80037e2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037e4:	f107 0314 	add.w	r3, r7, #20
 80037e8:	4619      	mov	r1, r3
 80037ea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80037ee:	f002 fa83 	bl	8005cf8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80037f2:	bf00      	nop
 80037f4:	3728      	adds	r7, #40	@ 0x28
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	bf00      	nop
 80037fc:	40021000 	.word	0x40021000

08003800 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b088      	sub	sp, #32
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a39      	ldr	r2, [pc, #228]	@ (80038f4 <HAL_TIM_Base_MspInit+0xf4>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d10c      	bne.n	800382c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003812:	4b39      	ldr	r3, [pc, #228]	@ (80038f8 <HAL_TIM_Base_MspInit+0xf8>)
 8003814:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003816:	4a38      	ldr	r2, [pc, #224]	@ (80038f8 <HAL_TIM_Base_MspInit+0xf8>)
 8003818:	f043 0302 	orr.w	r3, r3, #2
 800381c:	6593      	str	r3, [r2, #88]	@ 0x58
 800381e:	4b36      	ldr	r3, [pc, #216]	@ (80038f8 <HAL_TIM_Base_MspInit+0xf8>)
 8003820:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003822:	f003 0302 	and.w	r3, r3, #2
 8003826:	61fb      	str	r3, [r7, #28]
 8003828:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800382a:	e05e      	b.n	80038ea <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM4)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a32      	ldr	r2, [pc, #200]	@ (80038fc <HAL_TIM_Base_MspInit+0xfc>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d10c      	bne.n	8003850 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003836:	4b30      	ldr	r3, [pc, #192]	@ (80038f8 <HAL_TIM_Base_MspInit+0xf8>)
 8003838:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800383a:	4a2f      	ldr	r2, [pc, #188]	@ (80038f8 <HAL_TIM_Base_MspInit+0xf8>)
 800383c:	f043 0304 	orr.w	r3, r3, #4
 8003840:	6593      	str	r3, [r2, #88]	@ 0x58
 8003842:	4b2d      	ldr	r3, [pc, #180]	@ (80038f8 <HAL_TIM_Base_MspInit+0xf8>)
 8003844:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003846:	f003 0304 	and.w	r3, r3, #4
 800384a:	61bb      	str	r3, [r7, #24]
 800384c:	69bb      	ldr	r3, [r7, #24]
}
 800384e:	e04c      	b.n	80038ea <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM5)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a2a      	ldr	r2, [pc, #168]	@ (8003900 <HAL_TIM_Base_MspInit+0x100>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d114      	bne.n	8003884 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800385a:	4b27      	ldr	r3, [pc, #156]	@ (80038f8 <HAL_TIM_Base_MspInit+0xf8>)
 800385c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800385e:	4a26      	ldr	r2, [pc, #152]	@ (80038f8 <HAL_TIM_Base_MspInit+0xf8>)
 8003860:	f043 0308 	orr.w	r3, r3, #8
 8003864:	6593      	str	r3, [r2, #88]	@ 0x58
 8003866:	4b24      	ldr	r3, [pc, #144]	@ (80038f8 <HAL_TIM_Base_MspInit+0xf8>)
 8003868:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800386a:	f003 0308 	and.w	r3, r3, #8
 800386e:	617b      	str	r3, [r7, #20]
 8003870:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8003872:	2200      	movs	r2, #0
 8003874:	2100      	movs	r1, #0
 8003876:	2032      	movs	r0, #50	@ 0x32
 8003878:	f001 fed7 	bl	800562a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800387c:	2032      	movs	r0, #50	@ 0x32
 800387e:	f001 feee 	bl	800565e <HAL_NVIC_EnableIRQ>
}
 8003882:	e032      	b.n	80038ea <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM6)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a1e      	ldr	r2, [pc, #120]	@ (8003904 <HAL_TIM_Base_MspInit+0x104>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d114      	bne.n	80038b8 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800388e:	4b1a      	ldr	r3, [pc, #104]	@ (80038f8 <HAL_TIM_Base_MspInit+0xf8>)
 8003890:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003892:	4a19      	ldr	r2, [pc, #100]	@ (80038f8 <HAL_TIM_Base_MspInit+0xf8>)
 8003894:	f043 0310 	orr.w	r3, r3, #16
 8003898:	6593      	str	r3, [r2, #88]	@ 0x58
 800389a:	4b17      	ldr	r3, [pc, #92]	@ (80038f8 <HAL_TIM_Base_MspInit+0xf8>)
 800389c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800389e:	f003 0310 	and.w	r3, r3, #16
 80038a2:	613b      	str	r3, [r7, #16]
 80038a4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80038a6:	2200      	movs	r2, #0
 80038a8:	2100      	movs	r1, #0
 80038aa:	2036      	movs	r0, #54	@ 0x36
 80038ac:	f001 febd 	bl	800562a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80038b0:	2036      	movs	r0, #54	@ 0x36
 80038b2:	f001 fed4 	bl	800565e <HAL_NVIC_EnableIRQ>
}
 80038b6:	e018      	b.n	80038ea <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM16)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a12      	ldr	r2, [pc, #72]	@ (8003908 <HAL_TIM_Base_MspInit+0x108>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d113      	bne.n	80038ea <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80038c2:	4b0d      	ldr	r3, [pc, #52]	@ (80038f8 <HAL_TIM_Base_MspInit+0xf8>)
 80038c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038c6:	4a0c      	ldr	r2, [pc, #48]	@ (80038f8 <HAL_TIM_Base_MspInit+0xf8>)
 80038c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038cc:	6613      	str	r3, [r2, #96]	@ 0x60
 80038ce:	4b0a      	ldr	r3, [pc, #40]	@ (80038f8 <HAL_TIM_Base_MspInit+0xf8>)
 80038d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038d6:	60fb      	str	r3, [r7, #12]
 80038d8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80038da:	2200      	movs	r2, #0
 80038dc:	2100      	movs	r1, #0
 80038de:	2019      	movs	r0, #25
 80038e0:	f001 fea3 	bl	800562a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80038e4:	2019      	movs	r0, #25
 80038e6:	f001 feba 	bl	800565e <HAL_NVIC_EnableIRQ>
}
 80038ea:	bf00      	nop
 80038ec:	3720      	adds	r7, #32
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	40000400 	.word	0x40000400
 80038f8:	40021000 	.word	0x40021000
 80038fc:	40000800 	.word	0x40000800
 8003900:	40000c00 	.word	0x40000c00
 8003904:	40001000 	.word	0x40001000
 8003908:	40014400 	.word	0x40014400

0800390c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b088      	sub	sp, #32
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003914:	f107 030c 	add.w	r3, r7, #12
 8003918:	2200      	movs	r2, #0
 800391a:	601a      	str	r2, [r3, #0]
 800391c:	605a      	str	r2, [r3, #4]
 800391e:	609a      	str	r2, [r3, #8]
 8003920:	60da      	str	r2, [r3, #12]
 8003922:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a11      	ldr	r2, [pc, #68]	@ (8003970 <HAL_TIM_MspPostInit+0x64>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d11b      	bne.n	8003966 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800392e:	4b11      	ldr	r3, [pc, #68]	@ (8003974 <HAL_TIM_MspPostInit+0x68>)
 8003930:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003932:	4a10      	ldr	r2, [pc, #64]	@ (8003974 <HAL_TIM_MspPostInit+0x68>)
 8003934:	f043 0304 	orr.w	r3, r3, #4
 8003938:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800393a:	4b0e      	ldr	r3, [pc, #56]	@ (8003974 <HAL_TIM_MspPostInit+0x68>)
 800393c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800393e:	f003 0304 	and.w	r3, r3, #4
 8003942:	60bb      	str	r3, [r7, #8]
 8003944:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003946:	2340      	movs	r3, #64	@ 0x40
 8003948:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800394a:	2302      	movs	r3, #2
 800394c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800394e:	2300      	movs	r3, #0
 8003950:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003952:	2300      	movs	r3, #0
 8003954:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003956:	2302      	movs	r3, #2
 8003958:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800395a:	f107 030c 	add.w	r3, r7, #12
 800395e:	4619      	mov	r1, r3
 8003960:	4805      	ldr	r0, [pc, #20]	@ (8003978 <HAL_TIM_MspPostInit+0x6c>)
 8003962:	f002 f9c9 	bl	8005cf8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003966:	bf00      	nop
 8003968:	3720      	adds	r7, #32
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
 800396e:	bf00      	nop
 8003970:	40000400 	.word	0x40000400
 8003974:	40021000 	.word	0x40021000
 8003978:	48000800 	.word	0x48000800

0800397c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b09e      	sub	sp, #120	@ 0x78
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003984:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003988:	2200      	movs	r2, #0
 800398a:	601a      	str	r2, [r3, #0]
 800398c:	605a      	str	r2, [r3, #4]
 800398e:	609a      	str	r2, [r3, #8]
 8003990:	60da      	str	r2, [r3, #12]
 8003992:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003994:	f107 0310 	add.w	r3, r7, #16
 8003998:	2254      	movs	r2, #84	@ 0x54
 800399a:	2100      	movs	r1, #0
 800399c:	4618      	mov	r0, r3
 800399e:	f007 fa4d 	bl	800ae3c <memset>
  if(huart->Instance==USART2)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a4d      	ldr	r2, [pc, #308]	@ (8003adc <HAL_UART_MspInit+0x160>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	f040 8092 	bne.w	8003ad2 <HAL_UART_MspInit+0x156>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80039ae:	2302      	movs	r3, #2
 80039b0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80039b2:	2300      	movs	r3, #0
 80039b4:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80039b6:	f107 0310 	add.w	r3, r7, #16
 80039ba:	4618      	mov	r0, r3
 80039bc:	f003 f948 	bl	8006c50 <HAL_RCCEx_PeriphCLKConfig>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d001      	beq.n	80039ca <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80039c6:	f7ff fe11 	bl	80035ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80039ca:	4b45      	ldr	r3, [pc, #276]	@ (8003ae0 <HAL_UART_MspInit+0x164>)
 80039cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039ce:	4a44      	ldr	r2, [pc, #272]	@ (8003ae0 <HAL_UART_MspInit+0x164>)
 80039d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80039d6:	4b42      	ldr	r3, [pc, #264]	@ (8003ae0 <HAL_UART_MspInit+0x164>)
 80039d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039de:	60fb      	str	r3, [r7, #12]
 80039e0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039e2:	4b3f      	ldr	r3, [pc, #252]	@ (8003ae0 <HAL_UART_MspInit+0x164>)
 80039e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039e6:	4a3e      	ldr	r2, [pc, #248]	@ (8003ae0 <HAL_UART_MspInit+0x164>)
 80039e8:	f043 0301 	orr.w	r3, r3, #1
 80039ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80039ee:	4b3c      	ldr	r3, [pc, #240]	@ (8003ae0 <HAL_UART_MspInit+0x164>)
 80039f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039f2:	f003 0301 	and.w	r3, r3, #1
 80039f6:	60bb      	str	r3, [r7, #8]
 80039f8:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80039fa:	230c      	movs	r3, #12
 80039fc:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039fe:	2302      	movs	r3, #2
 8003a00:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a02:	2300      	movs	r3, #0
 8003a04:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a06:	2300      	movs	r3, #0
 8003a08:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003a0a:	2307      	movs	r3, #7
 8003a0c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a0e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003a12:	4619      	mov	r1, r3
 8003a14:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003a18:	f002 f96e 	bl	8005cf8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel1;
 8003a1c:	4b31      	ldr	r3, [pc, #196]	@ (8003ae4 <HAL_UART_MspInit+0x168>)
 8003a1e:	4a32      	ldr	r2, [pc, #200]	@ (8003ae8 <HAL_UART_MspInit+0x16c>)
 8003a20:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8003a22:	4b30      	ldr	r3, [pc, #192]	@ (8003ae4 <HAL_UART_MspInit+0x168>)
 8003a24:	221b      	movs	r2, #27
 8003a26:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003a28:	4b2e      	ldr	r3, [pc, #184]	@ (8003ae4 <HAL_UART_MspInit+0x168>)
 8003a2a:	2210      	movs	r2, #16
 8003a2c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a2e:	4b2d      	ldr	r3, [pc, #180]	@ (8003ae4 <HAL_UART_MspInit+0x168>)
 8003a30:	2200      	movs	r2, #0
 8003a32:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003a34:	4b2b      	ldr	r3, [pc, #172]	@ (8003ae4 <HAL_UART_MspInit+0x168>)
 8003a36:	2280      	movs	r2, #128	@ 0x80
 8003a38:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003a3a:	4b2a      	ldr	r3, [pc, #168]	@ (8003ae4 <HAL_UART_MspInit+0x168>)
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003a40:	4b28      	ldr	r3, [pc, #160]	@ (8003ae4 <HAL_UART_MspInit+0x168>)
 8003a42:	2200      	movs	r2, #0
 8003a44:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003a46:	4b27      	ldr	r3, [pc, #156]	@ (8003ae4 <HAL_UART_MspInit+0x168>)
 8003a48:	2200      	movs	r2, #0
 8003a4a:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003a4c:	4b25      	ldr	r3, [pc, #148]	@ (8003ae4 <HAL_UART_MspInit+0x168>)
 8003a4e:	2200      	movs	r2, #0
 8003a50:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003a52:	4824      	ldr	r0, [pc, #144]	@ (8003ae4 <HAL_UART_MspInit+0x168>)
 8003a54:	f001 fe1e 	bl	8005694 <HAL_DMA_Init>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d001      	beq.n	8003a62 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8003a5e:	f7ff fdc5 	bl	80035ec <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4a1f      	ldr	r2, [pc, #124]	@ (8003ae4 <HAL_UART_MspInit+0x168>)
 8003a66:	67da      	str	r2, [r3, #124]	@ 0x7c
 8003a68:	4a1e      	ldr	r2, [pc, #120]	@ (8003ae4 <HAL_UART_MspInit+0x168>)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel2;
 8003a6e:	4b1f      	ldr	r3, [pc, #124]	@ (8003aec <HAL_UART_MspInit+0x170>)
 8003a70:	4a1f      	ldr	r2, [pc, #124]	@ (8003af0 <HAL_UART_MspInit+0x174>)
 8003a72:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8003a74:	4b1d      	ldr	r3, [pc, #116]	@ (8003aec <HAL_UART_MspInit+0x170>)
 8003a76:	221a      	movs	r2, #26
 8003a78:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003a7a:	4b1c      	ldr	r3, [pc, #112]	@ (8003aec <HAL_UART_MspInit+0x170>)
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a80:	4b1a      	ldr	r3, [pc, #104]	@ (8003aec <HAL_UART_MspInit+0x170>)
 8003a82:	2200      	movs	r2, #0
 8003a84:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003a86:	4b19      	ldr	r3, [pc, #100]	@ (8003aec <HAL_UART_MspInit+0x170>)
 8003a88:	2280      	movs	r2, #128	@ 0x80
 8003a8a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003a8c:	4b17      	ldr	r3, [pc, #92]	@ (8003aec <HAL_UART_MspInit+0x170>)
 8003a8e:	2200      	movs	r2, #0
 8003a90:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003a92:	4b16      	ldr	r3, [pc, #88]	@ (8003aec <HAL_UART_MspInit+0x170>)
 8003a94:	2200      	movs	r2, #0
 8003a96:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003a98:	4b14      	ldr	r3, [pc, #80]	@ (8003aec <HAL_UART_MspInit+0x170>)
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003a9e:	4b13      	ldr	r3, [pc, #76]	@ (8003aec <HAL_UART_MspInit+0x170>)
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003aa4:	4811      	ldr	r0, [pc, #68]	@ (8003aec <HAL_UART_MspInit+0x170>)
 8003aa6:	f001 fdf5 	bl	8005694 <HAL_DMA_Init>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d001      	beq.n	8003ab4 <HAL_UART_MspInit+0x138>
    {
      Error_Handler();
 8003ab0:	f7ff fd9c 	bl	80035ec <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	4a0d      	ldr	r2, [pc, #52]	@ (8003aec <HAL_UART_MspInit+0x170>)
 8003ab8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8003abc:	4a0b      	ldr	r2, [pc, #44]	@ (8003aec <HAL_UART_MspInit+0x170>)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	2100      	movs	r1, #0
 8003ac6:	2026      	movs	r0, #38	@ 0x26
 8003ac8:	f001 fdaf 	bl	800562a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003acc:	2026      	movs	r0, #38	@ 0x26
 8003ace:	f001 fdc6 	bl	800565e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003ad2:	bf00      	nop
 8003ad4:	3778      	adds	r7, #120	@ 0x78
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	bf00      	nop
 8003adc:	40004400 	.word	0x40004400
 8003ae0:	40021000 	.word	0x40021000
 8003ae4:	20000708 	.word	0x20000708
 8003ae8:	40020008 	.word	0x40020008
 8003aec:	20000768 	.word	0x20000768
 8003af0:	4002001c 	.word	0x4002001c

08003af4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003af4:	b480      	push	{r7}
 8003af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003af8:	bf00      	nop
 8003afa:	e7fd      	b.n	8003af8 <NMI_Handler+0x4>

08003afc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003afc:	b480      	push	{r7}
 8003afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b00:	bf00      	nop
 8003b02:	e7fd      	b.n	8003b00 <HardFault_Handler+0x4>

08003b04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b04:	b480      	push	{r7}
 8003b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b08:	bf00      	nop
 8003b0a:	e7fd      	b.n	8003b08 <MemManage_Handler+0x4>

08003b0c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b10:	bf00      	nop
 8003b12:	e7fd      	b.n	8003b10 <BusFault_Handler+0x4>

08003b14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b14:	b480      	push	{r7}
 8003b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b18:	bf00      	nop
 8003b1a:	e7fd      	b.n	8003b18 <UsageFault_Handler+0x4>

08003b1c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003b20:	bf00      	nop
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr

08003b2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b2a:	b480      	push	{r7}
 8003b2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b2e:	bf00      	nop
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr

08003b38 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003b3c:	bf00      	nop
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr

08003b46 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003b46:	b580      	push	{r7, lr}
 8003b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003b4a:	f000 f8ef 	bl	8003d2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003b4e:	bf00      	nop
 8003b50:	bd80      	pop	{r7, pc}
	...

08003b54 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003b58:	4802      	ldr	r0, [pc, #8]	@ (8003b64 <DMA1_Channel1_IRQHandler+0x10>)
 8003b5a:	f001 ff7e 	bl	8005a5a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003b5e:	bf00      	nop
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	bf00      	nop
 8003b64:	20000708 	.word	0x20000708

08003b68 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003b6c:	4802      	ldr	r0, [pc, #8]	@ (8003b78 <DMA1_Channel2_IRQHandler+0x10>)
 8003b6e:	f001 ff74 	bl	8005a5a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003b72:	bf00      	nop
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	20000768 	.word	0x20000768

08003b7c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8003b80:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8003b84:	f002 fa6a 	bl	800605c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8003b88:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8003b8c:	f002 fa66 	bl	800605c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003b90:	bf00      	nop
 8003b92:	bd80      	pop	{r7, pc}

08003b94 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8003b98:	4802      	ldr	r0, [pc, #8]	@ (8003ba4 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8003b9a:	f003 ffab 	bl	8007af4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8003b9e:	bf00      	nop
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	20000570 	.word	0x20000570

08003ba8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003bac:	4802      	ldr	r0, [pc, #8]	@ (8003bb8 <USART2_IRQHandler+0x10>)
 8003bae:	f005 fc61 	bl	8009474 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003bb2:	bf00      	nop
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	2000063c 	.word	0x2000063c

08003bbc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8003bc0:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8003bc4:	f002 fa4a 	bl	800605c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003bc8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8003bcc:	f002 fa46 	bl	800605c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003bd0:	bf00      	nop
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003bd8:	4802      	ldr	r0, [pc, #8]	@ (8003be4 <TIM5_IRQHandler+0x10>)
 8003bda:	f003 ff8b 	bl	8007af4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003bde:	bf00      	nop
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	200003d8 	.word	0x200003d8

08003be8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003bec:	4802      	ldr	r0, [pc, #8]	@ (8003bf8 <TIM6_DAC_IRQHandler+0x10>)
 8003bee:	f003 ff81 	bl	8007af4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003bf2:	bf00      	nop
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	bf00      	nop
 8003bf8:	200004a4 	.word	0x200004a4

08003bfc <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003c00:	4802      	ldr	r0, [pc, #8]	@ (8003c0c <DMA2_Channel1_IRQHandler+0x10>)
 8003c02:	f001 ff2a 	bl	8005a5a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8003c06:	bf00      	nop
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	20000114 	.word	0x20000114

08003c10 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003c10:	b480      	push	{r7}
 8003c12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003c14:	4b06      	ldr	r3, [pc, #24]	@ (8003c30 <SystemInit+0x20>)
 8003c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c1a:	4a05      	ldr	r2, [pc, #20]	@ (8003c30 <SystemInit+0x20>)
 8003c1c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003c20:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003c24:	bf00      	nop
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr
 8003c2e:	bf00      	nop
 8003c30:	e000ed00 	.word	0xe000ed00

08003c34 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003c34:	480d      	ldr	r0, [pc, #52]	@ (8003c6c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003c36:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003c38:	f7ff ffea 	bl	8003c10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003c3c:	480c      	ldr	r0, [pc, #48]	@ (8003c70 <LoopForever+0x6>)
  ldr r1, =_edata
 8003c3e:	490d      	ldr	r1, [pc, #52]	@ (8003c74 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003c40:	4a0d      	ldr	r2, [pc, #52]	@ (8003c78 <LoopForever+0xe>)
  movs r3, #0
 8003c42:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003c44:	e002      	b.n	8003c4c <LoopCopyDataInit>

08003c46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003c46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003c48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003c4a:	3304      	adds	r3, #4

08003c4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003c4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003c4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003c50:	d3f9      	bcc.n	8003c46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003c52:	4a0a      	ldr	r2, [pc, #40]	@ (8003c7c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003c54:	4c0a      	ldr	r4, [pc, #40]	@ (8003c80 <LoopForever+0x16>)
  movs r3, #0
 8003c56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003c58:	e001      	b.n	8003c5e <LoopFillZerobss>

08003c5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003c5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003c5c:	3204      	adds	r2, #4

08003c5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003c5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003c60:	d3fb      	bcc.n	8003c5a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003c62:	f007 f8f9 	bl	800ae58 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003c66:	f7fd facf 	bl	8001208 <main>

08003c6a <LoopForever>:

LoopForever:
    b LoopForever
 8003c6a:	e7fe      	b.n	8003c6a <LoopForever>
  ldr   r0, =_estack
 8003c6c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003c70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003c74:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8003c78:	0800b114 	.word	0x0800b114
  ldr r2, =_sbss
 8003c7c:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8003c80:	200010b4 	.word	0x200010b4

08003c84 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003c84:	e7fe      	b.n	8003c84 <ADC1_2_IRQHandler>

08003c86 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c86:	b580      	push	{r7, lr}
 8003c88:	b082      	sub	sp, #8
 8003c8a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c90:	2003      	movs	r0, #3
 8003c92:	f001 fcbf 	bl	8005614 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003c96:	2000      	movs	r0, #0
 8003c98:	f000 f80e 	bl	8003cb8 <HAL_InitTick>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d002      	beq.n	8003ca8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	71fb      	strb	r3, [r7, #7]
 8003ca6:	e001      	b.n	8003cac <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003ca8:	f7ff fca6 	bl	80035f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003cac:	79fb      	ldrb	r3, [r7, #7]

}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3708      	adds	r7, #8
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
	...

08003cb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b084      	sub	sp, #16
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003cc4:	4b16      	ldr	r3, [pc, #88]	@ (8003d20 <HAL_InitTick+0x68>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d022      	beq.n	8003d12 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003ccc:	4b15      	ldr	r3, [pc, #84]	@ (8003d24 <HAL_InitTick+0x6c>)
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	4b13      	ldr	r3, [pc, #76]	@ (8003d20 <HAL_InitTick+0x68>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003cd8:	fbb1 f3f3 	udiv	r3, r1, r3
 8003cdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f001 fcca 	bl	800567a <HAL_SYSTICK_Config>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d10f      	bne.n	8003d0c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2b0f      	cmp	r3, #15
 8003cf0:	d809      	bhi.n	8003d06 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	6879      	ldr	r1, [r7, #4]
 8003cf6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003cfa:	f001 fc96 	bl	800562a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003cfe:	4a0a      	ldr	r2, [pc, #40]	@ (8003d28 <HAL_InitTick+0x70>)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6013      	str	r3, [r2, #0]
 8003d04:	e007      	b.n	8003d16 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	73fb      	strb	r3, [r7, #15]
 8003d0a:	e004      	b.n	8003d16 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	73fb      	strb	r3, [r7, #15]
 8003d10:	e001      	b.n	8003d16 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003d16:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3710      	adds	r7, #16
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	20000020 	.word	0x20000020
 8003d24:	20000018 	.word	0x20000018
 8003d28:	2000001c 	.word	0x2000001c

08003d2c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003d30:	4b05      	ldr	r3, [pc, #20]	@ (8003d48 <HAL_IncTick+0x1c>)
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	4b05      	ldr	r3, [pc, #20]	@ (8003d4c <HAL_IncTick+0x20>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4413      	add	r3, r2
 8003d3a:	4a03      	ldr	r2, [pc, #12]	@ (8003d48 <HAL_IncTick+0x1c>)
 8003d3c:	6013      	str	r3, [r2, #0]
}
 8003d3e:	bf00      	nop
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr
 8003d48:	20000f78 	.word	0x20000f78
 8003d4c:	20000020 	.word	0x20000020

08003d50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d50:	b480      	push	{r7}
 8003d52:	af00      	add	r7, sp, #0
  return uwTick;
 8003d54:	4b03      	ldr	r3, [pc, #12]	@ (8003d64 <HAL_GetTick+0x14>)
 8003d56:	681b      	ldr	r3, [r3, #0]
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr
 8003d62:	bf00      	nop
 8003d64:	20000f78 	.word	0x20000f78

08003d68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b084      	sub	sp, #16
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d70:	f7ff ffee 	bl	8003d50 <HAL_GetTick>
 8003d74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003d80:	d004      	beq.n	8003d8c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8003d82:	4b09      	ldr	r3, [pc, #36]	@ (8003da8 <HAL_Delay+0x40>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	68fa      	ldr	r2, [r7, #12]
 8003d88:	4413      	add	r3, r2
 8003d8a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003d8c:	bf00      	nop
 8003d8e:	f7ff ffdf 	bl	8003d50 <HAL_GetTick>
 8003d92:	4602      	mov	r2, r0
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	1ad3      	subs	r3, r2, r3
 8003d98:	68fa      	ldr	r2, [r7, #12]
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d8f7      	bhi.n	8003d8e <HAL_Delay+0x26>
  {
  }
}
 8003d9e:	bf00      	nop
 8003da0:	bf00      	nop
 8003da2:	3710      	adds	r7, #16
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}
 8003da8:	20000020 	.word	0x20000020

08003dac <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	431a      	orrs	r2, r3
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	609a      	str	r2, [r3, #8]
}
 8003dc6:	bf00      	nop
 8003dc8:	370c      	adds	r7, #12
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr

08003dd2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003dd2:	b480      	push	{r7}
 8003dd4:	b083      	sub	sp, #12
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	6078      	str	r0, [r7, #4]
 8003dda:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	431a      	orrs	r2, r3
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	609a      	str	r2, [r3, #8]
}
 8003dec:	bf00      	nop
 8003dee:	370c      	adds	r7, #12
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr

08003df8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b083      	sub	sp, #12
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	370c      	adds	r7, #12
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr

08003e14 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b087      	sub	sp, #28
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	60f8      	str	r0, [r7, #12]
 8003e1c:	60b9      	str	r1, [r7, #8]
 8003e1e:	607a      	str	r2, [r7, #4]
 8003e20:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	3360      	adds	r3, #96	@ 0x60
 8003e26:	461a      	mov	r2, r3
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	4413      	add	r3, r2
 8003e2e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	4b08      	ldr	r3, [pc, #32]	@ (8003e58 <LL_ADC_SetOffset+0x44>)
 8003e36:	4013      	ands	r3, r2
 8003e38:	687a      	ldr	r2, [r7, #4]
 8003e3a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8003e3e:	683a      	ldr	r2, [r7, #0]
 8003e40:	430a      	orrs	r2, r1
 8003e42:	4313      	orrs	r3, r2
 8003e44:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003e4c:	bf00      	nop
 8003e4e:	371c      	adds	r7, #28
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr
 8003e58:	03fff000 	.word	0x03fff000

08003e5c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b085      	sub	sp, #20
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	3360      	adds	r3, #96	@ 0x60
 8003e6a:	461a      	mov	r2, r3
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	4413      	add	r3, r2
 8003e72:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3714      	adds	r7, #20
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr

08003e88 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b087      	sub	sp, #28
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	60f8      	str	r0, [r7, #12]
 8003e90:	60b9      	str	r1, [r7, #8]
 8003e92:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	3360      	adds	r3, #96	@ 0x60
 8003e98:	461a      	mov	r2, r3
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	009b      	lsls	r3, r3, #2
 8003e9e:	4413      	add	r3, r2
 8003ea0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	431a      	orrs	r2, r3
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003eb2:	bf00      	nop
 8003eb4:	371c      	adds	r7, #28
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr

08003ebe <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003ebe:	b480      	push	{r7}
 8003ec0:	b087      	sub	sp, #28
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	60f8      	str	r0, [r7, #12]
 8003ec6:	60b9      	str	r1, [r7, #8]
 8003ec8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	3360      	adds	r3, #96	@ 0x60
 8003ece:	461a      	mov	r2, r3
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	4413      	add	r3, r2
 8003ed6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	431a      	orrs	r2, r3
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8003ee8:	bf00      	nop
 8003eea:	371c      	adds	r7, #28
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr

08003ef4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b087      	sub	sp, #28
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	60f8      	str	r0, [r7, #12]
 8003efc:	60b9      	str	r1, [r7, #8]
 8003efe:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	3360      	adds	r3, #96	@ 0x60
 8003f04:	461a      	mov	r2, r3
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	009b      	lsls	r3, r3, #2
 8003f0a:	4413      	add	r3, r2
 8003f0c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	431a      	orrs	r2, r3
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8003f1e:	bf00      	nop
 8003f20:	371c      	adds	r7, #28
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr

08003f2a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003f2a:	b480      	push	{r7}
 8003f2c:	b083      	sub	sp, #12
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	6078      	str	r0, [r7, #4]
 8003f32:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	695b      	ldr	r3, [r3, #20]
 8003f38:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	431a      	orrs	r2, r3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	615a      	str	r2, [r3, #20]
}
 8003f44:	bf00      	nop
 8003f46:	370c      	adds	r7, #12
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr

08003f50 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b083      	sub	sp, #12
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	68db      	ldr	r3, [r3, #12]
 8003f5c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d101      	bne.n	8003f68 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003f64:	2301      	movs	r3, #1
 8003f66:	e000      	b.n	8003f6a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003f68:	2300      	movs	r3, #0
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	370c      	adds	r7, #12
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr

08003f76 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003f76:	b480      	push	{r7}
 8003f78:	b087      	sub	sp, #28
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	60f8      	str	r0, [r7, #12]
 8003f7e:	60b9      	str	r1, [r7, #8]
 8003f80:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	3330      	adds	r3, #48	@ 0x30
 8003f86:	461a      	mov	r2, r3
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	0a1b      	lsrs	r3, r3, #8
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	f003 030c 	and.w	r3, r3, #12
 8003f92:	4413      	add	r3, r2
 8003f94:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	f003 031f 	and.w	r3, r3, #31
 8003fa0:	211f      	movs	r1, #31
 8003fa2:	fa01 f303 	lsl.w	r3, r1, r3
 8003fa6:	43db      	mvns	r3, r3
 8003fa8:	401a      	ands	r2, r3
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	0e9b      	lsrs	r3, r3, #26
 8003fae:	f003 011f 	and.w	r1, r3, #31
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	f003 031f 	and.w	r3, r3, #31
 8003fb8:	fa01 f303 	lsl.w	r3, r1, r3
 8003fbc:	431a      	orrs	r2, r3
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003fc2:	bf00      	nop
 8003fc4:	371c      	adds	r7, #28
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr

08003fce <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003fce:	b480      	push	{r7}
 8003fd0:	b087      	sub	sp, #28
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	60f8      	str	r0, [r7, #12]
 8003fd6:	60b9      	str	r1, [r7, #8]
 8003fd8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	3314      	adds	r3, #20
 8003fde:	461a      	mov	r2, r3
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	0e5b      	lsrs	r3, r3, #25
 8003fe4:	009b      	lsls	r3, r3, #2
 8003fe6:	f003 0304 	and.w	r3, r3, #4
 8003fea:	4413      	add	r3, r2
 8003fec:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	0d1b      	lsrs	r3, r3, #20
 8003ff6:	f003 031f 	and.w	r3, r3, #31
 8003ffa:	2107      	movs	r1, #7
 8003ffc:	fa01 f303 	lsl.w	r3, r1, r3
 8004000:	43db      	mvns	r3, r3
 8004002:	401a      	ands	r2, r3
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	0d1b      	lsrs	r3, r3, #20
 8004008:	f003 031f 	and.w	r3, r3, #31
 800400c:	6879      	ldr	r1, [r7, #4]
 800400e:	fa01 f303 	lsl.w	r3, r1, r3
 8004012:	431a      	orrs	r2, r3
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004018:	bf00      	nop
 800401a:	371c      	adds	r7, #28
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr

08004024 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004024:	b480      	push	{r7}
 8004026:	b085      	sub	sp, #20
 8004028:	af00      	add	r7, sp, #0
 800402a:	60f8      	str	r0, [r7, #12]
 800402c:	60b9      	str	r1, [r7, #8]
 800402e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800403c:	43db      	mvns	r3, r3
 800403e:	401a      	ands	r2, r3
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f003 0318 	and.w	r3, r3, #24
 8004046:	4908      	ldr	r1, [pc, #32]	@ (8004068 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004048:	40d9      	lsrs	r1, r3
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	400b      	ands	r3, r1
 800404e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004052:	431a      	orrs	r2, r3
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800405a:	bf00      	nop
 800405c:	3714      	adds	r7, #20
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr
 8004066:	bf00      	nop
 8004068:	0007ffff 	.word	0x0007ffff

0800406c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800406c:	b480      	push	{r7}
 800406e:	b083      	sub	sp, #12
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	f003 031f 	and.w	r3, r3, #31
}
 800407c:	4618      	mov	r0, r3
 800407e:	370c      	adds	r7, #12
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr

08004088 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004088:	b480      	push	{r7}
 800408a:	b083      	sub	sp, #12
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8004098:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	6093      	str	r3, [r2, #8]
}
 80040a0:	bf00      	nop
 80040a2:	370c      	adds	r7, #12
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr

080040ac <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b083      	sub	sp, #12
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80040bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80040c0:	d101      	bne.n	80040c6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80040c2:	2301      	movs	r3, #1
 80040c4:	e000      	b.n	80040c8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80040c6:	2300      	movs	r3, #0
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	370c      	adds	r7, #12
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr

080040d4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b083      	sub	sp, #12
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80040e4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80040e8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80040f0:	bf00      	nop
 80040f2:	370c      	adds	r7, #12
 80040f4:	46bd      	mov	sp, r7
 80040f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fa:	4770      	bx	lr

080040fc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b083      	sub	sp, #12
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800410c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004110:	d101      	bne.n	8004116 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004112:	2301      	movs	r3, #1
 8004114:	e000      	b.n	8004118 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004116:	2300      	movs	r3, #0
}
 8004118:	4618      	mov	r0, r3
 800411a:	370c      	adds	r7, #12
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr

08004124 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004124:	b480      	push	{r7}
 8004126:	b083      	sub	sp, #12
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004134:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004138:	f043 0201 	orr.w	r2, r3, #1
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004140:	bf00      	nop
 8004142:	370c      	adds	r7, #12
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr

0800414c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800414c:	b480      	push	{r7}
 800414e:	b083      	sub	sp, #12
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	f003 0301 	and.w	r3, r3, #1
 800415c:	2b01      	cmp	r3, #1
 800415e:	d101      	bne.n	8004164 <LL_ADC_IsEnabled+0x18>
 8004160:	2301      	movs	r3, #1
 8004162:	e000      	b.n	8004166 <LL_ADC_IsEnabled+0x1a>
 8004164:	2300      	movs	r3, #0
}
 8004166:	4618      	mov	r0, r3
 8004168:	370c      	adds	r7, #12
 800416a:	46bd      	mov	sp, r7
 800416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004170:	4770      	bx	lr

08004172 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004172:	b480      	push	{r7}
 8004174:	b083      	sub	sp, #12
 8004176:	af00      	add	r7, sp, #0
 8004178:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004182:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004186:	f043 0204 	orr.w	r2, r3, #4
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800418e:	bf00      	nop
 8004190:	370c      	adds	r7, #12
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr

0800419a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800419a:	b480      	push	{r7}
 800419c:	b083      	sub	sp, #12
 800419e:	af00      	add	r7, sp, #0
 80041a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	f003 0304 	and.w	r3, r3, #4
 80041aa:	2b04      	cmp	r3, #4
 80041ac:	d101      	bne.n	80041b2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80041ae:	2301      	movs	r3, #1
 80041b0:	e000      	b.n	80041b4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80041b2:	2300      	movs	r3, #0
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	370c      	adds	r7, #12
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr

080041c0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b083      	sub	sp, #12
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	f003 0308 	and.w	r3, r3, #8
 80041d0:	2b08      	cmp	r3, #8
 80041d2:	d101      	bne.n	80041d8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80041d4:	2301      	movs	r3, #1
 80041d6:	e000      	b.n	80041da <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80041d8:	2300      	movs	r3, #0
}
 80041da:	4618      	mov	r0, r3
 80041dc:	370c      	adds	r7, #12
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr
	...

080041e8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80041e8:	b590      	push	{r4, r7, lr}
 80041ea:	b089      	sub	sp, #36	@ 0x24
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80041f0:	2300      	movs	r3, #0
 80041f2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80041f4:	2300      	movs	r3, #0
 80041f6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d101      	bne.n	8004202 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e1a9      	b.n	8004556 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	695b      	ldr	r3, [r3, #20]
 8004206:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800420c:	2b00      	cmp	r3, #0
 800420e:	d109      	bne.n	8004224 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f7ff fa15 	bl	8003640 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2200      	movs	r2, #0
 8004220:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4618      	mov	r0, r3
 800422a:	f7ff ff3f 	bl	80040ac <LL_ADC_IsDeepPowerDownEnabled>
 800422e:	4603      	mov	r3, r0
 8004230:	2b00      	cmp	r3, #0
 8004232:	d004      	beq.n	800423e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4618      	mov	r0, r3
 800423a:	f7ff ff25 	bl	8004088 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4618      	mov	r0, r3
 8004244:	f7ff ff5a 	bl	80040fc <LL_ADC_IsInternalRegulatorEnabled>
 8004248:	4603      	mov	r3, r0
 800424a:	2b00      	cmp	r3, #0
 800424c:	d115      	bne.n	800427a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4618      	mov	r0, r3
 8004254:	f7ff ff3e 	bl	80040d4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004258:	4b9c      	ldr	r3, [pc, #624]	@ (80044cc <HAL_ADC_Init+0x2e4>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	099b      	lsrs	r3, r3, #6
 800425e:	4a9c      	ldr	r2, [pc, #624]	@ (80044d0 <HAL_ADC_Init+0x2e8>)
 8004260:	fba2 2303 	umull	r2, r3, r2, r3
 8004264:	099b      	lsrs	r3, r3, #6
 8004266:	3301      	adds	r3, #1
 8004268:	005b      	lsls	r3, r3, #1
 800426a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800426c:	e002      	b.n	8004274 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	3b01      	subs	r3, #1
 8004272:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d1f9      	bne.n	800426e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4618      	mov	r0, r3
 8004280:	f7ff ff3c 	bl	80040fc <LL_ADC_IsInternalRegulatorEnabled>
 8004284:	4603      	mov	r3, r0
 8004286:	2b00      	cmp	r3, #0
 8004288:	d10d      	bne.n	80042a6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800428e:	f043 0210 	orr.w	r2, r3, #16
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800429a:	f043 0201 	orr.w	r2, r3, #1
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4618      	mov	r0, r3
 80042ac:	f7ff ff75 	bl	800419a <LL_ADC_REG_IsConversionOngoing>
 80042b0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042b6:	f003 0310 	and.w	r3, r3, #16
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	f040 8142 	bne.w	8004544 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	f040 813e 	bne.w	8004544 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042cc:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80042d0:	f043 0202 	orr.w	r2, r3, #2
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4618      	mov	r0, r3
 80042de:	f7ff ff35 	bl	800414c <LL_ADC_IsEnabled>
 80042e2:	4603      	mov	r3, r0
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d141      	bne.n	800436c <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80042f0:	d004      	beq.n	80042fc <HAL_ADC_Init+0x114>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a77      	ldr	r2, [pc, #476]	@ (80044d4 <HAL_ADC_Init+0x2ec>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d10f      	bne.n	800431c <HAL_ADC_Init+0x134>
 80042fc:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004300:	f7ff ff24 	bl	800414c <LL_ADC_IsEnabled>
 8004304:	4604      	mov	r4, r0
 8004306:	4873      	ldr	r0, [pc, #460]	@ (80044d4 <HAL_ADC_Init+0x2ec>)
 8004308:	f7ff ff20 	bl	800414c <LL_ADC_IsEnabled>
 800430c:	4603      	mov	r3, r0
 800430e:	4323      	orrs	r3, r4
 8004310:	2b00      	cmp	r3, #0
 8004312:	bf0c      	ite	eq
 8004314:	2301      	moveq	r3, #1
 8004316:	2300      	movne	r3, #0
 8004318:	b2db      	uxtb	r3, r3
 800431a:	e012      	b.n	8004342 <HAL_ADC_Init+0x15a>
 800431c:	486e      	ldr	r0, [pc, #440]	@ (80044d8 <HAL_ADC_Init+0x2f0>)
 800431e:	f7ff ff15 	bl	800414c <LL_ADC_IsEnabled>
 8004322:	4604      	mov	r4, r0
 8004324:	486d      	ldr	r0, [pc, #436]	@ (80044dc <HAL_ADC_Init+0x2f4>)
 8004326:	f7ff ff11 	bl	800414c <LL_ADC_IsEnabled>
 800432a:	4603      	mov	r3, r0
 800432c:	431c      	orrs	r4, r3
 800432e:	486c      	ldr	r0, [pc, #432]	@ (80044e0 <HAL_ADC_Init+0x2f8>)
 8004330:	f7ff ff0c 	bl	800414c <LL_ADC_IsEnabled>
 8004334:	4603      	mov	r3, r0
 8004336:	4323      	orrs	r3, r4
 8004338:	2b00      	cmp	r3, #0
 800433a:	bf0c      	ite	eq
 800433c:	2301      	moveq	r3, #1
 800433e:	2300      	movne	r3, #0
 8004340:	b2db      	uxtb	r3, r3
 8004342:	2b00      	cmp	r3, #0
 8004344:	d012      	beq.n	800436c <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800434e:	d004      	beq.n	800435a <HAL_ADC_Init+0x172>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a5f      	ldr	r2, [pc, #380]	@ (80044d4 <HAL_ADC_Init+0x2ec>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d101      	bne.n	800435e <HAL_ADC_Init+0x176>
 800435a:	4a62      	ldr	r2, [pc, #392]	@ (80044e4 <HAL_ADC_Init+0x2fc>)
 800435c:	e000      	b.n	8004360 <HAL_ADC_Init+0x178>
 800435e:	4a62      	ldr	r2, [pc, #392]	@ (80044e8 <HAL_ADC_Init+0x300>)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	4619      	mov	r1, r3
 8004366:	4610      	mov	r0, r2
 8004368:	f7ff fd20 	bl	8003dac <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	7f5b      	ldrb	r3, [r3, #29]
 8004370:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004376:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800437c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8004382:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800438a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800438c:	4313      	orrs	r3, r2
 800438e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004396:	2b01      	cmp	r3, #1
 8004398:	d106      	bne.n	80043a8 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800439e:	3b01      	subs	r3, #1
 80043a0:	045b      	lsls	r3, r3, #17
 80043a2:	69ba      	ldr	r2, [r7, #24]
 80043a4:	4313      	orrs	r3, r2
 80043a6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d009      	beq.n	80043c4 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043b4:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043bc:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80043be:	69ba      	ldr	r2, [r7, #24]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	68da      	ldr	r2, [r3, #12]
 80043ca:	4b48      	ldr	r3, [pc, #288]	@ (80044ec <HAL_ADC_Init+0x304>)
 80043cc:	4013      	ands	r3, r2
 80043ce:	687a      	ldr	r2, [r7, #4]
 80043d0:	6812      	ldr	r2, [r2, #0]
 80043d2:	69b9      	ldr	r1, [r7, #24]
 80043d4:	430b      	orrs	r3, r1
 80043d6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	691b      	ldr	r3, [r3, #16]
 80043de:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	430a      	orrs	r2, r1
 80043ec:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4618      	mov	r0, r3
 80043f4:	f7ff fee4 	bl	80041c0 <LL_ADC_INJ_IsConversionOngoing>
 80043f8:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d17f      	bne.n	8004500 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d17c      	bne.n	8004500 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800440a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004412:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004414:	4313      	orrs	r3, r2
 8004416:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	68db      	ldr	r3, [r3, #12]
 800441e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004422:	f023 0302 	bic.w	r3, r3, #2
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	6812      	ldr	r2, [r2, #0]
 800442a:	69b9      	ldr	r1, [r7, #24]
 800442c:	430b      	orrs	r3, r1
 800442e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	691b      	ldr	r3, [r3, #16]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d017      	beq.n	8004468 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	691a      	ldr	r2, [r3, #16]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004446:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004450:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004454:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	6911      	ldr	r1, [r2, #16]
 800445c:	687a      	ldr	r2, [r7, #4]
 800445e:	6812      	ldr	r2, [r2, #0]
 8004460:	430b      	orrs	r3, r1
 8004462:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8004466:	e013      	b.n	8004490 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	691a      	ldr	r2, [r3, #16]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004476:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004480:	687a      	ldr	r2, [r7, #4]
 8004482:	6812      	ldr	r2, [r2, #0]
 8004484:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004488:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800448c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004496:	2b01      	cmp	r3, #1
 8004498:	d12a      	bne.n	80044f0 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	691b      	ldr	r3, [r3, #16]
 80044a0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80044a4:	f023 0304 	bic.w	r3, r3, #4
 80044a8:	687a      	ldr	r2, [r7, #4]
 80044aa:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80044ac:	687a      	ldr	r2, [r7, #4]
 80044ae:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80044b0:	4311      	orrs	r1, r2
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80044b6:	4311      	orrs	r1, r2
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80044bc:	430a      	orrs	r2, r1
 80044be:	431a      	orrs	r2, r3
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f042 0201 	orr.w	r2, r2, #1
 80044c8:	611a      	str	r2, [r3, #16]
 80044ca:	e019      	b.n	8004500 <HAL_ADC_Init+0x318>
 80044cc:	20000018 	.word	0x20000018
 80044d0:	053e2d63 	.word	0x053e2d63
 80044d4:	50000100 	.word	0x50000100
 80044d8:	50000400 	.word	0x50000400
 80044dc:	50000500 	.word	0x50000500
 80044e0:	50000600 	.word	0x50000600
 80044e4:	50000300 	.word	0x50000300
 80044e8:	50000700 	.word	0x50000700
 80044ec:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	691a      	ldr	r2, [r3, #16]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f022 0201 	bic.w	r2, r2, #1
 80044fe:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	695b      	ldr	r3, [r3, #20]
 8004504:	2b01      	cmp	r3, #1
 8004506:	d10c      	bne.n	8004522 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800450e:	f023 010f 	bic.w	r1, r3, #15
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6a1b      	ldr	r3, [r3, #32]
 8004516:	1e5a      	subs	r2, r3, #1
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	430a      	orrs	r2, r1
 800451e:	631a      	str	r2, [r3, #48]	@ 0x30
 8004520:	e007      	b.n	8004532 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f022 020f 	bic.w	r2, r2, #15
 8004530:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004536:	f023 0303 	bic.w	r3, r3, #3
 800453a:	f043 0201 	orr.w	r2, r3, #1
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004542:	e007      	b.n	8004554 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004548:	f043 0210 	orr.w	r2, r3, #16
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004554:	7ffb      	ldrb	r3, [r7, #31]
}
 8004556:	4618      	mov	r0, r3
 8004558:	3724      	adds	r7, #36	@ 0x24
 800455a:	46bd      	mov	sp, r7
 800455c:	bd90      	pop	{r4, r7, pc}
 800455e:	bf00      	nop

08004560 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b086      	sub	sp, #24
 8004564:	af00      	add	r7, sp, #0
 8004566:	60f8      	str	r0, [r7, #12]
 8004568:	60b9      	str	r1, [r7, #8]
 800456a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004574:	d004      	beq.n	8004580 <HAL_ADC_Start_DMA+0x20>
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a5a      	ldr	r2, [pc, #360]	@ (80046e4 <HAL_ADC_Start_DMA+0x184>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d101      	bne.n	8004584 <HAL_ADC_Start_DMA+0x24>
 8004580:	4b59      	ldr	r3, [pc, #356]	@ (80046e8 <HAL_ADC_Start_DMA+0x188>)
 8004582:	e000      	b.n	8004586 <HAL_ADC_Start_DMA+0x26>
 8004584:	4b59      	ldr	r3, [pc, #356]	@ (80046ec <HAL_ADC_Start_DMA+0x18c>)
 8004586:	4618      	mov	r0, r3
 8004588:	f7ff fd70 	bl	800406c <LL_ADC_GetMultimode>
 800458c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4618      	mov	r0, r3
 8004594:	f7ff fe01 	bl	800419a <LL_ADC_REG_IsConversionOngoing>
 8004598:	4603      	mov	r3, r0
 800459a:	2b00      	cmp	r3, #0
 800459c:	f040 809b 	bne.w	80046d6 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d101      	bne.n	80045ae <HAL_ADC_Start_DMA+0x4e>
 80045aa:	2302      	movs	r3, #2
 80045ac:	e096      	b.n	80046dc <HAL_ADC_Start_DMA+0x17c>
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2201      	movs	r2, #1
 80045b2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a4d      	ldr	r2, [pc, #308]	@ (80046f0 <HAL_ADC_Start_DMA+0x190>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d008      	beq.n	80045d2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d005      	beq.n	80045d2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	2b05      	cmp	r3, #5
 80045ca:	d002      	beq.n	80045d2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	2b09      	cmp	r3, #9
 80045d0:	d17a      	bne.n	80046c8 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80045d2:	68f8      	ldr	r0, [r7, #12]
 80045d4:	f000 fcf6 	bl	8004fc4 <ADC_Enable>
 80045d8:	4603      	mov	r3, r0
 80045da:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80045dc:	7dfb      	ldrb	r3, [r7, #23]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d16d      	bne.n	80046be <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045e6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80045ea:	f023 0301 	bic.w	r3, r3, #1
 80045ee:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a3a      	ldr	r2, [pc, #232]	@ (80046e4 <HAL_ADC_Start_DMA+0x184>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d009      	beq.n	8004614 <HAL_ADC_Start_DMA+0xb4>
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a3b      	ldr	r2, [pc, #236]	@ (80046f4 <HAL_ADC_Start_DMA+0x194>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d002      	beq.n	8004610 <HAL_ADC_Start_DMA+0xb0>
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	e003      	b.n	8004618 <HAL_ADC_Start_DMA+0xb8>
 8004610:	4b39      	ldr	r3, [pc, #228]	@ (80046f8 <HAL_ADC_Start_DMA+0x198>)
 8004612:	e001      	b.n	8004618 <HAL_ADC_Start_DMA+0xb8>
 8004614:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004618:	68fa      	ldr	r2, [r7, #12]
 800461a:	6812      	ldr	r2, [r2, #0]
 800461c:	4293      	cmp	r3, r2
 800461e:	d002      	beq.n	8004626 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d105      	bne.n	8004632 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800462a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004636:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800463a:	2b00      	cmp	r3, #0
 800463c:	d006      	beq.n	800464c <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004642:	f023 0206 	bic.w	r2, r3, #6
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	661a      	str	r2, [r3, #96]	@ 0x60
 800464a:	e002      	b.n	8004652 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2200      	movs	r2, #0
 8004650:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004656:	4a29      	ldr	r2, [pc, #164]	@ (80046fc <HAL_ADC_Start_DMA+0x19c>)
 8004658:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800465e:	4a28      	ldr	r2, [pc, #160]	@ (8004700 <HAL_ADC_Start_DMA+0x1a0>)
 8004660:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004666:	4a27      	ldr	r2, [pc, #156]	@ (8004704 <HAL_ADC_Start_DMA+0x1a4>)
 8004668:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	221c      	movs	r2, #28
 8004670:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2200      	movs	r2, #0
 8004676:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	685a      	ldr	r2, [r3, #4]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f042 0210 	orr.w	r2, r2, #16
 8004688:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	68da      	ldr	r2, [r3, #12]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f042 0201 	orr.w	r2, r2, #1
 8004698:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	3340      	adds	r3, #64	@ 0x40
 80046a4:	4619      	mov	r1, r3
 80046a6:	68ba      	ldr	r2, [r7, #8]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	f001 f89b 	bl	80057e4 <HAL_DMA_Start_IT>
 80046ae:	4603      	mov	r3, r0
 80046b0:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4618      	mov	r0, r3
 80046b8:	f7ff fd5b 	bl	8004172 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80046bc:	e00d      	b.n	80046da <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2200      	movs	r2, #0
 80046c2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 80046c6:	e008      	b.n	80046da <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2200      	movs	r2, #0
 80046d0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80046d4:	e001      	b.n	80046da <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80046d6:	2302      	movs	r3, #2
 80046d8:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80046da:	7dfb      	ldrb	r3, [r7, #23]
}
 80046dc:	4618      	mov	r0, r3
 80046de:	3718      	adds	r7, #24
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}
 80046e4:	50000100 	.word	0x50000100
 80046e8:	50000300 	.word	0x50000300
 80046ec:	50000700 	.word	0x50000700
 80046f0:	50000600 	.word	0x50000600
 80046f4:	50000500 	.word	0x50000500
 80046f8:	50000400 	.word	0x50000400
 80046fc:	080050f1 	.word	0x080050f1
 8004700:	080051c9 	.word	0x080051c9
 8004704:	080051e5 	.word	0x080051e5

08004708 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004708:	b480      	push	{r7}
 800470a:	b083      	sub	sp, #12
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004710:	bf00      	nop
 8004712:	370c      	adds	r7, #12
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr

0800471c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800471c:	b480      	push	{r7}
 800471e:	b083      	sub	sp, #12
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004724:	bf00      	nop
 8004726:	370c      	adds	r7, #12
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr

08004730 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004730:	b480      	push	{r7}
 8004732:	b083      	sub	sp, #12
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004738:	bf00      	nop
 800473a:	370c      	adds	r7, #12
 800473c:	46bd      	mov	sp, r7
 800473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004742:	4770      	bx	lr

08004744 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b0b6      	sub	sp, #216	@ 0xd8
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
 800474c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800474e:	2300      	movs	r3, #0
 8004750:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004754:	2300      	movs	r3, #0
 8004756:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800475e:	2b01      	cmp	r3, #1
 8004760:	d102      	bne.n	8004768 <HAL_ADC_ConfigChannel+0x24>
 8004762:	2302      	movs	r3, #2
 8004764:	f000 bc13 	b.w	8004f8e <HAL_ADC_ConfigChannel+0x84a>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2201      	movs	r2, #1
 800476c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4618      	mov	r0, r3
 8004776:	f7ff fd10 	bl	800419a <LL_ADC_REG_IsConversionOngoing>
 800477a:	4603      	mov	r3, r0
 800477c:	2b00      	cmp	r3, #0
 800477e:	f040 83f3 	bne.w	8004f68 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6818      	ldr	r0, [r3, #0]
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	6859      	ldr	r1, [r3, #4]
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	461a      	mov	r2, r3
 8004790:	f7ff fbf1 	bl	8003f76 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4618      	mov	r0, r3
 800479a:	f7ff fcfe 	bl	800419a <LL_ADC_REG_IsConversionOngoing>
 800479e:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4618      	mov	r0, r3
 80047a8:	f7ff fd0a 	bl	80041c0 <LL_ADC_INJ_IsConversionOngoing>
 80047ac:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80047b0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	f040 81d9 	bne.w	8004b6c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80047ba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80047be:	2b00      	cmp	r3, #0
 80047c0:	f040 81d4 	bne.w	8004b6c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80047cc:	d10f      	bne.n	80047ee <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6818      	ldr	r0, [r3, #0]
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	2200      	movs	r2, #0
 80047d8:	4619      	mov	r1, r3
 80047da:	f7ff fbf8 	bl	8003fce <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80047e6:	4618      	mov	r0, r3
 80047e8:	f7ff fb9f 	bl	8003f2a <LL_ADC_SetSamplingTimeCommonConfig>
 80047ec:	e00e      	b.n	800480c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6818      	ldr	r0, [r3, #0]
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	6819      	ldr	r1, [r3, #0]
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	461a      	mov	r2, r3
 80047fc:	f7ff fbe7 	bl	8003fce <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	2100      	movs	r1, #0
 8004806:	4618      	mov	r0, r3
 8004808:	f7ff fb8f 	bl	8003f2a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	695a      	ldr	r2, [r3, #20]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	68db      	ldr	r3, [r3, #12]
 8004816:	08db      	lsrs	r3, r3, #3
 8004818:	f003 0303 	and.w	r3, r3, #3
 800481c:	005b      	lsls	r3, r3, #1
 800481e:	fa02 f303 	lsl.w	r3, r2, r3
 8004822:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	691b      	ldr	r3, [r3, #16]
 800482a:	2b04      	cmp	r3, #4
 800482c:	d022      	beq.n	8004874 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6818      	ldr	r0, [r3, #0]
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	6919      	ldr	r1, [r3, #16]
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800483e:	f7ff fae9 	bl	8003e14 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6818      	ldr	r0, [r3, #0]
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	6919      	ldr	r1, [r3, #16]
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	699b      	ldr	r3, [r3, #24]
 800484e:	461a      	mov	r2, r3
 8004850:	f7ff fb35 	bl	8003ebe <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6818      	ldr	r0, [r3, #0]
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004860:	2b01      	cmp	r3, #1
 8004862:	d102      	bne.n	800486a <HAL_ADC_ConfigChannel+0x126>
 8004864:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004868:	e000      	b.n	800486c <HAL_ADC_ConfigChannel+0x128>
 800486a:	2300      	movs	r3, #0
 800486c:	461a      	mov	r2, r3
 800486e:	f7ff fb41 	bl	8003ef4 <LL_ADC_SetOffsetSaturation>
 8004872:	e17b      	b.n	8004b6c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	2100      	movs	r1, #0
 800487a:	4618      	mov	r0, r3
 800487c:	f7ff faee 	bl	8003e5c <LL_ADC_GetOffsetChannel>
 8004880:	4603      	mov	r3, r0
 8004882:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004886:	2b00      	cmp	r3, #0
 8004888:	d10a      	bne.n	80048a0 <HAL_ADC_ConfigChannel+0x15c>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	2100      	movs	r1, #0
 8004890:	4618      	mov	r0, r3
 8004892:	f7ff fae3 	bl	8003e5c <LL_ADC_GetOffsetChannel>
 8004896:	4603      	mov	r3, r0
 8004898:	0e9b      	lsrs	r3, r3, #26
 800489a:	f003 021f 	and.w	r2, r3, #31
 800489e:	e01e      	b.n	80048de <HAL_ADC_ConfigChannel+0x19a>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	2100      	movs	r1, #0
 80048a6:	4618      	mov	r0, r3
 80048a8:	f7ff fad8 	bl	8003e5c <LL_ADC_GetOffsetChannel>
 80048ac:	4603      	mov	r3, r0
 80048ae:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048b2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80048b6:	fa93 f3a3 	rbit	r3, r3
 80048ba:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80048be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80048c2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80048c6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d101      	bne.n	80048d2 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80048ce:	2320      	movs	r3, #32
 80048d0:	e004      	b.n	80048dc <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80048d2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80048d6:	fab3 f383 	clz	r3, r3
 80048da:	b2db      	uxtb	r3, r3
 80048dc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d105      	bne.n	80048f6 <HAL_ADC_ConfigChannel+0x1b2>
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	0e9b      	lsrs	r3, r3, #26
 80048f0:	f003 031f 	and.w	r3, r3, #31
 80048f4:	e018      	b.n	8004928 <HAL_ADC_ConfigChannel+0x1e4>
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048fe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004902:	fa93 f3a3 	rbit	r3, r3
 8004906:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800490a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800490e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8004912:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004916:	2b00      	cmp	r3, #0
 8004918:	d101      	bne.n	800491e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800491a:	2320      	movs	r3, #32
 800491c:	e004      	b.n	8004928 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800491e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004922:	fab3 f383 	clz	r3, r3
 8004926:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004928:	429a      	cmp	r2, r3
 800492a:	d106      	bne.n	800493a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	2200      	movs	r2, #0
 8004932:	2100      	movs	r1, #0
 8004934:	4618      	mov	r0, r3
 8004936:	f7ff faa7 	bl	8003e88 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	2101      	movs	r1, #1
 8004940:	4618      	mov	r0, r3
 8004942:	f7ff fa8b 	bl	8003e5c <LL_ADC_GetOffsetChannel>
 8004946:	4603      	mov	r3, r0
 8004948:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800494c:	2b00      	cmp	r3, #0
 800494e:	d10a      	bne.n	8004966 <HAL_ADC_ConfigChannel+0x222>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	2101      	movs	r1, #1
 8004956:	4618      	mov	r0, r3
 8004958:	f7ff fa80 	bl	8003e5c <LL_ADC_GetOffsetChannel>
 800495c:	4603      	mov	r3, r0
 800495e:	0e9b      	lsrs	r3, r3, #26
 8004960:	f003 021f 	and.w	r2, r3, #31
 8004964:	e01e      	b.n	80049a4 <HAL_ADC_ConfigChannel+0x260>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	2101      	movs	r1, #1
 800496c:	4618      	mov	r0, r3
 800496e:	f7ff fa75 	bl	8003e5c <LL_ADC_GetOffsetChannel>
 8004972:	4603      	mov	r3, r0
 8004974:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004978:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800497c:	fa93 f3a3 	rbit	r3, r3
 8004980:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8004984:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004988:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800498c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004990:	2b00      	cmp	r3, #0
 8004992:	d101      	bne.n	8004998 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8004994:	2320      	movs	r3, #32
 8004996:	e004      	b.n	80049a2 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8004998:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800499c:	fab3 f383 	clz	r3, r3
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d105      	bne.n	80049bc <HAL_ADC_ConfigChannel+0x278>
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	0e9b      	lsrs	r3, r3, #26
 80049b6:	f003 031f 	and.w	r3, r3, #31
 80049ba:	e018      	b.n	80049ee <HAL_ADC_ConfigChannel+0x2aa>
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80049c8:	fa93 f3a3 	rbit	r3, r3
 80049cc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80049d0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80049d4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80049d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d101      	bne.n	80049e4 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80049e0:	2320      	movs	r3, #32
 80049e2:	e004      	b.n	80049ee <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80049e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80049e8:	fab3 f383 	clz	r3, r3
 80049ec:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80049ee:	429a      	cmp	r2, r3
 80049f0:	d106      	bne.n	8004a00 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	2200      	movs	r2, #0
 80049f8:	2101      	movs	r1, #1
 80049fa:	4618      	mov	r0, r3
 80049fc:	f7ff fa44 	bl	8003e88 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	2102      	movs	r1, #2
 8004a06:	4618      	mov	r0, r3
 8004a08:	f7ff fa28 	bl	8003e5c <LL_ADC_GetOffsetChannel>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d10a      	bne.n	8004a2c <HAL_ADC_ConfigChannel+0x2e8>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	2102      	movs	r1, #2
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f7ff fa1d 	bl	8003e5c <LL_ADC_GetOffsetChannel>
 8004a22:	4603      	mov	r3, r0
 8004a24:	0e9b      	lsrs	r3, r3, #26
 8004a26:	f003 021f 	and.w	r2, r3, #31
 8004a2a:	e01e      	b.n	8004a6a <HAL_ADC_ConfigChannel+0x326>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	2102      	movs	r1, #2
 8004a32:	4618      	mov	r0, r3
 8004a34:	f7ff fa12 	bl	8003e5c <LL_ADC_GetOffsetChannel>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a42:	fa93 f3a3 	rbit	r3, r3
 8004a46:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8004a4a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004a4e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8004a52:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d101      	bne.n	8004a5e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8004a5a:	2320      	movs	r3, #32
 8004a5c:	e004      	b.n	8004a68 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8004a5e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004a62:	fab3 f383 	clz	r3, r3
 8004a66:	b2db      	uxtb	r3, r3
 8004a68:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d105      	bne.n	8004a82 <HAL_ADC_ConfigChannel+0x33e>
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	0e9b      	lsrs	r3, r3, #26
 8004a7c:	f003 031f 	and.w	r3, r3, #31
 8004a80:	e016      	b.n	8004ab0 <HAL_ADC_ConfigChannel+0x36c>
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a8a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004a8e:	fa93 f3a3 	rbit	r3, r3
 8004a92:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8004a94:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004a96:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8004a9a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d101      	bne.n	8004aa6 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8004aa2:	2320      	movs	r3, #32
 8004aa4:	e004      	b.n	8004ab0 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8004aa6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004aaa:	fab3 f383 	clz	r3, r3
 8004aae:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d106      	bne.n	8004ac2 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	2102      	movs	r1, #2
 8004abc:	4618      	mov	r0, r3
 8004abe:	f7ff f9e3 	bl	8003e88 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	2103      	movs	r1, #3
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f7ff f9c7 	bl	8003e5c <LL_ADC_GetOffsetChannel>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d10a      	bne.n	8004aee <HAL_ADC_ConfigChannel+0x3aa>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	2103      	movs	r1, #3
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f7ff f9bc 	bl	8003e5c <LL_ADC_GetOffsetChannel>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	0e9b      	lsrs	r3, r3, #26
 8004ae8:	f003 021f 	and.w	r2, r3, #31
 8004aec:	e017      	b.n	8004b1e <HAL_ADC_ConfigChannel+0x3da>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	2103      	movs	r1, #3
 8004af4:	4618      	mov	r0, r3
 8004af6:	f7ff f9b1 	bl	8003e5c <LL_ADC_GetOffsetChannel>
 8004afa:	4603      	mov	r3, r0
 8004afc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004afe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004b00:	fa93 f3a3 	rbit	r3, r3
 8004b04:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8004b06:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004b08:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8004b0a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d101      	bne.n	8004b14 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8004b10:	2320      	movs	r3, #32
 8004b12:	e003      	b.n	8004b1c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8004b14:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b16:	fab3 f383 	clz	r3, r3
 8004b1a:	b2db      	uxtb	r3, r3
 8004b1c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d105      	bne.n	8004b36 <HAL_ADC_ConfigChannel+0x3f2>
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	0e9b      	lsrs	r3, r3, #26
 8004b30:	f003 031f 	and.w	r3, r3, #31
 8004b34:	e011      	b.n	8004b5a <HAL_ADC_ConfigChannel+0x416>
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b3c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004b3e:	fa93 f3a3 	rbit	r3, r3
 8004b42:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8004b44:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004b46:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8004b48:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d101      	bne.n	8004b52 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8004b4e:	2320      	movs	r3, #32
 8004b50:	e003      	b.n	8004b5a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8004b52:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b54:	fab3 f383 	clz	r3, r3
 8004b58:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d106      	bne.n	8004b6c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	2200      	movs	r2, #0
 8004b64:	2103      	movs	r1, #3
 8004b66:	4618      	mov	r0, r3
 8004b68:	f7ff f98e 	bl	8003e88 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4618      	mov	r0, r3
 8004b72:	f7ff faeb 	bl	800414c <LL_ADC_IsEnabled>
 8004b76:	4603      	mov	r3, r0
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	f040 813d 	bne.w	8004df8 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6818      	ldr	r0, [r3, #0]
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	6819      	ldr	r1, [r3, #0]
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	68db      	ldr	r3, [r3, #12]
 8004b8a:	461a      	mov	r2, r3
 8004b8c:	f7ff fa4a 	bl	8004024 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	68db      	ldr	r3, [r3, #12]
 8004b94:	4aa2      	ldr	r2, [pc, #648]	@ (8004e20 <HAL_ADC_ConfigChannel+0x6dc>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	f040 812e 	bne.w	8004df8 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d10b      	bne.n	8004bc4 <HAL_ADC_ConfigChannel+0x480>
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	0e9b      	lsrs	r3, r3, #26
 8004bb2:	3301      	adds	r3, #1
 8004bb4:	f003 031f 	and.w	r3, r3, #31
 8004bb8:	2b09      	cmp	r3, #9
 8004bba:	bf94      	ite	ls
 8004bbc:	2301      	movls	r3, #1
 8004bbe:	2300      	movhi	r3, #0
 8004bc0:	b2db      	uxtb	r3, r3
 8004bc2:	e019      	b.n	8004bf8 <HAL_ADC_ConfigChannel+0x4b4>
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004bcc:	fa93 f3a3 	rbit	r3, r3
 8004bd0:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8004bd2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004bd4:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8004bd6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d101      	bne.n	8004be0 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8004bdc:	2320      	movs	r3, #32
 8004bde:	e003      	b.n	8004be8 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8004be0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004be2:	fab3 f383 	clz	r3, r3
 8004be6:	b2db      	uxtb	r3, r3
 8004be8:	3301      	adds	r3, #1
 8004bea:	f003 031f 	and.w	r3, r3, #31
 8004bee:	2b09      	cmp	r3, #9
 8004bf0:	bf94      	ite	ls
 8004bf2:	2301      	movls	r3, #1
 8004bf4:	2300      	movhi	r3, #0
 8004bf6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d079      	beq.n	8004cf0 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d107      	bne.n	8004c18 <HAL_ADC_ConfigChannel+0x4d4>
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	0e9b      	lsrs	r3, r3, #26
 8004c0e:	3301      	adds	r3, #1
 8004c10:	069b      	lsls	r3, r3, #26
 8004c12:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004c16:	e015      	b.n	8004c44 <HAL_ADC_ConfigChannel+0x500>
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004c20:	fa93 f3a3 	rbit	r3, r3
 8004c24:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004c26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c28:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8004c2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d101      	bne.n	8004c34 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8004c30:	2320      	movs	r3, #32
 8004c32:	e003      	b.n	8004c3c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8004c34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c36:	fab3 f383 	clz	r3, r3
 8004c3a:	b2db      	uxtb	r3, r3
 8004c3c:	3301      	adds	r3, #1
 8004c3e:	069b      	lsls	r3, r3, #26
 8004c40:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d109      	bne.n	8004c64 <HAL_ADC_ConfigChannel+0x520>
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	0e9b      	lsrs	r3, r3, #26
 8004c56:	3301      	adds	r3, #1
 8004c58:	f003 031f 	and.w	r3, r3, #31
 8004c5c:	2101      	movs	r1, #1
 8004c5e:	fa01 f303 	lsl.w	r3, r1, r3
 8004c62:	e017      	b.n	8004c94 <HAL_ADC_ConfigChannel+0x550>
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c6a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c6c:	fa93 f3a3 	rbit	r3, r3
 8004c70:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8004c72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c74:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8004c76:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d101      	bne.n	8004c80 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8004c7c:	2320      	movs	r3, #32
 8004c7e:	e003      	b.n	8004c88 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8004c80:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004c82:	fab3 f383 	clz	r3, r3
 8004c86:	b2db      	uxtb	r3, r3
 8004c88:	3301      	adds	r3, #1
 8004c8a:	f003 031f 	and.w	r3, r3, #31
 8004c8e:	2101      	movs	r1, #1
 8004c90:	fa01 f303 	lsl.w	r3, r1, r3
 8004c94:	ea42 0103 	orr.w	r1, r2, r3
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d10a      	bne.n	8004cba <HAL_ADC_ConfigChannel+0x576>
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	0e9b      	lsrs	r3, r3, #26
 8004caa:	3301      	adds	r3, #1
 8004cac:	f003 021f 	and.w	r2, r3, #31
 8004cb0:	4613      	mov	r3, r2
 8004cb2:	005b      	lsls	r3, r3, #1
 8004cb4:	4413      	add	r3, r2
 8004cb6:	051b      	lsls	r3, r3, #20
 8004cb8:	e018      	b.n	8004cec <HAL_ADC_ConfigChannel+0x5a8>
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cc2:	fa93 f3a3 	rbit	r3, r3
 8004cc6:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004cc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8004ccc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d101      	bne.n	8004cd6 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8004cd2:	2320      	movs	r3, #32
 8004cd4:	e003      	b.n	8004cde <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8004cd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004cd8:	fab3 f383 	clz	r3, r3
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	3301      	adds	r3, #1
 8004ce0:	f003 021f 	and.w	r2, r3, #31
 8004ce4:	4613      	mov	r3, r2
 8004ce6:	005b      	lsls	r3, r3, #1
 8004ce8:	4413      	add	r3, r2
 8004cea:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004cec:	430b      	orrs	r3, r1
 8004cee:	e07e      	b.n	8004dee <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d107      	bne.n	8004d0c <HAL_ADC_ConfigChannel+0x5c8>
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	0e9b      	lsrs	r3, r3, #26
 8004d02:	3301      	adds	r3, #1
 8004d04:	069b      	lsls	r3, r3, #26
 8004d06:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004d0a:	e015      	b.n	8004d38 <HAL_ADC_ConfigChannel+0x5f4>
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d14:	fa93 f3a3 	rbit	r3, r3
 8004d18:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8004d1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d1c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8004d1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d101      	bne.n	8004d28 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8004d24:	2320      	movs	r3, #32
 8004d26:	e003      	b.n	8004d30 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8004d28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d2a:	fab3 f383 	clz	r3, r3
 8004d2e:	b2db      	uxtb	r3, r3
 8004d30:	3301      	adds	r3, #1
 8004d32:	069b      	lsls	r3, r3, #26
 8004d34:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d109      	bne.n	8004d58 <HAL_ADC_ConfigChannel+0x614>
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	0e9b      	lsrs	r3, r3, #26
 8004d4a:	3301      	adds	r3, #1
 8004d4c:	f003 031f 	and.w	r3, r3, #31
 8004d50:	2101      	movs	r1, #1
 8004d52:	fa01 f303 	lsl.w	r3, r1, r3
 8004d56:	e017      	b.n	8004d88 <HAL_ADC_ConfigChannel+0x644>
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d5e:	6a3b      	ldr	r3, [r7, #32]
 8004d60:	fa93 f3a3 	rbit	r3, r3
 8004d64:	61fb      	str	r3, [r7, #28]
  return result;
 8004d66:	69fb      	ldr	r3, [r7, #28]
 8004d68:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8004d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d101      	bne.n	8004d74 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8004d70:	2320      	movs	r3, #32
 8004d72:	e003      	b.n	8004d7c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8004d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d76:	fab3 f383 	clz	r3, r3
 8004d7a:	b2db      	uxtb	r3, r3
 8004d7c:	3301      	adds	r3, #1
 8004d7e:	f003 031f 	and.w	r3, r3, #31
 8004d82:	2101      	movs	r1, #1
 8004d84:	fa01 f303 	lsl.w	r3, r1, r3
 8004d88:	ea42 0103 	orr.w	r1, r2, r3
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d10d      	bne.n	8004db4 <HAL_ADC_ConfigChannel+0x670>
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	0e9b      	lsrs	r3, r3, #26
 8004d9e:	3301      	adds	r3, #1
 8004da0:	f003 021f 	and.w	r2, r3, #31
 8004da4:	4613      	mov	r3, r2
 8004da6:	005b      	lsls	r3, r3, #1
 8004da8:	4413      	add	r3, r2
 8004daa:	3b1e      	subs	r3, #30
 8004dac:	051b      	lsls	r3, r3, #20
 8004dae:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004db2:	e01b      	b.n	8004dec <HAL_ADC_ConfigChannel+0x6a8>
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	fa93 f3a3 	rbit	r3, r3
 8004dc0:	613b      	str	r3, [r7, #16]
  return result;
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004dc6:	69bb      	ldr	r3, [r7, #24]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d101      	bne.n	8004dd0 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8004dcc:	2320      	movs	r3, #32
 8004dce:	e003      	b.n	8004dd8 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8004dd0:	69bb      	ldr	r3, [r7, #24]
 8004dd2:	fab3 f383 	clz	r3, r3
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	3301      	adds	r3, #1
 8004dda:	f003 021f 	and.w	r2, r3, #31
 8004dde:	4613      	mov	r3, r2
 8004de0:	005b      	lsls	r3, r3, #1
 8004de2:	4413      	add	r3, r2
 8004de4:	3b1e      	subs	r3, #30
 8004de6:	051b      	lsls	r3, r3, #20
 8004de8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004dec:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8004dee:	683a      	ldr	r2, [r7, #0]
 8004df0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004df2:	4619      	mov	r1, r3
 8004df4:	f7ff f8eb 	bl	8003fce <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	4b09      	ldr	r3, [pc, #36]	@ (8004e24 <HAL_ADC_ConfigChannel+0x6e0>)
 8004dfe:	4013      	ands	r3, r2
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	f000 80be 	beq.w	8004f82 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e0e:	d004      	beq.n	8004e1a <HAL_ADC_ConfigChannel+0x6d6>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a04      	ldr	r2, [pc, #16]	@ (8004e28 <HAL_ADC_ConfigChannel+0x6e4>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d10a      	bne.n	8004e30 <HAL_ADC_ConfigChannel+0x6ec>
 8004e1a:	4b04      	ldr	r3, [pc, #16]	@ (8004e2c <HAL_ADC_ConfigChannel+0x6e8>)
 8004e1c:	e009      	b.n	8004e32 <HAL_ADC_ConfigChannel+0x6ee>
 8004e1e:	bf00      	nop
 8004e20:	407f0000 	.word	0x407f0000
 8004e24:	80080000 	.word	0x80080000
 8004e28:	50000100 	.word	0x50000100
 8004e2c:	50000300 	.word	0x50000300
 8004e30:	4b59      	ldr	r3, [pc, #356]	@ (8004f98 <HAL_ADC_ConfigChannel+0x854>)
 8004e32:	4618      	mov	r0, r3
 8004e34:	f7fe ffe0 	bl	8003df8 <LL_ADC_GetCommonPathInternalCh>
 8004e38:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a56      	ldr	r2, [pc, #344]	@ (8004f9c <HAL_ADC_ConfigChannel+0x858>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d004      	beq.n	8004e50 <HAL_ADC_ConfigChannel+0x70c>
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a55      	ldr	r2, [pc, #340]	@ (8004fa0 <HAL_ADC_ConfigChannel+0x85c>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d13a      	bne.n	8004ec6 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004e50:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004e54:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d134      	bne.n	8004ec6 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e64:	d005      	beq.n	8004e72 <HAL_ADC_ConfigChannel+0x72e>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a4e      	ldr	r2, [pc, #312]	@ (8004fa4 <HAL_ADC_ConfigChannel+0x860>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	f040 8085 	bne.w	8004f7c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e7a:	d004      	beq.n	8004e86 <HAL_ADC_ConfigChannel+0x742>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a49      	ldr	r2, [pc, #292]	@ (8004fa8 <HAL_ADC_ConfigChannel+0x864>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d101      	bne.n	8004e8a <HAL_ADC_ConfigChannel+0x746>
 8004e86:	4a49      	ldr	r2, [pc, #292]	@ (8004fac <HAL_ADC_ConfigChannel+0x868>)
 8004e88:	e000      	b.n	8004e8c <HAL_ADC_ConfigChannel+0x748>
 8004e8a:	4a43      	ldr	r2, [pc, #268]	@ (8004f98 <HAL_ADC_ConfigChannel+0x854>)
 8004e8c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004e90:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004e94:	4619      	mov	r1, r3
 8004e96:	4610      	mov	r0, r2
 8004e98:	f7fe ff9b 	bl	8003dd2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004e9c:	4b44      	ldr	r3, [pc, #272]	@ (8004fb0 <HAL_ADC_ConfigChannel+0x86c>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	099b      	lsrs	r3, r3, #6
 8004ea2:	4a44      	ldr	r2, [pc, #272]	@ (8004fb4 <HAL_ADC_ConfigChannel+0x870>)
 8004ea4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ea8:	099b      	lsrs	r3, r3, #6
 8004eaa:	1c5a      	adds	r2, r3, #1
 8004eac:	4613      	mov	r3, r2
 8004eae:	005b      	lsls	r3, r3, #1
 8004eb0:	4413      	add	r3, r2
 8004eb2:	009b      	lsls	r3, r3, #2
 8004eb4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004eb6:	e002      	b.n	8004ebe <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	3b01      	subs	r3, #1
 8004ebc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d1f9      	bne.n	8004eb8 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004ec4:	e05a      	b.n	8004f7c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a3b      	ldr	r2, [pc, #236]	@ (8004fb8 <HAL_ADC_ConfigChannel+0x874>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d125      	bne.n	8004f1c <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004ed0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004ed4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d11f      	bne.n	8004f1c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a31      	ldr	r2, [pc, #196]	@ (8004fa8 <HAL_ADC_ConfigChannel+0x864>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d104      	bne.n	8004ef0 <HAL_ADC_ConfigChannel+0x7ac>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a34      	ldr	r2, [pc, #208]	@ (8004fbc <HAL_ADC_ConfigChannel+0x878>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d047      	beq.n	8004f80 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004ef8:	d004      	beq.n	8004f04 <HAL_ADC_ConfigChannel+0x7c0>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a2a      	ldr	r2, [pc, #168]	@ (8004fa8 <HAL_ADC_ConfigChannel+0x864>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d101      	bne.n	8004f08 <HAL_ADC_ConfigChannel+0x7c4>
 8004f04:	4a29      	ldr	r2, [pc, #164]	@ (8004fac <HAL_ADC_ConfigChannel+0x868>)
 8004f06:	e000      	b.n	8004f0a <HAL_ADC_ConfigChannel+0x7c6>
 8004f08:	4a23      	ldr	r2, [pc, #140]	@ (8004f98 <HAL_ADC_ConfigChannel+0x854>)
 8004f0a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004f0e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004f12:	4619      	mov	r1, r3
 8004f14:	4610      	mov	r0, r2
 8004f16:	f7fe ff5c 	bl	8003dd2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004f1a:	e031      	b.n	8004f80 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a27      	ldr	r2, [pc, #156]	@ (8004fc0 <HAL_ADC_ConfigChannel+0x87c>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d12d      	bne.n	8004f82 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004f26:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004f2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d127      	bne.n	8004f82 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a1c      	ldr	r2, [pc, #112]	@ (8004fa8 <HAL_ADC_ConfigChannel+0x864>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d022      	beq.n	8004f82 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004f44:	d004      	beq.n	8004f50 <HAL_ADC_ConfigChannel+0x80c>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a17      	ldr	r2, [pc, #92]	@ (8004fa8 <HAL_ADC_ConfigChannel+0x864>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d101      	bne.n	8004f54 <HAL_ADC_ConfigChannel+0x810>
 8004f50:	4a16      	ldr	r2, [pc, #88]	@ (8004fac <HAL_ADC_ConfigChannel+0x868>)
 8004f52:	e000      	b.n	8004f56 <HAL_ADC_ConfigChannel+0x812>
 8004f54:	4a10      	ldr	r2, [pc, #64]	@ (8004f98 <HAL_ADC_ConfigChannel+0x854>)
 8004f56:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004f5a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004f5e:	4619      	mov	r1, r3
 8004f60:	4610      	mov	r0, r2
 8004f62:	f7fe ff36 	bl	8003dd2 <LL_ADC_SetCommonPathInternalCh>
 8004f66:	e00c      	b.n	8004f82 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f6c:	f043 0220 	orr.w	r2, r3, #32
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8004f7a:	e002      	b.n	8004f82 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004f7c:	bf00      	nop
 8004f7e:	e000      	b.n	8004f82 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004f80:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2200      	movs	r2, #0
 8004f86:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004f8a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	37d8      	adds	r7, #216	@ 0xd8
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}
 8004f96:	bf00      	nop
 8004f98:	50000700 	.word	0x50000700
 8004f9c:	c3210000 	.word	0xc3210000
 8004fa0:	90c00010 	.word	0x90c00010
 8004fa4:	50000600 	.word	0x50000600
 8004fa8:	50000100 	.word	0x50000100
 8004fac:	50000300 	.word	0x50000300
 8004fb0:	20000018 	.word	0x20000018
 8004fb4:	053e2d63 	.word	0x053e2d63
 8004fb8:	c7520000 	.word	0xc7520000
 8004fbc:	50000500 	.word	0x50000500
 8004fc0:	cb840000 	.word	0xcb840000

08004fc4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b084      	sub	sp, #16
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f7ff f8b9 	bl	800414c <LL_ADC_IsEnabled>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d176      	bne.n	80050ce <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	689a      	ldr	r2, [r3, #8]
 8004fe6:	4b3c      	ldr	r3, [pc, #240]	@ (80050d8 <ADC_Enable+0x114>)
 8004fe8:	4013      	ands	r3, r2
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d00d      	beq.n	800500a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ff2:	f043 0210 	orr.w	r2, r3, #16
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ffe:	f043 0201 	orr.w	r2, r3, #1
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	e062      	b.n	80050d0 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4618      	mov	r0, r3
 8005010:	f7ff f888 	bl	8004124 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800501c:	d004      	beq.n	8005028 <ADC_Enable+0x64>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a2e      	ldr	r2, [pc, #184]	@ (80050dc <ADC_Enable+0x118>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d101      	bne.n	800502c <ADC_Enable+0x68>
 8005028:	4b2d      	ldr	r3, [pc, #180]	@ (80050e0 <ADC_Enable+0x11c>)
 800502a:	e000      	b.n	800502e <ADC_Enable+0x6a>
 800502c:	4b2d      	ldr	r3, [pc, #180]	@ (80050e4 <ADC_Enable+0x120>)
 800502e:	4618      	mov	r0, r3
 8005030:	f7fe fee2 	bl	8003df8 <LL_ADC_GetCommonPathInternalCh>
 8005034:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8005036:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800503a:	2b00      	cmp	r3, #0
 800503c:	d013      	beq.n	8005066 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800503e:	4b2a      	ldr	r3, [pc, #168]	@ (80050e8 <ADC_Enable+0x124>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	099b      	lsrs	r3, r3, #6
 8005044:	4a29      	ldr	r2, [pc, #164]	@ (80050ec <ADC_Enable+0x128>)
 8005046:	fba2 2303 	umull	r2, r3, r2, r3
 800504a:	099b      	lsrs	r3, r3, #6
 800504c:	1c5a      	adds	r2, r3, #1
 800504e:	4613      	mov	r3, r2
 8005050:	005b      	lsls	r3, r3, #1
 8005052:	4413      	add	r3, r2
 8005054:	009b      	lsls	r3, r3, #2
 8005056:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005058:	e002      	b.n	8005060 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	3b01      	subs	r3, #1
 800505e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d1f9      	bne.n	800505a <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005066:	f7fe fe73 	bl	8003d50 <HAL_GetTick>
 800506a:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800506c:	e028      	b.n	80050c0 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4618      	mov	r0, r3
 8005074:	f7ff f86a 	bl	800414c <LL_ADC_IsEnabled>
 8005078:	4603      	mov	r3, r0
 800507a:	2b00      	cmp	r3, #0
 800507c:	d104      	bne.n	8005088 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4618      	mov	r0, r3
 8005084:	f7ff f84e 	bl	8004124 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005088:	f7fe fe62 	bl	8003d50 <HAL_GetTick>
 800508c:	4602      	mov	r2, r0
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	1ad3      	subs	r3, r2, r3
 8005092:	2b02      	cmp	r3, #2
 8005094:	d914      	bls.n	80050c0 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f003 0301 	and.w	r3, r3, #1
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d00d      	beq.n	80050c0 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050a8:	f043 0210 	orr.w	r2, r3, #16
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050b4:	f043 0201 	orr.w	r2, r3, #1
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80050bc:	2301      	movs	r3, #1
 80050be:	e007      	b.n	80050d0 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f003 0301 	and.w	r3, r3, #1
 80050ca:	2b01      	cmp	r3, #1
 80050cc:	d1cf      	bne.n	800506e <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80050ce:	2300      	movs	r3, #0
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	3710      	adds	r7, #16
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}
 80050d8:	8000003f 	.word	0x8000003f
 80050dc:	50000100 	.word	0x50000100
 80050e0:	50000300 	.word	0x50000300
 80050e4:	50000700 	.word	0x50000700
 80050e8:	20000018 	.word	0x20000018
 80050ec:	053e2d63 	.word	0x053e2d63

080050f0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b084      	sub	sp, #16
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050fc:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005102:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005106:	2b00      	cmp	r3, #0
 8005108:	d14b      	bne.n	80051a2 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800510e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f003 0308 	and.w	r3, r3, #8
 8005120:	2b00      	cmp	r3, #0
 8005122:	d021      	beq.n	8005168 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4618      	mov	r0, r3
 800512a:	f7fe ff11 	bl	8003f50 <LL_ADC_REG_IsTriggerSourceSWStart>
 800512e:	4603      	mov	r3, r0
 8005130:	2b00      	cmp	r3, #0
 8005132:	d032      	beq.n	800519a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	68db      	ldr	r3, [r3, #12]
 800513a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800513e:	2b00      	cmp	r3, #0
 8005140:	d12b      	bne.n	800519a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005146:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005152:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005156:	2b00      	cmp	r3, #0
 8005158:	d11f      	bne.n	800519a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800515e:	f043 0201 	orr.w	r2, r3, #1
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005166:	e018      	b.n	800519a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	68db      	ldr	r3, [r3, #12]
 800516e:	f003 0302 	and.w	r3, r3, #2
 8005172:	2b00      	cmp	r3, #0
 8005174:	d111      	bne.n	800519a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800517a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005186:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800518a:	2b00      	cmp	r3, #0
 800518c:	d105      	bne.n	800519a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005192:	f043 0201 	orr.w	r2, r3, #1
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800519a:	68f8      	ldr	r0, [r7, #12]
 800519c:	f7ff fab4 	bl	8004708 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80051a0:	e00e      	b.n	80051c0 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051a6:	f003 0310 	and.w	r3, r3, #16
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d003      	beq.n	80051b6 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80051ae:	68f8      	ldr	r0, [r7, #12]
 80051b0:	f7ff fabe 	bl	8004730 <HAL_ADC_ErrorCallback>
}
 80051b4:	e004      	b.n	80051c0 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051bc:	6878      	ldr	r0, [r7, #4]
 80051be:	4798      	blx	r3
}
 80051c0:	bf00      	nop
 80051c2:	3710      	adds	r7, #16
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}

080051c8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b084      	sub	sp, #16
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051d4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80051d6:	68f8      	ldr	r0, [r7, #12]
 80051d8:	f7ff faa0 	bl	800471c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80051dc:	bf00      	nop
 80051de:	3710      	adds	r7, #16
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}

080051e4 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b084      	sub	sp, #16
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051f0:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051f6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005202:	f043 0204 	orr.w	r2, r3, #4
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800520a:	68f8      	ldr	r0, [r7, #12]
 800520c:	f7ff fa90 	bl	8004730 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005210:	bf00      	nop
 8005212:	3710      	adds	r7, #16
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}

08005218 <LL_ADC_IsEnabled>:
{
 8005218:	b480      	push	{r7}
 800521a:	b083      	sub	sp, #12
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	f003 0301 	and.w	r3, r3, #1
 8005228:	2b01      	cmp	r3, #1
 800522a:	d101      	bne.n	8005230 <LL_ADC_IsEnabled+0x18>
 800522c:	2301      	movs	r3, #1
 800522e:	e000      	b.n	8005232 <LL_ADC_IsEnabled+0x1a>
 8005230:	2300      	movs	r3, #0
}
 8005232:	4618      	mov	r0, r3
 8005234:	370c      	adds	r7, #12
 8005236:	46bd      	mov	sp, r7
 8005238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523c:	4770      	bx	lr

0800523e <LL_ADC_REG_IsConversionOngoing>:
{
 800523e:	b480      	push	{r7}
 8005240:	b083      	sub	sp, #12
 8005242:	af00      	add	r7, sp, #0
 8005244:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	f003 0304 	and.w	r3, r3, #4
 800524e:	2b04      	cmp	r3, #4
 8005250:	d101      	bne.n	8005256 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005252:	2301      	movs	r3, #1
 8005254:	e000      	b.n	8005258 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005256:	2300      	movs	r3, #0
}
 8005258:	4618      	mov	r0, r3
 800525a:	370c      	adds	r7, #12
 800525c:	46bd      	mov	sp, r7
 800525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005262:	4770      	bx	lr

08005264 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8005264:	b590      	push	{r4, r7, lr}
 8005266:	b0a1      	sub	sp, #132	@ 0x84
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
 800526c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800526e:	2300      	movs	r3, #0
 8005270:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800527a:	2b01      	cmp	r3, #1
 800527c:	d101      	bne.n	8005282 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800527e:	2302      	movs	r3, #2
 8005280:	e0e7      	b.n	8005452 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2201      	movs	r2, #1
 8005286:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800528a:	2300      	movs	r3, #0
 800528c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800528e:	2300      	movs	r3, #0
 8005290:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800529a:	d102      	bne.n	80052a2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800529c:	4b6f      	ldr	r3, [pc, #444]	@ (800545c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800529e:	60bb      	str	r3, [r7, #8]
 80052a0:	e009      	b.n	80052b6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a6e      	ldr	r2, [pc, #440]	@ (8005460 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d102      	bne.n	80052b2 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80052ac:	4b6d      	ldr	r3, [pc, #436]	@ (8005464 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80052ae:	60bb      	str	r3, [r7, #8]
 80052b0:	e001      	b.n	80052b6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80052b2:	2300      	movs	r3, #0
 80052b4:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d10b      	bne.n	80052d4 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052c0:	f043 0220 	orr.w	r2, r3, #32
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2200      	movs	r2, #0
 80052cc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80052d0:	2301      	movs	r3, #1
 80052d2:	e0be      	b.n	8005452 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	4618      	mov	r0, r3
 80052d8:	f7ff ffb1 	bl	800523e <LL_ADC_REG_IsConversionOngoing>
 80052dc:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4618      	mov	r0, r3
 80052e4:	f7ff ffab 	bl	800523e <LL_ADC_REG_IsConversionOngoing>
 80052e8:	4603      	mov	r3, r0
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	f040 80a0 	bne.w	8005430 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80052f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	f040 809c 	bne.w	8005430 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005300:	d004      	beq.n	800530c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a55      	ldr	r2, [pc, #340]	@ (800545c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d101      	bne.n	8005310 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800530c:	4b56      	ldr	r3, [pc, #344]	@ (8005468 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800530e:	e000      	b.n	8005312 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8005310:	4b56      	ldr	r3, [pc, #344]	@ (800546c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8005312:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d04b      	beq.n	80053b4 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800531c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	6859      	ldr	r1, [r3, #4]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800532e:	035b      	lsls	r3, r3, #13
 8005330:	430b      	orrs	r3, r1
 8005332:	431a      	orrs	r2, r3
 8005334:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005336:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005340:	d004      	beq.n	800534c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a45      	ldr	r2, [pc, #276]	@ (800545c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d10f      	bne.n	800536c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 800534c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005350:	f7ff ff62 	bl	8005218 <LL_ADC_IsEnabled>
 8005354:	4604      	mov	r4, r0
 8005356:	4841      	ldr	r0, [pc, #260]	@ (800545c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005358:	f7ff ff5e 	bl	8005218 <LL_ADC_IsEnabled>
 800535c:	4603      	mov	r3, r0
 800535e:	4323      	orrs	r3, r4
 8005360:	2b00      	cmp	r3, #0
 8005362:	bf0c      	ite	eq
 8005364:	2301      	moveq	r3, #1
 8005366:	2300      	movne	r3, #0
 8005368:	b2db      	uxtb	r3, r3
 800536a:	e012      	b.n	8005392 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 800536c:	483c      	ldr	r0, [pc, #240]	@ (8005460 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800536e:	f7ff ff53 	bl	8005218 <LL_ADC_IsEnabled>
 8005372:	4604      	mov	r4, r0
 8005374:	483b      	ldr	r0, [pc, #236]	@ (8005464 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005376:	f7ff ff4f 	bl	8005218 <LL_ADC_IsEnabled>
 800537a:	4603      	mov	r3, r0
 800537c:	431c      	orrs	r4, r3
 800537e:	483c      	ldr	r0, [pc, #240]	@ (8005470 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8005380:	f7ff ff4a 	bl	8005218 <LL_ADC_IsEnabled>
 8005384:	4603      	mov	r3, r0
 8005386:	4323      	orrs	r3, r4
 8005388:	2b00      	cmp	r3, #0
 800538a:	bf0c      	ite	eq
 800538c:	2301      	moveq	r3, #1
 800538e:	2300      	movne	r3, #0
 8005390:	b2db      	uxtb	r3, r3
 8005392:	2b00      	cmp	r3, #0
 8005394:	d056      	beq.n	8005444 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005396:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800539e:	f023 030f 	bic.w	r3, r3, #15
 80053a2:	683a      	ldr	r2, [r7, #0]
 80053a4:	6811      	ldr	r1, [r2, #0]
 80053a6:	683a      	ldr	r2, [r7, #0]
 80053a8:	6892      	ldr	r2, [r2, #8]
 80053aa:	430a      	orrs	r2, r1
 80053ac:	431a      	orrs	r2, r3
 80053ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80053b0:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80053b2:	e047      	b.n	8005444 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80053b4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80053bc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80053be:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80053c8:	d004      	beq.n	80053d4 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a23      	ldr	r2, [pc, #140]	@ (800545c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d10f      	bne.n	80053f4 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80053d4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80053d8:	f7ff ff1e 	bl	8005218 <LL_ADC_IsEnabled>
 80053dc:	4604      	mov	r4, r0
 80053de:	481f      	ldr	r0, [pc, #124]	@ (800545c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80053e0:	f7ff ff1a 	bl	8005218 <LL_ADC_IsEnabled>
 80053e4:	4603      	mov	r3, r0
 80053e6:	4323      	orrs	r3, r4
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	bf0c      	ite	eq
 80053ec:	2301      	moveq	r3, #1
 80053ee:	2300      	movne	r3, #0
 80053f0:	b2db      	uxtb	r3, r3
 80053f2:	e012      	b.n	800541a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80053f4:	481a      	ldr	r0, [pc, #104]	@ (8005460 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80053f6:	f7ff ff0f 	bl	8005218 <LL_ADC_IsEnabled>
 80053fa:	4604      	mov	r4, r0
 80053fc:	4819      	ldr	r0, [pc, #100]	@ (8005464 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80053fe:	f7ff ff0b 	bl	8005218 <LL_ADC_IsEnabled>
 8005402:	4603      	mov	r3, r0
 8005404:	431c      	orrs	r4, r3
 8005406:	481a      	ldr	r0, [pc, #104]	@ (8005470 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8005408:	f7ff ff06 	bl	8005218 <LL_ADC_IsEnabled>
 800540c:	4603      	mov	r3, r0
 800540e:	4323      	orrs	r3, r4
 8005410:	2b00      	cmp	r3, #0
 8005412:	bf0c      	ite	eq
 8005414:	2301      	moveq	r3, #1
 8005416:	2300      	movne	r3, #0
 8005418:	b2db      	uxtb	r3, r3
 800541a:	2b00      	cmp	r3, #0
 800541c:	d012      	beq.n	8005444 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800541e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005426:	f023 030f 	bic.w	r3, r3, #15
 800542a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800542c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800542e:	e009      	b.n	8005444 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005434:	f043 0220 	orr.w	r2, r3, #32
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800543c:	2301      	movs	r3, #1
 800543e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8005442:	e000      	b.n	8005446 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005444:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2200      	movs	r2, #0
 800544a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800544e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8005452:	4618      	mov	r0, r3
 8005454:	3784      	adds	r7, #132	@ 0x84
 8005456:	46bd      	mov	sp, r7
 8005458:	bd90      	pop	{r4, r7, pc}
 800545a:	bf00      	nop
 800545c:	50000100 	.word	0x50000100
 8005460:	50000400 	.word	0x50000400
 8005464:	50000500 	.word	0x50000500
 8005468:	50000300 	.word	0x50000300
 800546c:	50000700 	.word	0x50000700
 8005470:	50000600 	.word	0x50000600

08005474 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005474:	b480      	push	{r7}
 8005476:	b085      	sub	sp, #20
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	f003 0307 	and.w	r3, r3, #7
 8005482:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005484:	4b0c      	ldr	r3, [pc, #48]	@ (80054b8 <__NVIC_SetPriorityGrouping+0x44>)
 8005486:	68db      	ldr	r3, [r3, #12]
 8005488:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800548a:	68ba      	ldr	r2, [r7, #8]
 800548c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005490:	4013      	ands	r3, r2
 8005492:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800549c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80054a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80054a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80054a6:	4a04      	ldr	r2, [pc, #16]	@ (80054b8 <__NVIC_SetPriorityGrouping+0x44>)
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	60d3      	str	r3, [r2, #12]
}
 80054ac:	bf00      	nop
 80054ae:	3714      	adds	r7, #20
 80054b0:	46bd      	mov	sp, r7
 80054b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b6:	4770      	bx	lr
 80054b8:	e000ed00 	.word	0xe000ed00

080054bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80054bc:	b480      	push	{r7}
 80054be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80054c0:	4b04      	ldr	r3, [pc, #16]	@ (80054d4 <__NVIC_GetPriorityGrouping+0x18>)
 80054c2:	68db      	ldr	r3, [r3, #12]
 80054c4:	0a1b      	lsrs	r3, r3, #8
 80054c6:	f003 0307 	and.w	r3, r3, #7
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	46bd      	mov	sp, r7
 80054ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d2:	4770      	bx	lr
 80054d4:	e000ed00 	.word	0xe000ed00

080054d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80054d8:	b480      	push	{r7}
 80054da:	b083      	sub	sp, #12
 80054dc:	af00      	add	r7, sp, #0
 80054de:	4603      	mov	r3, r0
 80054e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80054e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	db0b      	blt.n	8005502 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80054ea:	79fb      	ldrb	r3, [r7, #7]
 80054ec:	f003 021f 	and.w	r2, r3, #31
 80054f0:	4907      	ldr	r1, [pc, #28]	@ (8005510 <__NVIC_EnableIRQ+0x38>)
 80054f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054f6:	095b      	lsrs	r3, r3, #5
 80054f8:	2001      	movs	r0, #1
 80054fa:	fa00 f202 	lsl.w	r2, r0, r2
 80054fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005502:	bf00      	nop
 8005504:	370c      	adds	r7, #12
 8005506:	46bd      	mov	sp, r7
 8005508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550c:	4770      	bx	lr
 800550e:	bf00      	nop
 8005510:	e000e100 	.word	0xe000e100

08005514 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005514:	b480      	push	{r7}
 8005516:	b083      	sub	sp, #12
 8005518:	af00      	add	r7, sp, #0
 800551a:	4603      	mov	r3, r0
 800551c:	6039      	str	r1, [r7, #0]
 800551e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005520:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005524:	2b00      	cmp	r3, #0
 8005526:	db0a      	blt.n	800553e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	b2da      	uxtb	r2, r3
 800552c:	490c      	ldr	r1, [pc, #48]	@ (8005560 <__NVIC_SetPriority+0x4c>)
 800552e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005532:	0112      	lsls	r2, r2, #4
 8005534:	b2d2      	uxtb	r2, r2
 8005536:	440b      	add	r3, r1
 8005538:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800553c:	e00a      	b.n	8005554 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	b2da      	uxtb	r2, r3
 8005542:	4908      	ldr	r1, [pc, #32]	@ (8005564 <__NVIC_SetPriority+0x50>)
 8005544:	79fb      	ldrb	r3, [r7, #7]
 8005546:	f003 030f 	and.w	r3, r3, #15
 800554a:	3b04      	subs	r3, #4
 800554c:	0112      	lsls	r2, r2, #4
 800554e:	b2d2      	uxtb	r2, r2
 8005550:	440b      	add	r3, r1
 8005552:	761a      	strb	r2, [r3, #24]
}
 8005554:	bf00      	nop
 8005556:	370c      	adds	r7, #12
 8005558:	46bd      	mov	sp, r7
 800555a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555e:	4770      	bx	lr
 8005560:	e000e100 	.word	0xe000e100
 8005564:	e000ed00 	.word	0xe000ed00

08005568 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005568:	b480      	push	{r7}
 800556a:	b089      	sub	sp, #36	@ 0x24
 800556c:	af00      	add	r7, sp, #0
 800556e:	60f8      	str	r0, [r7, #12]
 8005570:	60b9      	str	r1, [r7, #8]
 8005572:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f003 0307 	and.w	r3, r3, #7
 800557a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800557c:	69fb      	ldr	r3, [r7, #28]
 800557e:	f1c3 0307 	rsb	r3, r3, #7
 8005582:	2b04      	cmp	r3, #4
 8005584:	bf28      	it	cs
 8005586:	2304      	movcs	r3, #4
 8005588:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800558a:	69fb      	ldr	r3, [r7, #28]
 800558c:	3304      	adds	r3, #4
 800558e:	2b06      	cmp	r3, #6
 8005590:	d902      	bls.n	8005598 <NVIC_EncodePriority+0x30>
 8005592:	69fb      	ldr	r3, [r7, #28]
 8005594:	3b03      	subs	r3, #3
 8005596:	e000      	b.n	800559a <NVIC_EncodePriority+0x32>
 8005598:	2300      	movs	r3, #0
 800559a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800559c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80055a0:	69bb      	ldr	r3, [r7, #24]
 80055a2:	fa02 f303 	lsl.w	r3, r2, r3
 80055a6:	43da      	mvns	r2, r3
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	401a      	ands	r2, r3
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80055b0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	fa01 f303 	lsl.w	r3, r1, r3
 80055ba:	43d9      	mvns	r1, r3
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80055c0:	4313      	orrs	r3, r2
         );
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	3724      	adds	r7, #36	@ 0x24
 80055c6:	46bd      	mov	sp, r7
 80055c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055cc:	4770      	bx	lr
	...

080055d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b082      	sub	sp, #8
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	3b01      	subs	r3, #1
 80055dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80055e0:	d301      	bcc.n	80055e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80055e2:	2301      	movs	r3, #1
 80055e4:	e00f      	b.n	8005606 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80055e6:	4a0a      	ldr	r2, [pc, #40]	@ (8005610 <SysTick_Config+0x40>)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	3b01      	subs	r3, #1
 80055ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80055ee:	210f      	movs	r1, #15
 80055f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80055f4:	f7ff ff8e 	bl	8005514 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80055f8:	4b05      	ldr	r3, [pc, #20]	@ (8005610 <SysTick_Config+0x40>)
 80055fa:	2200      	movs	r2, #0
 80055fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80055fe:	4b04      	ldr	r3, [pc, #16]	@ (8005610 <SysTick_Config+0x40>)
 8005600:	2207      	movs	r2, #7
 8005602:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005604:	2300      	movs	r3, #0
}
 8005606:	4618      	mov	r0, r3
 8005608:	3708      	adds	r7, #8
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}
 800560e:	bf00      	nop
 8005610:	e000e010 	.word	0xe000e010

08005614 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b082      	sub	sp, #8
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	f7ff ff29 	bl	8005474 <__NVIC_SetPriorityGrouping>
}
 8005622:	bf00      	nop
 8005624:	3708      	adds	r7, #8
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}

0800562a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800562a:	b580      	push	{r7, lr}
 800562c:	b086      	sub	sp, #24
 800562e:	af00      	add	r7, sp, #0
 8005630:	4603      	mov	r3, r0
 8005632:	60b9      	str	r1, [r7, #8]
 8005634:	607a      	str	r2, [r7, #4]
 8005636:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005638:	f7ff ff40 	bl	80054bc <__NVIC_GetPriorityGrouping>
 800563c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800563e:	687a      	ldr	r2, [r7, #4]
 8005640:	68b9      	ldr	r1, [r7, #8]
 8005642:	6978      	ldr	r0, [r7, #20]
 8005644:	f7ff ff90 	bl	8005568 <NVIC_EncodePriority>
 8005648:	4602      	mov	r2, r0
 800564a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800564e:	4611      	mov	r1, r2
 8005650:	4618      	mov	r0, r3
 8005652:	f7ff ff5f 	bl	8005514 <__NVIC_SetPriority>
}
 8005656:	bf00      	nop
 8005658:	3718      	adds	r7, #24
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}

0800565e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800565e:	b580      	push	{r7, lr}
 8005660:	b082      	sub	sp, #8
 8005662:	af00      	add	r7, sp, #0
 8005664:	4603      	mov	r3, r0
 8005666:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005668:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800566c:	4618      	mov	r0, r3
 800566e:	f7ff ff33 	bl	80054d8 <__NVIC_EnableIRQ>
}
 8005672:	bf00      	nop
 8005674:	3708      	adds	r7, #8
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}

0800567a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800567a:	b580      	push	{r7, lr}
 800567c:	b082      	sub	sp, #8
 800567e:	af00      	add	r7, sp, #0
 8005680:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f7ff ffa4 	bl	80055d0 <SysTick_Config>
 8005688:	4603      	mov	r3, r0
}
 800568a:	4618      	mov	r0, r3
 800568c:	3708      	adds	r7, #8
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}
	...

08005694 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b084      	sub	sp, #16
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d101      	bne.n	80056a6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	e08d      	b.n	80057c2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	461a      	mov	r2, r3
 80056ac:	4b47      	ldr	r3, [pc, #284]	@ (80057cc <HAL_DMA_Init+0x138>)
 80056ae:	429a      	cmp	r2, r3
 80056b0:	d80f      	bhi.n	80056d2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	461a      	mov	r2, r3
 80056b8:	4b45      	ldr	r3, [pc, #276]	@ (80057d0 <HAL_DMA_Init+0x13c>)
 80056ba:	4413      	add	r3, r2
 80056bc:	4a45      	ldr	r2, [pc, #276]	@ (80057d4 <HAL_DMA_Init+0x140>)
 80056be:	fba2 2303 	umull	r2, r3, r2, r3
 80056c2:	091b      	lsrs	r3, r3, #4
 80056c4:	009a      	lsls	r2, r3, #2
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	4a42      	ldr	r2, [pc, #264]	@ (80057d8 <HAL_DMA_Init+0x144>)
 80056ce:	641a      	str	r2, [r3, #64]	@ 0x40
 80056d0:	e00e      	b.n	80056f0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	461a      	mov	r2, r3
 80056d8:	4b40      	ldr	r3, [pc, #256]	@ (80057dc <HAL_DMA_Init+0x148>)
 80056da:	4413      	add	r3, r2
 80056dc:	4a3d      	ldr	r2, [pc, #244]	@ (80057d4 <HAL_DMA_Init+0x140>)
 80056de:	fba2 2303 	umull	r2, r3, r2, r3
 80056e2:	091b      	lsrs	r3, r3, #4
 80056e4:	009a      	lsls	r2, r3, #2
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	4a3c      	ldr	r2, [pc, #240]	@ (80057e0 <HAL_DMA_Init+0x14c>)
 80056ee:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2202      	movs	r2, #2
 80056f4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8005706:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800570a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005714:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	691b      	ldr	r3, [r3, #16]
 800571a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005720:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	699b      	ldr	r3, [r3, #24]
 8005726:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800572c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6a1b      	ldr	r3, [r3, #32]
 8005732:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005734:	68fa      	ldr	r2, [r7, #12]
 8005736:	4313      	orrs	r3, r2
 8005738:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	68fa      	ldr	r2, [r7, #12]
 8005740:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f000 fa76 	bl	8005c34 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005750:	d102      	bne.n	8005758 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2200      	movs	r2, #0
 8005756:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	685a      	ldr	r2, [r3, #4]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005760:	b2d2      	uxtb	r2, r2
 8005762:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005768:	687a      	ldr	r2, [r7, #4]
 800576a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800576c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d010      	beq.n	8005798 <HAL_DMA_Init+0x104>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	2b04      	cmp	r3, #4
 800577c:	d80c      	bhi.n	8005798 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f000 fa96 	bl	8005cb0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005788:	2200      	movs	r2, #0
 800578a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005790:	687a      	ldr	r2, [r7, #4]
 8005792:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005794:	605a      	str	r2, [r3, #4]
 8005796:	e008      	b.n	80057aa <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2200      	movs	r2, #0
 800579c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2200      	movs	r2, #0
 80057a2:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2200      	movs	r2, #0
 80057a8:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2200      	movs	r2, #0
 80057ae:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2201      	movs	r2, #1
 80057b4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2200      	movs	r2, #0
 80057bc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80057c0:	2300      	movs	r3, #0
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3710      	adds	r7, #16
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}
 80057ca:	bf00      	nop
 80057cc:	40020407 	.word	0x40020407
 80057d0:	bffdfff8 	.word	0xbffdfff8
 80057d4:	cccccccd 	.word	0xcccccccd
 80057d8:	40020000 	.word	0x40020000
 80057dc:	bffdfbf8 	.word	0xbffdfbf8
 80057e0:	40020400 	.word	0x40020400

080057e4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b086      	sub	sp, #24
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	60f8      	str	r0, [r7, #12]
 80057ec:	60b9      	str	r1, [r7, #8]
 80057ee:	607a      	str	r2, [r7, #4]
 80057f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80057f2:	2300      	movs	r3, #0
 80057f4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	d101      	bne.n	8005804 <HAL_DMA_Start_IT+0x20>
 8005800:	2302      	movs	r3, #2
 8005802:	e066      	b.n	80058d2 <HAL_DMA_Start_IT+0xee>
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2201      	movs	r2, #1
 8005808:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005812:	b2db      	uxtb	r3, r3
 8005814:	2b01      	cmp	r3, #1
 8005816:	d155      	bne.n	80058c4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	2202      	movs	r2, #2
 800581c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2200      	movs	r2, #0
 8005824:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	681a      	ldr	r2, [r3, #0]
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f022 0201 	bic.w	r2, r2, #1
 8005834:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	687a      	ldr	r2, [r7, #4]
 800583a:	68b9      	ldr	r1, [r7, #8]
 800583c:	68f8      	ldr	r0, [r7, #12]
 800583e:	f000 f9bb 	bl	8005bb8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005846:	2b00      	cmp	r3, #0
 8005848:	d008      	beq.n	800585c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	681a      	ldr	r2, [r3, #0]
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f042 020e 	orr.w	r2, r2, #14
 8005858:	601a      	str	r2, [r3, #0]
 800585a:	e00f      	b.n	800587c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	681a      	ldr	r2, [r3, #0]
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f022 0204 	bic.w	r2, r2, #4
 800586a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	681a      	ldr	r2, [r3, #0]
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f042 020a 	orr.w	r2, r2, #10
 800587a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005886:	2b00      	cmp	r3, #0
 8005888:	d007      	beq.n	800589a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800588e:	681a      	ldr	r2, [r3, #0]
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005894:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005898:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d007      	beq.n	80058b2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058a6:	681a      	ldr	r2, [r3, #0]
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058ac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80058b0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	681a      	ldr	r2, [r3, #0]
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f042 0201 	orr.w	r2, r2, #1
 80058c0:	601a      	str	r2, [r3, #0]
 80058c2:	e005      	b.n	80058d0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2200      	movs	r2, #0
 80058c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80058cc:	2302      	movs	r3, #2
 80058ce:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80058d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	3718      	adds	r7, #24
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}

080058da <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80058da:	b480      	push	{r7}
 80058dc:	b085      	sub	sp, #20
 80058de:	af00      	add	r7, sp, #0
 80058e0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058e2:	2300      	movs	r3, #0
 80058e4:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80058ec:	b2db      	uxtb	r3, r3
 80058ee:	2b02      	cmp	r3, #2
 80058f0:	d005      	beq.n	80058fe <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2204      	movs	r2, #4
 80058f6:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	73fb      	strb	r3, [r7, #15]
 80058fc:	e037      	b.n	800596e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	681a      	ldr	r2, [r3, #0]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f022 020e 	bic.w	r2, r2, #14
 800590c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005918:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800591c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	681a      	ldr	r2, [r3, #0]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f022 0201 	bic.w	r2, r2, #1
 800592c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005932:	f003 021f 	and.w	r2, r3, #31
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800593a:	2101      	movs	r1, #1
 800593c:	fa01 f202 	lsl.w	r2, r1, r2
 8005940:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005946:	687a      	ldr	r2, [r7, #4]
 8005948:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800594a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005950:	2b00      	cmp	r3, #0
 8005952:	d00c      	beq.n	800596e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800595e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005962:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005968:	687a      	ldr	r2, [r7, #4]
 800596a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800596c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2201      	movs	r2, #1
 8005972:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2200      	movs	r2, #0
 800597a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800597e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005980:	4618      	mov	r0, r3
 8005982:	3714      	adds	r7, #20
 8005984:	46bd      	mov	sp, r7
 8005986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598a:	4770      	bx	lr

0800598c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b084      	sub	sp, #16
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005994:	2300      	movs	r3, #0
 8005996:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800599e:	b2db      	uxtb	r3, r3
 80059a0:	2b02      	cmp	r3, #2
 80059a2:	d00d      	beq.n	80059c0 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2204      	movs	r2, #4
 80059a8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2201      	movs	r2, #1
 80059ae:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2200      	movs	r2, #0
 80059b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	73fb      	strb	r3, [r7, #15]
 80059be:	e047      	b.n	8005a50 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	681a      	ldr	r2, [r3, #0]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f022 020e 	bic.w	r2, r2, #14
 80059ce:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	681a      	ldr	r2, [r3, #0]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f022 0201 	bic.w	r2, r2, #1
 80059de:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80059e4:	681a      	ldr	r2, [r3, #0]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80059ea:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80059ee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059f4:	f003 021f 	and.w	r2, r3, #31
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059fc:	2101      	movs	r1, #1
 80059fe:	fa01 f202 	lsl.w	r2, r1, r2
 8005a02:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a08:	687a      	ldr	r2, [r7, #4]
 8005a0a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005a0c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d00c      	beq.n	8005a30 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a1a:	681a      	ldr	r2, [r3, #0]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a20:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005a24:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a2a:	687a      	ldr	r2, [r7, #4]
 8005a2c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005a2e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2201      	movs	r2, #1
 8005a34:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d003      	beq.n	8005a50 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	4798      	blx	r3
    }
  }
  return status;
 8005a50:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	3710      	adds	r7, #16
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}

08005a5a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005a5a:	b580      	push	{r7, lr}
 8005a5c:	b084      	sub	sp, #16
 8005a5e:	af00      	add	r7, sp, #0
 8005a60:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a76:	f003 031f 	and.w	r3, r3, #31
 8005a7a:	2204      	movs	r2, #4
 8005a7c:	409a      	lsls	r2, r3
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	4013      	ands	r3, r2
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d026      	beq.n	8005ad4 <HAL_DMA_IRQHandler+0x7a>
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	f003 0304 	and.w	r3, r3, #4
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d021      	beq.n	8005ad4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f003 0320 	and.w	r3, r3, #32
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d107      	bne.n	8005aae <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	681a      	ldr	r2, [r3, #0]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f022 0204 	bic.w	r2, r2, #4
 8005aac:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ab2:	f003 021f 	and.w	r2, r3, #31
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aba:	2104      	movs	r1, #4
 8005abc:	fa01 f202 	lsl.w	r2, r1, r2
 8005ac0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d071      	beq.n	8005bae <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005ad2:	e06c      	b.n	8005bae <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ad8:	f003 031f 	and.w	r3, r3, #31
 8005adc:	2202      	movs	r2, #2
 8005ade:	409a      	lsls	r2, r3
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	4013      	ands	r3, r2
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d02e      	beq.n	8005b46 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	f003 0302 	and.w	r3, r3, #2
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d029      	beq.n	8005b46 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f003 0320 	and.w	r3, r3, #32
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d10b      	bne.n	8005b18 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	681a      	ldr	r2, [r3, #0]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f022 020a 	bic.w	r2, r2, #10
 8005b0e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2201      	movs	r2, #1
 8005b14:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b1c:	f003 021f 	and.w	r2, r3, #31
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b24:	2102      	movs	r1, #2
 8005b26:	fa01 f202 	lsl.w	r2, r1, r2
 8005b2a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d038      	beq.n	8005bae <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b40:	6878      	ldr	r0, [r7, #4]
 8005b42:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005b44:	e033      	b.n	8005bae <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b4a:	f003 031f 	and.w	r3, r3, #31
 8005b4e:	2208      	movs	r2, #8
 8005b50:	409a      	lsls	r2, r3
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	4013      	ands	r3, r2
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d02a      	beq.n	8005bb0 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	f003 0308 	and.w	r3, r3, #8
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d025      	beq.n	8005bb0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	681a      	ldr	r2, [r3, #0]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f022 020e 	bic.w	r2, r2, #14
 8005b72:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b78:	f003 021f 	and.w	r2, r3, #31
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b80:	2101      	movs	r1, #1
 8005b82:	fa01 f202 	lsl.w	r2, r1, r2
 8005b86:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2201      	movs	r2, #1
 8005b92:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d004      	beq.n	8005bb0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005bae:	bf00      	nop
 8005bb0:	bf00      	nop
}
 8005bb2:	3710      	adds	r7, #16
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bd80      	pop	{r7, pc}

08005bb8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b085      	sub	sp, #20
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	60f8      	str	r0, [r7, #12]
 8005bc0:	60b9      	str	r1, [r7, #8]
 8005bc2:	607a      	str	r2, [r7, #4]
 8005bc4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005bca:	68fa      	ldr	r2, [r7, #12]
 8005bcc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005bce:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d004      	beq.n	8005be2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bdc:	68fa      	ldr	r2, [r7, #12]
 8005bde:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005be0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005be6:	f003 021f 	and.w	r2, r3, #31
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bee:	2101      	movs	r1, #1
 8005bf0:	fa01 f202 	lsl.w	r2, r1, r2
 8005bf4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	683a      	ldr	r2, [r7, #0]
 8005bfc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	2b10      	cmp	r3, #16
 8005c04:	d108      	bne.n	8005c18 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	687a      	ldr	r2, [r7, #4]
 8005c0c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	68ba      	ldr	r2, [r7, #8]
 8005c14:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005c16:	e007      	b.n	8005c28 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	68ba      	ldr	r2, [r7, #8]
 8005c1e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	687a      	ldr	r2, [r7, #4]
 8005c26:	60da      	str	r2, [r3, #12]
}
 8005c28:	bf00      	nop
 8005c2a:	3714      	adds	r7, #20
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c32:	4770      	bx	lr

08005c34 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b087      	sub	sp, #28
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	461a      	mov	r2, r3
 8005c42:	4b16      	ldr	r3, [pc, #88]	@ (8005c9c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005c44:	429a      	cmp	r2, r3
 8005c46:	d802      	bhi.n	8005c4e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005c48:	4b15      	ldr	r3, [pc, #84]	@ (8005ca0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005c4a:	617b      	str	r3, [r7, #20]
 8005c4c:	e001      	b.n	8005c52 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8005c4e:	4b15      	ldr	r3, [pc, #84]	@ (8005ca4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005c50:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	b2db      	uxtb	r3, r3
 8005c5c:	3b08      	subs	r3, #8
 8005c5e:	4a12      	ldr	r2, [pc, #72]	@ (8005ca8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005c60:	fba2 2303 	umull	r2, r3, r2, r3
 8005c64:	091b      	lsrs	r3, r3, #4
 8005c66:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c6c:	089b      	lsrs	r3, r3, #2
 8005c6e:	009a      	lsls	r2, r3, #2
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	4413      	add	r3, r2
 8005c74:	461a      	mov	r2, r3
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	4a0b      	ldr	r2, [pc, #44]	@ (8005cac <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005c7e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f003 031f 	and.w	r3, r3, #31
 8005c86:	2201      	movs	r2, #1
 8005c88:	409a      	lsls	r2, r3
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005c8e:	bf00      	nop
 8005c90:	371c      	adds	r7, #28
 8005c92:	46bd      	mov	sp, r7
 8005c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c98:	4770      	bx	lr
 8005c9a:	bf00      	nop
 8005c9c:	40020407 	.word	0x40020407
 8005ca0:	40020800 	.word	0x40020800
 8005ca4:	40020820 	.word	0x40020820
 8005ca8:	cccccccd 	.word	0xcccccccd
 8005cac:	40020880 	.word	0x40020880

08005cb0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b085      	sub	sp, #20
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	b2db      	uxtb	r3, r3
 8005cbe:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005cc0:	68fa      	ldr	r2, [r7, #12]
 8005cc2:	4b0b      	ldr	r3, [pc, #44]	@ (8005cf0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005cc4:	4413      	add	r3, r2
 8005cc6:	009b      	lsls	r3, r3, #2
 8005cc8:	461a      	mov	r2, r3
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	4a08      	ldr	r2, [pc, #32]	@ (8005cf4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005cd2:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	3b01      	subs	r3, #1
 8005cd8:	f003 031f 	and.w	r3, r3, #31
 8005cdc:	2201      	movs	r2, #1
 8005cde:	409a      	lsls	r2, r3
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8005ce4:	bf00      	nop
 8005ce6:	3714      	adds	r7, #20
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cee:	4770      	bx	lr
 8005cf0:	1000823f 	.word	0x1000823f
 8005cf4:	40020940 	.word	0x40020940

08005cf8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b087      	sub	sp, #28
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
 8005d00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005d02:	2300      	movs	r3, #0
 8005d04:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005d06:	e15a      	b.n	8005fbe <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	681a      	ldr	r2, [r3, #0]
 8005d0c:	2101      	movs	r1, #1
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	fa01 f303 	lsl.w	r3, r1, r3
 8005d14:	4013      	ands	r3, r2
 8005d16:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	f000 814c 	beq.w	8005fb8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	f003 0303 	and.w	r3, r3, #3
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	d005      	beq.n	8005d38 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005d34:	2b02      	cmp	r3, #2
 8005d36:	d130      	bne.n	8005d9a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	689b      	ldr	r3, [r3, #8]
 8005d3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	005b      	lsls	r3, r3, #1
 8005d42:	2203      	movs	r2, #3
 8005d44:	fa02 f303 	lsl.w	r3, r2, r3
 8005d48:	43db      	mvns	r3, r3
 8005d4a:	693a      	ldr	r2, [r7, #16]
 8005d4c:	4013      	ands	r3, r2
 8005d4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	68da      	ldr	r2, [r3, #12]
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	005b      	lsls	r3, r3, #1
 8005d58:	fa02 f303 	lsl.w	r3, r2, r3
 8005d5c:	693a      	ldr	r2, [r7, #16]
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	693a      	ldr	r2, [r7, #16]
 8005d66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005d6e:	2201      	movs	r2, #1
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	fa02 f303 	lsl.w	r3, r2, r3
 8005d76:	43db      	mvns	r3, r3
 8005d78:	693a      	ldr	r2, [r7, #16]
 8005d7a:	4013      	ands	r3, r2
 8005d7c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	091b      	lsrs	r3, r3, #4
 8005d84:	f003 0201 	and.w	r2, r3, #1
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d8e:	693a      	ldr	r2, [r7, #16]
 8005d90:	4313      	orrs	r3, r2
 8005d92:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	693a      	ldr	r2, [r7, #16]
 8005d98:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	f003 0303 	and.w	r3, r3, #3
 8005da2:	2b03      	cmp	r3, #3
 8005da4:	d017      	beq.n	8005dd6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	68db      	ldr	r3, [r3, #12]
 8005daa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	005b      	lsls	r3, r3, #1
 8005db0:	2203      	movs	r2, #3
 8005db2:	fa02 f303 	lsl.w	r3, r2, r3
 8005db6:	43db      	mvns	r3, r3
 8005db8:	693a      	ldr	r2, [r7, #16]
 8005dba:	4013      	ands	r3, r2
 8005dbc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	689a      	ldr	r2, [r3, #8]
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	005b      	lsls	r3, r3, #1
 8005dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8005dca:	693a      	ldr	r2, [r7, #16]
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	693a      	ldr	r2, [r7, #16]
 8005dd4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	f003 0303 	and.w	r3, r3, #3
 8005dde:	2b02      	cmp	r3, #2
 8005de0:	d123      	bne.n	8005e2a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	08da      	lsrs	r2, r3, #3
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	3208      	adds	r2, #8
 8005dea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	f003 0307 	and.w	r3, r3, #7
 8005df6:	009b      	lsls	r3, r3, #2
 8005df8:	220f      	movs	r2, #15
 8005dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8005dfe:	43db      	mvns	r3, r3
 8005e00:	693a      	ldr	r2, [r7, #16]
 8005e02:	4013      	ands	r3, r2
 8005e04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	691a      	ldr	r2, [r3, #16]
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	f003 0307 	and.w	r3, r3, #7
 8005e10:	009b      	lsls	r3, r3, #2
 8005e12:	fa02 f303 	lsl.w	r3, r2, r3
 8005e16:	693a      	ldr	r2, [r7, #16]
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	08da      	lsrs	r2, r3, #3
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	3208      	adds	r2, #8
 8005e24:	6939      	ldr	r1, [r7, #16]
 8005e26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	005b      	lsls	r3, r3, #1
 8005e34:	2203      	movs	r2, #3
 8005e36:	fa02 f303 	lsl.w	r3, r2, r3
 8005e3a:	43db      	mvns	r3, r3
 8005e3c:	693a      	ldr	r2, [r7, #16]
 8005e3e:	4013      	ands	r3, r2
 8005e40:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	f003 0203 	and.w	r2, r3, #3
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	005b      	lsls	r3, r3, #1
 8005e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e52:	693a      	ldr	r2, [r7, #16]
 8005e54:	4313      	orrs	r3, r2
 8005e56:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	693a      	ldr	r2, [r7, #16]
 8005e5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	f000 80a6 	beq.w	8005fb8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005e6c:	4b5b      	ldr	r3, [pc, #364]	@ (8005fdc <HAL_GPIO_Init+0x2e4>)
 8005e6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e70:	4a5a      	ldr	r2, [pc, #360]	@ (8005fdc <HAL_GPIO_Init+0x2e4>)
 8005e72:	f043 0301 	orr.w	r3, r3, #1
 8005e76:	6613      	str	r3, [r2, #96]	@ 0x60
 8005e78:	4b58      	ldr	r3, [pc, #352]	@ (8005fdc <HAL_GPIO_Init+0x2e4>)
 8005e7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e7c:	f003 0301 	and.w	r3, r3, #1
 8005e80:	60bb      	str	r3, [r7, #8]
 8005e82:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005e84:	4a56      	ldr	r2, [pc, #344]	@ (8005fe0 <HAL_GPIO_Init+0x2e8>)
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	089b      	lsrs	r3, r3, #2
 8005e8a:	3302      	adds	r3, #2
 8005e8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e90:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	f003 0303 	and.w	r3, r3, #3
 8005e98:	009b      	lsls	r3, r3, #2
 8005e9a:	220f      	movs	r2, #15
 8005e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8005ea0:	43db      	mvns	r3, r3
 8005ea2:	693a      	ldr	r2, [r7, #16]
 8005ea4:	4013      	ands	r3, r2
 8005ea6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005eae:	d01f      	beq.n	8005ef0 <HAL_GPIO_Init+0x1f8>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	4a4c      	ldr	r2, [pc, #304]	@ (8005fe4 <HAL_GPIO_Init+0x2ec>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d019      	beq.n	8005eec <HAL_GPIO_Init+0x1f4>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	4a4b      	ldr	r2, [pc, #300]	@ (8005fe8 <HAL_GPIO_Init+0x2f0>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d013      	beq.n	8005ee8 <HAL_GPIO_Init+0x1f0>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	4a4a      	ldr	r2, [pc, #296]	@ (8005fec <HAL_GPIO_Init+0x2f4>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d00d      	beq.n	8005ee4 <HAL_GPIO_Init+0x1ec>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	4a49      	ldr	r2, [pc, #292]	@ (8005ff0 <HAL_GPIO_Init+0x2f8>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d007      	beq.n	8005ee0 <HAL_GPIO_Init+0x1e8>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	4a48      	ldr	r2, [pc, #288]	@ (8005ff4 <HAL_GPIO_Init+0x2fc>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d101      	bne.n	8005edc <HAL_GPIO_Init+0x1e4>
 8005ed8:	2305      	movs	r3, #5
 8005eda:	e00a      	b.n	8005ef2 <HAL_GPIO_Init+0x1fa>
 8005edc:	2306      	movs	r3, #6
 8005ede:	e008      	b.n	8005ef2 <HAL_GPIO_Init+0x1fa>
 8005ee0:	2304      	movs	r3, #4
 8005ee2:	e006      	b.n	8005ef2 <HAL_GPIO_Init+0x1fa>
 8005ee4:	2303      	movs	r3, #3
 8005ee6:	e004      	b.n	8005ef2 <HAL_GPIO_Init+0x1fa>
 8005ee8:	2302      	movs	r3, #2
 8005eea:	e002      	b.n	8005ef2 <HAL_GPIO_Init+0x1fa>
 8005eec:	2301      	movs	r3, #1
 8005eee:	e000      	b.n	8005ef2 <HAL_GPIO_Init+0x1fa>
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	697a      	ldr	r2, [r7, #20]
 8005ef4:	f002 0203 	and.w	r2, r2, #3
 8005ef8:	0092      	lsls	r2, r2, #2
 8005efa:	4093      	lsls	r3, r2
 8005efc:	693a      	ldr	r2, [r7, #16]
 8005efe:	4313      	orrs	r3, r2
 8005f00:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005f02:	4937      	ldr	r1, [pc, #220]	@ (8005fe0 <HAL_GPIO_Init+0x2e8>)
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	089b      	lsrs	r3, r3, #2
 8005f08:	3302      	adds	r3, #2
 8005f0a:	693a      	ldr	r2, [r7, #16]
 8005f0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005f10:	4b39      	ldr	r3, [pc, #228]	@ (8005ff8 <HAL_GPIO_Init+0x300>)
 8005f12:	689b      	ldr	r3, [r3, #8]
 8005f14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	43db      	mvns	r3, r3
 8005f1a:	693a      	ldr	r2, [r7, #16]
 8005f1c:	4013      	ands	r3, r2
 8005f1e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d003      	beq.n	8005f34 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005f2c:	693a      	ldr	r2, [r7, #16]
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	4313      	orrs	r3, r2
 8005f32:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005f34:	4a30      	ldr	r2, [pc, #192]	@ (8005ff8 <HAL_GPIO_Init+0x300>)
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005f3a:	4b2f      	ldr	r3, [pc, #188]	@ (8005ff8 <HAL_GPIO_Init+0x300>)
 8005f3c:	68db      	ldr	r3, [r3, #12]
 8005f3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	43db      	mvns	r3, r3
 8005f44:	693a      	ldr	r2, [r7, #16]
 8005f46:	4013      	ands	r3, r2
 8005f48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d003      	beq.n	8005f5e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005f56:	693a      	ldr	r2, [r7, #16]
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005f5e:	4a26      	ldr	r2, [pc, #152]	@ (8005ff8 <HAL_GPIO_Init+0x300>)
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005f64:	4b24      	ldr	r3, [pc, #144]	@ (8005ff8 <HAL_GPIO_Init+0x300>)
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	43db      	mvns	r3, r3
 8005f6e:	693a      	ldr	r2, [r7, #16]
 8005f70:	4013      	ands	r3, r2
 8005f72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d003      	beq.n	8005f88 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005f80:	693a      	ldr	r2, [r7, #16]
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	4313      	orrs	r3, r2
 8005f86:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005f88:	4a1b      	ldr	r2, [pc, #108]	@ (8005ff8 <HAL_GPIO_Init+0x300>)
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005f8e:	4b1a      	ldr	r3, [pc, #104]	@ (8005ff8 <HAL_GPIO_Init+0x300>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	43db      	mvns	r3, r3
 8005f98:	693a      	ldr	r2, [r7, #16]
 8005f9a:	4013      	ands	r3, r2
 8005f9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	685b      	ldr	r3, [r3, #4]
 8005fa2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d003      	beq.n	8005fb2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005faa:	693a      	ldr	r2, [r7, #16]
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005fb2:	4a11      	ldr	r2, [pc, #68]	@ (8005ff8 <HAL_GPIO_Init+0x300>)
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	3301      	adds	r3, #1
 8005fbc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	681a      	ldr	r2, [r3, #0]
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	fa22 f303 	lsr.w	r3, r2, r3
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	f47f ae9d 	bne.w	8005d08 <HAL_GPIO_Init+0x10>
  }
}
 8005fce:	bf00      	nop
 8005fd0:	bf00      	nop
 8005fd2:	371c      	adds	r7, #28
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fda:	4770      	bx	lr
 8005fdc:	40021000 	.word	0x40021000
 8005fe0:	40010000 	.word	0x40010000
 8005fe4:	48000400 	.word	0x48000400
 8005fe8:	48000800 	.word	0x48000800
 8005fec:	48000c00 	.word	0x48000c00
 8005ff0:	48001000 	.word	0x48001000
 8005ff4:	48001400 	.word	0x48001400
 8005ff8:	40010400 	.word	0x40010400

08005ffc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b085      	sub	sp, #20
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
 8006004:	460b      	mov	r3, r1
 8006006:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	691a      	ldr	r2, [r3, #16]
 800600c:	887b      	ldrh	r3, [r7, #2]
 800600e:	4013      	ands	r3, r2
 8006010:	2b00      	cmp	r3, #0
 8006012:	d002      	beq.n	800601a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006014:	2301      	movs	r3, #1
 8006016:	73fb      	strb	r3, [r7, #15]
 8006018:	e001      	b.n	800601e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800601a:	2300      	movs	r3, #0
 800601c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800601e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006020:	4618      	mov	r0, r3
 8006022:	3714      	adds	r7, #20
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr

0800602c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800602c:	b480      	push	{r7}
 800602e:	b083      	sub	sp, #12
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
 8006034:	460b      	mov	r3, r1
 8006036:	807b      	strh	r3, [r7, #2]
 8006038:	4613      	mov	r3, r2
 800603a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800603c:	787b      	ldrb	r3, [r7, #1]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d003      	beq.n	800604a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006042:	887a      	ldrh	r2, [r7, #2]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006048:	e002      	b.n	8006050 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800604a:	887a      	ldrh	r2, [r7, #2]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006050:	bf00      	nop
 8006052:	370c      	adds	r7, #12
 8006054:	46bd      	mov	sp, r7
 8006056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605a:	4770      	bx	lr

0800605c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b082      	sub	sp, #8
 8006060:	af00      	add	r7, sp, #0
 8006062:	4603      	mov	r3, r0
 8006064:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006066:	4b08      	ldr	r3, [pc, #32]	@ (8006088 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006068:	695a      	ldr	r2, [r3, #20]
 800606a:	88fb      	ldrh	r3, [r7, #6]
 800606c:	4013      	ands	r3, r2
 800606e:	2b00      	cmp	r3, #0
 8006070:	d006      	beq.n	8006080 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006072:	4a05      	ldr	r2, [pc, #20]	@ (8006088 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006074:	88fb      	ldrh	r3, [r7, #6]
 8006076:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006078:	88fb      	ldrh	r3, [r7, #6]
 800607a:	4618      	mov	r0, r3
 800607c:	f7fc f952 	bl	8002324 <HAL_GPIO_EXTI_Callback>
  }
}
 8006080:	bf00      	nop
 8006082:	3708      	adds	r7, #8
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}
 8006088:	40010400 	.word	0x40010400

0800608c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800608c:	b480      	push	{r7}
 800608e:	b085      	sub	sp, #20
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d141      	bne.n	800611e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800609a:	4b4b      	ldr	r3, [pc, #300]	@ (80061c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80060a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80060a6:	d131      	bne.n	800610c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80060a8:	4b47      	ldr	r3, [pc, #284]	@ (80061c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80060aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80060ae:	4a46      	ldr	r2, [pc, #280]	@ (80061c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80060b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80060b4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80060b8:	4b43      	ldr	r3, [pc, #268]	@ (80061c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80060c0:	4a41      	ldr	r2, [pc, #260]	@ (80061c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80060c2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80060c6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80060c8:	4b40      	ldr	r3, [pc, #256]	@ (80061cc <HAL_PWREx_ControlVoltageScaling+0x140>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	2232      	movs	r2, #50	@ 0x32
 80060ce:	fb02 f303 	mul.w	r3, r2, r3
 80060d2:	4a3f      	ldr	r2, [pc, #252]	@ (80061d0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80060d4:	fba2 2303 	umull	r2, r3, r2, r3
 80060d8:	0c9b      	lsrs	r3, r3, #18
 80060da:	3301      	adds	r3, #1
 80060dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80060de:	e002      	b.n	80060e6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	3b01      	subs	r3, #1
 80060e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80060e6:	4b38      	ldr	r3, [pc, #224]	@ (80061c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80060e8:	695b      	ldr	r3, [r3, #20]
 80060ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80060ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80060f2:	d102      	bne.n	80060fa <HAL_PWREx_ControlVoltageScaling+0x6e>
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d1f2      	bne.n	80060e0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80060fa:	4b33      	ldr	r3, [pc, #204]	@ (80061c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80060fc:	695b      	ldr	r3, [r3, #20]
 80060fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006102:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006106:	d158      	bne.n	80061ba <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006108:	2303      	movs	r3, #3
 800610a:	e057      	b.n	80061bc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800610c:	4b2e      	ldr	r3, [pc, #184]	@ (80061c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800610e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006112:	4a2d      	ldr	r2, [pc, #180]	@ (80061c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006114:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006118:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800611c:	e04d      	b.n	80061ba <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006124:	d141      	bne.n	80061aa <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006126:	4b28      	ldr	r3, [pc, #160]	@ (80061c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800612e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006132:	d131      	bne.n	8006198 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006134:	4b24      	ldr	r3, [pc, #144]	@ (80061c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006136:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800613a:	4a23      	ldr	r2, [pc, #140]	@ (80061c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800613c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006140:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006144:	4b20      	ldr	r3, [pc, #128]	@ (80061c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800614c:	4a1e      	ldr	r2, [pc, #120]	@ (80061c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800614e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006152:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006154:	4b1d      	ldr	r3, [pc, #116]	@ (80061cc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	2232      	movs	r2, #50	@ 0x32
 800615a:	fb02 f303 	mul.w	r3, r2, r3
 800615e:	4a1c      	ldr	r2, [pc, #112]	@ (80061d0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006160:	fba2 2303 	umull	r2, r3, r2, r3
 8006164:	0c9b      	lsrs	r3, r3, #18
 8006166:	3301      	adds	r3, #1
 8006168:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800616a:	e002      	b.n	8006172 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	3b01      	subs	r3, #1
 8006170:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006172:	4b15      	ldr	r3, [pc, #84]	@ (80061c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006174:	695b      	ldr	r3, [r3, #20]
 8006176:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800617a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800617e:	d102      	bne.n	8006186 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d1f2      	bne.n	800616c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006186:	4b10      	ldr	r3, [pc, #64]	@ (80061c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006188:	695b      	ldr	r3, [r3, #20]
 800618a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800618e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006192:	d112      	bne.n	80061ba <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006194:	2303      	movs	r3, #3
 8006196:	e011      	b.n	80061bc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006198:	4b0b      	ldr	r3, [pc, #44]	@ (80061c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800619a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800619e:	4a0a      	ldr	r2, [pc, #40]	@ (80061c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80061a4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80061a8:	e007      	b.n	80061ba <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80061aa:	4b07      	ldr	r3, [pc, #28]	@ (80061c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80061b2:	4a05      	ldr	r2, [pc, #20]	@ (80061c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061b4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80061b8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80061ba:	2300      	movs	r3, #0
}
 80061bc:	4618      	mov	r0, r3
 80061be:	3714      	adds	r7, #20
 80061c0:	46bd      	mov	sp, r7
 80061c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c6:	4770      	bx	lr
 80061c8:	40007000 	.word	0x40007000
 80061cc:	20000018 	.word	0x20000018
 80061d0:	431bde83 	.word	0x431bde83

080061d4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80061d4:	b480      	push	{r7}
 80061d6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80061d8:	4b05      	ldr	r3, [pc, #20]	@ (80061f0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80061da:	689b      	ldr	r3, [r3, #8]
 80061dc:	4a04      	ldr	r2, [pc, #16]	@ (80061f0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80061de:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80061e2:	6093      	str	r3, [r2, #8]
}
 80061e4:	bf00      	nop
 80061e6:	46bd      	mov	sp, r7
 80061e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ec:	4770      	bx	lr
 80061ee:	bf00      	nop
 80061f0:	40007000 	.word	0x40007000

080061f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b088      	sub	sp, #32
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d101      	bne.n	8006206 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006202:	2301      	movs	r3, #1
 8006204:	e2fe      	b.n	8006804 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f003 0301 	and.w	r3, r3, #1
 800620e:	2b00      	cmp	r3, #0
 8006210:	d075      	beq.n	80062fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006212:	4b97      	ldr	r3, [pc, #604]	@ (8006470 <HAL_RCC_OscConfig+0x27c>)
 8006214:	689b      	ldr	r3, [r3, #8]
 8006216:	f003 030c 	and.w	r3, r3, #12
 800621a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800621c:	4b94      	ldr	r3, [pc, #592]	@ (8006470 <HAL_RCC_OscConfig+0x27c>)
 800621e:	68db      	ldr	r3, [r3, #12]
 8006220:	f003 0303 	and.w	r3, r3, #3
 8006224:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006226:	69bb      	ldr	r3, [r7, #24]
 8006228:	2b0c      	cmp	r3, #12
 800622a:	d102      	bne.n	8006232 <HAL_RCC_OscConfig+0x3e>
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	2b03      	cmp	r3, #3
 8006230:	d002      	beq.n	8006238 <HAL_RCC_OscConfig+0x44>
 8006232:	69bb      	ldr	r3, [r7, #24]
 8006234:	2b08      	cmp	r3, #8
 8006236:	d10b      	bne.n	8006250 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006238:	4b8d      	ldr	r3, [pc, #564]	@ (8006470 <HAL_RCC_OscConfig+0x27c>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006240:	2b00      	cmp	r3, #0
 8006242:	d05b      	beq.n	80062fc <HAL_RCC_OscConfig+0x108>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d157      	bne.n	80062fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800624c:	2301      	movs	r3, #1
 800624e:	e2d9      	b.n	8006804 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006258:	d106      	bne.n	8006268 <HAL_RCC_OscConfig+0x74>
 800625a:	4b85      	ldr	r3, [pc, #532]	@ (8006470 <HAL_RCC_OscConfig+0x27c>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a84      	ldr	r2, [pc, #528]	@ (8006470 <HAL_RCC_OscConfig+0x27c>)
 8006260:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006264:	6013      	str	r3, [r2, #0]
 8006266:	e01d      	b.n	80062a4 <HAL_RCC_OscConfig+0xb0>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006270:	d10c      	bne.n	800628c <HAL_RCC_OscConfig+0x98>
 8006272:	4b7f      	ldr	r3, [pc, #508]	@ (8006470 <HAL_RCC_OscConfig+0x27c>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a7e      	ldr	r2, [pc, #504]	@ (8006470 <HAL_RCC_OscConfig+0x27c>)
 8006278:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800627c:	6013      	str	r3, [r2, #0]
 800627e:	4b7c      	ldr	r3, [pc, #496]	@ (8006470 <HAL_RCC_OscConfig+0x27c>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a7b      	ldr	r2, [pc, #492]	@ (8006470 <HAL_RCC_OscConfig+0x27c>)
 8006284:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006288:	6013      	str	r3, [r2, #0]
 800628a:	e00b      	b.n	80062a4 <HAL_RCC_OscConfig+0xb0>
 800628c:	4b78      	ldr	r3, [pc, #480]	@ (8006470 <HAL_RCC_OscConfig+0x27c>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a77      	ldr	r2, [pc, #476]	@ (8006470 <HAL_RCC_OscConfig+0x27c>)
 8006292:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006296:	6013      	str	r3, [r2, #0]
 8006298:	4b75      	ldr	r3, [pc, #468]	@ (8006470 <HAL_RCC_OscConfig+0x27c>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a74      	ldr	r2, [pc, #464]	@ (8006470 <HAL_RCC_OscConfig+0x27c>)
 800629e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80062a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d013      	beq.n	80062d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062ac:	f7fd fd50 	bl	8003d50 <HAL_GetTick>
 80062b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80062b2:	e008      	b.n	80062c6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80062b4:	f7fd fd4c 	bl	8003d50 <HAL_GetTick>
 80062b8:	4602      	mov	r2, r0
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	1ad3      	subs	r3, r2, r3
 80062be:	2b64      	cmp	r3, #100	@ 0x64
 80062c0:	d901      	bls.n	80062c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80062c2:	2303      	movs	r3, #3
 80062c4:	e29e      	b.n	8006804 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80062c6:	4b6a      	ldr	r3, [pc, #424]	@ (8006470 <HAL_RCC_OscConfig+0x27c>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d0f0      	beq.n	80062b4 <HAL_RCC_OscConfig+0xc0>
 80062d2:	e014      	b.n	80062fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062d4:	f7fd fd3c 	bl	8003d50 <HAL_GetTick>
 80062d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80062da:	e008      	b.n	80062ee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80062dc:	f7fd fd38 	bl	8003d50 <HAL_GetTick>
 80062e0:	4602      	mov	r2, r0
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	1ad3      	subs	r3, r2, r3
 80062e6:	2b64      	cmp	r3, #100	@ 0x64
 80062e8:	d901      	bls.n	80062ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80062ea:	2303      	movs	r3, #3
 80062ec:	e28a      	b.n	8006804 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80062ee:	4b60      	ldr	r3, [pc, #384]	@ (8006470 <HAL_RCC_OscConfig+0x27c>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d1f0      	bne.n	80062dc <HAL_RCC_OscConfig+0xe8>
 80062fa:	e000      	b.n	80062fe <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f003 0302 	and.w	r3, r3, #2
 8006306:	2b00      	cmp	r3, #0
 8006308:	d075      	beq.n	80063f6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800630a:	4b59      	ldr	r3, [pc, #356]	@ (8006470 <HAL_RCC_OscConfig+0x27c>)
 800630c:	689b      	ldr	r3, [r3, #8]
 800630e:	f003 030c 	and.w	r3, r3, #12
 8006312:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006314:	4b56      	ldr	r3, [pc, #344]	@ (8006470 <HAL_RCC_OscConfig+0x27c>)
 8006316:	68db      	ldr	r3, [r3, #12]
 8006318:	f003 0303 	and.w	r3, r3, #3
 800631c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800631e:	69bb      	ldr	r3, [r7, #24]
 8006320:	2b0c      	cmp	r3, #12
 8006322:	d102      	bne.n	800632a <HAL_RCC_OscConfig+0x136>
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	2b02      	cmp	r3, #2
 8006328:	d002      	beq.n	8006330 <HAL_RCC_OscConfig+0x13c>
 800632a:	69bb      	ldr	r3, [r7, #24]
 800632c:	2b04      	cmp	r3, #4
 800632e:	d11f      	bne.n	8006370 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006330:	4b4f      	ldr	r3, [pc, #316]	@ (8006470 <HAL_RCC_OscConfig+0x27c>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006338:	2b00      	cmp	r3, #0
 800633a:	d005      	beq.n	8006348 <HAL_RCC_OscConfig+0x154>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	68db      	ldr	r3, [r3, #12]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d101      	bne.n	8006348 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006344:	2301      	movs	r3, #1
 8006346:	e25d      	b.n	8006804 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006348:	4b49      	ldr	r3, [pc, #292]	@ (8006470 <HAL_RCC_OscConfig+0x27c>)
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	691b      	ldr	r3, [r3, #16]
 8006354:	061b      	lsls	r3, r3, #24
 8006356:	4946      	ldr	r1, [pc, #280]	@ (8006470 <HAL_RCC_OscConfig+0x27c>)
 8006358:	4313      	orrs	r3, r2
 800635a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800635c:	4b45      	ldr	r3, [pc, #276]	@ (8006474 <HAL_RCC_OscConfig+0x280>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4618      	mov	r0, r3
 8006362:	f7fd fca9 	bl	8003cb8 <HAL_InitTick>
 8006366:	4603      	mov	r3, r0
 8006368:	2b00      	cmp	r3, #0
 800636a:	d043      	beq.n	80063f4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800636c:	2301      	movs	r3, #1
 800636e:	e249      	b.n	8006804 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	68db      	ldr	r3, [r3, #12]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d023      	beq.n	80063c0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006378:	4b3d      	ldr	r3, [pc, #244]	@ (8006470 <HAL_RCC_OscConfig+0x27c>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a3c      	ldr	r2, [pc, #240]	@ (8006470 <HAL_RCC_OscConfig+0x27c>)
 800637e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006382:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006384:	f7fd fce4 	bl	8003d50 <HAL_GetTick>
 8006388:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800638a:	e008      	b.n	800639e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800638c:	f7fd fce0 	bl	8003d50 <HAL_GetTick>
 8006390:	4602      	mov	r2, r0
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	1ad3      	subs	r3, r2, r3
 8006396:	2b02      	cmp	r3, #2
 8006398:	d901      	bls.n	800639e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800639a:	2303      	movs	r3, #3
 800639c:	e232      	b.n	8006804 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800639e:	4b34      	ldr	r3, [pc, #208]	@ (8006470 <HAL_RCC_OscConfig+0x27c>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d0f0      	beq.n	800638c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063aa:	4b31      	ldr	r3, [pc, #196]	@ (8006470 <HAL_RCC_OscConfig+0x27c>)
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	691b      	ldr	r3, [r3, #16]
 80063b6:	061b      	lsls	r3, r3, #24
 80063b8:	492d      	ldr	r1, [pc, #180]	@ (8006470 <HAL_RCC_OscConfig+0x27c>)
 80063ba:	4313      	orrs	r3, r2
 80063bc:	604b      	str	r3, [r1, #4]
 80063be:	e01a      	b.n	80063f6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80063c0:	4b2b      	ldr	r3, [pc, #172]	@ (8006470 <HAL_RCC_OscConfig+0x27c>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a2a      	ldr	r2, [pc, #168]	@ (8006470 <HAL_RCC_OscConfig+0x27c>)
 80063c6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80063ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063cc:	f7fd fcc0 	bl	8003d50 <HAL_GetTick>
 80063d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80063d2:	e008      	b.n	80063e6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80063d4:	f7fd fcbc 	bl	8003d50 <HAL_GetTick>
 80063d8:	4602      	mov	r2, r0
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	1ad3      	subs	r3, r2, r3
 80063de:	2b02      	cmp	r3, #2
 80063e0:	d901      	bls.n	80063e6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80063e2:	2303      	movs	r3, #3
 80063e4:	e20e      	b.n	8006804 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80063e6:	4b22      	ldr	r3, [pc, #136]	@ (8006470 <HAL_RCC_OscConfig+0x27c>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d1f0      	bne.n	80063d4 <HAL_RCC_OscConfig+0x1e0>
 80063f2:	e000      	b.n	80063f6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80063f4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f003 0308 	and.w	r3, r3, #8
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d041      	beq.n	8006486 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	695b      	ldr	r3, [r3, #20]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d01c      	beq.n	8006444 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800640a:	4b19      	ldr	r3, [pc, #100]	@ (8006470 <HAL_RCC_OscConfig+0x27c>)
 800640c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006410:	4a17      	ldr	r2, [pc, #92]	@ (8006470 <HAL_RCC_OscConfig+0x27c>)
 8006412:	f043 0301 	orr.w	r3, r3, #1
 8006416:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800641a:	f7fd fc99 	bl	8003d50 <HAL_GetTick>
 800641e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006420:	e008      	b.n	8006434 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006422:	f7fd fc95 	bl	8003d50 <HAL_GetTick>
 8006426:	4602      	mov	r2, r0
 8006428:	693b      	ldr	r3, [r7, #16]
 800642a:	1ad3      	subs	r3, r2, r3
 800642c:	2b02      	cmp	r3, #2
 800642e:	d901      	bls.n	8006434 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006430:	2303      	movs	r3, #3
 8006432:	e1e7      	b.n	8006804 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006434:	4b0e      	ldr	r3, [pc, #56]	@ (8006470 <HAL_RCC_OscConfig+0x27c>)
 8006436:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800643a:	f003 0302 	and.w	r3, r3, #2
 800643e:	2b00      	cmp	r3, #0
 8006440:	d0ef      	beq.n	8006422 <HAL_RCC_OscConfig+0x22e>
 8006442:	e020      	b.n	8006486 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006444:	4b0a      	ldr	r3, [pc, #40]	@ (8006470 <HAL_RCC_OscConfig+0x27c>)
 8006446:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800644a:	4a09      	ldr	r2, [pc, #36]	@ (8006470 <HAL_RCC_OscConfig+0x27c>)
 800644c:	f023 0301 	bic.w	r3, r3, #1
 8006450:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006454:	f7fd fc7c 	bl	8003d50 <HAL_GetTick>
 8006458:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800645a:	e00d      	b.n	8006478 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800645c:	f7fd fc78 	bl	8003d50 <HAL_GetTick>
 8006460:	4602      	mov	r2, r0
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	1ad3      	subs	r3, r2, r3
 8006466:	2b02      	cmp	r3, #2
 8006468:	d906      	bls.n	8006478 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800646a:	2303      	movs	r3, #3
 800646c:	e1ca      	b.n	8006804 <HAL_RCC_OscConfig+0x610>
 800646e:	bf00      	nop
 8006470:	40021000 	.word	0x40021000
 8006474:	2000001c 	.word	0x2000001c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006478:	4b8c      	ldr	r3, [pc, #560]	@ (80066ac <HAL_RCC_OscConfig+0x4b8>)
 800647a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800647e:	f003 0302 	and.w	r3, r3, #2
 8006482:	2b00      	cmp	r3, #0
 8006484:	d1ea      	bne.n	800645c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f003 0304 	and.w	r3, r3, #4
 800648e:	2b00      	cmp	r3, #0
 8006490:	f000 80a6 	beq.w	80065e0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006494:	2300      	movs	r3, #0
 8006496:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006498:	4b84      	ldr	r3, [pc, #528]	@ (80066ac <HAL_RCC_OscConfig+0x4b8>)
 800649a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800649c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d101      	bne.n	80064a8 <HAL_RCC_OscConfig+0x2b4>
 80064a4:	2301      	movs	r3, #1
 80064a6:	e000      	b.n	80064aa <HAL_RCC_OscConfig+0x2b6>
 80064a8:	2300      	movs	r3, #0
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d00d      	beq.n	80064ca <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80064ae:	4b7f      	ldr	r3, [pc, #508]	@ (80066ac <HAL_RCC_OscConfig+0x4b8>)
 80064b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064b2:	4a7e      	ldr	r2, [pc, #504]	@ (80066ac <HAL_RCC_OscConfig+0x4b8>)
 80064b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80064b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80064ba:	4b7c      	ldr	r3, [pc, #496]	@ (80066ac <HAL_RCC_OscConfig+0x4b8>)
 80064bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80064c2:	60fb      	str	r3, [r7, #12]
 80064c4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80064c6:	2301      	movs	r3, #1
 80064c8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80064ca:	4b79      	ldr	r3, [pc, #484]	@ (80066b0 <HAL_RCC_OscConfig+0x4bc>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d118      	bne.n	8006508 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80064d6:	4b76      	ldr	r3, [pc, #472]	@ (80066b0 <HAL_RCC_OscConfig+0x4bc>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a75      	ldr	r2, [pc, #468]	@ (80066b0 <HAL_RCC_OscConfig+0x4bc>)
 80064dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80064e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80064e2:	f7fd fc35 	bl	8003d50 <HAL_GetTick>
 80064e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80064e8:	e008      	b.n	80064fc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064ea:	f7fd fc31 	bl	8003d50 <HAL_GetTick>
 80064ee:	4602      	mov	r2, r0
 80064f0:	693b      	ldr	r3, [r7, #16]
 80064f2:	1ad3      	subs	r3, r2, r3
 80064f4:	2b02      	cmp	r3, #2
 80064f6:	d901      	bls.n	80064fc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80064f8:	2303      	movs	r3, #3
 80064fa:	e183      	b.n	8006804 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80064fc:	4b6c      	ldr	r3, [pc, #432]	@ (80066b0 <HAL_RCC_OscConfig+0x4bc>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006504:	2b00      	cmp	r3, #0
 8006506:	d0f0      	beq.n	80064ea <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	689b      	ldr	r3, [r3, #8]
 800650c:	2b01      	cmp	r3, #1
 800650e:	d108      	bne.n	8006522 <HAL_RCC_OscConfig+0x32e>
 8006510:	4b66      	ldr	r3, [pc, #408]	@ (80066ac <HAL_RCC_OscConfig+0x4b8>)
 8006512:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006516:	4a65      	ldr	r2, [pc, #404]	@ (80066ac <HAL_RCC_OscConfig+0x4b8>)
 8006518:	f043 0301 	orr.w	r3, r3, #1
 800651c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006520:	e024      	b.n	800656c <HAL_RCC_OscConfig+0x378>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	689b      	ldr	r3, [r3, #8]
 8006526:	2b05      	cmp	r3, #5
 8006528:	d110      	bne.n	800654c <HAL_RCC_OscConfig+0x358>
 800652a:	4b60      	ldr	r3, [pc, #384]	@ (80066ac <HAL_RCC_OscConfig+0x4b8>)
 800652c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006530:	4a5e      	ldr	r2, [pc, #376]	@ (80066ac <HAL_RCC_OscConfig+0x4b8>)
 8006532:	f043 0304 	orr.w	r3, r3, #4
 8006536:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800653a:	4b5c      	ldr	r3, [pc, #368]	@ (80066ac <HAL_RCC_OscConfig+0x4b8>)
 800653c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006540:	4a5a      	ldr	r2, [pc, #360]	@ (80066ac <HAL_RCC_OscConfig+0x4b8>)
 8006542:	f043 0301 	orr.w	r3, r3, #1
 8006546:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800654a:	e00f      	b.n	800656c <HAL_RCC_OscConfig+0x378>
 800654c:	4b57      	ldr	r3, [pc, #348]	@ (80066ac <HAL_RCC_OscConfig+0x4b8>)
 800654e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006552:	4a56      	ldr	r2, [pc, #344]	@ (80066ac <HAL_RCC_OscConfig+0x4b8>)
 8006554:	f023 0301 	bic.w	r3, r3, #1
 8006558:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800655c:	4b53      	ldr	r3, [pc, #332]	@ (80066ac <HAL_RCC_OscConfig+0x4b8>)
 800655e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006562:	4a52      	ldr	r2, [pc, #328]	@ (80066ac <HAL_RCC_OscConfig+0x4b8>)
 8006564:	f023 0304 	bic.w	r3, r3, #4
 8006568:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	689b      	ldr	r3, [r3, #8]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d016      	beq.n	80065a2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006574:	f7fd fbec 	bl	8003d50 <HAL_GetTick>
 8006578:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800657a:	e00a      	b.n	8006592 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800657c:	f7fd fbe8 	bl	8003d50 <HAL_GetTick>
 8006580:	4602      	mov	r2, r0
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	1ad3      	subs	r3, r2, r3
 8006586:	f241 3288 	movw	r2, #5000	@ 0x1388
 800658a:	4293      	cmp	r3, r2
 800658c:	d901      	bls.n	8006592 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800658e:	2303      	movs	r3, #3
 8006590:	e138      	b.n	8006804 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006592:	4b46      	ldr	r3, [pc, #280]	@ (80066ac <HAL_RCC_OscConfig+0x4b8>)
 8006594:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006598:	f003 0302 	and.w	r3, r3, #2
 800659c:	2b00      	cmp	r3, #0
 800659e:	d0ed      	beq.n	800657c <HAL_RCC_OscConfig+0x388>
 80065a0:	e015      	b.n	80065ce <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065a2:	f7fd fbd5 	bl	8003d50 <HAL_GetTick>
 80065a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80065a8:	e00a      	b.n	80065c0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065aa:	f7fd fbd1 	bl	8003d50 <HAL_GetTick>
 80065ae:	4602      	mov	r2, r0
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	1ad3      	subs	r3, r2, r3
 80065b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d901      	bls.n	80065c0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80065bc:	2303      	movs	r3, #3
 80065be:	e121      	b.n	8006804 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80065c0:	4b3a      	ldr	r3, [pc, #232]	@ (80066ac <HAL_RCC_OscConfig+0x4b8>)
 80065c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065c6:	f003 0302 	and.w	r3, r3, #2
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d1ed      	bne.n	80065aa <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80065ce:	7ffb      	ldrb	r3, [r7, #31]
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	d105      	bne.n	80065e0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80065d4:	4b35      	ldr	r3, [pc, #212]	@ (80066ac <HAL_RCC_OscConfig+0x4b8>)
 80065d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065d8:	4a34      	ldr	r2, [pc, #208]	@ (80066ac <HAL_RCC_OscConfig+0x4b8>)
 80065da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80065de:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f003 0320 	and.w	r3, r3, #32
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d03c      	beq.n	8006666 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	699b      	ldr	r3, [r3, #24]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d01c      	beq.n	800662e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80065f4:	4b2d      	ldr	r3, [pc, #180]	@ (80066ac <HAL_RCC_OscConfig+0x4b8>)
 80065f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80065fa:	4a2c      	ldr	r2, [pc, #176]	@ (80066ac <HAL_RCC_OscConfig+0x4b8>)
 80065fc:	f043 0301 	orr.w	r3, r3, #1
 8006600:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006604:	f7fd fba4 	bl	8003d50 <HAL_GetTick>
 8006608:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800660a:	e008      	b.n	800661e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800660c:	f7fd fba0 	bl	8003d50 <HAL_GetTick>
 8006610:	4602      	mov	r2, r0
 8006612:	693b      	ldr	r3, [r7, #16]
 8006614:	1ad3      	subs	r3, r2, r3
 8006616:	2b02      	cmp	r3, #2
 8006618:	d901      	bls.n	800661e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800661a:	2303      	movs	r3, #3
 800661c:	e0f2      	b.n	8006804 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800661e:	4b23      	ldr	r3, [pc, #140]	@ (80066ac <HAL_RCC_OscConfig+0x4b8>)
 8006620:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006624:	f003 0302 	and.w	r3, r3, #2
 8006628:	2b00      	cmp	r3, #0
 800662a:	d0ef      	beq.n	800660c <HAL_RCC_OscConfig+0x418>
 800662c:	e01b      	b.n	8006666 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800662e:	4b1f      	ldr	r3, [pc, #124]	@ (80066ac <HAL_RCC_OscConfig+0x4b8>)
 8006630:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006634:	4a1d      	ldr	r2, [pc, #116]	@ (80066ac <HAL_RCC_OscConfig+0x4b8>)
 8006636:	f023 0301 	bic.w	r3, r3, #1
 800663a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800663e:	f7fd fb87 	bl	8003d50 <HAL_GetTick>
 8006642:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006644:	e008      	b.n	8006658 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006646:	f7fd fb83 	bl	8003d50 <HAL_GetTick>
 800664a:	4602      	mov	r2, r0
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	1ad3      	subs	r3, r2, r3
 8006650:	2b02      	cmp	r3, #2
 8006652:	d901      	bls.n	8006658 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006654:	2303      	movs	r3, #3
 8006656:	e0d5      	b.n	8006804 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006658:	4b14      	ldr	r3, [pc, #80]	@ (80066ac <HAL_RCC_OscConfig+0x4b8>)
 800665a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800665e:	f003 0302 	and.w	r3, r3, #2
 8006662:	2b00      	cmp	r3, #0
 8006664:	d1ef      	bne.n	8006646 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	69db      	ldr	r3, [r3, #28]
 800666a:	2b00      	cmp	r3, #0
 800666c:	f000 80c9 	beq.w	8006802 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006670:	4b0e      	ldr	r3, [pc, #56]	@ (80066ac <HAL_RCC_OscConfig+0x4b8>)
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	f003 030c 	and.w	r3, r3, #12
 8006678:	2b0c      	cmp	r3, #12
 800667a:	f000 8083 	beq.w	8006784 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	69db      	ldr	r3, [r3, #28]
 8006682:	2b02      	cmp	r3, #2
 8006684:	d15e      	bne.n	8006744 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006686:	4b09      	ldr	r3, [pc, #36]	@ (80066ac <HAL_RCC_OscConfig+0x4b8>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4a08      	ldr	r2, [pc, #32]	@ (80066ac <HAL_RCC_OscConfig+0x4b8>)
 800668c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006690:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006692:	f7fd fb5d 	bl	8003d50 <HAL_GetTick>
 8006696:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006698:	e00c      	b.n	80066b4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800669a:	f7fd fb59 	bl	8003d50 <HAL_GetTick>
 800669e:	4602      	mov	r2, r0
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	1ad3      	subs	r3, r2, r3
 80066a4:	2b02      	cmp	r3, #2
 80066a6:	d905      	bls.n	80066b4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80066a8:	2303      	movs	r3, #3
 80066aa:	e0ab      	b.n	8006804 <HAL_RCC_OscConfig+0x610>
 80066ac:	40021000 	.word	0x40021000
 80066b0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80066b4:	4b55      	ldr	r3, [pc, #340]	@ (800680c <HAL_RCC_OscConfig+0x618>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d1ec      	bne.n	800669a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80066c0:	4b52      	ldr	r3, [pc, #328]	@ (800680c <HAL_RCC_OscConfig+0x618>)
 80066c2:	68da      	ldr	r2, [r3, #12]
 80066c4:	4b52      	ldr	r3, [pc, #328]	@ (8006810 <HAL_RCC_OscConfig+0x61c>)
 80066c6:	4013      	ands	r3, r2
 80066c8:	687a      	ldr	r2, [r7, #4]
 80066ca:	6a11      	ldr	r1, [r2, #32]
 80066cc:	687a      	ldr	r2, [r7, #4]
 80066ce:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80066d0:	3a01      	subs	r2, #1
 80066d2:	0112      	lsls	r2, r2, #4
 80066d4:	4311      	orrs	r1, r2
 80066d6:	687a      	ldr	r2, [r7, #4]
 80066d8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80066da:	0212      	lsls	r2, r2, #8
 80066dc:	4311      	orrs	r1, r2
 80066de:	687a      	ldr	r2, [r7, #4]
 80066e0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80066e2:	0852      	lsrs	r2, r2, #1
 80066e4:	3a01      	subs	r2, #1
 80066e6:	0552      	lsls	r2, r2, #21
 80066e8:	4311      	orrs	r1, r2
 80066ea:	687a      	ldr	r2, [r7, #4]
 80066ec:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80066ee:	0852      	lsrs	r2, r2, #1
 80066f0:	3a01      	subs	r2, #1
 80066f2:	0652      	lsls	r2, r2, #25
 80066f4:	4311      	orrs	r1, r2
 80066f6:	687a      	ldr	r2, [r7, #4]
 80066f8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80066fa:	06d2      	lsls	r2, r2, #27
 80066fc:	430a      	orrs	r2, r1
 80066fe:	4943      	ldr	r1, [pc, #268]	@ (800680c <HAL_RCC_OscConfig+0x618>)
 8006700:	4313      	orrs	r3, r2
 8006702:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006704:	4b41      	ldr	r3, [pc, #260]	@ (800680c <HAL_RCC_OscConfig+0x618>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a40      	ldr	r2, [pc, #256]	@ (800680c <HAL_RCC_OscConfig+0x618>)
 800670a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800670e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006710:	4b3e      	ldr	r3, [pc, #248]	@ (800680c <HAL_RCC_OscConfig+0x618>)
 8006712:	68db      	ldr	r3, [r3, #12]
 8006714:	4a3d      	ldr	r2, [pc, #244]	@ (800680c <HAL_RCC_OscConfig+0x618>)
 8006716:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800671a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800671c:	f7fd fb18 	bl	8003d50 <HAL_GetTick>
 8006720:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006722:	e008      	b.n	8006736 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006724:	f7fd fb14 	bl	8003d50 <HAL_GetTick>
 8006728:	4602      	mov	r2, r0
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	1ad3      	subs	r3, r2, r3
 800672e:	2b02      	cmp	r3, #2
 8006730:	d901      	bls.n	8006736 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8006732:	2303      	movs	r3, #3
 8006734:	e066      	b.n	8006804 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006736:	4b35      	ldr	r3, [pc, #212]	@ (800680c <HAL_RCC_OscConfig+0x618>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800673e:	2b00      	cmp	r3, #0
 8006740:	d0f0      	beq.n	8006724 <HAL_RCC_OscConfig+0x530>
 8006742:	e05e      	b.n	8006802 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006744:	4b31      	ldr	r3, [pc, #196]	@ (800680c <HAL_RCC_OscConfig+0x618>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4a30      	ldr	r2, [pc, #192]	@ (800680c <HAL_RCC_OscConfig+0x618>)
 800674a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800674e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006750:	f7fd fafe 	bl	8003d50 <HAL_GetTick>
 8006754:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006756:	e008      	b.n	800676a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006758:	f7fd fafa 	bl	8003d50 <HAL_GetTick>
 800675c:	4602      	mov	r2, r0
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	1ad3      	subs	r3, r2, r3
 8006762:	2b02      	cmp	r3, #2
 8006764:	d901      	bls.n	800676a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8006766:	2303      	movs	r3, #3
 8006768:	e04c      	b.n	8006804 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800676a:	4b28      	ldr	r3, [pc, #160]	@ (800680c <HAL_RCC_OscConfig+0x618>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006772:	2b00      	cmp	r3, #0
 8006774:	d1f0      	bne.n	8006758 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006776:	4b25      	ldr	r3, [pc, #148]	@ (800680c <HAL_RCC_OscConfig+0x618>)
 8006778:	68da      	ldr	r2, [r3, #12]
 800677a:	4924      	ldr	r1, [pc, #144]	@ (800680c <HAL_RCC_OscConfig+0x618>)
 800677c:	4b25      	ldr	r3, [pc, #148]	@ (8006814 <HAL_RCC_OscConfig+0x620>)
 800677e:	4013      	ands	r3, r2
 8006780:	60cb      	str	r3, [r1, #12]
 8006782:	e03e      	b.n	8006802 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	69db      	ldr	r3, [r3, #28]
 8006788:	2b01      	cmp	r3, #1
 800678a:	d101      	bne.n	8006790 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800678c:	2301      	movs	r3, #1
 800678e:	e039      	b.n	8006804 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006790:	4b1e      	ldr	r3, [pc, #120]	@ (800680c <HAL_RCC_OscConfig+0x618>)
 8006792:	68db      	ldr	r3, [r3, #12]
 8006794:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006796:	697b      	ldr	r3, [r7, #20]
 8006798:	f003 0203 	and.w	r2, r3, #3
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6a1b      	ldr	r3, [r3, #32]
 80067a0:	429a      	cmp	r2, r3
 80067a2:	d12c      	bne.n	80067fe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067ae:	3b01      	subs	r3, #1
 80067b0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067b2:	429a      	cmp	r2, r3
 80067b4:	d123      	bne.n	80067fe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067c0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80067c2:	429a      	cmp	r2, r3
 80067c4:	d11b      	bne.n	80067fe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067d0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80067d2:	429a      	cmp	r2, r3
 80067d4:	d113      	bne.n	80067fe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067e0:	085b      	lsrs	r3, r3, #1
 80067e2:	3b01      	subs	r3, #1
 80067e4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80067e6:	429a      	cmp	r2, r3
 80067e8:	d109      	bne.n	80067fe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067f4:	085b      	lsrs	r3, r3, #1
 80067f6:	3b01      	subs	r3, #1
 80067f8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80067fa:	429a      	cmp	r2, r3
 80067fc:	d001      	beq.n	8006802 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80067fe:	2301      	movs	r3, #1
 8006800:	e000      	b.n	8006804 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8006802:	2300      	movs	r3, #0
}
 8006804:	4618      	mov	r0, r3
 8006806:	3720      	adds	r7, #32
 8006808:	46bd      	mov	sp, r7
 800680a:	bd80      	pop	{r7, pc}
 800680c:	40021000 	.word	0x40021000
 8006810:	019f800c 	.word	0x019f800c
 8006814:	feeefffc 	.word	0xfeeefffc

08006818 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b086      	sub	sp, #24
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
 8006820:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006822:	2300      	movs	r3, #0
 8006824:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d101      	bne.n	8006830 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800682c:	2301      	movs	r3, #1
 800682e:	e11e      	b.n	8006a6e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006830:	4b91      	ldr	r3, [pc, #580]	@ (8006a78 <HAL_RCC_ClockConfig+0x260>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f003 030f 	and.w	r3, r3, #15
 8006838:	683a      	ldr	r2, [r7, #0]
 800683a:	429a      	cmp	r2, r3
 800683c:	d910      	bls.n	8006860 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800683e:	4b8e      	ldr	r3, [pc, #568]	@ (8006a78 <HAL_RCC_ClockConfig+0x260>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f023 020f 	bic.w	r2, r3, #15
 8006846:	498c      	ldr	r1, [pc, #560]	@ (8006a78 <HAL_RCC_ClockConfig+0x260>)
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	4313      	orrs	r3, r2
 800684c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800684e:	4b8a      	ldr	r3, [pc, #552]	@ (8006a78 <HAL_RCC_ClockConfig+0x260>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f003 030f 	and.w	r3, r3, #15
 8006856:	683a      	ldr	r2, [r7, #0]
 8006858:	429a      	cmp	r2, r3
 800685a:	d001      	beq.n	8006860 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800685c:	2301      	movs	r3, #1
 800685e:	e106      	b.n	8006a6e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f003 0301 	and.w	r3, r3, #1
 8006868:	2b00      	cmp	r3, #0
 800686a:	d073      	beq.n	8006954 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	2b03      	cmp	r3, #3
 8006872:	d129      	bne.n	80068c8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006874:	4b81      	ldr	r3, [pc, #516]	@ (8006a7c <HAL_RCC_ClockConfig+0x264>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800687c:	2b00      	cmp	r3, #0
 800687e:	d101      	bne.n	8006884 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006880:	2301      	movs	r3, #1
 8006882:	e0f4      	b.n	8006a6e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006884:	f000 f99e 	bl	8006bc4 <RCC_GetSysClockFreqFromPLLSource>
 8006888:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800688a:	693b      	ldr	r3, [r7, #16]
 800688c:	4a7c      	ldr	r2, [pc, #496]	@ (8006a80 <HAL_RCC_ClockConfig+0x268>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d93f      	bls.n	8006912 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006892:	4b7a      	ldr	r3, [pc, #488]	@ (8006a7c <HAL_RCC_ClockConfig+0x264>)
 8006894:	689b      	ldr	r3, [r3, #8]
 8006896:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800689a:	2b00      	cmp	r3, #0
 800689c:	d009      	beq.n	80068b2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d033      	beq.n	8006912 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d12f      	bne.n	8006912 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80068b2:	4b72      	ldr	r3, [pc, #456]	@ (8006a7c <HAL_RCC_ClockConfig+0x264>)
 80068b4:	689b      	ldr	r3, [r3, #8]
 80068b6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80068ba:	4a70      	ldr	r2, [pc, #448]	@ (8006a7c <HAL_RCC_ClockConfig+0x264>)
 80068bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068c0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80068c2:	2380      	movs	r3, #128	@ 0x80
 80068c4:	617b      	str	r3, [r7, #20]
 80068c6:	e024      	b.n	8006912 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	685b      	ldr	r3, [r3, #4]
 80068cc:	2b02      	cmp	r3, #2
 80068ce:	d107      	bne.n	80068e0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80068d0:	4b6a      	ldr	r3, [pc, #424]	@ (8006a7c <HAL_RCC_ClockConfig+0x264>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d109      	bne.n	80068f0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80068dc:	2301      	movs	r3, #1
 80068de:	e0c6      	b.n	8006a6e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80068e0:	4b66      	ldr	r3, [pc, #408]	@ (8006a7c <HAL_RCC_ClockConfig+0x264>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d101      	bne.n	80068f0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80068ec:	2301      	movs	r3, #1
 80068ee:	e0be      	b.n	8006a6e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80068f0:	f000 f8ce 	bl	8006a90 <HAL_RCC_GetSysClockFreq>
 80068f4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	4a61      	ldr	r2, [pc, #388]	@ (8006a80 <HAL_RCC_ClockConfig+0x268>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d909      	bls.n	8006912 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80068fe:	4b5f      	ldr	r3, [pc, #380]	@ (8006a7c <HAL_RCC_ClockConfig+0x264>)
 8006900:	689b      	ldr	r3, [r3, #8]
 8006902:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006906:	4a5d      	ldr	r2, [pc, #372]	@ (8006a7c <HAL_RCC_ClockConfig+0x264>)
 8006908:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800690c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800690e:	2380      	movs	r3, #128	@ 0x80
 8006910:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006912:	4b5a      	ldr	r3, [pc, #360]	@ (8006a7c <HAL_RCC_ClockConfig+0x264>)
 8006914:	689b      	ldr	r3, [r3, #8]
 8006916:	f023 0203 	bic.w	r2, r3, #3
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	4957      	ldr	r1, [pc, #348]	@ (8006a7c <HAL_RCC_ClockConfig+0x264>)
 8006920:	4313      	orrs	r3, r2
 8006922:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006924:	f7fd fa14 	bl	8003d50 <HAL_GetTick>
 8006928:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800692a:	e00a      	b.n	8006942 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800692c:	f7fd fa10 	bl	8003d50 <HAL_GetTick>
 8006930:	4602      	mov	r2, r0
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	1ad3      	subs	r3, r2, r3
 8006936:	f241 3288 	movw	r2, #5000	@ 0x1388
 800693a:	4293      	cmp	r3, r2
 800693c:	d901      	bls.n	8006942 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800693e:	2303      	movs	r3, #3
 8006940:	e095      	b.n	8006a6e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006942:	4b4e      	ldr	r3, [pc, #312]	@ (8006a7c <HAL_RCC_ClockConfig+0x264>)
 8006944:	689b      	ldr	r3, [r3, #8]
 8006946:	f003 020c 	and.w	r2, r3, #12
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	685b      	ldr	r3, [r3, #4]
 800694e:	009b      	lsls	r3, r3, #2
 8006950:	429a      	cmp	r2, r3
 8006952:	d1eb      	bne.n	800692c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f003 0302 	and.w	r3, r3, #2
 800695c:	2b00      	cmp	r3, #0
 800695e:	d023      	beq.n	80069a8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f003 0304 	and.w	r3, r3, #4
 8006968:	2b00      	cmp	r3, #0
 800696a:	d005      	beq.n	8006978 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800696c:	4b43      	ldr	r3, [pc, #268]	@ (8006a7c <HAL_RCC_ClockConfig+0x264>)
 800696e:	689b      	ldr	r3, [r3, #8]
 8006970:	4a42      	ldr	r2, [pc, #264]	@ (8006a7c <HAL_RCC_ClockConfig+0x264>)
 8006972:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006976:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f003 0308 	and.w	r3, r3, #8
 8006980:	2b00      	cmp	r3, #0
 8006982:	d007      	beq.n	8006994 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006984:	4b3d      	ldr	r3, [pc, #244]	@ (8006a7c <HAL_RCC_ClockConfig+0x264>)
 8006986:	689b      	ldr	r3, [r3, #8]
 8006988:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800698c:	4a3b      	ldr	r2, [pc, #236]	@ (8006a7c <HAL_RCC_ClockConfig+0x264>)
 800698e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006992:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006994:	4b39      	ldr	r3, [pc, #228]	@ (8006a7c <HAL_RCC_ClockConfig+0x264>)
 8006996:	689b      	ldr	r3, [r3, #8]
 8006998:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	689b      	ldr	r3, [r3, #8]
 80069a0:	4936      	ldr	r1, [pc, #216]	@ (8006a7c <HAL_RCC_ClockConfig+0x264>)
 80069a2:	4313      	orrs	r3, r2
 80069a4:	608b      	str	r3, [r1, #8]
 80069a6:	e008      	b.n	80069ba <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	2b80      	cmp	r3, #128	@ 0x80
 80069ac:	d105      	bne.n	80069ba <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80069ae:	4b33      	ldr	r3, [pc, #204]	@ (8006a7c <HAL_RCC_ClockConfig+0x264>)
 80069b0:	689b      	ldr	r3, [r3, #8]
 80069b2:	4a32      	ldr	r2, [pc, #200]	@ (8006a7c <HAL_RCC_ClockConfig+0x264>)
 80069b4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80069b8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80069ba:	4b2f      	ldr	r3, [pc, #188]	@ (8006a78 <HAL_RCC_ClockConfig+0x260>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f003 030f 	and.w	r3, r3, #15
 80069c2:	683a      	ldr	r2, [r7, #0]
 80069c4:	429a      	cmp	r2, r3
 80069c6:	d21d      	bcs.n	8006a04 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069c8:	4b2b      	ldr	r3, [pc, #172]	@ (8006a78 <HAL_RCC_ClockConfig+0x260>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f023 020f 	bic.w	r2, r3, #15
 80069d0:	4929      	ldr	r1, [pc, #164]	@ (8006a78 <HAL_RCC_ClockConfig+0x260>)
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	4313      	orrs	r3, r2
 80069d6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80069d8:	f7fd f9ba 	bl	8003d50 <HAL_GetTick>
 80069dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80069de:	e00a      	b.n	80069f6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80069e0:	f7fd f9b6 	bl	8003d50 <HAL_GetTick>
 80069e4:	4602      	mov	r2, r0
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	1ad3      	subs	r3, r2, r3
 80069ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d901      	bls.n	80069f6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80069f2:	2303      	movs	r3, #3
 80069f4:	e03b      	b.n	8006a6e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80069f6:	4b20      	ldr	r3, [pc, #128]	@ (8006a78 <HAL_RCC_ClockConfig+0x260>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f003 030f 	and.w	r3, r3, #15
 80069fe:	683a      	ldr	r2, [r7, #0]
 8006a00:	429a      	cmp	r2, r3
 8006a02:	d1ed      	bne.n	80069e0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f003 0304 	and.w	r3, r3, #4
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d008      	beq.n	8006a22 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006a10:	4b1a      	ldr	r3, [pc, #104]	@ (8006a7c <HAL_RCC_ClockConfig+0x264>)
 8006a12:	689b      	ldr	r3, [r3, #8]
 8006a14:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	68db      	ldr	r3, [r3, #12]
 8006a1c:	4917      	ldr	r1, [pc, #92]	@ (8006a7c <HAL_RCC_ClockConfig+0x264>)
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f003 0308 	and.w	r3, r3, #8
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d009      	beq.n	8006a42 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006a2e:	4b13      	ldr	r3, [pc, #76]	@ (8006a7c <HAL_RCC_ClockConfig+0x264>)
 8006a30:	689b      	ldr	r3, [r3, #8]
 8006a32:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	691b      	ldr	r3, [r3, #16]
 8006a3a:	00db      	lsls	r3, r3, #3
 8006a3c:	490f      	ldr	r1, [pc, #60]	@ (8006a7c <HAL_RCC_ClockConfig+0x264>)
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006a42:	f000 f825 	bl	8006a90 <HAL_RCC_GetSysClockFreq>
 8006a46:	4602      	mov	r2, r0
 8006a48:	4b0c      	ldr	r3, [pc, #48]	@ (8006a7c <HAL_RCC_ClockConfig+0x264>)
 8006a4a:	689b      	ldr	r3, [r3, #8]
 8006a4c:	091b      	lsrs	r3, r3, #4
 8006a4e:	f003 030f 	and.w	r3, r3, #15
 8006a52:	490c      	ldr	r1, [pc, #48]	@ (8006a84 <HAL_RCC_ClockConfig+0x26c>)
 8006a54:	5ccb      	ldrb	r3, [r1, r3]
 8006a56:	f003 031f 	and.w	r3, r3, #31
 8006a5a:	fa22 f303 	lsr.w	r3, r2, r3
 8006a5e:	4a0a      	ldr	r2, [pc, #40]	@ (8006a88 <HAL_RCC_ClockConfig+0x270>)
 8006a60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006a62:	4b0a      	ldr	r3, [pc, #40]	@ (8006a8c <HAL_RCC_ClockConfig+0x274>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4618      	mov	r0, r3
 8006a68:	f7fd f926 	bl	8003cb8 <HAL_InitTick>
 8006a6c:	4603      	mov	r3, r0
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	3718      	adds	r7, #24
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}
 8006a76:	bf00      	nop
 8006a78:	40022000 	.word	0x40022000
 8006a7c:	40021000 	.word	0x40021000
 8006a80:	04c4b400 	.word	0x04c4b400
 8006a84:	0800b0c4 	.word	0x0800b0c4
 8006a88:	20000018 	.word	0x20000018
 8006a8c:	2000001c 	.word	0x2000001c

08006a90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a90:	b480      	push	{r7}
 8006a92:	b087      	sub	sp, #28
 8006a94:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006a96:	4b2c      	ldr	r3, [pc, #176]	@ (8006b48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006a98:	689b      	ldr	r3, [r3, #8]
 8006a9a:	f003 030c 	and.w	r3, r3, #12
 8006a9e:	2b04      	cmp	r3, #4
 8006aa0:	d102      	bne.n	8006aa8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006aa2:	4b2a      	ldr	r3, [pc, #168]	@ (8006b4c <HAL_RCC_GetSysClockFreq+0xbc>)
 8006aa4:	613b      	str	r3, [r7, #16]
 8006aa6:	e047      	b.n	8006b38 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006aa8:	4b27      	ldr	r3, [pc, #156]	@ (8006b48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006aaa:	689b      	ldr	r3, [r3, #8]
 8006aac:	f003 030c 	and.w	r3, r3, #12
 8006ab0:	2b08      	cmp	r3, #8
 8006ab2:	d102      	bne.n	8006aba <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006ab4:	4b26      	ldr	r3, [pc, #152]	@ (8006b50 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006ab6:	613b      	str	r3, [r7, #16]
 8006ab8:	e03e      	b.n	8006b38 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006aba:	4b23      	ldr	r3, [pc, #140]	@ (8006b48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006abc:	689b      	ldr	r3, [r3, #8]
 8006abe:	f003 030c 	and.w	r3, r3, #12
 8006ac2:	2b0c      	cmp	r3, #12
 8006ac4:	d136      	bne.n	8006b34 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006ac6:	4b20      	ldr	r3, [pc, #128]	@ (8006b48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006ac8:	68db      	ldr	r3, [r3, #12]
 8006aca:	f003 0303 	and.w	r3, r3, #3
 8006ace:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006ad0:	4b1d      	ldr	r3, [pc, #116]	@ (8006b48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006ad2:	68db      	ldr	r3, [r3, #12]
 8006ad4:	091b      	lsrs	r3, r3, #4
 8006ad6:	f003 030f 	and.w	r3, r3, #15
 8006ada:	3301      	adds	r3, #1
 8006adc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	2b03      	cmp	r3, #3
 8006ae2:	d10c      	bne.n	8006afe <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006ae4:	4a1a      	ldr	r2, [pc, #104]	@ (8006b50 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006aec:	4a16      	ldr	r2, [pc, #88]	@ (8006b48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006aee:	68d2      	ldr	r2, [r2, #12]
 8006af0:	0a12      	lsrs	r2, r2, #8
 8006af2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006af6:	fb02 f303 	mul.w	r3, r2, r3
 8006afa:	617b      	str	r3, [r7, #20]
      break;
 8006afc:	e00c      	b.n	8006b18 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006afe:	4a13      	ldr	r2, [pc, #76]	@ (8006b4c <HAL_RCC_GetSysClockFreq+0xbc>)
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b06:	4a10      	ldr	r2, [pc, #64]	@ (8006b48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006b08:	68d2      	ldr	r2, [r2, #12]
 8006b0a:	0a12      	lsrs	r2, r2, #8
 8006b0c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006b10:	fb02 f303 	mul.w	r3, r2, r3
 8006b14:	617b      	str	r3, [r7, #20]
      break;
 8006b16:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006b18:	4b0b      	ldr	r3, [pc, #44]	@ (8006b48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006b1a:	68db      	ldr	r3, [r3, #12]
 8006b1c:	0e5b      	lsrs	r3, r3, #25
 8006b1e:	f003 0303 	and.w	r3, r3, #3
 8006b22:	3301      	adds	r3, #1
 8006b24:	005b      	lsls	r3, r3, #1
 8006b26:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006b28:	697a      	ldr	r2, [r7, #20]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b30:	613b      	str	r3, [r7, #16]
 8006b32:	e001      	b.n	8006b38 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006b34:	2300      	movs	r3, #0
 8006b36:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006b38:	693b      	ldr	r3, [r7, #16]
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	371c      	adds	r7, #28
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b44:	4770      	bx	lr
 8006b46:	bf00      	nop
 8006b48:	40021000 	.word	0x40021000
 8006b4c:	00f42400 	.word	0x00f42400
 8006b50:	016e3600 	.word	0x016e3600

08006b54 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006b54:	b480      	push	{r7}
 8006b56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006b58:	4b03      	ldr	r3, [pc, #12]	@ (8006b68 <HAL_RCC_GetHCLKFreq+0x14>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b64:	4770      	bx	lr
 8006b66:	bf00      	nop
 8006b68:	20000018 	.word	0x20000018

08006b6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006b70:	f7ff fff0 	bl	8006b54 <HAL_RCC_GetHCLKFreq>
 8006b74:	4602      	mov	r2, r0
 8006b76:	4b06      	ldr	r3, [pc, #24]	@ (8006b90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006b78:	689b      	ldr	r3, [r3, #8]
 8006b7a:	0a1b      	lsrs	r3, r3, #8
 8006b7c:	f003 0307 	and.w	r3, r3, #7
 8006b80:	4904      	ldr	r1, [pc, #16]	@ (8006b94 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006b82:	5ccb      	ldrb	r3, [r1, r3]
 8006b84:	f003 031f 	and.w	r3, r3, #31
 8006b88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	bd80      	pop	{r7, pc}
 8006b90:	40021000 	.word	0x40021000
 8006b94:	0800b0d4 	.word	0x0800b0d4

08006b98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006b9c:	f7ff ffda 	bl	8006b54 <HAL_RCC_GetHCLKFreq>
 8006ba0:	4602      	mov	r2, r0
 8006ba2:	4b06      	ldr	r3, [pc, #24]	@ (8006bbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8006ba4:	689b      	ldr	r3, [r3, #8]
 8006ba6:	0adb      	lsrs	r3, r3, #11
 8006ba8:	f003 0307 	and.w	r3, r3, #7
 8006bac:	4904      	ldr	r1, [pc, #16]	@ (8006bc0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006bae:	5ccb      	ldrb	r3, [r1, r3]
 8006bb0:	f003 031f 	and.w	r3, r3, #31
 8006bb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006bb8:	4618      	mov	r0, r3
 8006bba:	bd80      	pop	{r7, pc}
 8006bbc:	40021000 	.word	0x40021000
 8006bc0:	0800b0d4 	.word	0x0800b0d4

08006bc4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b087      	sub	sp, #28
 8006bc8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006bca:	4b1e      	ldr	r3, [pc, #120]	@ (8006c44 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006bcc:	68db      	ldr	r3, [r3, #12]
 8006bce:	f003 0303 	and.w	r3, r3, #3
 8006bd2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006bd4:	4b1b      	ldr	r3, [pc, #108]	@ (8006c44 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006bd6:	68db      	ldr	r3, [r3, #12]
 8006bd8:	091b      	lsrs	r3, r3, #4
 8006bda:	f003 030f 	and.w	r3, r3, #15
 8006bde:	3301      	adds	r3, #1
 8006be0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	2b03      	cmp	r3, #3
 8006be6:	d10c      	bne.n	8006c02 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006be8:	4a17      	ldr	r2, [pc, #92]	@ (8006c48 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bf0:	4a14      	ldr	r2, [pc, #80]	@ (8006c44 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006bf2:	68d2      	ldr	r2, [r2, #12]
 8006bf4:	0a12      	lsrs	r2, r2, #8
 8006bf6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006bfa:	fb02 f303 	mul.w	r3, r2, r3
 8006bfe:	617b      	str	r3, [r7, #20]
    break;
 8006c00:	e00c      	b.n	8006c1c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006c02:	4a12      	ldr	r2, [pc, #72]	@ (8006c4c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c0a:	4a0e      	ldr	r2, [pc, #56]	@ (8006c44 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006c0c:	68d2      	ldr	r2, [r2, #12]
 8006c0e:	0a12      	lsrs	r2, r2, #8
 8006c10:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006c14:	fb02 f303 	mul.w	r3, r2, r3
 8006c18:	617b      	str	r3, [r7, #20]
    break;
 8006c1a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006c1c:	4b09      	ldr	r3, [pc, #36]	@ (8006c44 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006c1e:	68db      	ldr	r3, [r3, #12]
 8006c20:	0e5b      	lsrs	r3, r3, #25
 8006c22:	f003 0303 	and.w	r3, r3, #3
 8006c26:	3301      	adds	r3, #1
 8006c28:	005b      	lsls	r3, r3, #1
 8006c2a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006c2c:	697a      	ldr	r2, [r7, #20]
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c34:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006c36:	687b      	ldr	r3, [r7, #4]
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	371c      	adds	r7, #28
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c42:	4770      	bx	lr
 8006c44:	40021000 	.word	0x40021000
 8006c48:	016e3600 	.word	0x016e3600
 8006c4c:	00f42400 	.word	0x00f42400

08006c50 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b086      	sub	sp, #24
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006c58:	2300      	movs	r3, #0
 8006c5a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	f000 8098 	beq.w	8006d9e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006c6e:	2300      	movs	r3, #0
 8006c70:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006c72:	4b43      	ldr	r3, [pc, #268]	@ (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006c74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d10d      	bne.n	8006c9a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c7e:	4b40      	ldr	r3, [pc, #256]	@ (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006c80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c82:	4a3f      	ldr	r2, [pc, #252]	@ (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006c84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006c88:	6593      	str	r3, [r2, #88]	@ 0x58
 8006c8a:	4b3d      	ldr	r3, [pc, #244]	@ (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006c8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c92:	60bb      	str	r3, [r7, #8]
 8006c94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006c96:	2301      	movs	r3, #1
 8006c98:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006c9a:	4b3a      	ldr	r3, [pc, #232]	@ (8006d84 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4a39      	ldr	r2, [pc, #228]	@ (8006d84 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006ca0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006ca4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006ca6:	f7fd f853 	bl	8003d50 <HAL_GetTick>
 8006caa:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006cac:	e009      	b.n	8006cc2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006cae:	f7fd f84f 	bl	8003d50 <HAL_GetTick>
 8006cb2:	4602      	mov	r2, r0
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	1ad3      	subs	r3, r2, r3
 8006cb8:	2b02      	cmp	r3, #2
 8006cba:	d902      	bls.n	8006cc2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006cbc:	2303      	movs	r3, #3
 8006cbe:	74fb      	strb	r3, [r7, #19]
        break;
 8006cc0:	e005      	b.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006cc2:	4b30      	ldr	r3, [pc, #192]	@ (8006d84 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d0ef      	beq.n	8006cae <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006cce:	7cfb      	ldrb	r3, [r7, #19]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d159      	bne.n	8006d88 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006cd4:	4b2a      	ldr	r3, [pc, #168]	@ (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006cda:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006cde:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d01e      	beq.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006cea:	697a      	ldr	r2, [r7, #20]
 8006cec:	429a      	cmp	r2, r3
 8006cee:	d019      	beq.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006cf0:	4b23      	ldr	r3, [pc, #140]	@ (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006cf6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006cfa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006cfc:	4b20      	ldr	r3, [pc, #128]	@ (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d02:	4a1f      	ldr	r2, [pc, #124]	@ (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006d0c:	4b1c      	ldr	r3, [pc, #112]	@ (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d12:	4a1b      	ldr	r2, [pc, #108]	@ (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d14:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006d18:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006d1c:	4a18      	ldr	r2, [pc, #96]	@ (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006d24:	697b      	ldr	r3, [r7, #20]
 8006d26:	f003 0301 	and.w	r3, r3, #1
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d016      	beq.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d2e:	f7fd f80f 	bl	8003d50 <HAL_GetTick>
 8006d32:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006d34:	e00b      	b.n	8006d4e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d36:	f7fd f80b 	bl	8003d50 <HAL_GetTick>
 8006d3a:	4602      	mov	r2, r0
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	1ad3      	subs	r3, r2, r3
 8006d40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d902      	bls.n	8006d4e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006d48:	2303      	movs	r3, #3
 8006d4a:	74fb      	strb	r3, [r7, #19]
            break;
 8006d4c:	e006      	b.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006d4e:	4b0c      	ldr	r3, [pc, #48]	@ (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d54:	f003 0302 	and.w	r3, r3, #2
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d0ec      	beq.n	8006d36 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006d5c:	7cfb      	ldrb	r3, [r7, #19]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d10b      	bne.n	8006d7a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006d62:	4b07      	ldr	r3, [pc, #28]	@ (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d68:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d70:	4903      	ldr	r1, [pc, #12]	@ (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d72:	4313      	orrs	r3, r2
 8006d74:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006d78:	e008      	b.n	8006d8c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006d7a:	7cfb      	ldrb	r3, [r7, #19]
 8006d7c:	74bb      	strb	r3, [r7, #18]
 8006d7e:	e005      	b.n	8006d8c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006d80:	40021000 	.word	0x40021000
 8006d84:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d88:	7cfb      	ldrb	r3, [r7, #19]
 8006d8a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006d8c:	7c7b      	ldrb	r3, [r7, #17]
 8006d8e:	2b01      	cmp	r3, #1
 8006d90:	d105      	bne.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d92:	4ba7      	ldr	r3, [pc, #668]	@ (8007030 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d96:	4aa6      	ldr	r2, [pc, #664]	@ (8007030 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d98:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006d9c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f003 0301 	and.w	r3, r3, #1
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d00a      	beq.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006daa:	4ba1      	ldr	r3, [pc, #644]	@ (8007030 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006dac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006db0:	f023 0203 	bic.w	r2, r3, #3
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	685b      	ldr	r3, [r3, #4]
 8006db8:	499d      	ldr	r1, [pc, #628]	@ (8007030 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f003 0302 	and.w	r3, r3, #2
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d00a      	beq.n	8006de2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006dcc:	4b98      	ldr	r3, [pc, #608]	@ (8007030 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006dd2:	f023 020c 	bic.w	r2, r3, #12
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	689b      	ldr	r3, [r3, #8]
 8006dda:	4995      	ldr	r1, [pc, #596]	@ (8007030 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f003 0304 	and.w	r3, r3, #4
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d00a      	beq.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006dee:	4b90      	ldr	r3, [pc, #576]	@ (8007030 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006df0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006df4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	68db      	ldr	r3, [r3, #12]
 8006dfc:	498c      	ldr	r1, [pc, #560]	@ (8007030 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f003 0308 	and.w	r3, r3, #8
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d00a      	beq.n	8006e26 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006e10:	4b87      	ldr	r3, [pc, #540]	@ (8007030 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e16:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	691b      	ldr	r3, [r3, #16]
 8006e1e:	4984      	ldr	r1, [pc, #528]	@ (8007030 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e20:	4313      	orrs	r3, r2
 8006e22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f003 0310 	and.w	r3, r3, #16
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d00a      	beq.n	8006e48 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006e32:	4b7f      	ldr	r3, [pc, #508]	@ (8007030 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e38:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	695b      	ldr	r3, [r3, #20]
 8006e40:	497b      	ldr	r1, [pc, #492]	@ (8007030 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e42:	4313      	orrs	r3, r2
 8006e44:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f003 0320 	and.w	r3, r3, #32
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d00a      	beq.n	8006e6a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006e54:	4b76      	ldr	r3, [pc, #472]	@ (8007030 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e5a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	699b      	ldr	r3, [r3, #24]
 8006e62:	4973      	ldr	r1, [pc, #460]	@ (8007030 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e64:	4313      	orrs	r3, r2
 8006e66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d00a      	beq.n	8006e8c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006e76:	4b6e      	ldr	r3, [pc, #440]	@ (8007030 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e7c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	69db      	ldr	r3, [r3, #28]
 8006e84:	496a      	ldr	r1, [pc, #424]	@ (8007030 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e86:	4313      	orrs	r3, r2
 8006e88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d00a      	beq.n	8006eae <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006e98:	4b65      	ldr	r3, [pc, #404]	@ (8007030 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e9e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6a1b      	ldr	r3, [r3, #32]
 8006ea6:	4962      	ldr	r1, [pc, #392]	@ (8007030 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ea8:	4313      	orrs	r3, r2
 8006eaa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d00a      	beq.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006eba:	4b5d      	ldr	r3, [pc, #372]	@ (8007030 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ebc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ec0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ec8:	4959      	ldr	r1, [pc, #356]	@ (8007030 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006eca:	4313      	orrs	r3, r2
 8006ecc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d00a      	beq.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006edc:	4b54      	ldr	r3, [pc, #336]	@ (8007030 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ede:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006ee2:	f023 0203 	bic.w	r2, r3, #3
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006eea:	4951      	ldr	r1, [pc, #324]	@ (8007030 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006eec:	4313      	orrs	r3, r2
 8006eee:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d00a      	beq.n	8006f14 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006efe:	4b4c      	ldr	r3, [pc, #304]	@ (8007030 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f04:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f0c:	4948      	ldr	r1, [pc, #288]	@ (8007030 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d015      	beq.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006f20:	4b43      	ldr	r3, [pc, #268]	@ (8007030 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f26:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f2e:	4940      	ldr	r1, [pc, #256]	@ (8007030 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f30:	4313      	orrs	r3, r2
 8006f32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f3a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006f3e:	d105      	bne.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006f40:	4b3b      	ldr	r3, [pc, #236]	@ (8007030 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f42:	68db      	ldr	r3, [r3, #12]
 8006f44:	4a3a      	ldr	r2, [pc, #232]	@ (8007030 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f46:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006f4a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d015      	beq.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006f58:	4b35      	ldr	r3, [pc, #212]	@ (8007030 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f5e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f66:	4932      	ldr	r1, [pc, #200]	@ (8007030 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f68:	4313      	orrs	r3, r2
 8006f6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f72:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006f76:	d105      	bne.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006f78:	4b2d      	ldr	r3, [pc, #180]	@ (8007030 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f7a:	68db      	ldr	r3, [r3, #12]
 8006f7c:	4a2c      	ldr	r2, [pc, #176]	@ (8007030 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f7e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006f82:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d015      	beq.n	8006fbc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006f90:	4b27      	ldr	r3, [pc, #156]	@ (8007030 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f96:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f9e:	4924      	ldr	r1, [pc, #144]	@ (8007030 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006fa0:	4313      	orrs	r3, r2
 8006fa2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006faa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006fae:	d105      	bne.n	8006fbc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006fb0:	4b1f      	ldr	r3, [pc, #124]	@ (8007030 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006fb2:	68db      	ldr	r3, [r3, #12]
 8006fb4:	4a1e      	ldr	r2, [pc, #120]	@ (8007030 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006fb6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006fba:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d015      	beq.n	8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006fc8:	4b19      	ldr	r3, [pc, #100]	@ (8007030 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fce:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fd6:	4916      	ldr	r1, [pc, #88]	@ (8007030 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006fd8:	4313      	orrs	r3, r2
 8006fda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fe2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006fe6:	d105      	bne.n	8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006fe8:	4b11      	ldr	r3, [pc, #68]	@ (8007030 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006fea:	68db      	ldr	r3, [r3, #12]
 8006fec:	4a10      	ldr	r2, [pc, #64]	@ (8007030 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006fee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006ff2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d019      	beq.n	8007034 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007000:	4b0b      	ldr	r3, [pc, #44]	@ (8007030 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007002:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007006:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800700e:	4908      	ldr	r1, [pc, #32]	@ (8007030 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007010:	4313      	orrs	r3, r2
 8007012:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800701a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800701e:	d109      	bne.n	8007034 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007020:	4b03      	ldr	r3, [pc, #12]	@ (8007030 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007022:	68db      	ldr	r3, [r3, #12]
 8007024:	4a02      	ldr	r2, [pc, #8]	@ (8007030 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007026:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800702a:	60d3      	str	r3, [r2, #12]
 800702c:	e002      	b.n	8007034 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800702e:	bf00      	nop
 8007030:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800703c:	2b00      	cmp	r3, #0
 800703e:	d015      	beq.n	800706c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007040:	4b29      	ldr	r3, [pc, #164]	@ (80070e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007042:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007046:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800704e:	4926      	ldr	r1, [pc, #152]	@ (80070e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007050:	4313      	orrs	r3, r2
 8007052:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800705a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800705e:	d105      	bne.n	800706c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007060:	4b21      	ldr	r3, [pc, #132]	@ (80070e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007062:	68db      	ldr	r3, [r3, #12]
 8007064:	4a20      	ldr	r2, [pc, #128]	@ (80070e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007066:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800706a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007074:	2b00      	cmp	r3, #0
 8007076:	d015      	beq.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8007078:	4b1b      	ldr	r3, [pc, #108]	@ (80070e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800707a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800707e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007086:	4918      	ldr	r1, [pc, #96]	@ (80070e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007088:	4313      	orrs	r3, r2
 800708a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007092:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007096:	d105      	bne.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007098:	4b13      	ldr	r3, [pc, #76]	@ (80070e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800709a:	68db      	ldr	r3, [r3, #12]
 800709c:	4a12      	ldr	r2, [pc, #72]	@ (80070e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800709e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80070a2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d015      	beq.n	80070dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80070b0:	4b0d      	ldr	r3, [pc, #52]	@ (80070e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80070b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80070b6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80070be:	490a      	ldr	r1, [pc, #40]	@ (80070e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80070c0:	4313      	orrs	r3, r2
 80070c2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80070ca:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80070ce:	d105      	bne.n	80070dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80070d0:	4b05      	ldr	r3, [pc, #20]	@ (80070e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80070d2:	68db      	ldr	r3, [r3, #12]
 80070d4:	4a04      	ldr	r2, [pc, #16]	@ (80070e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80070d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80070da:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80070dc:	7cbb      	ldrb	r3, [r7, #18]
}
 80070de:	4618      	mov	r0, r3
 80070e0:	3718      	adds	r7, #24
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bd80      	pop	{r7, pc}
 80070e6:	bf00      	nop
 80070e8:	40021000 	.word	0x40021000

080070ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b082      	sub	sp, #8
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d101      	bne.n	80070fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80070fa:	2301      	movs	r3, #1
 80070fc:	e054      	b.n	80071a8 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007104:	b2db      	uxtb	r3, r3
 8007106:	2b00      	cmp	r3, #0
 8007108:	d111      	bne.n	800712e <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2200      	movs	r2, #0
 800710e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f001 feec 	bl	8008ef0 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800711c:	2b00      	cmp	r3, #0
 800711e:	d102      	bne.n	8007126 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	4a23      	ldr	r2, [pc, #140]	@ (80071b0 <HAL_TIM_Base_Init+0xc4>)
 8007124:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2202      	movs	r2, #2
 8007132:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681a      	ldr	r2, [r3, #0]
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	3304      	adds	r3, #4
 800713e:	4619      	mov	r1, r3
 8007140:	4610      	mov	r0, r2
 8007142:	f001 fa35 	bl	80085b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2201      	movs	r2, #1
 800714a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2201      	movs	r2, #1
 8007152:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2201      	movs	r2, #1
 800715a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2201      	movs	r2, #1
 8007162:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2201      	movs	r2, #1
 800716a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2201      	movs	r2, #1
 8007172:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2201      	movs	r2, #1
 800717a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2201      	movs	r2, #1
 8007182:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2201      	movs	r2, #1
 800718a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2201      	movs	r2, #1
 8007192:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2201      	movs	r2, #1
 800719a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2201      	movs	r2, #1
 80071a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80071a6:	2300      	movs	r3, #0
}
 80071a8:	4618      	mov	r0, r3
 80071aa:	3708      	adds	r7, #8
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bd80      	pop	{r7, pc}
 80071b0:	08003801 	.word	0x08003801

080071b4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80071b4:	b480      	push	{r7}
 80071b6:	b085      	sub	sp, #20
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80071c2:	b2db      	uxtb	r3, r3
 80071c4:	2b01      	cmp	r3, #1
 80071c6:	d001      	beq.n	80071cc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80071c8:	2301      	movs	r3, #1
 80071ca:	e04c      	b.n	8007266 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2202      	movs	r2, #2
 80071d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4a26      	ldr	r2, [pc, #152]	@ (8007274 <HAL_TIM_Base_Start+0xc0>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d022      	beq.n	8007224 <HAL_TIM_Base_Start+0x70>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80071e6:	d01d      	beq.n	8007224 <HAL_TIM_Base_Start+0x70>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	4a22      	ldr	r2, [pc, #136]	@ (8007278 <HAL_TIM_Base_Start+0xc4>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d018      	beq.n	8007224 <HAL_TIM_Base_Start+0x70>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	4a21      	ldr	r2, [pc, #132]	@ (800727c <HAL_TIM_Base_Start+0xc8>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d013      	beq.n	8007224 <HAL_TIM_Base_Start+0x70>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4a1f      	ldr	r2, [pc, #124]	@ (8007280 <HAL_TIM_Base_Start+0xcc>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d00e      	beq.n	8007224 <HAL_TIM_Base_Start+0x70>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	4a1e      	ldr	r2, [pc, #120]	@ (8007284 <HAL_TIM_Base_Start+0xd0>)
 800720c:	4293      	cmp	r3, r2
 800720e:	d009      	beq.n	8007224 <HAL_TIM_Base_Start+0x70>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4a1c      	ldr	r2, [pc, #112]	@ (8007288 <HAL_TIM_Base_Start+0xd4>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d004      	beq.n	8007224 <HAL_TIM_Base_Start+0x70>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	4a1b      	ldr	r2, [pc, #108]	@ (800728c <HAL_TIM_Base_Start+0xd8>)
 8007220:	4293      	cmp	r3, r2
 8007222:	d115      	bne.n	8007250 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	689a      	ldr	r2, [r3, #8]
 800722a:	4b19      	ldr	r3, [pc, #100]	@ (8007290 <HAL_TIM_Base_Start+0xdc>)
 800722c:	4013      	ands	r3, r2
 800722e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	2b06      	cmp	r3, #6
 8007234:	d015      	beq.n	8007262 <HAL_TIM_Base_Start+0xae>
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800723c:	d011      	beq.n	8007262 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	681a      	ldr	r2, [r3, #0]
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f042 0201 	orr.w	r2, r2, #1
 800724c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800724e:	e008      	b.n	8007262 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	681a      	ldr	r2, [r3, #0]
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f042 0201 	orr.w	r2, r2, #1
 800725e:	601a      	str	r2, [r3, #0]
 8007260:	e000      	b.n	8007264 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007262:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007264:	2300      	movs	r3, #0
}
 8007266:	4618      	mov	r0, r3
 8007268:	3714      	adds	r7, #20
 800726a:	46bd      	mov	sp, r7
 800726c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007270:	4770      	bx	lr
 8007272:	bf00      	nop
 8007274:	40012c00 	.word	0x40012c00
 8007278:	40000400 	.word	0x40000400
 800727c:	40000800 	.word	0x40000800
 8007280:	40000c00 	.word	0x40000c00
 8007284:	40013400 	.word	0x40013400
 8007288:	40014000 	.word	0x40014000
 800728c:	40015000 	.word	0x40015000
 8007290:	00010007 	.word	0x00010007

08007294 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007294:	b480      	push	{r7}
 8007296:	b085      	sub	sp, #20
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80072a2:	b2db      	uxtb	r3, r3
 80072a4:	2b01      	cmp	r3, #1
 80072a6:	d001      	beq.n	80072ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80072a8:	2301      	movs	r3, #1
 80072aa:	e054      	b.n	8007356 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2202      	movs	r2, #2
 80072b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	68da      	ldr	r2, [r3, #12]
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f042 0201 	orr.w	r2, r2, #1
 80072c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4a26      	ldr	r2, [pc, #152]	@ (8007364 <HAL_TIM_Base_Start_IT+0xd0>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d022      	beq.n	8007314 <HAL_TIM_Base_Start_IT+0x80>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80072d6:	d01d      	beq.n	8007314 <HAL_TIM_Base_Start_IT+0x80>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	4a22      	ldr	r2, [pc, #136]	@ (8007368 <HAL_TIM_Base_Start_IT+0xd4>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d018      	beq.n	8007314 <HAL_TIM_Base_Start_IT+0x80>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4a21      	ldr	r2, [pc, #132]	@ (800736c <HAL_TIM_Base_Start_IT+0xd8>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d013      	beq.n	8007314 <HAL_TIM_Base_Start_IT+0x80>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4a1f      	ldr	r2, [pc, #124]	@ (8007370 <HAL_TIM_Base_Start_IT+0xdc>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d00e      	beq.n	8007314 <HAL_TIM_Base_Start_IT+0x80>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4a1e      	ldr	r2, [pc, #120]	@ (8007374 <HAL_TIM_Base_Start_IT+0xe0>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d009      	beq.n	8007314 <HAL_TIM_Base_Start_IT+0x80>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4a1c      	ldr	r2, [pc, #112]	@ (8007378 <HAL_TIM_Base_Start_IT+0xe4>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d004      	beq.n	8007314 <HAL_TIM_Base_Start_IT+0x80>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	4a1b      	ldr	r2, [pc, #108]	@ (800737c <HAL_TIM_Base_Start_IT+0xe8>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d115      	bne.n	8007340 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	689a      	ldr	r2, [r3, #8]
 800731a:	4b19      	ldr	r3, [pc, #100]	@ (8007380 <HAL_TIM_Base_Start_IT+0xec>)
 800731c:	4013      	ands	r3, r2
 800731e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	2b06      	cmp	r3, #6
 8007324:	d015      	beq.n	8007352 <HAL_TIM_Base_Start_IT+0xbe>
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800732c:	d011      	beq.n	8007352 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	681a      	ldr	r2, [r3, #0]
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f042 0201 	orr.w	r2, r2, #1
 800733c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800733e:	e008      	b.n	8007352 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	681a      	ldr	r2, [r3, #0]
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f042 0201 	orr.w	r2, r2, #1
 800734e:	601a      	str	r2, [r3, #0]
 8007350:	e000      	b.n	8007354 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007352:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007354:	2300      	movs	r3, #0
}
 8007356:	4618      	mov	r0, r3
 8007358:	3714      	adds	r7, #20
 800735a:	46bd      	mov	sp, r7
 800735c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007360:	4770      	bx	lr
 8007362:	bf00      	nop
 8007364:	40012c00 	.word	0x40012c00
 8007368:	40000400 	.word	0x40000400
 800736c:	40000800 	.word	0x40000800
 8007370:	40000c00 	.word	0x40000c00
 8007374:	40013400 	.word	0x40013400
 8007378:	40014000 	.word	0x40014000
 800737c:	40015000 	.word	0x40015000
 8007380:	00010007 	.word	0x00010007

08007384 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b082      	sub	sp, #8
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d101      	bne.n	8007396 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007392:	2301      	movs	r3, #1
 8007394:	e054      	b.n	8007440 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800739c:	b2db      	uxtb	r3, r3
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d111      	bne.n	80073c6 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2200      	movs	r2, #0
 80073a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f001 fda0 	bl	8008ef0 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d102      	bne.n	80073be <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	4a23      	ldr	r2, [pc, #140]	@ (8007448 <HAL_TIM_PWM_Init+0xc4>)
 80073bc:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2202      	movs	r2, #2
 80073ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681a      	ldr	r2, [r3, #0]
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	3304      	adds	r3, #4
 80073d6:	4619      	mov	r1, r3
 80073d8:	4610      	mov	r0, r2
 80073da:	f001 f8e9 	bl	80085b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2201      	movs	r2, #1
 80073e2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2201      	movs	r2, #1
 80073ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2201      	movs	r2, #1
 80073f2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2201      	movs	r2, #1
 80073fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2201      	movs	r2, #1
 8007402:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2201      	movs	r2, #1
 800740a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2201      	movs	r2, #1
 8007412:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2201      	movs	r2, #1
 800741a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2201      	movs	r2, #1
 8007422:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2201      	movs	r2, #1
 800742a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2201      	movs	r2, #1
 8007432:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2201      	movs	r2, #1
 800743a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800743e:	2300      	movs	r3, #0
}
 8007440:	4618      	mov	r0, r3
 8007442:	3708      	adds	r7, #8
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}
 8007448:	0800744d 	.word	0x0800744d

0800744c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800744c:	b480      	push	{r7}
 800744e:	b083      	sub	sp, #12
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007454:	bf00      	nop
 8007456:	370c      	adds	r7, #12
 8007458:	46bd      	mov	sp, r7
 800745a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745e:	4770      	bx	lr

08007460 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b084      	sub	sp, #16
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
 8007468:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d109      	bne.n	8007484 <HAL_TIM_PWM_Start+0x24>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007476:	b2db      	uxtb	r3, r3
 8007478:	2b01      	cmp	r3, #1
 800747a:	bf14      	ite	ne
 800747c:	2301      	movne	r3, #1
 800747e:	2300      	moveq	r3, #0
 8007480:	b2db      	uxtb	r3, r3
 8007482:	e03c      	b.n	80074fe <HAL_TIM_PWM_Start+0x9e>
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	2b04      	cmp	r3, #4
 8007488:	d109      	bne.n	800749e <HAL_TIM_PWM_Start+0x3e>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007490:	b2db      	uxtb	r3, r3
 8007492:	2b01      	cmp	r3, #1
 8007494:	bf14      	ite	ne
 8007496:	2301      	movne	r3, #1
 8007498:	2300      	moveq	r3, #0
 800749a:	b2db      	uxtb	r3, r3
 800749c:	e02f      	b.n	80074fe <HAL_TIM_PWM_Start+0x9e>
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	2b08      	cmp	r3, #8
 80074a2:	d109      	bne.n	80074b8 <HAL_TIM_PWM_Start+0x58>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80074aa:	b2db      	uxtb	r3, r3
 80074ac:	2b01      	cmp	r3, #1
 80074ae:	bf14      	ite	ne
 80074b0:	2301      	movne	r3, #1
 80074b2:	2300      	moveq	r3, #0
 80074b4:	b2db      	uxtb	r3, r3
 80074b6:	e022      	b.n	80074fe <HAL_TIM_PWM_Start+0x9e>
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	2b0c      	cmp	r3, #12
 80074bc:	d109      	bne.n	80074d2 <HAL_TIM_PWM_Start+0x72>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80074c4:	b2db      	uxtb	r3, r3
 80074c6:	2b01      	cmp	r3, #1
 80074c8:	bf14      	ite	ne
 80074ca:	2301      	movne	r3, #1
 80074cc:	2300      	moveq	r3, #0
 80074ce:	b2db      	uxtb	r3, r3
 80074d0:	e015      	b.n	80074fe <HAL_TIM_PWM_Start+0x9e>
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	2b10      	cmp	r3, #16
 80074d6:	d109      	bne.n	80074ec <HAL_TIM_PWM_Start+0x8c>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80074de:	b2db      	uxtb	r3, r3
 80074e0:	2b01      	cmp	r3, #1
 80074e2:	bf14      	ite	ne
 80074e4:	2301      	movne	r3, #1
 80074e6:	2300      	moveq	r3, #0
 80074e8:	b2db      	uxtb	r3, r3
 80074ea:	e008      	b.n	80074fe <HAL_TIM_PWM_Start+0x9e>
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80074f2:	b2db      	uxtb	r3, r3
 80074f4:	2b01      	cmp	r3, #1
 80074f6:	bf14      	ite	ne
 80074f8:	2301      	movne	r3, #1
 80074fa:	2300      	moveq	r3, #0
 80074fc:	b2db      	uxtb	r3, r3
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d001      	beq.n	8007506 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007502:	2301      	movs	r3, #1
 8007504:	e0a6      	b.n	8007654 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d104      	bne.n	8007516 <HAL_TIM_PWM_Start+0xb6>
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2202      	movs	r2, #2
 8007510:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007514:	e023      	b.n	800755e <HAL_TIM_PWM_Start+0xfe>
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	2b04      	cmp	r3, #4
 800751a:	d104      	bne.n	8007526 <HAL_TIM_PWM_Start+0xc6>
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2202      	movs	r2, #2
 8007520:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007524:	e01b      	b.n	800755e <HAL_TIM_PWM_Start+0xfe>
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	2b08      	cmp	r3, #8
 800752a:	d104      	bne.n	8007536 <HAL_TIM_PWM_Start+0xd6>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2202      	movs	r2, #2
 8007530:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007534:	e013      	b.n	800755e <HAL_TIM_PWM_Start+0xfe>
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	2b0c      	cmp	r3, #12
 800753a:	d104      	bne.n	8007546 <HAL_TIM_PWM_Start+0xe6>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2202      	movs	r2, #2
 8007540:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007544:	e00b      	b.n	800755e <HAL_TIM_PWM_Start+0xfe>
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	2b10      	cmp	r3, #16
 800754a:	d104      	bne.n	8007556 <HAL_TIM_PWM_Start+0xf6>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2202      	movs	r2, #2
 8007550:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007554:	e003      	b.n	800755e <HAL_TIM_PWM_Start+0xfe>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2202      	movs	r2, #2
 800755a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	2201      	movs	r2, #1
 8007564:	6839      	ldr	r1, [r7, #0]
 8007566:	4618      	mov	r0, r3
 8007568:	f001 fc9c 	bl	8008ea4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4a3a      	ldr	r2, [pc, #232]	@ (800765c <HAL_TIM_PWM_Start+0x1fc>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d018      	beq.n	80075a8 <HAL_TIM_PWM_Start+0x148>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	4a39      	ldr	r2, [pc, #228]	@ (8007660 <HAL_TIM_PWM_Start+0x200>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d013      	beq.n	80075a8 <HAL_TIM_PWM_Start+0x148>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	4a37      	ldr	r2, [pc, #220]	@ (8007664 <HAL_TIM_PWM_Start+0x204>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d00e      	beq.n	80075a8 <HAL_TIM_PWM_Start+0x148>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	4a36      	ldr	r2, [pc, #216]	@ (8007668 <HAL_TIM_PWM_Start+0x208>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d009      	beq.n	80075a8 <HAL_TIM_PWM_Start+0x148>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4a34      	ldr	r2, [pc, #208]	@ (800766c <HAL_TIM_PWM_Start+0x20c>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d004      	beq.n	80075a8 <HAL_TIM_PWM_Start+0x148>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4a33      	ldr	r2, [pc, #204]	@ (8007670 <HAL_TIM_PWM_Start+0x210>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d101      	bne.n	80075ac <HAL_TIM_PWM_Start+0x14c>
 80075a8:	2301      	movs	r3, #1
 80075aa:	e000      	b.n	80075ae <HAL_TIM_PWM_Start+0x14e>
 80075ac:	2300      	movs	r3, #0
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d007      	beq.n	80075c2 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80075c0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	4a25      	ldr	r2, [pc, #148]	@ (800765c <HAL_TIM_PWM_Start+0x1fc>)
 80075c8:	4293      	cmp	r3, r2
 80075ca:	d022      	beq.n	8007612 <HAL_TIM_PWM_Start+0x1b2>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80075d4:	d01d      	beq.n	8007612 <HAL_TIM_PWM_Start+0x1b2>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4a26      	ldr	r2, [pc, #152]	@ (8007674 <HAL_TIM_PWM_Start+0x214>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	d018      	beq.n	8007612 <HAL_TIM_PWM_Start+0x1b2>
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	4a24      	ldr	r2, [pc, #144]	@ (8007678 <HAL_TIM_PWM_Start+0x218>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d013      	beq.n	8007612 <HAL_TIM_PWM_Start+0x1b2>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	4a23      	ldr	r2, [pc, #140]	@ (800767c <HAL_TIM_PWM_Start+0x21c>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d00e      	beq.n	8007612 <HAL_TIM_PWM_Start+0x1b2>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	4a19      	ldr	r2, [pc, #100]	@ (8007660 <HAL_TIM_PWM_Start+0x200>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d009      	beq.n	8007612 <HAL_TIM_PWM_Start+0x1b2>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	4a18      	ldr	r2, [pc, #96]	@ (8007664 <HAL_TIM_PWM_Start+0x204>)
 8007604:	4293      	cmp	r3, r2
 8007606:	d004      	beq.n	8007612 <HAL_TIM_PWM_Start+0x1b2>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	4a18      	ldr	r2, [pc, #96]	@ (8007670 <HAL_TIM_PWM_Start+0x210>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d115      	bne.n	800763e <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	689a      	ldr	r2, [r3, #8]
 8007618:	4b19      	ldr	r3, [pc, #100]	@ (8007680 <HAL_TIM_PWM_Start+0x220>)
 800761a:	4013      	ands	r3, r2
 800761c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	2b06      	cmp	r3, #6
 8007622:	d015      	beq.n	8007650 <HAL_TIM_PWM_Start+0x1f0>
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800762a:	d011      	beq.n	8007650 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	681a      	ldr	r2, [r3, #0]
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f042 0201 	orr.w	r2, r2, #1
 800763a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800763c:	e008      	b.n	8007650 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	681a      	ldr	r2, [r3, #0]
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f042 0201 	orr.w	r2, r2, #1
 800764c:	601a      	str	r2, [r3, #0]
 800764e:	e000      	b.n	8007652 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007650:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007652:	2300      	movs	r3, #0
}
 8007654:	4618      	mov	r0, r3
 8007656:	3710      	adds	r7, #16
 8007658:	46bd      	mov	sp, r7
 800765a:	bd80      	pop	{r7, pc}
 800765c:	40012c00 	.word	0x40012c00
 8007660:	40013400 	.word	0x40013400
 8007664:	40014000 	.word	0x40014000
 8007668:	40014400 	.word	0x40014400
 800766c:	40014800 	.word	0x40014800
 8007670:	40015000 	.word	0x40015000
 8007674:	40000400 	.word	0x40000400
 8007678:	40000800 	.word	0x40000800
 800767c:	40000c00 	.word	0x40000c00
 8007680:	00010007 	.word	0x00010007

08007684 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b082      	sub	sp, #8
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
 800768c:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d101      	bne.n	8007698 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8007694:	2301      	movs	r3, #1
 8007696:	e04c      	b.n	8007732 <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800769e:	b2db      	uxtb	r3, r3
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d111      	bne.n	80076c8 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2200      	movs	r2, #0
 80076a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	f001 fc1f 	bl	8008ef0 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d102      	bne.n	80076c0 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	4a1f      	ldr	r2, [pc, #124]	@ (800773c <HAL_TIM_OnePulse_Init+0xb8>)
 80076be:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2202      	movs	r2, #2
 80076cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681a      	ldr	r2, [r3, #0]
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	3304      	adds	r3, #4
 80076d8:	4619      	mov	r1, r3
 80076da:	4610      	mov	r0, r2
 80076dc:	f000 ff68 	bl	80085b0 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	681a      	ldr	r2, [r3, #0]
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f022 0208 	bic.w	r2, r2, #8
 80076ee:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	6819      	ldr	r1, [r3, #0]
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	683a      	ldr	r2, [r7, #0]
 80076fc:	430a      	orrs	r2, r1
 80076fe:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2201      	movs	r2, #1
 8007704:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2201      	movs	r2, #1
 800770c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2201      	movs	r2, #1
 8007714:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2201      	movs	r2, #1
 800771c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2201      	movs	r2, #1
 8007724:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2201      	movs	r2, #1
 800772c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007730:	2300      	movs	r3, #0
}
 8007732:	4618      	mov	r0, r3
 8007734:	3708      	adds	r7, #8
 8007736:	46bd      	mov	sp, r7
 8007738:	bd80      	pop	{r7, pc}
 800773a:	bf00      	nop
 800773c:	08007741 	.word	0x08007741

08007740 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8007740:	b480      	push	{r7}
 8007742:	b083      	sub	sp, #12
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8007748:	bf00      	nop
 800774a:	370c      	adds	r7, #12
 800774c:	46bd      	mov	sp, r7
 800774e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007752:	4770      	bx	lr

08007754 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b084      	sub	sp, #16
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
 800775c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007764:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800776c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007774:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800777c:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800777e:	7bfb      	ldrb	r3, [r7, #15]
 8007780:	2b01      	cmp	r3, #1
 8007782:	d108      	bne.n	8007796 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007784:	7bbb      	ldrb	r3, [r7, #14]
 8007786:	2b01      	cmp	r3, #1
 8007788:	d105      	bne.n	8007796 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800778a:	7b7b      	ldrb	r3, [r7, #13]
 800778c:	2b01      	cmp	r3, #1
 800778e:	d102      	bne.n	8007796 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007790:	7b3b      	ldrb	r3, [r7, #12]
 8007792:	2b01      	cmp	r3, #1
 8007794:	d001      	beq.n	800779a <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8007796:	2301      	movs	r3, #1
 8007798:	e059      	b.n	800784e <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2202      	movs	r2, #2
 800779e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2202      	movs	r2, #2
 80077a6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2202      	movs	r2, #2
 80077ae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2202      	movs	r2, #2
 80077b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	68da      	ldr	r2, [r3, #12]
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f042 0202 	orr.w	r2, r2, #2
 80077c8:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	68da      	ldr	r2, [r3, #12]
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f042 0204 	orr.w	r2, r2, #4
 80077d8:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	2201      	movs	r2, #1
 80077e0:	2100      	movs	r1, #0
 80077e2:	4618      	mov	r0, r3
 80077e4:	f001 fb5e 	bl	8008ea4 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	2201      	movs	r2, #1
 80077ee:	2104      	movs	r1, #4
 80077f0:	4618      	mov	r0, r3
 80077f2:	f001 fb57 	bl	8008ea4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4a17      	ldr	r2, [pc, #92]	@ (8007858 <HAL_TIM_OnePulse_Start_IT+0x104>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d018      	beq.n	8007832 <HAL_TIM_OnePulse_Start_IT+0xde>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4a15      	ldr	r2, [pc, #84]	@ (800785c <HAL_TIM_OnePulse_Start_IT+0x108>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d013      	beq.n	8007832 <HAL_TIM_OnePulse_Start_IT+0xde>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	4a14      	ldr	r2, [pc, #80]	@ (8007860 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 8007810:	4293      	cmp	r3, r2
 8007812:	d00e      	beq.n	8007832 <HAL_TIM_OnePulse_Start_IT+0xde>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	4a12      	ldr	r2, [pc, #72]	@ (8007864 <HAL_TIM_OnePulse_Start_IT+0x110>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d009      	beq.n	8007832 <HAL_TIM_OnePulse_Start_IT+0xde>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	4a11      	ldr	r2, [pc, #68]	@ (8007868 <HAL_TIM_OnePulse_Start_IT+0x114>)
 8007824:	4293      	cmp	r3, r2
 8007826:	d004      	beq.n	8007832 <HAL_TIM_OnePulse_Start_IT+0xde>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	4a0f      	ldr	r2, [pc, #60]	@ (800786c <HAL_TIM_OnePulse_Start_IT+0x118>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d101      	bne.n	8007836 <HAL_TIM_OnePulse_Start_IT+0xe2>
 8007832:	2301      	movs	r3, #1
 8007834:	e000      	b.n	8007838 <HAL_TIM_OnePulse_Start_IT+0xe4>
 8007836:	2300      	movs	r3, #0
 8007838:	2b00      	cmp	r3, #0
 800783a:	d007      	beq.n	800784c <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800784a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800784c:	2300      	movs	r3, #0
}
 800784e:	4618      	mov	r0, r3
 8007850:	3710      	adds	r7, #16
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}
 8007856:	bf00      	nop
 8007858:	40012c00 	.word	0x40012c00
 800785c:	40013400 	.word	0x40013400
 8007860:	40014000 	.word	0x40014000
 8007864:	40014400 	.word	0x40014400
 8007868:	40014800 	.word	0x40014800
 800786c:	40015000 	.word	0x40015000

08007870 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b086      	sub	sp, #24
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
 8007878:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d101      	bne.n	8007884 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007880:	2301      	movs	r3, #1
 8007882:	e0a2      	b.n	80079ca <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800788a:	b2db      	uxtb	r3, r3
 800788c:	2b00      	cmp	r3, #0
 800788e:	d111      	bne.n	80078b4 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2200      	movs	r2, #0
 8007894:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f001 fb29 	bl	8008ef0 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d102      	bne.n	80078ac <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	4a4a      	ldr	r2, [pc, #296]	@ (80079d4 <HAL_TIM_Encoder_Init+0x164>)
 80078aa:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2202      	movs	r2, #2
 80078b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	689b      	ldr	r3, [r3, #8]
 80078c2:	687a      	ldr	r2, [r7, #4]
 80078c4:	6812      	ldr	r2, [r2, #0]
 80078c6:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 80078ca:	f023 0307 	bic.w	r3, r3, #7
 80078ce:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681a      	ldr	r2, [r3, #0]
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	3304      	adds	r3, #4
 80078d8:	4619      	mov	r1, r3
 80078da:	4610      	mov	r0, r2
 80078dc:	f000 fe68 	bl	80085b0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	689b      	ldr	r3, [r3, #8]
 80078e6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	699b      	ldr	r3, [r3, #24]
 80078ee:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	6a1b      	ldr	r3, [r3, #32]
 80078f6:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	697a      	ldr	r2, [r7, #20]
 80078fe:	4313      	orrs	r3, r2
 8007900:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007902:	693b      	ldr	r3, [r7, #16]
 8007904:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007908:	f023 0303 	bic.w	r3, r3, #3
 800790c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	689a      	ldr	r2, [r3, #8]
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	699b      	ldr	r3, [r3, #24]
 8007916:	021b      	lsls	r3, r3, #8
 8007918:	4313      	orrs	r3, r2
 800791a:	693a      	ldr	r2, [r7, #16]
 800791c:	4313      	orrs	r3, r2
 800791e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007920:	693b      	ldr	r3, [r7, #16]
 8007922:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8007926:	f023 030c 	bic.w	r3, r3, #12
 800792a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800792c:	693b      	ldr	r3, [r7, #16]
 800792e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007932:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007936:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	68da      	ldr	r2, [r3, #12]
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	69db      	ldr	r3, [r3, #28]
 8007940:	021b      	lsls	r3, r3, #8
 8007942:	4313      	orrs	r3, r2
 8007944:	693a      	ldr	r2, [r7, #16]
 8007946:	4313      	orrs	r3, r2
 8007948:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	691b      	ldr	r3, [r3, #16]
 800794e:	011a      	lsls	r2, r3, #4
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	6a1b      	ldr	r3, [r3, #32]
 8007954:	031b      	lsls	r3, r3, #12
 8007956:	4313      	orrs	r3, r2
 8007958:	693a      	ldr	r2, [r7, #16]
 800795a:	4313      	orrs	r3, r2
 800795c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8007964:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800796c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	685a      	ldr	r2, [r3, #4]
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	695b      	ldr	r3, [r3, #20]
 8007976:	011b      	lsls	r3, r3, #4
 8007978:	4313      	orrs	r3, r2
 800797a:	68fa      	ldr	r2, [r7, #12]
 800797c:	4313      	orrs	r3, r2
 800797e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	697a      	ldr	r2, [r7, #20]
 8007986:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	693a      	ldr	r2, [r7, #16]
 800798e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	68fa      	ldr	r2, [r7, #12]
 8007996:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2201      	movs	r2, #1
 800799c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2201      	movs	r2, #1
 80079a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2201      	movs	r2, #1
 80079ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2201      	movs	r2, #1
 80079b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2201      	movs	r2, #1
 80079bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2201      	movs	r2, #1
 80079c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80079c8:	2300      	movs	r3, #0
}
 80079ca:	4618      	mov	r0, r3
 80079cc:	3718      	adds	r7, #24
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bd80      	pop	{r7, pc}
 80079d2:	bf00      	nop
 80079d4:	0800377d 	.word	0x0800377d

080079d8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b084      	sub	sp, #16
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
 80079e0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80079e8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80079f0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80079f8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007a00:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d110      	bne.n	8007a2a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007a08:	7bfb      	ldrb	r3, [r7, #15]
 8007a0a:	2b01      	cmp	r3, #1
 8007a0c:	d102      	bne.n	8007a14 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007a0e:	7b7b      	ldrb	r3, [r7, #13]
 8007a10:	2b01      	cmp	r3, #1
 8007a12:	d001      	beq.n	8007a18 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007a14:	2301      	movs	r3, #1
 8007a16:	e069      	b.n	8007aec <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2202      	movs	r2, #2
 8007a1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2202      	movs	r2, #2
 8007a24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007a28:	e031      	b.n	8007a8e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	2b04      	cmp	r3, #4
 8007a2e:	d110      	bne.n	8007a52 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007a30:	7bbb      	ldrb	r3, [r7, #14]
 8007a32:	2b01      	cmp	r3, #1
 8007a34:	d102      	bne.n	8007a3c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007a36:	7b3b      	ldrb	r3, [r7, #12]
 8007a38:	2b01      	cmp	r3, #1
 8007a3a:	d001      	beq.n	8007a40 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007a3c:	2301      	movs	r3, #1
 8007a3e:	e055      	b.n	8007aec <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2202      	movs	r2, #2
 8007a44:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2202      	movs	r2, #2
 8007a4c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007a50:	e01d      	b.n	8007a8e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007a52:	7bfb      	ldrb	r3, [r7, #15]
 8007a54:	2b01      	cmp	r3, #1
 8007a56:	d108      	bne.n	8007a6a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007a58:	7bbb      	ldrb	r3, [r7, #14]
 8007a5a:	2b01      	cmp	r3, #1
 8007a5c:	d105      	bne.n	8007a6a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007a5e:	7b7b      	ldrb	r3, [r7, #13]
 8007a60:	2b01      	cmp	r3, #1
 8007a62:	d102      	bne.n	8007a6a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007a64:	7b3b      	ldrb	r3, [r7, #12]
 8007a66:	2b01      	cmp	r3, #1
 8007a68:	d001      	beq.n	8007a6e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	e03e      	b.n	8007aec <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2202      	movs	r2, #2
 8007a72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2202      	movs	r2, #2
 8007a7a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2202      	movs	r2, #2
 8007a82:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2202      	movs	r2, #2
 8007a8a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d003      	beq.n	8007a9c <HAL_TIM_Encoder_Start+0xc4>
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	2b04      	cmp	r3, #4
 8007a98:	d008      	beq.n	8007aac <HAL_TIM_Encoder_Start+0xd4>
 8007a9a:	e00f      	b.n	8007abc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	2201      	movs	r2, #1
 8007aa2:	2100      	movs	r1, #0
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	f001 f9fd 	bl	8008ea4 <TIM_CCxChannelCmd>
      break;
 8007aaa:	e016      	b.n	8007ada <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	2201      	movs	r2, #1
 8007ab2:	2104      	movs	r1, #4
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	f001 f9f5 	bl	8008ea4 <TIM_CCxChannelCmd>
      break;
 8007aba:	e00e      	b.n	8007ada <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	2201      	movs	r2, #1
 8007ac2:	2100      	movs	r1, #0
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	f001 f9ed 	bl	8008ea4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	2201      	movs	r2, #1
 8007ad0:	2104      	movs	r1, #4
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	f001 f9e6 	bl	8008ea4 <TIM_CCxChannelCmd>
      break;
 8007ad8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	681a      	ldr	r2, [r3, #0]
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f042 0201 	orr.w	r2, r2, #1
 8007ae8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007aea:	2300      	movs	r3, #0
}
 8007aec:	4618      	mov	r0, r3
 8007aee:	3710      	adds	r7, #16
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bd80      	pop	{r7, pc}

08007af4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b084      	sub	sp, #16
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	68db      	ldr	r3, [r3, #12]
 8007b02:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	691b      	ldr	r3, [r3, #16]
 8007b0a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	f003 0302 	and.w	r3, r3, #2
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d026      	beq.n	8007b64 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	f003 0302 	and.w	r3, r3, #2
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d021      	beq.n	8007b64 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f06f 0202 	mvn.w	r2, #2
 8007b28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2201      	movs	r2, #1
 8007b2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	699b      	ldr	r3, [r3, #24]
 8007b36:	f003 0303 	and.w	r3, r3, #3
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d005      	beq.n	8007b4a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	4798      	blx	r3
 8007b48:	e009      	b.n	8007b5e <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2200      	movs	r2, #0
 8007b62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007b64:	68bb      	ldr	r3, [r7, #8]
 8007b66:	f003 0304 	and.w	r3, r3, #4
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d026      	beq.n	8007bbc <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	f003 0304 	and.w	r3, r3, #4
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d021      	beq.n	8007bbc <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f06f 0204 	mvn.w	r2, #4
 8007b80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2202      	movs	r2, #2
 8007b86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	699b      	ldr	r3, [r3, #24]
 8007b8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d005      	beq.n	8007ba2 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	4798      	blx	r3
 8007ba0:	e009      	b.n	8007bb6 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007ba8:	6878      	ldr	r0, [r7, #4]
 8007baa:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2200      	movs	r2, #0
 8007bba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	f003 0308 	and.w	r3, r3, #8
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d026      	beq.n	8007c14 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	f003 0308 	and.w	r3, r3, #8
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d021      	beq.n	8007c14 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f06f 0208 	mvn.w	r2, #8
 8007bd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2204      	movs	r2, #4
 8007bde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	69db      	ldr	r3, [r3, #28]
 8007be6:	f003 0303 	and.w	r3, r3, #3
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d005      	beq.n	8007bfa <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	4798      	blx	r3
 8007bf8:	e009      	b.n	8007c0e <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007c00:	6878      	ldr	r0, [r7, #4]
 8007c02:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2200      	movs	r2, #0
 8007c12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	f003 0310 	and.w	r3, r3, #16
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d026      	beq.n	8007c6c <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	f003 0310 	and.w	r3, r3, #16
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d021      	beq.n	8007c6c <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f06f 0210 	mvn.w	r2, #16
 8007c30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2208      	movs	r2, #8
 8007c36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	69db      	ldr	r3, [r3, #28]
 8007c3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d005      	beq.n	8007c52 <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007c4c:	6878      	ldr	r0, [r7, #4]
 8007c4e:	4798      	blx	r3
 8007c50:	e009      	b.n	8007c66 <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007c58:	6878      	ldr	r0, [r7, #4]
 8007c5a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2200      	movs	r2, #0
 8007c6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007c6c:	68bb      	ldr	r3, [r7, #8]
 8007c6e:	f003 0301 	and.w	r3, r3, #1
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d00e      	beq.n	8007c94 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	f003 0301 	and.w	r3, r3, #1
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d009      	beq.n	8007c94 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f06f 0201 	mvn.w	r2, #1
 8007c88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d104      	bne.n	8007ca8 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d00e      	beq.n	8007cc6 <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d009      	beq.n	8007cc6 <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007cba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007cc6:	68bb      	ldr	r3, [r7, #8]
 8007cc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d00e      	beq.n	8007cee <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d009      	beq.n	8007cee <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007ce2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007cee:	68bb      	ldr	r3, [r7, #8]
 8007cf0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d00e      	beq.n	8007d16 <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d009      	beq.n	8007d16 <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007d0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007d16:	68bb      	ldr	r3, [r7, #8]
 8007d18:	f003 0320 	and.w	r3, r3, #32
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d00e      	beq.n	8007d3e <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	f003 0320 	and.w	r3, r3, #32
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d009      	beq.n	8007d3e <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f06f 0220 	mvn.w	r2, #32
 8007d32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8007d3e:	68bb      	ldr	r3, [r7, #8]
 8007d40:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d00e      	beq.n	8007d66 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d009      	beq.n	8007d66 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8007d5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007d62:	6878      	ldr	r0, [r7, #4]
 8007d64:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8007d66:	68bb      	ldr	r3, [r7, #8]
 8007d68:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d00e      	beq.n	8007d8e <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d009      	beq.n	8007d8e <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8007d82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8007d8e:	68bb      	ldr	r3, [r7, #8]
 8007d90:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d00e      	beq.n	8007db6 <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d009      	beq.n	8007db6 <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8007daa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d00e      	beq.n	8007dde <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d009      	beq.n	8007dde <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8007dd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007dde:	bf00      	nop
 8007de0:	3710      	adds	r7, #16
 8007de2:	46bd      	mov	sp, r7
 8007de4:	bd80      	pop	{r7, pc}
	...

08007de8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b086      	sub	sp, #24
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	60f8      	str	r0, [r7, #12]
 8007df0:	60b9      	str	r1, [r7, #8]
 8007df2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007df4:	2300      	movs	r3, #0
 8007df6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007dfe:	2b01      	cmp	r3, #1
 8007e00:	d101      	bne.n	8007e06 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007e02:	2302      	movs	r3, #2
 8007e04:	e0ff      	b.n	8008006 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	2201      	movs	r2, #1
 8007e0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2b14      	cmp	r3, #20
 8007e12:	f200 80f0 	bhi.w	8007ff6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007e16:	a201      	add	r2, pc, #4	@ (adr r2, 8007e1c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e1c:	08007e71 	.word	0x08007e71
 8007e20:	08007ff7 	.word	0x08007ff7
 8007e24:	08007ff7 	.word	0x08007ff7
 8007e28:	08007ff7 	.word	0x08007ff7
 8007e2c:	08007eb1 	.word	0x08007eb1
 8007e30:	08007ff7 	.word	0x08007ff7
 8007e34:	08007ff7 	.word	0x08007ff7
 8007e38:	08007ff7 	.word	0x08007ff7
 8007e3c:	08007ef3 	.word	0x08007ef3
 8007e40:	08007ff7 	.word	0x08007ff7
 8007e44:	08007ff7 	.word	0x08007ff7
 8007e48:	08007ff7 	.word	0x08007ff7
 8007e4c:	08007f33 	.word	0x08007f33
 8007e50:	08007ff7 	.word	0x08007ff7
 8007e54:	08007ff7 	.word	0x08007ff7
 8007e58:	08007ff7 	.word	0x08007ff7
 8007e5c:	08007f75 	.word	0x08007f75
 8007e60:	08007ff7 	.word	0x08007ff7
 8007e64:	08007ff7 	.word	0x08007ff7
 8007e68:	08007ff7 	.word	0x08007ff7
 8007e6c:	08007fb5 	.word	0x08007fb5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	68b9      	ldr	r1, [r7, #8]
 8007e76:	4618      	mov	r0, r3
 8007e78:	f000 fc4e 	bl	8008718 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	699a      	ldr	r2, [r3, #24]
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f042 0208 	orr.w	r2, r2, #8
 8007e8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	699a      	ldr	r2, [r3, #24]
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f022 0204 	bic.w	r2, r2, #4
 8007e9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	6999      	ldr	r1, [r3, #24]
 8007ea2:	68bb      	ldr	r3, [r7, #8]
 8007ea4:	691a      	ldr	r2, [r3, #16]
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	430a      	orrs	r2, r1
 8007eac:	619a      	str	r2, [r3, #24]
      break;
 8007eae:	e0a5      	b.n	8007ffc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	68b9      	ldr	r1, [r7, #8]
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	f000 fcc8 	bl	800884c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	699a      	ldr	r2, [r3, #24]
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007eca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	699a      	ldr	r2, [r3, #24]
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007eda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	6999      	ldr	r1, [r3, #24]
 8007ee2:	68bb      	ldr	r3, [r7, #8]
 8007ee4:	691b      	ldr	r3, [r3, #16]
 8007ee6:	021a      	lsls	r2, r3, #8
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	430a      	orrs	r2, r1
 8007eee:	619a      	str	r2, [r3, #24]
      break;
 8007ef0:	e084      	b.n	8007ffc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	68b9      	ldr	r1, [r7, #8]
 8007ef8:	4618      	mov	r0, r3
 8007efa:	f000 fd3b 	bl	8008974 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	69da      	ldr	r2, [r3, #28]
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f042 0208 	orr.w	r2, r2, #8
 8007f0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	69da      	ldr	r2, [r3, #28]
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f022 0204 	bic.w	r2, r2, #4
 8007f1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	69d9      	ldr	r1, [r3, #28]
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	691a      	ldr	r2, [r3, #16]
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	430a      	orrs	r2, r1
 8007f2e:	61da      	str	r2, [r3, #28]
      break;
 8007f30:	e064      	b.n	8007ffc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	68b9      	ldr	r1, [r7, #8]
 8007f38:	4618      	mov	r0, r3
 8007f3a:	f000 fdad 	bl	8008a98 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	69da      	ldr	r2, [r3, #28]
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007f4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	69da      	ldr	r2, [r3, #28]
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007f5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	69d9      	ldr	r1, [r3, #28]
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	691b      	ldr	r3, [r3, #16]
 8007f68:	021a      	lsls	r2, r3, #8
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	430a      	orrs	r2, r1
 8007f70:	61da      	str	r2, [r3, #28]
      break;
 8007f72:	e043      	b.n	8007ffc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	68b9      	ldr	r1, [r7, #8]
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	f000 fe20 	bl	8008bc0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f042 0208 	orr.w	r2, r2, #8
 8007f8e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f022 0204 	bic.w	r2, r2, #4
 8007f9e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	691a      	ldr	r2, [r3, #16]
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	430a      	orrs	r2, r1
 8007fb0:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007fb2:	e023      	b.n	8007ffc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	68b9      	ldr	r1, [r7, #8]
 8007fba:	4618      	mov	r0, r3
 8007fbc:	f000 fe6a 	bl	8008c94 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007fce:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007fde:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007fe6:	68bb      	ldr	r3, [r7, #8]
 8007fe8:	691b      	ldr	r3, [r3, #16]
 8007fea:	021a      	lsls	r2, r3, #8
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	430a      	orrs	r2, r1
 8007ff2:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007ff4:	e002      	b.n	8007ffc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007ff6:	2301      	movs	r3, #1
 8007ff8:	75fb      	strb	r3, [r7, #23]
      break;
 8007ffa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	2200      	movs	r2, #0
 8008000:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008004:	7dfb      	ldrb	r3, [r7, #23]
}
 8008006:	4618      	mov	r0, r3
 8008008:	3718      	adds	r7, #24
 800800a:	46bd      	mov	sp, r7
 800800c:	bd80      	pop	{r7, pc}
 800800e:	bf00      	nop

08008010 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b084      	sub	sp, #16
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
 8008018:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800801a:	2300      	movs	r3, #0
 800801c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008024:	2b01      	cmp	r3, #1
 8008026:	d101      	bne.n	800802c <HAL_TIM_ConfigClockSource+0x1c>
 8008028:	2302      	movs	r3, #2
 800802a:	e0f6      	b.n	800821a <HAL_TIM_ConfigClockSource+0x20a>
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2201      	movs	r2, #1
 8008030:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2202      	movs	r2, #2
 8008038:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	689b      	ldr	r3, [r3, #8]
 8008042:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008044:	68bb      	ldr	r3, [r7, #8]
 8008046:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800804a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800804e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008056:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	68ba      	ldr	r2, [r7, #8]
 800805e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	4a6f      	ldr	r2, [pc, #444]	@ (8008224 <HAL_TIM_ConfigClockSource+0x214>)
 8008066:	4293      	cmp	r3, r2
 8008068:	f000 80c1 	beq.w	80081ee <HAL_TIM_ConfigClockSource+0x1de>
 800806c:	4a6d      	ldr	r2, [pc, #436]	@ (8008224 <HAL_TIM_ConfigClockSource+0x214>)
 800806e:	4293      	cmp	r3, r2
 8008070:	f200 80c6 	bhi.w	8008200 <HAL_TIM_ConfigClockSource+0x1f0>
 8008074:	4a6c      	ldr	r2, [pc, #432]	@ (8008228 <HAL_TIM_ConfigClockSource+0x218>)
 8008076:	4293      	cmp	r3, r2
 8008078:	f000 80b9 	beq.w	80081ee <HAL_TIM_ConfigClockSource+0x1de>
 800807c:	4a6a      	ldr	r2, [pc, #424]	@ (8008228 <HAL_TIM_ConfigClockSource+0x218>)
 800807e:	4293      	cmp	r3, r2
 8008080:	f200 80be 	bhi.w	8008200 <HAL_TIM_ConfigClockSource+0x1f0>
 8008084:	4a69      	ldr	r2, [pc, #420]	@ (800822c <HAL_TIM_ConfigClockSource+0x21c>)
 8008086:	4293      	cmp	r3, r2
 8008088:	f000 80b1 	beq.w	80081ee <HAL_TIM_ConfigClockSource+0x1de>
 800808c:	4a67      	ldr	r2, [pc, #412]	@ (800822c <HAL_TIM_ConfigClockSource+0x21c>)
 800808e:	4293      	cmp	r3, r2
 8008090:	f200 80b6 	bhi.w	8008200 <HAL_TIM_ConfigClockSource+0x1f0>
 8008094:	4a66      	ldr	r2, [pc, #408]	@ (8008230 <HAL_TIM_ConfigClockSource+0x220>)
 8008096:	4293      	cmp	r3, r2
 8008098:	f000 80a9 	beq.w	80081ee <HAL_TIM_ConfigClockSource+0x1de>
 800809c:	4a64      	ldr	r2, [pc, #400]	@ (8008230 <HAL_TIM_ConfigClockSource+0x220>)
 800809e:	4293      	cmp	r3, r2
 80080a0:	f200 80ae 	bhi.w	8008200 <HAL_TIM_ConfigClockSource+0x1f0>
 80080a4:	4a63      	ldr	r2, [pc, #396]	@ (8008234 <HAL_TIM_ConfigClockSource+0x224>)
 80080a6:	4293      	cmp	r3, r2
 80080a8:	f000 80a1 	beq.w	80081ee <HAL_TIM_ConfigClockSource+0x1de>
 80080ac:	4a61      	ldr	r2, [pc, #388]	@ (8008234 <HAL_TIM_ConfigClockSource+0x224>)
 80080ae:	4293      	cmp	r3, r2
 80080b0:	f200 80a6 	bhi.w	8008200 <HAL_TIM_ConfigClockSource+0x1f0>
 80080b4:	4a60      	ldr	r2, [pc, #384]	@ (8008238 <HAL_TIM_ConfigClockSource+0x228>)
 80080b6:	4293      	cmp	r3, r2
 80080b8:	f000 8099 	beq.w	80081ee <HAL_TIM_ConfigClockSource+0x1de>
 80080bc:	4a5e      	ldr	r2, [pc, #376]	@ (8008238 <HAL_TIM_ConfigClockSource+0x228>)
 80080be:	4293      	cmp	r3, r2
 80080c0:	f200 809e 	bhi.w	8008200 <HAL_TIM_ConfigClockSource+0x1f0>
 80080c4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80080c8:	f000 8091 	beq.w	80081ee <HAL_TIM_ConfigClockSource+0x1de>
 80080cc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80080d0:	f200 8096 	bhi.w	8008200 <HAL_TIM_ConfigClockSource+0x1f0>
 80080d4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80080d8:	f000 8089 	beq.w	80081ee <HAL_TIM_ConfigClockSource+0x1de>
 80080dc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80080e0:	f200 808e 	bhi.w	8008200 <HAL_TIM_ConfigClockSource+0x1f0>
 80080e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80080e8:	d03e      	beq.n	8008168 <HAL_TIM_ConfigClockSource+0x158>
 80080ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80080ee:	f200 8087 	bhi.w	8008200 <HAL_TIM_ConfigClockSource+0x1f0>
 80080f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80080f6:	f000 8086 	beq.w	8008206 <HAL_TIM_ConfigClockSource+0x1f6>
 80080fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80080fe:	d87f      	bhi.n	8008200 <HAL_TIM_ConfigClockSource+0x1f0>
 8008100:	2b70      	cmp	r3, #112	@ 0x70
 8008102:	d01a      	beq.n	800813a <HAL_TIM_ConfigClockSource+0x12a>
 8008104:	2b70      	cmp	r3, #112	@ 0x70
 8008106:	d87b      	bhi.n	8008200 <HAL_TIM_ConfigClockSource+0x1f0>
 8008108:	2b60      	cmp	r3, #96	@ 0x60
 800810a:	d050      	beq.n	80081ae <HAL_TIM_ConfigClockSource+0x19e>
 800810c:	2b60      	cmp	r3, #96	@ 0x60
 800810e:	d877      	bhi.n	8008200 <HAL_TIM_ConfigClockSource+0x1f0>
 8008110:	2b50      	cmp	r3, #80	@ 0x50
 8008112:	d03c      	beq.n	800818e <HAL_TIM_ConfigClockSource+0x17e>
 8008114:	2b50      	cmp	r3, #80	@ 0x50
 8008116:	d873      	bhi.n	8008200 <HAL_TIM_ConfigClockSource+0x1f0>
 8008118:	2b40      	cmp	r3, #64	@ 0x40
 800811a:	d058      	beq.n	80081ce <HAL_TIM_ConfigClockSource+0x1be>
 800811c:	2b40      	cmp	r3, #64	@ 0x40
 800811e:	d86f      	bhi.n	8008200 <HAL_TIM_ConfigClockSource+0x1f0>
 8008120:	2b30      	cmp	r3, #48	@ 0x30
 8008122:	d064      	beq.n	80081ee <HAL_TIM_ConfigClockSource+0x1de>
 8008124:	2b30      	cmp	r3, #48	@ 0x30
 8008126:	d86b      	bhi.n	8008200 <HAL_TIM_ConfigClockSource+0x1f0>
 8008128:	2b20      	cmp	r3, #32
 800812a:	d060      	beq.n	80081ee <HAL_TIM_ConfigClockSource+0x1de>
 800812c:	2b20      	cmp	r3, #32
 800812e:	d867      	bhi.n	8008200 <HAL_TIM_ConfigClockSource+0x1f0>
 8008130:	2b00      	cmp	r3, #0
 8008132:	d05c      	beq.n	80081ee <HAL_TIM_ConfigClockSource+0x1de>
 8008134:	2b10      	cmp	r3, #16
 8008136:	d05a      	beq.n	80081ee <HAL_TIM_ConfigClockSource+0x1de>
 8008138:	e062      	b.n	8008200 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800814a:	f000 fe8b 	bl	8008e64 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	689b      	ldr	r3, [r3, #8]
 8008154:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800815c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	68ba      	ldr	r2, [r7, #8]
 8008164:	609a      	str	r2, [r3, #8]
      break;
 8008166:	e04f      	b.n	8008208 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008178:	f000 fe74 	bl	8008e64 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	689a      	ldr	r2, [r3, #8]
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800818a:	609a      	str	r2, [r3, #8]
      break;
 800818c:	e03c      	b.n	8008208 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800819a:	461a      	mov	r2, r3
 800819c:	f000 fde6 	bl	8008d6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	2150      	movs	r1, #80	@ 0x50
 80081a6:	4618      	mov	r0, r3
 80081a8:	f000 fe3f 	bl	8008e2a <TIM_ITRx_SetConfig>
      break;
 80081ac:	e02c      	b.n	8008208 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80081ba:	461a      	mov	r2, r3
 80081bc:	f000 fe05 	bl	8008dca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	2160      	movs	r1, #96	@ 0x60
 80081c6:	4618      	mov	r0, r3
 80081c8:	f000 fe2f 	bl	8008e2a <TIM_ITRx_SetConfig>
      break;
 80081cc:	e01c      	b.n	8008208 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80081da:	461a      	mov	r2, r3
 80081dc:	f000 fdc6 	bl	8008d6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	2140      	movs	r1, #64	@ 0x40
 80081e6:	4618      	mov	r0, r3
 80081e8:	f000 fe1f 	bl	8008e2a <TIM_ITRx_SetConfig>
      break;
 80081ec:	e00c      	b.n	8008208 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681a      	ldr	r2, [r3, #0]
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	4619      	mov	r1, r3
 80081f8:	4610      	mov	r0, r2
 80081fa:	f000 fe16 	bl	8008e2a <TIM_ITRx_SetConfig>
      break;
 80081fe:	e003      	b.n	8008208 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8008200:	2301      	movs	r3, #1
 8008202:	73fb      	strb	r3, [r7, #15]
      break;
 8008204:	e000      	b.n	8008208 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8008206:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2201      	movs	r2, #1
 800820c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2200      	movs	r2, #0
 8008214:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008218:	7bfb      	ldrb	r3, [r7, #15]
}
 800821a:	4618      	mov	r0, r3
 800821c:	3710      	adds	r7, #16
 800821e:	46bd      	mov	sp, r7
 8008220:	bd80      	pop	{r7, pc}
 8008222:	bf00      	nop
 8008224:	00100070 	.word	0x00100070
 8008228:	00100060 	.word	0x00100060
 800822c:	00100050 	.word	0x00100050
 8008230:	00100040 	.word	0x00100040
 8008234:	00100030 	.word	0x00100030
 8008238:	00100020 	.word	0x00100020

0800823c <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800823c:	b480      	push	{r7}
 800823e:	b083      	sub	sp, #12
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8008244:	bf00      	nop
 8008246:	370c      	adds	r7, #12
 8008248:	46bd      	mov	sp, r7
 800824a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824e:	4770      	bx	lr

08008250 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008250:	b480      	push	{r7}
 8008252:	b083      	sub	sp, #12
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008258:	bf00      	nop
 800825a:	370c      	adds	r7, #12
 800825c:	46bd      	mov	sp, r7
 800825e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008262:	4770      	bx	lr

08008264 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008264:	b480      	push	{r7}
 8008266:	b083      	sub	sp, #12
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800826c:	bf00      	nop
 800826e:	370c      	adds	r7, #12
 8008270:	46bd      	mov	sp, r7
 8008272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008276:	4770      	bx	lr

08008278 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008278:	b480      	push	{r7}
 800827a:	b083      	sub	sp, #12
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8008280:	bf00      	nop
 8008282:	370c      	adds	r7, #12
 8008284:	46bd      	mov	sp, r7
 8008286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828a:	4770      	bx	lr

0800828c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800828c:	b480      	push	{r7}
 800828e:	b083      	sub	sp, #12
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008294:	bf00      	nop
 8008296:	370c      	adds	r7, #12
 8008298:	46bd      	mov	sp, r7
 800829a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829e:	4770      	bx	lr

080082a0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80082a0:	b480      	push	{r7}
 80082a2:	b083      	sub	sp, #12
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80082a8:	bf00      	nop
 80082aa:	370c      	adds	r7, #12
 80082ac:	46bd      	mov	sp, r7
 80082ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b2:	4770      	bx	lr

080082b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80082b4:	b480      	push	{r7}
 80082b6:	b083      	sub	sp, #12
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80082bc:	bf00      	nop
 80082be:	370c      	adds	r7, #12
 80082c0:	46bd      	mov	sp, r7
 80082c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c6:	4770      	bx	lr

080082c8 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80082c8:	b480      	push	{r7}
 80082ca:	b083      	sub	sp, #12
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 80082d0:	bf00      	nop
 80082d2:	370c      	adds	r7, #12
 80082d4:	46bd      	mov	sp, r7
 80082d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082da:	4770      	bx	lr

080082dc <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80082dc:	b480      	push	{r7}
 80082de:	b083      	sub	sp, #12
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80082e4:	bf00      	nop
 80082e6:	370c      	adds	r7, #12
 80082e8:	46bd      	mov	sp, r7
 80082ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ee:	4770      	bx	lr

080082f0 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 80082f0:	b480      	push	{r7}
 80082f2:	b087      	sub	sp, #28
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	60f8      	str	r0, [r7, #12]
 80082f8:	460b      	mov	r3, r1
 80082fa:	607a      	str	r2, [r7, #4]
 80082fc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80082fe:	2300      	movs	r3, #0
 8008300:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d101      	bne.n	800830c <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8008308:	2301      	movs	r3, #1
 800830a:	e14a      	b.n	80085a2 <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008312:	b2db      	uxtb	r3, r3
 8008314:	2b01      	cmp	r3, #1
 8008316:	f040 80dd 	bne.w	80084d4 <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 800831a:	7afb      	ldrb	r3, [r7, #11]
 800831c:	2b1f      	cmp	r3, #31
 800831e:	f200 80d6 	bhi.w	80084ce <HAL_TIM_RegisterCallback+0x1de>
 8008322:	a201      	add	r2, pc, #4	@ (adr r2, 8008328 <HAL_TIM_RegisterCallback+0x38>)
 8008324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008328:	080083a9 	.word	0x080083a9
 800832c:	080083b1 	.word	0x080083b1
 8008330:	080083b9 	.word	0x080083b9
 8008334:	080083c1 	.word	0x080083c1
 8008338:	080083c9 	.word	0x080083c9
 800833c:	080083d1 	.word	0x080083d1
 8008340:	080083d9 	.word	0x080083d9
 8008344:	080083e1 	.word	0x080083e1
 8008348:	080083e9 	.word	0x080083e9
 800834c:	080083f1 	.word	0x080083f1
 8008350:	080083f9 	.word	0x080083f9
 8008354:	08008401 	.word	0x08008401
 8008358:	08008409 	.word	0x08008409
 800835c:	08008411 	.word	0x08008411
 8008360:	0800841b 	.word	0x0800841b
 8008364:	08008425 	.word	0x08008425
 8008368:	0800842f 	.word	0x0800842f
 800836c:	08008439 	.word	0x08008439
 8008370:	08008443 	.word	0x08008443
 8008374:	0800844d 	.word	0x0800844d
 8008378:	08008457 	.word	0x08008457
 800837c:	08008461 	.word	0x08008461
 8008380:	0800846b 	.word	0x0800846b
 8008384:	08008475 	.word	0x08008475
 8008388:	0800847f 	.word	0x0800847f
 800838c:	08008489 	.word	0x08008489
 8008390:	08008493 	.word	0x08008493
 8008394:	0800849d 	.word	0x0800849d
 8008398:	080084a7 	.word	0x080084a7
 800839c:	080084b1 	.word	0x080084b1
 80083a0:	080084bb 	.word	0x080084bb
 80083a4:	080084c5 	.word	0x080084c5
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	687a      	ldr	r2, [r7, #4]
 80083ac:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 80083ae:	e0f7      	b.n	80085a0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	687a      	ldr	r2, [r7, #4]
 80083b4:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 80083b6:	e0f3      	b.n	80085a0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	687a      	ldr	r2, [r7, #4]
 80083bc:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 80083be:	e0ef      	b.n	80085a0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	687a      	ldr	r2, [r7, #4]
 80083c4:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 80083c6:	e0eb      	b.n	80085a0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	687a      	ldr	r2, [r7, #4]
 80083cc:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 80083ce:	e0e7      	b.n	80085a0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	687a      	ldr	r2, [r7, #4]
 80083d4:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 80083d6:	e0e3      	b.n	80085a0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	687a      	ldr	r2, [r7, #4]
 80083dc:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 80083de:	e0df      	b.n	80085a0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	687a      	ldr	r2, [r7, #4]
 80083e4:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 80083e6:	e0db      	b.n	80085a0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	687a      	ldr	r2, [r7, #4]
 80083ec:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 80083ee:	e0d7      	b.n	80085a0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	687a      	ldr	r2, [r7, #4]
 80083f4:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 80083f6:	e0d3      	b.n	80085a0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	687a      	ldr	r2, [r7, #4]
 80083fc:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 80083fe:	e0cf      	b.n	80085a0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	687a      	ldr	r2, [r7, #4]
 8008404:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8008406:	e0cb      	b.n	80085a0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	687a      	ldr	r2, [r7, #4]
 800840c:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800840e:	e0c7      	b.n	80085a0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	687a      	ldr	r2, [r7, #4]
 8008414:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8008418:	e0c2      	b.n	80085a0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	687a      	ldr	r2, [r7, #4]
 800841e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 8008422:	e0bd      	b.n	80085a0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	687a      	ldr	r2, [r7, #4]
 8008428:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 800842c:	e0b8      	b.n	80085a0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	687a      	ldr	r2, [r7, #4]
 8008432:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 8008436:	e0b3      	b.n	80085a0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	687a      	ldr	r2, [r7, #4]
 800843c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 8008440:	e0ae      	b.n	80085a0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	687a      	ldr	r2, [r7, #4]
 8008446:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800844a:	e0a9      	b.n	80085a0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	687a      	ldr	r2, [r7, #4]
 8008450:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8008454:	e0a4      	b.n	80085a0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	687a      	ldr	r2, [r7, #4]
 800845a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800845e:	e09f      	b.n	80085a0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	687a      	ldr	r2, [r7, #4]
 8008464:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8008468:	e09a      	b.n	80085a0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	687a      	ldr	r2, [r7, #4]
 800846e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8008472:	e095      	b.n	80085a0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	687a      	ldr	r2, [r7, #4]
 8008478:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800847c:	e090      	b.n	80085a0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	687a      	ldr	r2, [r7, #4]
 8008482:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8008486:	e08b      	b.n	80085a0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	687a      	ldr	r2, [r7, #4]
 800848c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8008490:	e086      	b.n	80085a0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	687a      	ldr	r2, [r7, #4]
 8008496:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800849a:	e081      	b.n	80085a0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	687a      	ldr	r2, [r7, #4]
 80084a0:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 80084a4:	e07c      	b.n	80085a0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	687a      	ldr	r2, [r7, #4]
 80084aa:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 80084ae:	e077      	b.n	80085a0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	687a      	ldr	r2, [r7, #4]
 80084b4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 80084b8:	e072      	b.n	80085a0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	687a      	ldr	r2, [r7, #4]
 80084be:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 80084c2:	e06d      	b.n	80085a0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	687a      	ldr	r2, [r7, #4]
 80084c8:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 80084cc:	e068      	b.n	80085a0 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 80084ce:	2301      	movs	r3, #1
 80084d0:	75fb      	strb	r3, [r7, #23]
        break;
 80084d2:	e065      	b.n	80085a0 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80084da:	b2db      	uxtb	r3, r3
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d15d      	bne.n	800859c <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 80084e0:	7afb      	ldrb	r3, [r7, #11]
 80084e2:	2b0d      	cmp	r3, #13
 80084e4:	d857      	bhi.n	8008596 <HAL_TIM_RegisterCallback+0x2a6>
 80084e6:	a201      	add	r2, pc, #4	@ (adr r2, 80084ec <HAL_TIM_RegisterCallback+0x1fc>)
 80084e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084ec:	08008525 	.word	0x08008525
 80084f0:	0800852d 	.word	0x0800852d
 80084f4:	08008535 	.word	0x08008535
 80084f8:	0800853d 	.word	0x0800853d
 80084fc:	08008545 	.word	0x08008545
 8008500:	0800854d 	.word	0x0800854d
 8008504:	08008555 	.word	0x08008555
 8008508:	0800855d 	.word	0x0800855d
 800850c:	08008565 	.word	0x08008565
 8008510:	0800856d 	.word	0x0800856d
 8008514:	08008575 	.word	0x08008575
 8008518:	0800857d 	.word	0x0800857d
 800851c:	08008585 	.word	0x08008585
 8008520:	0800858d 	.word	0x0800858d
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	687a      	ldr	r2, [r7, #4]
 8008528:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800852a:	e039      	b.n	80085a0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	687a      	ldr	r2, [r7, #4]
 8008530:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8008532:	e035      	b.n	80085a0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	687a      	ldr	r2, [r7, #4]
 8008538:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800853a:	e031      	b.n	80085a0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	687a      	ldr	r2, [r7, #4]
 8008540:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8008542:	e02d      	b.n	80085a0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	687a      	ldr	r2, [r7, #4]
 8008548:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800854a:	e029      	b.n	80085a0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	687a      	ldr	r2, [r7, #4]
 8008550:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8008552:	e025      	b.n	80085a0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	687a      	ldr	r2, [r7, #4]
 8008558:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800855a:	e021      	b.n	80085a0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	687a      	ldr	r2, [r7, #4]
 8008560:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8008562:	e01d      	b.n	80085a0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	687a      	ldr	r2, [r7, #4]
 8008568:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800856a:	e019      	b.n	80085a0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	687a      	ldr	r2, [r7, #4]
 8008570:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8008572:	e015      	b.n	80085a0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	687a      	ldr	r2, [r7, #4]
 8008578:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800857a:	e011      	b.n	80085a0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	687a      	ldr	r2, [r7, #4]
 8008580:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8008582:	e00d      	b.n	80085a0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	687a      	ldr	r2, [r7, #4]
 8008588:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800858a:	e009      	b.n	80085a0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	687a      	ldr	r2, [r7, #4]
 8008590:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8008594:	e004      	b.n	80085a0 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8008596:	2301      	movs	r3, #1
 8008598:	75fb      	strb	r3, [r7, #23]
        break;
 800859a:	e001      	b.n	80085a0 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 800859c:	2301      	movs	r3, #1
 800859e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80085a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80085a2:	4618      	mov	r0, r3
 80085a4:	371c      	adds	r7, #28
 80085a6:	46bd      	mov	sp, r7
 80085a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ac:	4770      	bx	lr
 80085ae:	bf00      	nop

080085b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80085b0:	b480      	push	{r7}
 80085b2:	b085      	sub	sp, #20
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
 80085b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	4a4c      	ldr	r2, [pc, #304]	@ (80086f4 <TIM_Base_SetConfig+0x144>)
 80085c4:	4293      	cmp	r3, r2
 80085c6:	d017      	beq.n	80085f8 <TIM_Base_SetConfig+0x48>
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80085ce:	d013      	beq.n	80085f8 <TIM_Base_SetConfig+0x48>
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	4a49      	ldr	r2, [pc, #292]	@ (80086f8 <TIM_Base_SetConfig+0x148>)
 80085d4:	4293      	cmp	r3, r2
 80085d6:	d00f      	beq.n	80085f8 <TIM_Base_SetConfig+0x48>
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	4a48      	ldr	r2, [pc, #288]	@ (80086fc <TIM_Base_SetConfig+0x14c>)
 80085dc:	4293      	cmp	r3, r2
 80085de:	d00b      	beq.n	80085f8 <TIM_Base_SetConfig+0x48>
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	4a47      	ldr	r2, [pc, #284]	@ (8008700 <TIM_Base_SetConfig+0x150>)
 80085e4:	4293      	cmp	r3, r2
 80085e6:	d007      	beq.n	80085f8 <TIM_Base_SetConfig+0x48>
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	4a46      	ldr	r2, [pc, #280]	@ (8008704 <TIM_Base_SetConfig+0x154>)
 80085ec:	4293      	cmp	r3, r2
 80085ee:	d003      	beq.n	80085f8 <TIM_Base_SetConfig+0x48>
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	4a45      	ldr	r2, [pc, #276]	@ (8008708 <TIM_Base_SetConfig+0x158>)
 80085f4:	4293      	cmp	r3, r2
 80085f6:	d108      	bne.n	800860a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80085fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	685b      	ldr	r3, [r3, #4]
 8008604:	68fa      	ldr	r2, [r7, #12]
 8008606:	4313      	orrs	r3, r2
 8008608:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	4a39      	ldr	r2, [pc, #228]	@ (80086f4 <TIM_Base_SetConfig+0x144>)
 800860e:	4293      	cmp	r3, r2
 8008610:	d023      	beq.n	800865a <TIM_Base_SetConfig+0xaa>
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008618:	d01f      	beq.n	800865a <TIM_Base_SetConfig+0xaa>
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	4a36      	ldr	r2, [pc, #216]	@ (80086f8 <TIM_Base_SetConfig+0x148>)
 800861e:	4293      	cmp	r3, r2
 8008620:	d01b      	beq.n	800865a <TIM_Base_SetConfig+0xaa>
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	4a35      	ldr	r2, [pc, #212]	@ (80086fc <TIM_Base_SetConfig+0x14c>)
 8008626:	4293      	cmp	r3, r2
 8008628:	d017      	beq.n	800865a <TIM_Base_SetConfig+0xaa>
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	4a34      	ldr	r2, [pc, #208]	@ (8008700 <TIM_Base_SetConfig+0x150>)
 800862e:	4293      	cmp	r3, r2
 8008630:	d013      	beq.n	800865a <TIM_Base_SetConfig+0xaa>
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	4a33      	ldr	r2, [pc, #204]	@ (8008704 <TIM_Base_SetConfig+0x154>)
 8008636:	4293      	cmp	r3, r2
 8008638:	d00f      	beq.n	800865a <TIM_Base_SetConfig+0xaa>
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	4a33      	ldr	r2, [pc, #204]	@ (800870c <TIM_Base_SetConfig+0x15c>)
 800863e:	4293      	cmp	r3, r2
 8008640:	d00b      	beq.n	800865a <TIM_Base_SetConfig+0xaa>
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	4a32      	ldr	r2, [pc, #200]	@ (8008710 <TIM_Base_SetConfig+0x160>)
 8008646:	4293      	cmp	r3, r2
 8008648:	d007      	beq.n	800865a <TIM_Base_SetConfig+0xaa>
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	4a31      	ldr	r2, [pc, #196]	@ (8008714 <TIM_Base_SetConfig+0x164>)
 800864e:	4293      	cmp	r3, r2
 8008650:	d003      	beq.n	800865a <TIM_Base_SetConfig+0xaa>
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	4a2c      	ldr	r2, [pc, #176]	@ (8008708 <TIM_Base_SetConfig+0x158>)
 8008656:	4293      	cmp	r3, r2
 8008658:	d108      	bne.n	800866c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008660:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	68db      	ldr	r3, [r3, #12]
 8008666:	68fa      	ldr	r2, [r7, #12]
 8008668:	4313      	orrs	r3, r2
 800866a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	695b      	ldr	r3, [r3, #20]
 8008676:	4313      	orrs	r3, r2
 8008678:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	68fa      	ldr	r2, [r7, #12]
 800867e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	689a      	ldr	r2, [r3, #8]
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	681a      	ldr	r2, [r3, #0]
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	4a18      	ldr	r2, [pc, #96]	@ (80086f4 <TIM_Base_SetConfig+0x144>)
 8008694:	4293      	cmp	r3, r2
 8008696:	d013      	beq.n	80086c0 <TIM_Base_SetConfig+0x110>
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	4a1a      	ldr	r2, [pc, #104]	@ (8008704 <TIM_Base_SetConfig+0x154>)
 800869c:	4293      	cmp	r3, r2
 800869e:	d00f      	beq.n	80086c0 <TIM_Base_SetConfig+0x110>
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	4a1a      	ldr	r2, [pc, #104]	@ (800870c <TIM_Base_SetConfig+0x15c>)
 80086a4:	4293      	cmp	r3, r2
 80086a6:	d00b      	beq.n	80086c0 <TIM_Base_SetConfig+0x110>
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	4a19      	ldr	r2, [pc, #100]	@ (8008710 <TIM_Base_SetConfig+0x160>)
 80086ac:	4293      	cmp	r3, r2
 80086ae:	d007      	beq.n	80086c0 <TIM_Base_SetConfig+0x110>
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	4a18      	ldr	r2, [pc, #96]	@ (8008714 <TIM_Base_SetConfig+0x164>)
 80086b4:	4293      	cmp	r3, r2
 80086b6:	d003      	beq.n	80086c0 <TIM_Base_SetConfig+0x110>
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	4a13      	ldr	r2, [pc, #76]	@ (8008708 <TIM_Base_SetConfig+0x158>)
 80086bc:	4293      	cmp	r3, r2
 80086be:	d103      	bne.n	80086c8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	691a      	ldr	r2, [r3, #16]
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2201      	movs	r2, #1
 80086cc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	691b      	ldr	r3, [r3, #16]
 80086d2:	f003 0301 	and.w	r3, r3, #1
 80086d6:	2b01      	cmp	r3, #1
 80086d8:	d105      	bne.n	80086e6 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	691b      	ldr	r3, [r3, #16]
 80086de:	f023 0201 	bic.w	r2, r3, #1
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	611a      	str	r2, [r3, #16]
  }
}
 80086e6:	bf00      	nop
 80086e8:	3714      	adds	r7, #20
 80086ea:	46bd      	mov	sp, r7
 80086ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f0:	4770      	bx	lr
 80086f2:	bf00      	nop
 80086f4:	40012c00 	.word	0x40012c00
 80086f8:	40000400 	.word	0x40000400
 80086fc:	40000800 	.word	0x40000800
 8008700:	40000c00 	.word	0x40000c00
 8008704:	40013400 	.word	0x40013400
 8008708:	40015000 	.word	0x40015000
 800870c:	40014000 	.word	0x40014000
 8008710:	40014400 	.word	0x40014400
 8008714:	40014800 	.word	0x40014800

08008718 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008718:	b480      	push	{r7}
 800871a:	b087      	sub	sp, #28
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
 8008720:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	6a1b      	ldr	r3, [r3, #32]
 8008726:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	6a1b      	ldr	r3, [r3, #32]
 800872c:	f023 0201 	bic.w	r2, r3, #1
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	685b      	ldr	r3, [r3, #4]
 8008738:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	699b      	ldr	r3, [r3, #24]
 800873e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008746:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800874a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	f023 0303 	bic.w	r3, r3, #3
 8008752:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	68fa      	ldr	r2, [r7, #12]
 800875a:	4313      	orrs	r3, r2
 800875c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800875e:	697b      	ldr	r3, [r7, #20]
 8008760:	f023 0302 	bic.w	r3, r3, #2
 8008764:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	689b      	ldr	r3, [r3, #8]
 800876a:	697a      	ldr	r2, [r7, #20]
 800876c:	4313      	orrs	r3, r2
 800876e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	4a30      	ldr	r2, [pc, #192]	@ (8008834 <TIM_OC1_SetConfig+0x11c>)
 8008774:	4293      	cmp	r3, r2
 8008776:	d013      	beq.n	80087a0 <TIM_OC1_SetConfig+0x88>
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	4a2f      	ldr	r2, [pc, #188]	@ (8008838 <TIM_OC1_SetConfig+0x120>)
 800877c:	4293      	cmp	r3, r2
 800877e:	d00f      	beq.n	80087a0 <TIM_OC1_SetConfig+0x88>
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	4a2e      	ldr	r2, [pc, #184]	@ (800883c <TIM_OC1_SetConfig+0x124>)
 8008784:	4293      	cmp	r3, r2
 8008786:	d00b      	beq.n	80087a0 <TIM_OC1_SetConfig+0x88>
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	4a2d      	ldr	r2, [pc, #180]	@ (8008840 <TIM_OC1_SetConfig+0x128>)
 800878c:	4293      	cmp	r3, r2
 800878e:	d007      	beq.n	80087a0 <TIM_OC1_SetConfig+0x88>
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	4a2c      	ldr	r2, [pc, #176]	@ (8008844 <TIM_OC1_SetConfig+0x12c>)
 8008794:	4293      	cmp	r3, r2
 8008796:	d003      	beq.n	80087a0 <TIM_OC1_SetConfig+0x88>
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	4a2b      	ldr	r2, [pc, #172]	@ (8008848 <TIM_OC1_SetConfig+0x130>)
 800879c:	4293      	cmp	r3, r2
 800879e:	d10c      	bne.n	80087ba <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80087a0:	697b      	ldr	r3, [r7, #20]
 80087a2:	f023 0308 	bic.w	r3, r3, #8
 80087a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	68db      	ldr	r3, [r3, #12]
 80087ac:	697a      	ldr	r2, [r7, #20]
 80087ae:	4313      	orrs	r3, r2
 80087b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80087b2:	697b      	ldr	r3, [r7, #20]
 80087b4:	f023 0304 	bic.w	r3, r3, #4
 80087b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	4a1d      	ldr	r2, [pc, #116]	@ (8008834 <TIM_OC1_SetConfig+0x11c>)
 80087be:	4293      	cmp	r3, r2
 80087c0:	d013      	beq.n	80087ea <TIM_OC1_SetConfig+0xd2>
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	4a1c      	ldr	r2, [pc, #112]	@ (8008838 <TIM_OC1_SetConfig+0x120>)
 80087c6:	4293      	cmp	r3, r2
 80087c8:	d00f      	beq.n	80087ea <TIM_OC1_SetConfig+0xd2>
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	4a1b      	ldr	r2, [pc, #108]	@ (800883c <TIM_OC1_SetConfig+0x124>)
 80087ce:	4293      	cmp	r3, r2
 80087d0:	d00b      	beq.n	80087ea <TIM_OC1_SetConfig+0xd2>
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	4a1a      	ldr	r2, [pc, #104]	@ (8008840 <TIM_OC1_SetConfig+0x128>)
 80087d6:	4293      	cmp	r3, r2
 80087d8:	d007      	beq.n	80087ea <TIM_OC1_SetConfig+0xd2>
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	4a19      	ldr	r2, [pc, #100]	@ (8008844 <TIM_OC1_SetConfig+0x12c>)
 80087de:	4293      	cmp	r3, r2
 80087e0:	d003      	beq.n	80087ea <TIM_OC1_SetConfig+0xd2>
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	4a18      	ldr	r2, [pc, #96]	@ (8008848 <TIM_OC1_SetConfig+0x130>)
 80087e6:	4293      	cmp	r3, r2
 80087e8:	d111      	bne.n	800880e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80087ea:	693b      	ldr	r3, [r7, #16]
 80087ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80087f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80087f2:	693b      	ldr	r3, [r7, #16]
 80087f4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80087f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	695b      	ldr	r3, [r3, #20]
 80087fe:	693a      	ldr	r2, [r7, #16]
 8008800:	4313      	orrs	r3, r2
 8008802:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	699b      	ldr	r3, [r3, #24]
 8008808:	693a      	ldr	r2, [r7, #16]
 800880a:	4313      	orrs	r3, r2
 800880c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	693a      	ldr	r2, [r7, #16]
 8008812:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	68fa      	ldr	r2, [r7, #12]
 8008818:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	685a      	ldr	r2, [r3, #4]
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	697a      	ldr	r2, [r7, #20]
 8008826:	621a      	str	r2, [r3, #32]
}
 8008828:	bf00      	nop
 800882a:	371c      	adds	r7, #28
 800882c:	46bd      	mov	sp, r7
 800882e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008832:	4770      	bx	lr
 8008834:	40012c00 	.word	0x40012c00
 8008838:	40013400 	.word	0x40013400
 800883c:	40014000 	.word	0x40014000
 8008840:	40014400 	.word	0x40014400
 8008844:	40014800 	.word	0x40014800
 8008848:	40015000 	.word	0x40015000

0800884c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800884c:	b480      	push	{r7}
 800884e:	b087      	sub	sp, #28
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
 8008854:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	6a1b      	ldr	r3, [r3, #32]
 800885a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6a1b      	ldr	r3, [r3, #32]
 8008860:	f023 0210 	bic.w	r2, r3, #16
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	685b      	ldr	r3, [r3, #4]
 800886c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	699b      	ldr	r3, [r3, #24]
 8008872:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800887a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800887e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008886:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	021b      	lsls	r3, r3, #8
 800888e:	68fa      	ldr	r2, [r7, #12]
 8008890:	4313      	orrs	r3, r2
 8008892:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008894:	697b      	ldr	r3, [r7, #20]
 8008896:	f023 0320 	bic.w	r3, r3, #32
 800889a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	689b      	ldr	r3, [r3, #8]
 80088a0:	011b      	lsls	r3, r3, #4
 80088a2:	697a      	ldr	r2, [r7, #20]
 80088a4:	4313      	orrs	r3, r2
 80088a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	4a2c      	ldr	r2, [pc, #176]	@ (800895c <TIM_OC2_SetConfig+0x110>)
 80088ac:	4293      	cmp	r3, r2
 80088ae:	d007      	beq.n	80088c0 <TIM_OC2_SetConfig+0x74>
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	4a2b      	ldr	r2, [pc, #172]	@ (8008960 <TIM_OC2_SetConfig+0x114>)
 80088b4:	4293      	cmp	r3, r2
 80088b6:	d003      	beq.n	80088c0 <TIM_OC2_SetConfig+0x74>
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	4a2a      	ldr	r2, [pc, #168]	@ (8008964 <TIM_OC2_SetConfig+0x118>)
 80088bc:	4293      	cmp	r3, r2
 80088be:	d10d      	bne.n	80088dc <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80088c0:	697b      	ldr	r3, [r7, #20]
 80088c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80088c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	68db      	ldr	r3, [r3, #12]
 80088cc:	011b      	lsls	r3, r3, #4
 80088ce:	697a      	ldr	r2, [r7, #20]
 80088d0:	4313      	orrs	r3, r2
 80088d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80088d4:	697b      	ldr	r3, [r7, #20]
 80088d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80088da:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	4a1f      	ldr	r2, [pc, #124]	@ (800895c <TIM_OC2_SetConfig+0x110>)
 80088e0:	4293      	cmp	r3, r2
 80088e2:	d013      	beq.n	800890c <TIM_OC2_SetConfig+0xc0>
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	4a1e      	ldr	r2, [pc, #120]	@ (8008960 <TIM_OC2_SetConfig+0x114>)
 80088e8:	4293      	cmp	r3, r2
 80088ea:	d00f      	beq.n	800890c <TIM_OC2_SetConfig+0xc0>
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	4a1e      	ldr	r2, [pc, #120]	@ (8008968 <TIM_OC2_SetConfig+0x11c>)
 80088f0:	4293      	cmp	r3, r2
 80088f2:	d00b      	beq.n	800890c <TIM_OC2_SetConfig+0xc0>
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	4a1d      	ldr	r2, [pc, #116]	@ (800896c <TIM_OC2_SetConfig+0x120>)
 80088f8:	4293      	cmp	r3, r2
 80088fa:	d007      	beq.n	800890c <TIM_OC2_SetConfig+0xc0>
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	4a1c      	ldr	r2, [pc, #112]	@ (8008970 <TIM_OC2_SetConfig+0x124>)
 8008900:	4293      	cmp	r3, r2
 8008902:	d003      	beq.n	800890c <TIM_OC2_SetConfig+0xc0>
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	4a17      	ldr	r2, [pc, #92]	@ (8008964 <TIM_OC2_SetConfig+0x118>)
 8008908:	4293      	cmp	r3, r2
 800890a:	d113      	bne.n	8008934 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800890c:	693b      	ldr	r3, [r7, #16]
 800890e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008912:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008914:	693b      	ldr	r3, [r7, #16]
 8008916:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800891a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	695b      	ldr	r3, [r3, #20]
 8008920:	009b      	lsls	r3, r3, #2
 8008922:	693a      	ldr	r2, [r7, #16]
 8008924:	4313      	orrs	r3, r2
 8008926:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	699b      	ldr	r3, [r3, #24]
 800892c:	009b      	lsls	r3, r3, #2
 800892e:	693a      	ldr	r2, [r7, #16]
 8008930:	4313      	orrs	r3, r2
 8008932:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	693a      	ldr	r2, [r7, #16]
 8008938:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	68fa      	ldr	r2, [r7, #12]
 800893e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	685a      	ldr	r2, [r3, #4]
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	697a      	ldr	r2, [r7, #20]
 800894c:	621a      	str	r2, [r3, #32]
}
 800894e:	bf00      	nop
 8008950:	371c      	adds	r7, #28
 8008952:	46bd      	mov	sp, r7
 8008954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008958:	4770      	bx	lr
 800895a:	bf00      	nop
 800895c:	40012c00 	.word	0x40012c00
 8008960:	40013400 	.word	0x40013400
 8008964:	40015000 	.word	0x40015000
 8008968:	40014000 	.word	0x40014000
 800896c:	40014400 	.word	0x40014400
 8008970:	40014800 	.word	0x40014800

08008974 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008974:	b480      	push	{r7}
 8008976:	b087      	sub	sp, #28
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
 800897c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6a1b      	ldr	r3, [r3, #32]
 8008982:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	6a1b      	ldr	r3, [r3, #32]
 8008988:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	685b      	ldr	r3, [r3, #4]
 8008994:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	69db      	ldr	r3, [r3, #28]
 800899a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80089a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80089a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	f023 0303 	bic.w	r3, r3, #3
 80089ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	68fa      	ldr	r2, [r7, #12]
 80089b6:	4313      	orrs	r3, r2
 80089b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80089ba:	697b      	ldr	r3, [r7, #20]
 80089bc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80089c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	689b      	ldr	r3, [r3, #8]
 80089c6:	021b      	lsls	r3, r3, #8
 80089c8:	697a      	ldr	r2, [r7, #20]
 80089ca:	4313      	orrs	r3, r2
 80089cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	4a2b      	ldr	r2, [pc, #172]	@ (8008a80 <TIM_OC3_SetConfig+0x10c>)
 80089d2:	4293      	cmp	r3, r2
 80089d4:	d007      	beq.n	80089e6 <TIM_OC3_SetConfig+0x72>
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	4a2a      	ldr	r2, [pc, #168]	@ (8008a84 <TIM_OC3_SetConfig+0x110>)
 80089da:	4293      	cmp	r3, r2
 80089dc:	d003      	beq.n	80089e6 <TIM_OC3_SetConfig+0x72>
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	4a29      	ldr	r2, [pc, #164]	@ (8008a88 <TIM_OC3_SetConfig+0x114>)
 80089e2:	4293      	cmp	r3, r2
 80089e4:	d10d      	bne.n	8008a02 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80089e6:	697b      	ldr	r3, [r7, #20]
 80089e8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80089ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	68db      	ldr	r3, [r3, #12]
 80089f2:	021b      	lsls	r3, r3, #8
 80089f4:	697a      	ldr	r2, [r7, #20]
 80089f6:	4313      	orrs	r3, r2
 80089f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80089fa:	697b      	ldr	r3, [r7, #20]
 80089fc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008a00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	4a1e      	ldr	r2, [pc, #120]	@ (8008a80 <TIM_OC3_SetConfig+0x10c>)
 8008a06:	4293      	cmp	r3, r2
 8008a08:	d013      	beq.n	8008a32 <TIM_OC3_SetConfig+0xbe>
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	4a1d      	ldr	r2, [pc, #116]	@ (8008a84 <TIM_OC3_SetConfig+0x110>)
 8008a0e:	4293      	cmp	r3, r2
 8008a10:	d00f      	beq.n	8008a32 <TIM_OC3_SetConfig+0xbe>
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	4a1d      	ldr	r2, [pc, #116]	@ (8008a8c <TIM_OC3_SetConfig+0x118>)
 8008a16:	4293      	cmp	r3, r2
 8008a18:	d00b      	beq.n	8008a32 <TIM_OC3_SetConfig+0xbe>
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	4a1c      	ldr	r2, [pc, #112]	@ (8008a90 <TIM_OC3_SetConfig+0x11c>)
 8008a1e:	4293      	cmp	r3, r2
 8008a20:	d007      	beq.n	8008a32 <TIM_OC3_SetConfig+0xbe>
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	4a1b      	ldr	r2, [pc, #108]	@ (8008a94 <TIM_OC3_SetConfig+0x120>)
 8008a26:	4293      	cmp	r3, r2
 8008a28:	d003      	beq.n	8008a32 <TIM_OC3_SetConfig+0xbe>
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	4a16      	ldr	r2, [pc, #88]	@ (8008a88 <TIM_OC3_SetConfig+0x114>)
 8008a2e:	4293      	cmp	r3, r2
 8008a30:	d113      	bne.n	8008a5a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008a32:	693b      	ldr	r3, [r7, #16]
 8008a34:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008a38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008a3a:	693b      	ldr	r3, [r7, #16]
 8008a3c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008a40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	695b      	ldr	r3, [r3, #20]
 8008a46:	011b      	lsls	r3, r3, #4
 8008a48:	693a      	ldr	r2, [r7, #16]
 8008a4a:	4313      	orrs	r3, r2
 8008a4c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	699b      	ldr	r3, [r3, #24]
 8008a52:	011b      	lsls	r3, r3, #4
 8008a54:	693a      	ldr	r2, [r7, #16]
 8008a56:	4313      	orrs	r3, r2
 8008a58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	693a      	ldr	r2, [r7, #16]
 8008a5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	68fa      	ldr	r2, [r7, #12]
 8008a64:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	685a      	ldr	r2, [r3, #4]
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	697a      	ldr	r2, [r7, #20]
 8008a72:	621a      	str	r2, [r3, #32]
}
 8008a74:	bf00      	nop
 8008a76:	371c      	adds	r7, #28
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7e:	4770      	bx	lr
 8008a80:	40012c00 	.word	0x40012c00
 8008a84:	40013400 	.word	0x40013400
 8008a88:	40015000 	.word	0x40015000
 8008a8c:	40014000 	.word	0x40014000
 8008a90:	40014400 	.word	0x40014400
 8008a94:	40014800 	.word	0x40014800

08008a98 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008a98:	b480      	push	{r7}
 8008a9a:	b087      	sub	sp, #28
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
 8008aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6a1b      	ldr	r3, [r3, #32]
 8008aa6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	6a1b      	ldr	r3, [r3, #32]
 8008aac:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	685b      	ldr	r3, [r3, #4]
 8008ab8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	69db      	ldr	r3, [r3, #28]
 8008abe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008ac6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008aca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008ad2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	021b      	lsls	r3, r3, #8
 8008ada:	68fa      	ldr	r2, [r7, #12]
 8008adc:	4313      	orrs	r3, r2
 8008ade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008ae0:	697b      	ldr	r3, [r7, #20]
 8008ae2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008ae6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	689b      	ldr	r3, [r3, #8]
 8008aec:	031b      	lsls	r3, r3, #12
 8008aee:	697a      	ldr	r2, [r7, #20]
 8008af0:	4313      	orrs	r3, r2
 8008af2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	4a2c      	ldr	r2, [pc, #176]	@ (8008ba8 <TIM_OC4_SetConfig+0x110>)
 8008af8:	4293      	cmp	r3, r2
 8008afa:	d007      	beq.n	8008b0c <TIM_OC4_SetConfig+0x74>
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	4a2b      	ldr	r2, [pc, #172]	@ (8008bac <TIM_OC4_SetConfig+0x114>)
 8008b00:	4293      	cmp	r3, r2
 8008b02:	d003      	beq.n	8008b0c <TIM_OC4_SetConfig+0x74>
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	4a2a      	ldr	r2, [pc, #168]	@ (8008bb0 <TIM_OC4_SetConfig+0x118>)
 8008b08:	4293      	cmp	r3, r2
 8008b0a:	d10d      	bne.n	8008b28 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8008b0c:	697b      	ldr	r3, [r7, #20]
 8008b0e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008b12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	68db      	ldr	r3, [r3, #12]
 8008b18:	031b      	lsls	r3, r3, #12
 8008b1a:	697a      	ldr	r2, [r7, #20]
 8008b1c:	4313      	orrs	r3, r2
 8008b1e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8008b20:	697b      	ldr	r3, [r7, #20]
 8008b22:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008b26:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	4a1f      	ldr	r2, [pc, #124]	@ (8008ba8 <TIM_OC4_SetConfig+0x110>)
 8008b2c:	4293      	cmp	r3, r2
 8008b2e:	d013      	beq.n	8008b58 <TIM_OC4_SetConfig+0xc0>
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	4a1e      	ldr	r2, [pc, #120]	@ (8008bac <TIM_OC4_SetConfig+0x114>)
 8008b34:	4293      	cmp	r3, r2
 8008b36:	d00f      	beq.n	8008b58 <TIM_OC4_SetConfig+0xc0>
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	4a1e      	ldr	r2, [pc, #120]	@ (8008bb4 <TIM_OC4_SetConfig+0x11c>)
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	d00b      	beq.n	8008b58 <TIM_OC4_SetConfig+0xc0>
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	4a1d      	ldr	r2, [pc, #116]	@ (8008bb8 <TIM_OC4_SetConfig+0x120>)
 8008b44:	4293      	cmp	r3, r2
 8008b46:	d007      	beq.n	8008b58 <TIM_OC4_SetConfig+0xc0>
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	4a1c      	ldr	r2, [pc, #112]	@ (8008bbc <TIM_OC4_SetConfig+0x124>)
 8008b4c:	4293      	cmp	r3, r2
 8008b4e:	d003      	beq.n	8008b58 <TIM_OC4_SetConfig+0xc0>
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	4a17      	ldr	r2, [pc, #92]	@ (8008bb0 <TIM_OC4_SetConfig+0x118>)
 8008b54:	4293      	cmp	r3, r2
 8008b56:	d113      	bne.n	8008b80 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008b58:	693b      	ldr	r3, [r7, #16]
 8008b5a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008b5e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8008b60:	693b      	ldr	r3, [r7, #16]
 8008b62:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008b66:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	695b      	ldr	r3, [r3, #20]
 8008b6c:	019b      	lsls	r3, r3, #6
 8008b6e:	693a      	ldr	r2, [r7, #16]
 8008b70:	4313      	orrs	r3, r2
 8008b72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	699b      	ldr	r3, [r3, #24]
 8008b78:	019b      	lsls	r3, r3, #6
 8008b7a:	693a      	ldr	r2, [r7, #16]
 8008b7c:	4313      	orrs	r3, r2
 8008b7e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	693a      	ldr	r2, [r7, #16]
 8008b84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	68fa      	ldr	r2, [r7, #12]
 8008b8a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	685a      	ldr	r2, [r3, #4]
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	697a      	ldr	r2, [r7, #20]
 8008b98:	621a      	str	r2, [r3, #32]
}
 8008b9a:	bf00      	nop
 8008b9c:	371c      	adds	r7, #28
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba4:	4770      	bx	lr
 8008ba6:	bf00      	nop
 8008ba8:	40012c00 	.word	0x40012c00
 8008bac:	40013400 	.word	0x40013400
 8008bb0:	40015000 	.word	0x40015000
 8008bb4:	40014000 	.word	0x40014000
 8008bb8:	40014400 	.word	0x40014400
 8008bbc:	40014800 	.word	0x40014800

08008bc0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008bc0:	b480      	push	{r7}
 8008bc2:	b087      	sub	sp, #28
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
 8008bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	6a1b      	ldr	r3, [r3, #32]
 8008bce:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	6a1b      	ldr	r3, [r3, #32]
 8008bd4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	685b      	ldr	r3, [r3, #4]
 8008be0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008be6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008bee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008bf2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	68fa      	ldr	r2, [r7, #12]
 8008bfa:	4313      	orrs	r3, r2
 8008bfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008bfe:	693b      	ldr	r3, [r7, #16]
 8008c00:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008c04:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	689b      	ldr	r3, [r3, #8]
 8008c0a:	041b      	lsls	r3, r3, #16
 8008c0c:	693a      	ldr	r2, [r7, #16]
 8008c0e:	4313      	orrs	r3, r2
 8008c10:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	4a19      	ldr	r2, [pc, #100]	@ (8008c7c <TIM_OC5_SetConfig+0xbc>)
 8008c16:	4293      	cmp	r3, r2
 8008c18:	d013      	beq.n	8008c42 <TIM_OC5_SetConfig+0x82>
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	4a18      	ldr	r2, [pc, #96]	@ (8008c80 <TIM_OC5_SetConfig+0xc0>)
 8008c1e:	4293      	cmp	r3, r2
 8008c20:	d00f      	beq.n	8008c42 <TIM_OC5_SetConfig+0x82>
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	4a17      	ldr	r2, [pc, #92]	@ (8008c84 <TIM_OC5_SetConfig+0xc4>)
 8008c26:	4293      	cmp	r3, r2
 8008c28:	d00b      	beq.n	8008c42 <TIM_OC5_SetConfig+0x82>
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	4a16      	ldr	r2, [pc, #88]	@ (8008c88 <TIM_OC5_SetConfig+0xc8>)
 8008c2e:	4293      	cmp	r3, r2
 8008c30:	d007      	beq.n	8008c42 <TIM_OC5_SetConfig+0x82>
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	4a15      	ldr	r2, [pc, #84]	@ (8008c8c <TIM_OC5_SetConfig+0xcc>)
 8008c36:	4293      	cmp	r3, r2
 8008c38:	d003      	beq.n	8008c42 <TIM_OC5_SetConfig+0x82>
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	4a14      	ldr	r2, [pc, #80]	@ (8008c90 <TIM_OC5_SetConfig+0xd0>)
 8008c3e:	4293      	cmp	r3, r2
 8008c40:	d109      	bne.n	8008c56 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008c42:	697b      	ldr	r3, [r7, #20]
 8008c44:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008c48:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	695b      	ldr	r3, [r3, #20]
 8008c4e:	021b      	lsls	r3, r3, #8
 8008c50:	697a      	ldr	r2, [r7, #20]
 8008c52:	4313      	orrs	r3, r2
 8008c54:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	697a      	ldr	r2, [r7, #20]
 8008c5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	68fa      	ldr	r2, [r7, #12]
 8008c60:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	685a      	ldr	r2, [r3, #4]
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	693a      	ldr	r2, [r7, #16]
 8008c6e:	621a      	str	r2, [r3, #32]
}
 8008c70:	bf00      	nop
 8008c72:	371c      	adds	r7, #28
 8008c74:	46bd      	mov	sp, r7
 8008c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7a:	4770      	bx	lr
 8008c7c:	40012c00 	.word	0x40012c00
 8008c80:	40013400 	.word	0x40013400
 8008c84:	40014000 	.word	0x40014000
 8008c88:	40014400 	.word	0x40014400
 8008c8c:	40014800 	.word	0x40014800
 8008c90:	40015000 	.word	0x40015000

08008c94 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008c94:	b480      	push	{r7}
 8008c96:	b087      	sub	sp, #28
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
 8008c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	6a1b      	ldr	r3, [r3, #32]
 8008ca2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	6a1b      	ldr	r3, [r3, #32]
 8008ca8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	685b      	ldr	r3, [r3, #4]
 8008cb4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008cba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008cc2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008cc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	021b      	lsls	r3, r3, #8
 8008cce:	68fa      	ldr	r2, [r7, #12]
 8008cd0:	4313      	orrs	r3, r2
 8008cd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008cd4:	693b      	ldr	r3, [r7, #16]
 8008cd6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008cda:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	689b      	ldr	r3, [r3, #8]
 8008ce0:	051b      	lsls	r3, r3, #20
 8008ce2:	693a      	ldr	r2, [r7, #16]
 8008ce4:	4313      	orrs	r3, r2
 8008ce6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	4a1a      	ldr	r2, [pc, #104]	@ (8008d54 <TIM_OC6_SetConfig+0xc0>)
 8008cec:	4293      	cmp	r3, r2
 8008cee:	d013      	beq.n	8008d18 <TIM_OC6_SetConfig+0x84>
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	4a19      	ldr	r2, [pc, #100]	@ (8008d58 <TIM_OC6_SetConfig+0xc4>)
 8008cf4:	4293      	cmp	r3, r2
 8008cf6:	d00f      	beq.n	8008d18 <TIM_OC6_SetConfig+0x84>
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	4a18      	ldr	r2, [pc, #96]	@ (8008d5c <TIM_OC6_SetConfig+0xc8>)
 8008cfc:	4293      	cmp	r3, r2
 8008cfe:	d00b      	beq.n	8008d18 <TIM_OC6_SetConfig+0x84>
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	4a17      	ldr	r2, [pc, #92]	@ (8008d60 <TIM_OC6_SetConfig+0xcc>)
 8008d04:	4293      	cmp	r3, r2
 8008d06:	d007      	beq.n	8008d18 <TIM_OC6_SetConfig+0x84>
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	4a16      	ldr	r2, [pc, #88]	@ (8008d64 <TIM_OC6_SetConfig+0xd0>)
 8008d0c:	4293      	cmp	r3, r2
 8008d0e:	d003      	beq.n	8008d18 <TIM_OC6_SetConfig+0x84>
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	4a15      	ldr	r2, [pc, #84]	@ (8008d68 <TIM_OC6_SetConfig+0xd4>)
 8008d14:	4293      	cmp	r3, r2
 8008d16:	d109      	bne.n	8008d2c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008d18:	697b      	ldr	r3, [r7, #20]
 8008d1a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008d1e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	695b      	ldr	r3, [r3, #20]
 8008d24:	029b      	lsls	r3, r3, #10
 8008d26:	697a      	ldr	r2, [r7, #20]
 8008d28:	4313      	orrs	r3, r2
 8008d2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	697a      	ldr	r2, [r7, #20]
 8008d30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	68fa      	ldr	r2, [r7, #12]
 8008d36:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	685a      	ldr	r2, [r3, #4]
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	693a      	ldr	r2, [r7, #16]
 8008d44:	621a      	str	r2, [r3, #32]
}
 8008d46:	bf00      	nop
 8008d48:	371c      	adds	r7, #28
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d50:	4770      	bx	lr
 8008d52:	bf00      	nop
 8008d54:	40012c00 	.word	0x40012c00
 8008d58:	40013400 	.word	0x40013400
 8008d5c:	40014000 	.word	0x40014000
 8008d60:	40014400 	.word	0x40014400
 8008d64:	40014800 	.word	0x40014800
 8008d68:	40015000 	.word	0x40015000

08008d6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008d6c:	b480      	push	{r7}
 8008d6e:	b087      	sub	sp, #28
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	60f8      	str	r0, [r7, #12]
 8008d74:	60b9      	str	r1, [r7, #8]
 8008d76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	6a1b      	ldr	r3, [r3, #32]
 8008d7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	6a1b      	ldr	r3, [r3, #32]
 8008d82:	f023 0201 	bic.w	r2, r3, #1
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	699b      	ldr	r3, [r3, #24]
 8008d8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008d90:	693b      	ldr	r3, [r7, #16]
 8008d92:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008d96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	011b      	lsls	r3, r3, #4
 8008d9c:	693a      	ldr	r2, [r7, #16]
 8008d9e:	4313      	orrs	r3, r2
 8008da0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008da2:	697b      	ldr	r3, [r7, #20]
 8008da4:	f023 030a 	bic.w	r3, r3, #10
 8008da8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008daa:	697a      	ldr	r2, [r7, #20]
 8008dac:	68bb      	ldr	r3, [r7, #8]
 8008dae:	4313      	orrs	r3, r2
 8008db0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	693a      	ldr	r2, [r7, #16]
 8008db6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	697a      	ldr	r2, [r7, #20]
 8008dbc:	621a      	str	r2, [r3, #32]
}
 8008dbe:	bf00      	nop
 8008dc0:	371c      	adds	r7, #28
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc8:	4770      	bx	lr

08008dca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008dca:	b480      	push	{r7}
 8008dcc:	b087      	sub	sp, #28
 8008dce:	af00      	add	r7, sp, #0
 8008dd0:	60f8      	str	r0, [r7, #12]
 8008dd2:	60b9      	str	r1, [r7, #8]
 8008dd4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	6a1b      	ldr	r3, [r3, #32]
 8008dda:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	6a1b      	ldr	r3, [r3, #32]
 8008de0:	f023 0210 	bic.w	r2, r3, #16
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	699b      	ldr	r3, [r3, #24]
 8008dec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008dee:	693b      	ldr	r3, [r7, #16]
 8008df0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008df4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	031b      	lsls	r3, r3, #12
 8008dfa:	693a      	ldr	r2, [r7, #16]
 8008dfc:	4313      	orrs	r3, r2
 8008dfe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008e00:	697b      	ldr	r3, [r7, #20]
 8008e02:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008e06:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008e08:	68bb      	ldr	r3, [r7, #8]
 8008e0a:	011b      	lsls	r3, r3, #4
 8008e0c:	697a      	ldr	r2, [r7, #20]
 8008e0e:	4313      	orrs	r3, r2
 8008e10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	693a      	ldr	r2, [r7, #16]
 8008e16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	697a      	ldr	r2, [r7, #20]
 8008e1c:	621a      	str	r2, [r3, #32]
}
 8008e1e:	bf00      	nop
 8008e20:	371c      	adds	r7, #28
 8008e22:	46bd      	mov	sp, r7
 8008e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e28:	4770      	bx	lr

08008e2a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008e2a:	b480      	push	{r7}
 8008e2c:	b085      	sub	sp, #20
 8008e2e:	af00      	add	r7, sp, #0
 8008e30:	6078      	str	r0, [r7, #4]
 8008e32:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	689b      	ldr	r3, [r3, #8]
 8008e38:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8008e40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e44:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008e46:	683a      	ldr	r2, [r7, #0]
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	4313      	orrs	r3, r2
 8008e4c:	f043 0307 	orr.w	r3, r3, #7
 8008e50:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	68fa      	ldr	r2, [r7, #12]
 8008e56:	609a      	str	r2, [r3, #8]
}
 8008e58:	bf00      	nop
 8008e5a:	3714      	adds	r7, #20
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e62:	4770      	bx	lr

08008e64 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008e64:	b480      	push	{r7}
 8008e66:	b087      	sub	sp, #28
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	60f8      	str	r0, [r7, #12]
 8008e6c:	60b9      	str	r1, [r7, #8]
 8008e6e:	607a      	str	r2, [r7, #4]
 8008e70:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	689b      	ldr	r3, [r3, #8]
 8008e76:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008e78:	697b      	ldr	r3, [r7, #20]
 8008e7a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008e7e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	021a      	lsls	r2, r3, #8
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	431a      	orrs	r2, r3
 8008e88:	68bb      	ldr	r3, [r7, #8]
 8008e8a:	4313      	orrs	r3, r2
 8008e8c:	697a      	ldr	r2, [r7, #20]
 8008e8e:	4313      	orrs	r3, r2
 8008e90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	697a      	ldr	r2, [r7, #20]
 8008e96:	609a      	str	r2, [r3, #8]
}
 8008e98:	bf00      	nop
 8008e9a:	371c      	adds	r7, #28
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea2:	4770      	bx	lr

08008ea4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008ea4:	b480      	push	{r7}
 8008ea6:	b087      	sub	sp, #28
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	60f8      	str	r0, [r7, #12]
 8008eac:	60b9      	str	r1, [r7, #8]
 8008eae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008eb0:	68bb      	ldr	r3, [r7, #8]
 8008eb2:	f003 031f 	and.w	r3, r3, #31
 8008eb6:	2201      	movs	r2, #1
 8008eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8008ebc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	6a1a      	ldr	r2, [r3, #32]
 8008ec2:	697b      	ldr	r3, [r7, #20]
 8008ec4:	43db      	mvns	r3, r3
 8008ec6:	401a      	ands	r2, r3
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	6a1a      	ldr	r2, [r3, #32]
 8008ed0:	68bb      	ldr	r3, [r7, #8]
 8008ed2:	f003 031f 	and.w	r3, r3, #31
 8008ed6:	6879      	ldr	r1, [r7, #4]
 8008ed8:	fa01 f303 	lsl.w	r3, r1, r3
 8008edc:	431a      	orrs	r2, r3
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	621a      	str	r2, [r3, #32]
}
 8008ee2:	bf00      	nop
 8008ee4:	371c      	adds	r7, #28
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eec:	4770      	bx	lr
	...

08008ef0 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8008ef0:	b480      	push	{r7}
 8008ef2:	b083      	sub	sp, #12
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	4a26      	ldr	r2, [pc, #152]	@ (8008f94 <TIM_ResetCallback+0xa4>)
 8008efc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	4a25      	ldr	r2, [pc, #148]	@ (8008f98 <TIM_ResetCallback+0xa8>)
 8008f04:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	4a24      	ldr	r2, [pc, #144]	@ (8008f9c <TIM_ResetCallback+0xac>)
 8008f0c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	4a23      	ldr	r2, [pc, #140]	@ (8008fa0 <TIM_ResetCallback+0xb0>)
 8008f14:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	4a22      	ldr	r2, [pc, #136]	@ (8008fa4 <TIM_ResetCallback+0xb4>)
 8008f1c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	4a21      	ldr	r2, [pc, #132]	@ (8008fa8 <TIM_ResetCallback+0xb8>)
 8008f24:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	4a20      	ldr	r2, [pc, #128]	@ (8008fac <TIM_ResetCallback+0xbc>)
 8008f2c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	4a1f      	ldr	r2, [pc, #124]	@ (8008fb0 <TIM_ResetCallback+0xc0>)
 8008f34:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	4a1e      	ldr	r2, [pc, #120]	@ (8008fb4 <TIM_ResetCallback+0xc4>)
 8008f3c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	4a1d      	ldr	r2, [pc, #116]	@ (8008fb8 <TIM_ResetCallback+0xc8>)
 8008f44:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	4a1c      	ldr	r2, [pc, #112]	@ (8008fbc <TIM_ResetCallback+0xcc>)
 8008f4c:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	4a1b      	ldr	r2, [pc, #108]	@ (8008fc0 <TIM_ResetCallback+0xd0>)
 8008f54:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	4a1a      	ldr	r2, [pc, #104]	@ (8008fc4 <TIM_ResetCallback+0xd4>)
 8008f5c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	4a19      	ldr	r2, [pc, #100]	@ (8008fc8 <TIM_ResetCallback+0xd8>)
 8008f64:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	4a18      	ldr	r2, [pc, #96]	@ (8008fcc <TIM_ResetCallback+0xdc>)
 8008f6c:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	4a17      	ldr	r2, [pc, #92]	@ (8008fd0 <TIM_ResetCallback+0xe0>)
 8008f74:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	4a16      	ldr	r2, [pc, #88]	@ (8008fd4 <TIM_ResetCallback+0xe4>)
 8008f7c:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	4a15      	ldr	r2, [pc, #84]	@ (8008fd8 <TIM_ResetCallback+0xe8>)
 8008f84:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8008f88:	bf00      	nop
 8008f8a:	370c      	adds	r7, #12
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f92:	4770      	bx	lr
 8008f94:	080020b9 	.word	0x080020b9
 8008f98:	0800823d 	.word	0x0800823d
 8008f9c:	080082b5 	.word	0x080082b5
 8008fa0:	080082c9 	.word	0x080082c9
 8008fa4:	08008265 	.word	0x08008265
 8008fa8:	08008279 	.word	0x08008279
 8008fac:	08008251 	.word	0x08008251
 8008fb0:	0800828d 	.word	0x0800828d
 8008fb4:	080082a1 	.word	0x080082a1
 8008fb8:	080082dd 	.word	0x080082dd
 8008fbc:	08009109 	.word	0x08009109
 8008fc0:	0800911d 	.word	0x0800911d
 8008fc4:	08009131 	.word	0x08009131
 8008fc8:	08009145 	.word	0x08009145
 8008fcc:	08009159 	.word	0x08009159
 8008fd0:	0800916d 	.word	0x0800916d
 8008fd4:	08009181 	.word	0x08009181
 8008fd8:	08009195 	.word	0x08009195

08008fdc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008fdc:	b480      	push	{r7}
 8008fde:	b085      	sub	sp, #20
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
 8008fe4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008fec:	2b01      	cmp	r3, #1
 8008fee:	d101      	bne.n	8008ff4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008ff0:	2302      	movs	r3, #2
 8008ff2:	e074      	b.n	80090de <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2201      	movs	r2, #1
 8008ff8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2202      	movs	r2, #2
 8009000:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	685b      	ldr	r3, [r3, #4]
 800900a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	689b      	ldr	r3, [r3, #8]
 8009012:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	4a34      	ldr	r2, [pc, #208]	@ (80090ec <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800901a:	4293      	cmp	r3, r2
 800901c:	d009      	beq.n	8009032 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	4a33      	ldr	r2, [pc, #204]	@ (80090f0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009024:	4293      	cmp	r3, r2
 8009026:	d004      	beq.n	8009032 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	4a31      	ldr	r2, [pc, #196]	@ (80090f4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800902e:	4293      	cmp	r3, r2
 8009030:	d108      	bne.n	8009044 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009038:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	685b      	ldr	r3, [r3, #4]
 800903e:	68fa      	ldr	r2, [r7, #12]
 8009040:	4313      	orrs	r3, r2
 8009042:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800904a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800904e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009050:	683b      	ldr	r3, [r7, #0]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	68fa      	ldr	r2, [r7, #12]
 8009056:	4313      	orrs	r3, r2
 8009058:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	68fa      	ldr	r2, [r7, #12]
 8009060:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	4a21      	ldr	r2, [pc, #132]	@ (80090ec <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009068:	4293      	cmp	r3, r2
 800906a:	d022      	beq.n	80090b2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009074:	d01d      	beq.n	80090b2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	4a1f      	ldr	r2, [pc, #124]	@ (80090f8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800907c:	4293      	cmp	r3, r2
 800907e:	d018      	beq.n	80090b2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	4a1d      	ldr	r2, [pc, #116]	@ (80090fc <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8009086:	4293      	cmp	r3, r2
 8009088:	d013      	beq.n	80090b2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	4a1c      	ldr	r2, [pc, #112]	@ (8009100 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8009090:	4293      	cmp	r3, r2
 8009092:	d00e      	beq.n	80090b2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	4a15      	ldr	r2, [pc, #84]	@ (80090f0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800909a:	4293      	cmp	r3, r2
 800909c:	d009      	beq.n	80090b2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	4a18      	ldr	r2, [pc, #96]	@ (8009104 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80090a4:	4293      	cmp	r3, r2
 80090a6:	d004      	beq.n	80090b2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	4a11      	ldr	r2, [pc, #68]	@ (80090f4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80090ae:	4293      	cmp	r3, r2
 80090b0:	d10c      	bne.n	80090cc <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80090b2:	68bb      	ldr	r3, [r7, #8]
 80090b4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80090b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80090ba:	683b      	ldr	r3, [r7, #0]
 80090bc:	689b      	ldr	r3, [r3, #8]
 80090be:	68ba      	ldr	r2, [r7, #8]
 80090c0:	4313      	orrs	r3, r2
 80090c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	68ba      	ldr	r2, [r7, #8]
 80090ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2201      	movs	r2, #1
 80090d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2200      	movs	r2, #0
 80090d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80090dc:	2300      	movs	r3, #0
}
 80090de:	4618      	mov	r0, r3
 80090e0:	3714      	adds	r7, #20
 80090e2:	46bd      	mov	sp, r7
 80090e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e8:	4770      	bx	lr
 80090ea:	bf00      	nop
 80090ec:	40012c00 	.word	0x40012c00
 80090f0:	40013400 	.word	0x40013400
 80090f4:	40015000 	.word	0x40015000
 80090f8:	40000400 	.word	0x40000400
 80090fc:	40000800 	.word	0x40000800
 8009100:	40000c00 	.word	0x40000c00
 8009104:	40014000 	.word	0x40014000

08009108 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009108:	b480      	push	{r7}
 800910a:	b083      	sub	sp, #12
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009110:	bf00      	nop
 8009112:	370c      	adds	r7, #12
 8009114:	46bd      	mov	sp, r7
 8009116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911a:	4770      	bx	lr

0800911c <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800911c:	b480      	push	{r7}
 800911e:	b083      	sub	sp, #12
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8009124:	bf00      	nop
 8009126:	370c      	adds	r7, #12
 8009128:	46bd      	mov	sp, r7
 800912a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912e:	4770      	bx	lr

08009130 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009130:	b480      	push	{r7}
 8009132:	b083      	sub	sp, #12
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009138:	bf00      	nop
 800913a:	370c      	adds	r7, #12
 800913c:	46bd      	mov	sp, r7
 800913e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009142:	4770      	bx	lr

08009144 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009144:	b480      	push	{r7}
 8009146:	b083      	sub	sp, #12
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800914c:	bf00      	nop
 800914e:	370c      	adds	r7, #12
 8009150:	46bd      	mov	sp, r7
 8009152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009156:	4770      	bx	lr

08009158 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8009158:	b480      	push	{r7}
 800915a:	b083      	sub	sp, #12
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8009160:	bf00      	nop
 8009162:	370c      	adds	r7, #12
 8009164:	46bd      	mov	sp, r7
 8009166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916a:	4770      	bx	lr

0800916c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800916c:	b480      	push	{r7}
 800916e:	b083      	sub	sp, #12
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8009174:	bf00      	nop
 8009176:	370c      	adds	r7, #12
 8009178:	46bd      	mov	sp, r7
 800917a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917e:	4770      	bx	lr

08009180 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8009180:	b480      	push	{r7}
 8009182:	b083      	sub	sp, #12
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8009188:	bf00      	nop
 800918a:	370c      	adds	r7, #12
 800918c:	46bd      	mov	sp, r7
 800918e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009192:	4770      	bx	lr

08009194 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8009194:	b480      	push	{r7}
 8009196:	b083      	sub	sp, #12
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800919c:	bf00      	nop
 800919e:	370c      	adds	r7, #12
 80091a0:	46bd      	mov	sp, r7
 80091a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a6:	4770      	bx	lr

080091a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b082      	sub	sp, #8
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d101      	bne.n	80091ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80091b6:	2301      	movs	r3, #1
 80091b8:	e050      	b.n	800925c <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d114      	bne.n	80091ee <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2200      	movs	r2, #0
 80091c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 80091cc:	6878      	ldr	r0, [r7, #4]
 80091ce:	f000 fd45 	bl	8009c5c <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d103      	bne.n	80091e4 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	4a21      	ldr	r2, [pc, #132]	@ (8009264 <HAL_UART_Init+0xbc>)
 80091e0:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	2224      	movs	r2, #36	@ 0x24
 80091f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	681a      	ldr	r2, [r3, #0]
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	f022 0201 	bic.w	r2, r2, #1
 8009204:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800920a:	2b00      	cmp	r3, #0
 800920c:	d002      	beq.n	8009214 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 800920e:	6878      	ldr	r0, [r7, #4]
 8009210:	f001 f872 	bl	800a2f8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009214:	6878      	ldr	r0, [r7, #4]
 8009216:	f000 fd73 	bl	8009d00 <UART_SetConfig>
 800921a:	4603      	mov	r3, r0
 800921c:	2b01      	cmp	r3, #1
 800921e:	d101      	bne.n	8009224 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 8009220:	2301      	movs	r3, #1
 8009222:	e01b      	b.n	800925c <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	685a      	ldr	r2, [r3, #4]
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009232:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	689a      	ldr	r2, [r3, #8]
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009242:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	681a      	ldr	r2, [r3, #0]
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	f042 0201 	orr.w	r2, r2, #1
 8009252:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009254:	6878      	ldr	r0, [r7, #4]
 8009256:	f001 f8f1 	bl	800a43c <UART_CheckIdleState>
 800925a:	4603      	mov	r3, r0
}
 800925c:	4618      	mov	r0, r3
 800925e:	3708      	adds	r7, #8
 8009260:	46bd      	mov	sp, r7
 8009262:	bd80      	pop	{r7, pc}
 8009264:	0800397d 	.word	0x0800397d

08009268 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 8009268:	b480      	push	{r7}
 800926a:	b087      	sub	sp, #28
 800926c:	af00      	add	r7, sp, #0
 800926e:	60f8      	str	r0, [r7, #12]
 8009270:	460b      	mov	r3, r1
 8009272:	607a      	str	r2, [r7, #4]
 8009274:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8009276:	2300      	movs	r3, #0
 8009278:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d109      	bne.n	8009294 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009286:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 8009290:	2301      	movs	r3, #1
 8009292:	e09c      	b.n	80093ce <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800929a:	2b20      	cmp	r3, #32
 800929c:	d16c      	bne.n	8009378 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 800929e:	7afb      	ldrb	r3, [r7, #11]
 80092a0:	2b0c      	cmp	r3, #12
 80092a2:	d85e      	bhi.n	8009362 <HAL_UART_RegisterCallback+0xfa>
 80092a4:	a201      	add	r2, pc, #4	@ (adr r2, 80092ac <HAL_UART_RegisterCallback+0x44>)
 80092a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092aa:	bf00      	nop
 80092ac:	080092e1 	.word	0x080092e1
 80092b0:	080092eb 	.word	0x080092eb
 80092b4:	080092f5 	.word	0x080092f5
 80092b8:	080092ff 	.word	0x080092ff
 80092bc:	08009309 	.word	0x08009309
 80092c0:	08009313 	.word	0x08009313
 80092c4:	0800931d 	.word	0x0800931d
 80092c8:	08009327 	.word	0x08009327
 80092cc:	08009331 	.word	0x08009331
 80092d0:	0800933b 	.word	0x0800933b
 80092d4:	08009345 	.word	0x08009345
 80092d8:	0800934f 	.word	0x0800934f
 80092dc:	08009359 	.word	0x08009359
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	687a      	ldr	r2, [r7, #4]
 80092e4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 80092e8:	e070      	b.n	80093cc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	687a      	ldr	r2, [r7, #4]
 80092ee:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 80092f2:	e06b      	b.n	80093cc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	687a      	ldr	r2, [r7, #4]
 80092f8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 80092fc:	e066      	b.n	80093cc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	687a      	ldr	r2, [r7, #4]
 8009302:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8009306:	e061      	b.n	80093cc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	687a      	ldr	r2, [r7, #4]
 800930c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8009310:	e05c      	b.n	80093cc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	687a      	ldr	r2, [r7, #4]
 8009316:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800931a:	e057      	b.n	80093cc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	687a      	ldr	r2, [r7, #4]
 8009320:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8009324:	e052      	b.n	80093cc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	687a      	ldr	r2, [r7, #4]
 800932a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800932e:	e04d      	b.n	80093cc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	687a      	ldr	r2, [r7, #4]
 8009334:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8009338:	e048      	b.n	80093cc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	687a      	ldr	r2, [r7, #4]
 800933e:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 8009342:	e043      	b.n	80093cc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	687a      	ldr	r2, [r7, #4]
 8009348:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800934c:	e03e      	b.n	80093cc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	687a      	ldr	r2, [r7, #4]
 8009352:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8009356:	e039      	b.n	80093cc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	687a      	ldr	r2, [r7, #4]
 800935c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8009360:	e034      	b.n	80093cc <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009368:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 8009372:	2301      	movs	r3, #1
 8009374:	75fb      	strb	r3, [r7, #23]
        break;
 8009376:	e029      	b.n	80093cc <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800937e:	2b00      	cmp	r3, #0
 8009380:	d11a      	bne.n	80093b8 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 8009382:	7afb      	ldrb	r3, [r7, #11]
 8009384:	2b0b      	cmp	r3, #11
 8009386:	d002      	beq.n	800938e <HAL_UART_RegisterCallback+0x126>
 8009388:	2b0c      	cmp	r3, #12
 800938a:	d005      	beq.n	8009398 <HAL_UART_RegisterCallback+0x130>
 800938c:	e009      	b.n	80093a2 <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	687a      	ldr	r2, [r7, #4]
 8009392:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8009396:	e019      	b.n	80093cc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	687a      	ldr	r2, [r7, #4]
 800939c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 80093a0:	e014      	b.n	80093cc <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093a8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 80093b2:	2301      	movs	r3, #1
 80093b4:	75fb      	strb	r3, [r7, #23]
        break;
 80093b6:	e009      	b.n	80093cc <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093be:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 80093c8:	2301      	movs	r3, #1
 80093ca:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80093cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80093ce:	4618      	mov	r0, r3
 80093d0:	371c      	adds	r7, #28
 80093d2:	46bd      	mov	sp, r7
 80093d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d8:	4770      	bx	lr
 80093da:	bf00      	nop

080093dc <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b08a      	sub	sp, #40	@ 0x28
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	60f8      	str	r0, [r7, #12]
 80093e4:	60b9      	str	r1, [r7, #8]
 80093e6:	4613      	mov	r3, r2
 80093e8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80093f0:	2b20      	cmp	r3, #32
 80093f2:	d137      	bne.n	8009464 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80093f4:	68bb      	ldr	r3, [r7, #8]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d002      	beq.n	8009400 <HAL_UART_Receive_DMA+0x24>
 80093fa:	88fb      	ldrh	r3, [r7, #6]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d101      	bne.n	8009404 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8009400:	2301      	movs	r3, #1
 8009402:	e030      	b.n	8009466 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	2200      	movs	r2, #0
 8009408:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	4a18      	ldr	r2, [pc, #96]	@ (8009470 <HAL_UART_Receive_DMA+0x94>)
 8009410:	4293      	cmp	r3, r2
 8009412:	d01f      	beq.n	8009454 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	685b      	ldr	r3, [r3, #4]
 800941a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800941e:	2b00      	cmp	r3, #0
 8009420:	d018      	beq.n	8009454 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009428:	697b      	ldr	r3, [r7, #20]
 800942a:	e853 3f00 	ldrex	r3, [r3]
 800942e:	613b      	str	r3, [r7, #16]
   return(result);
 8009430:	693b      	ldr	r3, [r7, #16]
 8009432:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009436:	627b      	str	r3, [r7, #36]	@ 0x24
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	461a      	mov	r2, r3
 800943e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009440:	623b      	str	r3, [r7, #32]
 8009442:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009444:	69f9      	ldr	r1, [r7, #28]
 8009446:	6a3a      	ldr	r2, [r7, #32]
 8009448:	e841 2300 	strex	r3, r2, [r1]
 800944c:	61bb      	str	r3, [r7, #24]
   return(result);
 800944e:	69bb      	ldr	r3, [r7, #24]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d1e6      	bne.n	8009422 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009454:	88fb      	ldrh	r3, [r7, #6]
 8009456:	461a      	mov	r2, r3
 8009458:	68b9      	ldr	r1, [r7, #8]
 800945a:	68f8      	ldr	r0, [r7, #12]
 800945c:	f001 f906 	bl	800a66c <UART_Start_Receive_DMA>
 8009460:	4603      	mov	r3, r0
 8009462:	e000      	b.n	8009466 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009464:	2302      	movs	r3, #2
  }
}
 8009466:	4618      	mov	r0, r3
 8009468:	3728      	adds	r7, #40	@ 0x28
 800946a:	46bd      	mov	sp, r7
 800946c:	bd80      	pop	{r7, pc}
 800946e:	bf00      	nop
 8009470:	40008000 	.word	0x40008000

08009474 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b0ba      	sub	sp, #232	@ 0xe8
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	69db      	ldr	r3, [r3, #28]
 8009482:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	689b      	ldr	r3, [r3, #8]
 8009496:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800949a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800949e:	f640 030f 	movw	r3, #2063	@ 0x80f
 80094a2:	4013      	ands	r3, r2
 80094a4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80094a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d11b      	bne.n	80094e8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80094b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80094b4:	f003 0320 	and.w	r3, r3, #32
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d015      	beq.n	80094e8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80094bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80094c0:	f003 0320 	and.w	r3, r3, #32
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d105      	bne.n	80094d4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80094c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80094cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d009      	beq.n	80094e8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80094d8:	2b00      	cmp	r3, #0
 80094da:	f000 82f3 	beq.w	8009ac4 <HAL_UART_IRQHandler+0x650>
      {
        huart->RxISR(huart);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80094e2:	6878      	ldr	r0, [r7, #4]
 80094e4:	4798      	blx	r3
      }
      return;
 80094e6:	e2ed      	b.n	8009ac4 <HAL_UART_IRQHandler+0x650>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80094e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	f000 8129 	beq.w	8009744 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80094f2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80094f6:	4b90      	ldr	r3, [pc, #576]	@ (8009738 <HAL_UART_IRQHandler+0x2c4>)
 80094f8:	4013      	ands	r3, r2
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d106      	bne.n	800950c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80094fe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8009502:	4b8e      	ldr	r3, [pc, #568]	@ (800973c <HAL_UART_IRQHandler+0x2c8>)
 8009504:	4013      	ands	r3, r2
 8009506:	2b00      	cmp	r3, #0
 8009508:	f000 811c 	beq.w	8009744 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800950c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009510:	f003 0301 	and.w	r3, r3, #1
 8009514:	2b00      	cmp	r3, #0
 8009516:	d011      	beq.n	800953c <HAL_UART_IRQHandler+0xc8>
 8009518:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800951c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009520:	2b00      	cmp	r3, #0
 8009522:	d00b      	beq.n	800953c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	2201      	movs	r2, #1
 800952a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009532:	f043 0201 	orr.w	r2, r3, #1
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800953c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009540:	f003 0302 	and.w	r3, r3, #2
 8009544:	2b00      	cmp	r3, #0
 8009546:	d011      	beq.n	800956c <HAL_UART_IRQHandler+0xf8>
 8009548:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800954c:	f003 0301 	and.w	r3, r3, #1
 8009550:	2b00      	cmp	r3, #0
 8009552:	d00b      	beq.n	800956c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	2202      	movs	r2, #2
 800955a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009562:	f043 0204 	orr.w	r2, r3, #4
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800956c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009570:	f003 0304 	and.w	r3, r3, #4
 8009574:	2b00      	cmp	r3, #0
 8009576:	d011      	beq.n	800959c <HAL_UART_IRQHandler+0x128>
 8009578:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800957c:	f003 0301 	and.w	r3, r3, #1
 8009580:	2b00      	cmp	r3, #0
 8009582:	d00b      	beq.n	800959c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	2204      	movs	r2, #4
 800958a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009592:	f043 0202 	orr.w	r2, r3, #2
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800959c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80095a0:	f003 0308 	and.w	r3, r3, #8
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d017      	beq.n	80095d8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80095a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80095ac:	f003 0320 	and.w	r3, r3, #32
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d105      	bne.n	80095c0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80095b4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80095b8:	4b5f      	ldr	r3, [pc, #380]	@ (8009738 <HAL_UART_IRQHandler+0x2c4>)
 80095ba:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d00b      	beq.n	80095d8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	2208      	movs	r2, #8
 80095c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80095ce:	f043 0208 	orr.w	r2, r3, #8
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80095d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80095dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d012      	beq.n	800960a <HAL_UART_IRQHandler+0x196>
 80095e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80095e8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d00c      	beq.n	800960a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80095f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009600:	f043 0220 	orr.w	r2, r3, #32
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009610:	2b00      	cmp	r3, #0
 8009612:	f000 8259 	beq.w	8009ac8 <HAL_UART_IRQHandler+0x654>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009616:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800961a:	f003 0320 	and.w	r3, r3, #32
 800961e:	2b00      	cmp	r3, #0
 8009620:	d013      	beq.n	800964a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009622:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009626:	f003 0320 	and.w	r3, r3, #32
 800962a:	2b00      	cmp	r3, #0
 800962c:	d105      	bne.n	800963a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800962e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009632:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009636:	2b00      	cmp	r3, #0
 8009638:	d007      	beq.n	800964a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800963e:	2b00      	cmp	r3, #0
 8009640:	d003      	beq.n	800964a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009646:	6878      	ldr	r0, [r7, #4]
 8009648:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009650:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	689b      	ldr	r3, [r3, #8]
 800965a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800965e:	2b40      	cmp	r3, #64	@ 0x40
 8009660:	d005      	beq.n	800966e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009662:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009666:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800966a:	2b00      	cmp	r3, #0
 800966c:	d058      	beq.n	8009720 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800966e:	6878      	ldr	r0, [r7, #4]
 8009670:	f001 f8e3 	bl	800a83a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	689b      	ldr	r3, [r3, #8]
 800967a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800967e:	2b40      	cmp	r3, #64	@ 0x40
 8009680:	d148      	bne.n	8009714 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	3308      	adds	r3, #8
 8009688:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800968c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009690:	e853 3f00 	ldrex	r3, [r3]
 8009694:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009698:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800969c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80096a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	3308      	adds	r3, #8
 80096aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80096ae:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80096b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80096ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80096be:	e841 2300 	strex	r3, r2, [r1]
 80096c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80096c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d1d9      	bne.n	8009682 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d017      	beq.n	8009708 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80096de:	4a18      	ldr	r2, [pc, #96]	@ (8009740 <HAL_UART_IRQHandler+0x2cc>)
 80096e0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80096e8:	4618      	mov	r0, r3
 80096ea:	f7fc f94f 	bl	800598c <HAL_DMA_Abort_IT>
 80096ee:	4603      	mov	r3, r0
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d01f      	beq.n	8009734 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80096fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096fc:	687a      	ldr	r2, [r7, #4]
 80096fe:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8009702:	4610      	mov	r0, r2
 8009704:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009706:	e015      	b.n	8009734 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009712:	e00f      	b.n	8009734 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800971a:	6878      	ldr	r0, [r7, #4]
 800971c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800971e:	e009      	b.n	8009734 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009726:	6878      	ldr	r0, [r7, #4]
 8009728:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	2200      	movs	r2, #0
 800972e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8009732:	e1c9      	b.n	8009ac8 <HAL_UART_IRQHandler+0x654>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009734:	bf00      	nop
    return;
 8009736:	e1c7      	b.n	8009ac8 <HAL_UART_IRQHandler+0x654>
 8009738:	10000001 	.word	0x10000001
 800973c:	04000120 	.word	0x04000120
 8009740:	0800ab05 	.word	0x0800ab05

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009748:	2b01      	cmp	r3, #1
 800974a:	f040 8157 	bne.w	80099fc <HAL_UART_IRQHandler+0x588>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800974e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009752:	f003 0310 	and.w	r3, r3, #16
 8009756:	2b00      	cmp	r3, #0
 8009758:	f000 8150 	beq.w	80099fc <HAL_UART_IRQHandler+0x588>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800975c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009760:	f003 0310 	and.w	r3, r3, #16
 8009764:	2b00      	cmp	r3, #0
 8009766:	f000 8149 	beq.w	80099fc <HAL_UART_IRQHandler+0x588>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	2210      	movs	r2, #16
 8009770:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	689b      	ldr	r3, [r3, #8]
 8009778:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800977c:	2b40      	cmp	r3, #64	@ 0x40
 800977e:	f040 80bd 	bne.w	80098fc <HAL_UART_IRQHandler+0x488>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	685b      	ldr	r3, [r3, #4]
 800978c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009790:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009794:	2b00      	cmp	r3, #0
 8009796:	f000 8199 	beq.w	8009acc <HAL_UART_IRQHandler+0x658>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80097a0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80097a4:	429a      	cmp	r2, r3
 80097a6:	f080 8191 	bcs.w	8009acc <HAL_UART_IRQHandler+0x658>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80097b0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	f003 0320 	and.w	r3, r3, #32
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	f040 8087 	bne.w	80098d6 <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80097d4:	e853 3f00 	ldrex	r3, [r3]
 80097d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80097dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80097e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80097e4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	461a      	mov	r2, r3
 80097ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80097f2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80097f6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097fa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80097fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009802:	e841 2300 	strex	r3, r2, [r1]
 8009806:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800980a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800980e:	2b00      	cmp	r3, #0
 8009810:	d1da      	bne.n	80097c8 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	3308      	adds	r3, #8
 8009818:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800981a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800981c:	e853 3f00 	ldrex	r3, [r3]
 8009820:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009822:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009824:	f023 0301 	bic.w	r3, r3, #1
 8009828:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	3308      	adds	r3, #8
 8009832:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009836:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800983a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800983c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800983e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009842:	e841 2300 	strex	r3, r2, [r1]
 8009846:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009848:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800984a:	2b00      	cmp	r3, #0
 800984c:	d1e1      	bne.n	8009812 <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	3308      	adds	r3, #8
 8009854:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009856:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009858:	e853 3f00 	ldrex	r3, [r3]
 800985c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800985e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009860:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009864:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	3308      	adds	r3, #8
 800986e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009872:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009874:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009876:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009878:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800987a:	e841 2300 	strex	r3, r2, [r1]
 800987e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009880:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009882:	2b00      	cmp	r3, #0
 8009884:	d1e3      	bne.n	800984e <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	2220      	movs	r2, #32
 800988a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	2200      	movs	r2, #0
 8009892:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800989a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800989c:	e853 3f00 	ldrex	r3, [r3]
 80098a0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80098a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80098a4:	f023 0310 	bic.w	r3, r3, #16
 80098a8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	461a      	mov	r2, r3
 80098b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80098b6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80098b8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098ba:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80098bc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80098be:	e841 2300 	strex	r3, r2, [r1]
 80098c2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80098c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d1e4      	bne.n	8009894 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80098d0:	4618      	mov	r0, r3
 80098d2:	f7fc f802 	bl	80058da <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	2202      	movs	r2, #2
 80098da:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80098e2:	687a      	ldr	r2, [r7, #4]
 80098e4:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 80098e8:	687a      	ldr	r2, [r7, #4]
 80098ea:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 80098ee:	b292      	uxth	r2, r2
 80098f0:	1a8a      	subs	r2, r1, r2
 80098f2:	b292      	uxth	r2, r2
 80098f4:	4611      	mov	r1, r2
 80098f6:	6878      	ldr	r0, [r7, #4]
 80098f8:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80098fa:	e0e7      	b.n	8009acc <HAL_UART_IRQHandler+0x658>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009908:	b29b      	uxth	r3, r3
 800990a:	1ad3      	subs	r3, r2, r3
 800990c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009916:	b29b      	uxth	r3, r3
 8009918:	2b00      	cmp	r3, #0
 800991a:	f000 80d9 	beq.w	8009ad0 <HAL_UART_IRQHandler+0x65c>
          && (nb_rx_data > 0U))
 800991e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009922:	2b00      	cmp	r3, #0
 8009924:	f000 80d4 	beq.w	8009ad0 <HAL_UART_IRQHandler+0x65c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800992e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009930:	e853 3f00 	ldrex	r3, [r3]
 8009934:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009936:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009938:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800993c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	461a      	mov	r2, r3
 8009946:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800994a:	647b      	str	r3, [r7, #68]	@ 0x44
 800994c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800994e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009950:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009952:	e841 2300 	strex	r3, r2, [r1]
 8009956:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009958:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800995a:	2b00      	cmp	r3, #0
 800995c:	d1e4      	bne.n	8009928 <HAL_UART_IRQHandler+0x4b4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	3308      	adds	r3, #8
 8009964:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009968:	e853 3f00 	ldrex	r3, [r3]
 800996c:	623b      	str	r3, [r7, #32]
   return(result);
 800996e:	6a3b      	ldr	r3, [r7, #32]
 8009970:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009974:	f023 0301 	bic.w	r3, r3, #1
 8009978:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	3308      	adds	r3, #8
 8009982:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009986:	633a      	str	r2, [r7, #48]	@ 0x30
 8009988:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800998a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800998c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800998e:	e841 2300 	strex	r3, r2, [r1]
 8009992:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009994:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009996:	2b00      	cmp	r3, #0
 8009998:	d1e1      	bne.n	800995e <HAL_UART_IRQHandler+0x4ea>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	2220      	movs	r2, #32
 800999e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	2200      	movs	r2, #0
 80099a6:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	2200      	movs	r2, #0
 80099ac:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099b4:	693b      	ldr	r3, [r7, #16]
 80099b6:	e853 3f00 	ldrex	r3, [r3]
 80099ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	f023 0310 	bic.w	r3, r3, #16
 80099c2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	461a      	mov	r2, r3
 80099cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80099d0:	61fb      	str	r3, [r7, #28]
 80099d2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099d4:	69b9      	ldr	r1, [r7, #24]
 80099d6:	69fa      	ldr	r2, [r7, #28]
 80099d8:	e841 2300 	strex	r3, r2, [r1]
 80099dc:	617b      	str	r3, [r7, #20]
   return(result);
 80099de:	697b      	ldr	r3, [r7, #20]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d1e4      	bne.n	80099ae <HAL_UART_IRQHandler+0x53a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2202      	movs	r2, #2
 80099e8:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80099f0:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 80099f4:	4611      	mov	r1, r2
 80099f6:	6878      	ldr	r0, [r7, #4]
 80099f8:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80099fa:	e069      	b.n	8009ad0 <HAL_UART_IRQHandler+0x65c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80099fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a00:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d010      	beq.n	8009a2a <HAL_UART_IRQHandler+0x5b6>
 8009a08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009a0c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d00a      	beq.n	8009a2a <HAL_UART_IRQHandler+0x5b6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8009a1c:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009a24:	6878      	ldr	r0, [r7, #4]
 8009a26:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009a28:	e055      	b.n	8009ad6 <HAL_UART_IRQHandler+0x662>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009a2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d014      	beq.n	8009a60 <HAL_UART_IRQHandler+0x5ec>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009a36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009a3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d105      	bne.n	8009a4e <HAL_UART_IRQHandler+0x5da>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009a42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009a46:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d008      	beq.n	8009a60 <HAL_UART_IRQHandler+0x5ec>
  {
    if (huart->TxISR != NULL)
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d03e      	beq.n	8009ad4 <HAL_UART_IRQHandler+0x660>
    {
      huart->TxISR(huart);
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009a5a:	6878      	ldr	r0, [r7, #4]
 8009a5c:	4798      	blx	r3
    }
    return;
 8009a5e:	e039      	b.n	8009ad4 <HAL_UART_IRQHandler+0x660>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009a60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d009      	beq.n	8009a80 <HAL_UART_IRQHandler+0x60c>
 8009a6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009a70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d003      	beq.n	8009a80 <HAL_UART_IRQHandler+0x60c>
  {
    UART_EndTransmit_IT(huart);
 8009a78:	6878      	ldr	r0, [r7, #4]
 8009a7a:	f001 f85b 	bl	800ab34 <UART_EndTransmit_IT>
    return;
 8009a7e:	e02a      	b.n	8009ad6 <HAL_UART_IRQHandler+0x662>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009a80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a84:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d00b      	beq.n	8009aa4 <HAL_UART_IRQHandler+0x630>
 8009a8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009a90:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d005      	beq.n	8009aa4 <HAL_UART_IRQHandler+0x630>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8009a9e:	6878      	ldr	r0, [r7, #4]
 8009aa0:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009aa2:	e018      	b.n	8009ad6 <HAL_UART_IRQHandler+0x662>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009aa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009aa8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d012      	beq.n	8009ad6 <HAL_UART_IRQHandler+0x662>
 8009ab0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	da0e      	bge.n	8009ad6 <HAL_UART_IRQHandler+0x662>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8009abe:	6878      	ldr	r0, [r7, #4]
 8009ac0:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009ac2:	e008      	b.n	8009ad6 <HAL_UART_IRQHandler+0x662>
      return;
 8009ac4:	bf00      	nop
 8009ac6:	e006      	b.n	8009ad6 <HAL_UART_IRQHandler+0x662>
    return;
 8009ac8:	bf00      	nop
 8009aca:	e004      	b.n	8009ad6 <HAL_UART_IRQHandler+0x662>
      return;
 8009acc:	bf00      	nop
 8009ace:	e002      	b.n	8009ad6 <HAL_UART_IRQHandler+0x662>
      return;
 8009ad0:	bf00      	nop
 8009ad2:	e000      	b.n	8009ad6 <HAL_UART_IRQHandler+0x662>
    return;
 8009ad4:	bf00      	nop
  }
}
 8009ad6:	37e8      	adds	r7, #232	@ 0xe8
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	bd80      	pop	{r7, pc}

08009adc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009adc:	b480      	push	{r7}
 8009ade:	b083      	sub	sp, #12
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009ae4:	bf00      	nop
 8009ae6:	370c      	adds	r7, #12
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aee:	4770      	bx	lr

08009af0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009af0:	b480      	push	{r7}
 8009af2:	b083      	sub	sp, #12
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8009af8:	bf00      	nop
 8009afa:	370c      	adds	r7, #12
 8009afc:	46bd      	mov	sp, r7
 8009afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b02:	4770      	bx	lr

08009b04 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009b04:	b480      	push	{r7}
 8009b06:	b083      	sub	sp, #12
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8009b0c:	bf00      	nop
 8009b0e:	370c      	adds	r7, #12
 8009b10:	46bd      	mov	sp, r7
 8009b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b16:	4770      	bx	lr

08009b18 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009b18:	b480      	push	{r7}
 8009b1a:	b083      	sub	sp, #12
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009b20:	bf00      	nop
 8009b22:	370c      	adds	r7, #12
 8009b24:	46bd      	mov	sp, r7
 8009b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2a:	4770      	bx	lr

08009b2c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009b2c:	b480      	push	{r7}
 8009b2e:	b083      	sub	sp, #12
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009b34:	bf00      	nop
 8009b36:	370c      	adds	r7, #12
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3e:	4770      	bx	lr

08009b40 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8009b40:	b480      	push	{r7}
 8009b42:	b083      	sub	sp, #12
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8009b48:	bf00      	nop
 8009b4a:	370c      	adds	r7, #12
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b52:	4770      	bx	lr

08009b54 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8009b54:	b480      	push	{r7}
 8009b56:	b083      	sub	sp, #12
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8009b5c:	bf00      	nop
 8009b5e:	370c      	adds	r7, #12
 8009b60:	46bd      	mov	sp, r7
 8009b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b66:	4770      	bx	lr

08009b68 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8009b68:	b480      	push	{r7}
 8009b6a:	b083      	sub	sp, #12
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8009b70:	bf00      	nop
 8009b72:	370c      	adds	r7, #12
 8009b74:	46bd      	mov	sp, r7
 8009b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7a:	4770      	bx	lr

08009b7c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009b7c:	b480      	push	{r7}
 8009b7e:	b083      	sub	sp, #12
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
 8009b84:	460b      	mov	r3, r1
 8009b86:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009b88:	bf00      	nop
 8009b8a:	370c      	adds	r7, #12
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b92:	4770      	bx	lr

08009b94 <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 8009b94:	b480      	push	{r7}
 8009b96:	b083      	sub	sp, #12
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
 8009b9c:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	4a09      	ldr	r2, [pc, #36]	@ (8009bc8 <HAL_UART_ReceiverTimeout_Config+0x34>)
 8009ba4:	4293      	cmp	r3, r2
 8009ba6:	d009      	beq.n	8009bbc <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	695b      	ldr	r3, [r3, #20]
 8009bae:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	683a      	ldr	r2, [r7, #0]
 8009bb8:	430a      	orrs	r2, r1
 8009bba:	615a      	str	r2, [r3, #20]
  }
}
 8009bbc:	bf00      	nop
 8009bbe:	370c      	adds	r7, #12
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc6:	4770      	bx	lr
 8009bc8:	40008000 	.word	0x40008000

08009bcc <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 8009bcc:	b480      	push	{r7}
 8009bce:	b083      	sub	sp, #12
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	4a18      	ldr	r2, [pc, #96]	@ (8009c3c <HAL_UART_EnableReceiverTimeout+0x70>)
 8009bda:	4293      	cmp	r3, r2
 8009bdc:	d027      	beq.n	8009c2e <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009be4:	2b20      	cmp	r3, #32
 8009be6:	d120      	bne.n	8009c2a <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009bee:	2b01      	cmp	r3, #1
 8009bf0:	d101      	bne.n	8009bf6 <HAL_UART_EnableReceiverTimeout+0x2a>
 8009bf2:	2302      	movs	r3, #2
 8009bf4:	e01c      	b.n	8009c30 <HAL_UART_EnableReceiverTimeout+0x64>
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	2201      	movs	r2, #1
 8009bfa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	2224      	movs	r2, #36	@ 0x24
 8009c02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	685a      	ldr	r2, [r3, #4]
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8009c14:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	2220      	movs	r2, #32
 8009c1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	2200      	movs	r2, #0
 8009c22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 8009c26:	2300      	movs	r3, #0
 8009c28:	e002      	b.n	8009c30 <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 8009c2a:	2302      	movs	r3, #2
 8009c2c:	e000      	b.n	8009c30 <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 8009c2e:	2301      	movs	r3, #1
  }
}
 8009c30:	4618      	mov	r0, r3
 8009c32:	370c      	adds	r7, #12
 8009c34:	46bd      	mov	sp, r7
 8009c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3a:	4770      	bx	lr
 8009c3c:	40008000 	.word	0x40008000

08009c40 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 8009c40:	b480      	push	{r7}
 8009c42:	b083      	sub	sp, #12
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 8009c4e:	4618      	mov	r0, r3
 8009c50:	370c      	adds	r7, #12
 8009c52:	46bd      	mov	sp, r7
 8009c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c58:	4770      	bx	lr
	...

08009c5c <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8009c5c:	b480      	push	{r7}
 8009c5e:	b083      	sub	sp, #12
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	4a1a      	ldr	r2, [pc, #104]	@ (8009cd0 <UART_InitCallbacksToDefault+0x74>)
 8009c68:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	4a19      	ldr	r2, [pc, #100]	@ (8009cd4 <UART_InitCallbacksToDefault+0x78>)
 8009c70:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	4a18      	ldr	r2, [pc, #96]	@ (8009cd8 <UART_InitCallbacksToDefault+0x7c>)
 8009c78:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	4a17      	ldr	r2, [pc, #92]	@ (8009cdc <UART_InitCallbacksToDefault+0x80>)
 8009c80:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	4a16      	ldr	r2, [pc, #88]	@ (8009ce0 <UART_InitCallbacksToDefault+0x84>)
 8009c88:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	4a15      	ldr	r2, [pc, #84]	@ (8009ce4 <UART_InitCallbacksToDefault+0x88>)
 8009c90:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	4a14      	ldr	r2, [pc, #80]	@ (8009ce8 <UART_InitCallbacksToDefault+0x8c>)
 8009c98:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	4a13      	ldr	r2, [pc, #76]	@ (8009cec <UART_InitCallbacksToDefault+0x90>)
 8009ca0:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	4a12      	ldr	r2, [pc, #72]	@ (8009cf0 <UART_InitCallbacksToDefault+0x94>)
 8009ca8:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	4a11      	ldr	r2, [pc, #68]	@ (8009cf4 <UART_InitCallbacksToDefault+0x98>)
 8009cb0:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	4a10      	ldr	r2, [pc, #64]	@ (8009cf8 <UART_InitCallbacksToDefault+0x9c>)
 8009cb8:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	4a0f      	ldr	r2, [pc, #60]	@ (8009cfc <UART_InitCallbacksToDefault+0xa0>)
 8009cc0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 8009cc4:	bf00      	nop
 8009cc6:	370c      	adds	r7, #12
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cce:	4770      	bx	lr
 8009cd0:	08009af1 	.word	0x08009af1
 8009cd4:	08009add 	.word	0x08009add
 8009cd8:	08009b19 	.word	0x08009b19
 8009cdc:	08009b05 	.word	0x08009b05
 8009ce0:	08009b2d 	.word	0x08009b2d
 8009ce4:	08009b41 	.word	0x08009b41
 8009ce8:	08009b55 	.word	0x08009b55
 8009cec:	08009b69 	.word	0x08009b69
 8009cf0:	0800ab8f 	.word	0x0800ab8f
 8009cf4:	0800aba3 	.word	0x0800aba3
 8009cf8:	0800abb7 	.word	0x0800abb7
 8009cfc:	08009b7d 	.word	0x08009b7d

08009d00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009d00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009d04:	b08c      	sub	sp, #48	@ 0x30
 8009d06:	af00      	add	r7, sp, #0
 8009d08:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009d10:	697b      	ldr	r3, [r7, #20]
 8009d12:	689a      	ldr	r2, [r3, #8]
 8009d14:	697b      	ldr	r3, [r7, #20]
 8009d16:	691b      	ldr	r3, [r3, #16]
 8009d18:	431a      	orrs	r2, r3
 8009d1a:	697b      	ldr	r3, [r7, #20]
 8009d1c:	695b      	ldr	r3, [r3, #20]
 8009d1e:	431a      	orrs	r2, r3
 8009d20:	697b      	ldr	r3, [r7, #20]
 8009d22:	69db      	ldr	r3, [r3, #28]
 8009d24:	4313      	orrs	r3, r2
 8009d26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009d28:	697b      	ldr	r3, [r7, #20]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	681a      	ldr	r2, [r3, #0]
 8009d2e:	4baa      	ldr	r3, [pc, #680]	@ (8009fd8 <UART_SetConfig+0x2d8>)
 8009d30:	4013      	ands	r3, r2
 8009d32:	697a      	ldr	r2, [r7, #20]
 8009d34:	6812      	ldr	r2, [r2, #0]
 8009d36:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009d38:	430b      	orrs	r3, r1
 8009d3a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009d3c:	697b      	ldr	r3, [r7, #20]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	685b      	ldr	r3, [r3, #4]
 8009d42:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009d46:	697b      	ldr	r3, [r7, #20]
 8009d48:	68da      	ldr	r2, [r3, #12]
 8009d4a:	697b      	ldr	r3, [r7, #20]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	430a      	orrs	r2, r1
 8009d50:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009d52:	697b      	ldr	r3, [r7, #20]
 8009d54:	699b      	ldr	r3, [r3, #24]
 8009d56:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009d58:	697b      	ldr	r3, [r7, #20]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	4a9f      	ldr	r2, [pc, #636]	@ (8009fdc <UART_SetConfig+0x2dc>)
 8009d5e:	4293      	cmp	r3, r2
 8009d60:	d004      	beq.n	8009d6c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009d62:	697b      	ldr	r3, [r7, #20]
 8009d64:	6a1b      	ldr	r3, [r3, #32]
 8009d66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009d68:	4313      	orrs	r3, r2
 8009d6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009d6c:	697b      	ldr	r3, [r7, #20]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	689b      	ldr	r3, [r3, #8]
 8009d72:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8009d76:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8009d7a:	697a      	ldr	r2, [r7, #20]
 8009d7c:	6812      	ldr	r2, [r2, #0]
 8009d7e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009d80:	430b      	orrs	r3, r1
 8009d82:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009d84:	697b      	ldr	r3, [r7, #20]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d8a:	f023 010f 	bic.w	r1, r3, #15
 8009d8e:	697b      	ldr	r3, [r7, #20]
 8009d90:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009d92:	697b      	ldr	r3, [r7, #20]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	430a      	orrs	r2, r1
 8009d98:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009d9a:	697b      	ldr	r3, [r7, #20]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	4a90      	ldr	r2, [pc, #576]	@ (8009fe0 <UART_SetConfig+0x2e0>)
 8009da0:	4293      	cmp	r3, r2
 8009da2:	d125      	bne.n	8009df0 <UART_SetConfig+0xf0>
 8009da4:	4b8f      	ldr	r3, [pc, #572]	@ (8009fe4 <UART_SetConfig+0x2e4>)
 8009da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009daa:	f003 0303 	and.w	r3, r3, #3
 8009dae:	2b03      	cmp	r3, #3
 8009db0:	d81a      	bhi.n	8009de8 <UART_SetConfig+0xe8>
 8009db2:	a201      	add	r2, pc, #4	@ (adr r2, 8009db8 <UART_SetConfig+0xb8>)
 8009db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009db8:	08009dc9 	.word	0x08009dc9
 8009dbc:	08009dd9 	.word	0x08009dd9
 8009dc0:	08009dd1 	.word	0x08009dd1
 8009dc4:	08009de1 	.word	0x08009de1
 8009dc8:	2301      	movs	r3, #1
 8009dca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009dce:	e116      	b.n	8009ffe <UART_SetConfig+0x2fe>
 8009dd0:	2302      	movs	r3, #2
 8009dd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009dd6:	e112      	b.n	8009ffe <UART_SetConfig+0x2fe>
 8009dd8:	2304      	movs	r3, #4
 8009dda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009dde:	e10e      	b.n	8009ffe <UART_SetConfig+0x2fe>
 8009de0:	2308      	movs	r3, #8
 8009de2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009de6:	e10a      	b.n	8009ffe <UART_SetConfig+0x2fe>
 8009de8:	2310      	movs	r3, #16
 8009dea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009dee:	e106      	b.n	8009ffe <UART_SetConfig+0x2fe>
 8009df0:	697b      	ldr	r3, [r7, #20]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	4a7c      	ldr	r2, [pc, #496]	@ (8009fe8 <UART_SetConfig+0x2e8>)
 8009df6:	4293      	cmp	r3, r2
 8009df8:	d138      	bne.n	8009e6c <UART_SetConfig+0x16c>
 8009dfa:	4b7a      	ldr	r3, [pc, #488]	@ (8009fe4 <UART_SetConfig+0x2e4>)
 8009dfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009e00:	f003 030c 	and.w	r3, r3, #12
 8009e04:	2b0c      	cmp	r3, #12
 8009e06:	d82d      	bhi.n	8009e64 <UART_SetConfig+0x164>
 8009e08:	a201      	add	r2, pc, #4	@ (adr r2, 8009e10 <UART_SetConfig+0x110>)
 8009e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e0e:	bf00      	nop
 8009e10:	08009e45 	.word	0x08009e45
 8009e14:	08009e65 	.word	0x08009e65
 8009e18:	08009e65 	.word	0x08009e65
 8009e1c:	08009e65 	.word	0x08009e65
 8009e20:	08009e55 	.word	0x08009e55
 8009e24:	08009e65 	.word	0x08009e65
 8009e28:	08009e65 	.word	0x08009e65
 8009e2c:	08009e65 	.word	0x08009e65
 8009e30:	08009e4d 	.word	0x08009e4d
 8009e34:	08009e65 	.word	0x08009e65
 8009e38:	08009e65 	.word	0x08009e65
 8009e3c:	08009e65 	.word	0x08009e65
 8009e40:	08009e5d 	.word	0x08009e5d
 8009e44:	2300      	movs	r3, #0
 8009e46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e4a:	e0d8      	b.n	8009ffe <UART_SetConfig+0x2fe>
 8009e4c:	2302      	movs	r3, #2
 8009e4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e52:	e0d4      	b.n	8009ffe <UART_SetConfig+0x2fe>
 8009e54:	2304      	movs	r3, #4
 8009e56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e5a:	e0d0      	b.n	8009ffe <UART_SetConfig+0x2fe>
 8009e5c:	2308      	movs	r3, #8
 8009e5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e62:	e0cc      	b.n	8009ffe <UART_SetConfig+0x2fe>
 8009e64:	2310      	movs	r3, #16
 8009e66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e6a:	e0c8      	b.n	8009ffe <UART_SetConfig+0x2fe>
 8009e6c:	697b      	ldr	r3, [r7, #20]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	4a5e      	ldr	r2, [pc, #376]	@ (8009fec <UART_SetConfig+0x2ec>)
 8009e72:	4293      	cmp	r3, r2
 8009e74:	d125      	bne.n	8009ec2 <UART_SetConfig+0x1c2>
 8009e76:	4b5b      	ldr	r3, [pc, #364]	@ (8009fe4 <UART_SetConfig+0x2e4>)
 8009e78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009e7c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009e80:	2b30      	cmp	r3, #48	@ 0x30
 8009e82:	d016      	beq.n	8009eb2 <UART_SetConfig+0x1b2>
 8009e84:	2b30      	cmp	r3, #48	@ 0x30
 8009e86:	d818      	bhi.n	8009eba <UART_SetConfig+0x1ba>
 8009e88:	2b20      	cmp	r3, #32
 8009e8a:	d00a      	beq.n	8009ea2 <UART_SetConfig+0x1a2>
 8009e8c:	2b20      	cmp	r3, #32
 8009e8e:	d814      	bhi.n	8009eba <UART_SetConfig+0x1ba>
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d002      	beq.n	8009e9a <UART_SetConfig+0x19a>
 8009e94:	2b10      	cmp	r3, #16
 8009e96:	d008      	beq.n	8009eaa <UART_SetConfig+0x1aa>
 8009e98:	e00f      	b.n	8009eba <UART_SetConfig+0x1ba>
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ea0:	e0ad      	b.n	8009ffe <UART_SetConfig+0x2fe>
 8009ea2:	2302      	movs	r3, #2
 8009ea4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ea8:	e0a9      	b.n	8009ffe <UART_SetConfig+0x2fe>
 8009eaa:	2304      	movs	r3, #4
 8009eac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009eb0:	e0a5      	b.n	8009ffe <UART_SetConfig+0x2fe>
 8009eb2:	2308      	movs	r3, #8
 8009eb4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009eb8:	e0a1      	b.n	8009ffe <UART_SetConfig+0x2fe>
 8009eba:	2310      	movs	r3, #16
 8009ebc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ec0:	e09d      	b.n	8009ffe <UART_SetConfig+0x2fe>
 8009ec2:	697b      	ldr	r3, [r7, #20]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	4a4a      	ldr	r2, [pc, #296]	@ (8009ff0 <UART_SetConfig+0x2f0>)
 8009ec8:	4293      	cmp	r3, r2
 8009eca:	d125      	bne.n	8009f18 <UART_SetConfig+0x218>
 8009ecc:	4b45      	ldr	r3, [pc, #276]	@ (8009fe4 <UART_SetConfig+0x2e4>)
 8009ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009ed2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009ed6:	2bc0      	cmp	r3, #192	@ 0xc0
 8009ed8:	d016      	beq.n	8009f08 <UART_SetConfig+0x208>
 8009eda:	2bc0      	cmp	r3, #192	@ 0xc0
 8009edc:	d818      	bhi.n	8009f10 <UART_SetConfig+0x210>
 8009ede:	2b80      	cmp	r3, #128	@ 0x80
 8009ee0:	d00a      	beq.n	8009ef8 <UART_SetConfig+0x1f8>
 8009ee2:	2b80      	cmp	r3, #128	@ 0x80
 8009ee4:	d814      	bhi.n	8009f10 <UART_SetConfig+0x210>
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d002      	beq.n	8009ef0 <UART_SetConfig+0x1f0>
 8009eea:	2b40      	cmp	r3, #64	@ 0x40
 8009eec:	d008      	beq.n	8009f00 <UART_SetConfig+0x200>
 8009eee:	e00f      	b.n	8009f10 <UART_SetConfig+0x210>
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ef6:	e082      	b.n	8009ffe <UART_SetConfig+0x2fe>
 8009ef8:	2302      	movs	r3, #2
 8009efa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009efe:	e07e      	b.n	8009ffe <UART_SetConfig+0x2fe>
 8009f00:	2304      	movs	r3, #4
 8009f02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f06:	e07a      	b.n	8009ffe <UART_SetConfig+0x2fe>
 8009f08:	2308      	movs	r3, #8
 8009f0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f0e:	e076      	b.n	8009ffe <UART_SetConfig+0x2fe>
 8009f10:	2310      	movs	r3, #16
 8009f12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f16:	e072      	b.n	8009ffe <UART_SetConfig+0x2fe>
 8009f18:	697b      	ldr	r3, [r7, #20]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	4a35      	ldr	r2, [pc, #212]	@ (8009ff4 <UART_SetConfig+0x2f4>)
 8009f1e:	4293      	cmp	r3, r2
 8009f20:	d12a      	bne.n	8009f78 <UART_SetConfig+0x278>
 8009f22:	4b30      	ldr	r3, [pc, #192]	@ (8009fe4 <UART_SetConfig+0x2e4>)
 8009f24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009f28:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009f2c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009f30:	d01a      	beq.n	8009f68 <UART_SetConfig+0x268>
 8009f32:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009f36:	d81b      	bhi.n	8009f70 <UART_SetConfig+0x270>
 8009f38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009f3c:	d00c      	beq.n	8009f58 <UART_SetConfig+0x258>
 8009f3e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009f42:	d815      	bhi.n	8009f70 <UART_SetConfig+0x270>
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d003      	beq.n	8009f50 <UART_SetConfig+0x250>
 8009f48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009f4c:	d008      	beq.n	8009f60 <UART_SetConfig+0x260>
 8009f4e:	e00f      	b.n	8009f70 <UART_SetConfig+0x270>
 8009f50:	2300      	movs	r3, #0
 8009f52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f56:	e052      	b.n	8009ffe <UART_SetConfig+0x2fe>
 8009f58:	2302      	movs	r3, #2
 8009f5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f5e:	e04e      	b.n	8009ffe <UART_SetConfig+0x2fe>
 8009f60:	2304      	movs	r3, #4
 8009f62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f66:	e04a      	b.n	8009ffe <UART_SetConfig+0x2fe>
 8009f68:	2308      	movs	r3, #8
 8009f6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f6e:	e046      	b.n	8009ffe <UART_SetConfig+0x2fe>
 8009f70:	2310      	movs	r3, #16
 8009f72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f76:	e042      	b.n	8009ffe <UART_SetConfig+0x2fe>
 8009f78:	697b      	ldr	r3, [r7, #20]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	4a17      	ldr	r2, [pc, #92]	@ (8009fdc <UART_SetConfig+0x2dc>)
 8009f7e:	4293      	cmp	r3, r2
 8009f80:	d13a      	bne.n	8009ff8 <UART_SetConfig+0x2f8>
 8009f82:	4b18      	ldr	r3, [pc, #96]	@ (8009fe4 <UART_SetConfig+0x2e4>)
 8009f84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009f88:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009f8c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009f90:	d01a      	beq.n	8009fc8 <UART_SetConfig+0x2c8>
 8009f92:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009f96:	d81b      	bhi.n	8009fd0 <UART_SetConfig+0x2d0>
 8009f98:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009f9c:	d00c      	beq.n	8009fb8 <UART_SetConfig+0x2b8>
 8009f9e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009fa2:	d815      	bhi.n	8009fd0 <UART_SetConfig+0x2d0>
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d003      	beq.n	8009fb0 <UART_SetConfig+0x2b0>
 8009fa8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009fac:	d008      	beq.n	8009fc0 <UART_SetConfig+0x2c0>
 8009fae:	e00f      	b.n	8009fd0 <UART_SetConfig+0x2d0>
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009fb6:	e022      	b.n	8009ffe <UART_SetConfig+0x2fe>
 8009fb8:	2302      	movs	r3, #2
 8009fba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009fbe:	e01e      	b.n	8009ffe <UART_SetConfig+0x2fe>
 8009fc0:	2304      	movs	r3, #4
 8009fc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009fc6:	e01a      	b.n	8009ffe <UART_SetConfig+0x2fe>
 8009fc8:	2308      	movs	r3, #8
 8009fca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009fce:	e016      	b.n	8009ffe <UART_SetConfig+0x2fe>
 8009fd0:	2310      	movs	r3, #16
 8009fd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009fd6:	e012      	b.n	8009ffe <UART_SetConfig+0x2fe>
 8009fd8:	cfff69f3 	.word	0xcfff69f3
 8009fdc:	40008000 	.word	0x40008000
 8009fe0:	40013800 	.word	0x40013800
 8009fe4:	40021000 	.word	0x40021000
 8009fe8:	40004400 	.word	0x40004400
 8009fec:	40004800 	.word	0x40004800
 8009ff0:	40004c00 	.word	0x40004c00
 8009ff4:	40005000 	.word	0x40005000
 8009ff8:	2310      	movs	r3, #16
 8009ffa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009ffe:	697b      	ldr	r3, [r7, #20]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	4aae      	ldr	r2, [pc, #696]	@ (800a2bc <UART_SetConfig+0x5bc>)
 800a004:	4293      	cmp	r3, r2
 800a006:	f040 8097 	bne.w	800a138 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a00a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a00e:	2b08      	cmp	r3, #8
 800a010:	d823      	bhi.n	800a05a <UART_SetConfig+0x35a>
 800a012:	a201      	add	r2, pc, #4	@ (adr r2, 800a018 <UART_SetConfig+0x318>)
 800a014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a018:	0800a03d 	.word	0x0800a03d
 800a01c:	0800a05b 	.word	0x0800a05b
 800a020:	0800a045 	.word	0x0800a045
 800a024:	0800a05b 	.word	0x0800a05b
 800a028:	0800a04b 	.word	0x0800a04b
 800a02c:	0800a05b 	.word	0x0800a05b
 800a030:	0800a05b 	.word	0x0800a05b
 800a034:	0800a05b 	.word	0x0800a05b
 800a038:	0800a053 	.word	0x0800a053
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a03c:	f7fc fd96 	bl	8006b6c <HAL_RCC_GetPCLK1Freq>
 800a040:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a042:	e010      	b.n	800a066 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a044:	4b9e      	ldr	r3, [pc, #632]	@ (800a2c0 <UART_SetConfig+0x5c0>)
 800a046:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a048:	e00d      	b.n	800a066 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a04a:	f7fc fd21 	bl	8006a90 <HAL_RCC_GetSysClockFreq>
 800a04e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a050:	e009      	b.n	800a066 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a052:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a056:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a058:	e005      	b.n	800a066 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800a05a:	2300      	movs	r3, #0
 800a05c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a05e:	2301      	movs	r3, #1
 800a060:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a064:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a068:	2b00      	cmp	r3, #0
 800a06a:	f000 8130 	beq.w	800a2ce <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a06e:	697b      	ldr	r3, [r7, #20]
 800a070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a072:	4a94      	ldr	r2, [pc, #592]	@ (800a2c4 <UART_SetConfig+0x5c4>)
 800a074:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a078:	461a      	mov	r2, r3
 800a07a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a07c:	fbb3 f3f2 	udiv	r3, r3, r2
 800a080:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a082:	697b      	ldr	r3, [r7, #20]
 800a084:	685a      	ldr	r2, [r3, #4]
 800a086:	4613      	mov	r3, r2
 800a088:	005b      	lsls	r3, r3, #1
 800a08a:	4413      	add	r3, r2
 800a08c:	69ba      	ldr	r2, [r7, #24]
 800a08e:	429a      	cmp	r2, r3
 800a090:	d305      	bcc.n	800a09e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a092:	697b      	ldr	r3, [r7, #20]
 800a094:	685b      	ldr	r3, [r3, #4]
 800a096:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a098:	69ba      	ldr	r2, [r7, #24]
 800a09a:	429a      	cmp	r2, r3
 800a09c:	d903      	bls.n	800a0a6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800a09e:	2301      	movs	r3, #1
 800a0a0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a0a4:	e113      	b.n	800a2ce <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a0a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	60bb      	str	r3, [r7, #8]
 800a0ac:	60fa      	str	r2, [r7, #12]
 800a0ae:	697b      	ldr	r3, [r7, #20]
 800a0b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0b2:	4a84      	ldr	r2, [pc, #528]	@ (800a2c4 <UART_SetConfig+0x5c4>)
 800a0b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a0b8:	b29b      	uxth	r3, r3
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	603b      	str	r3, [r7, #0]
 800a0be:	607a      	str	r2, [r7, #4]
 800a0c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a0c4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a0c8:	f7f6 fe90 	bl	8000dec <__aeabi_uldivmod>
 800a0cc:	4602      	mov	r2, r0
 800a0ce:	460b      	mov	r3, r1
 800a0d0:	4610      	mov	r0, r2
 800a0d2:	4619      	mov	r1, r3
 800a0d4:	f04f 0200 	mov.w	r2, #0
 800a0d8:	f04f 0300 	mov.w	r3, #0
 800a0dc:	020b      	lsls	r3, r1, #8
 800a0de:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a0e2:	0202      	lsls	r2, r0, #8
 800a0e4:	6979      	ldr	r1, [r7, #20]
 800a0e6:	6849      	ldr	r1, [r1, #4]
 800a0e8:	0849      	lsrs	r1, r1, #1
 800a0ea:	2000      	movs	r0, #0
 800a0ec:	460c      	mov	r4, r1
 800a0ee:	4605      	mov	r5, r0
 800a0f0:	eb12 0804 	adds.w	r8, r2, r4
 800a0f4:	eb43 0905 	adc.w	r9, r3, r5
 800a0f8:	697b      	ldr	r3, [r7, #20]
 800a0fa:	685b      	ldr	r3, [r3, #4]
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	469a      	mov	sl, r3
 800a100:	4693      	mov	fp, r2
 800a102:	4652      	mov	r2, sl
 800a104:	465b      	mov	r3, fp
 800a106:	4640      	mov	r0, r8
 800a108:	4649      	mov	r1, r9
 800a10a:	f7f6 fe6f 	bl	8000dec <__aeabi_uldivmod>
 800a10e:	4602      	mov	r2, r0
 800a110:	460b      	mov	r3, r1
 800a112:	4613      	mov	r3, r2
 800a114:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a116:	6a3b      	ldr	r3, [r7, #32]
 800a118:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a11c:	d308      	bcc.n	800a130 <UART_SetConfig+0x430>
 800a11e:	6a3b      	ldr	r3, [r7, #32]
 800a120:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a124:	d204      	bcs.n	800a130 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800a126:	697b      	ldr	r3, [r7, #20]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	6a3a      	ldr	r2, [r7, #32]
 800a12c:	60da      	str	r2, [r3, #12]
 800a12e:	e0ce      	b.n	800a2ce <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800a130:	2301      	movs	r3, #1
 800a132:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a136:	e0ca      	b.n	800a2ce <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a138:	697b      	ldr	r3, [r7, #20]
 800a13a:	69db      	ldr	r3, [r3, #28]
 800a13c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a140:	d166      	bne.n	800a210 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800a142:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a146:	2b08      	cmp	r3, #8
 800a148:	d827      	bhi.n	800a19a <UART_SetConfig+0x49a>
 800a14a:	a201      	add	r2, pc, #4	@ (adr r2, 800a150 <UART_SetConfig+0x450>)
 800a14c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a150:	0800a175 	.word	0x0800a175
 800a154:	0800a17d 	.word	0x0800a17d
 800a158:	0800a185 	.word	0x0800a185
 800a15c:	0800a19b 	.word	0x0800a19b
 800a160:	0800a18b 	.word	0x0800a18b
 800a164:	0800a19b 	.word	0x0800a19b
 800a168:	0800a19b 	.word	0x0800a19b
 800a16c:	0800a19b 	.word	0x0800a19b
 800a170:	0800a193 	.word	0x0800a193
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a174:	f7fc fcfa 	bl	8006b6c <HAL_RCC_GetPCLK1Freq>
 800a178:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a17a:	e014      	b.n	800a1a6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a17c:	f7fc fd0c 	bl	8006b98 <HAL_RCC_GetPCLK2Freq>
 800a180:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a182:	e010      	b.n	800a1a6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a184:	4b4e      	ldr	r3, [pc, #312]	@ (800a2c0 <UART_SetConfig+0x5c0>)
 800a186:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a188:	e00d      	b.n	800a1a6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a18a:	f7fc fc81 	bl	8006a90 <HAL_RCC_GetSysClockFreq>
 800a18e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a190:	e009      	b.n	800a1a6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a192:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a196:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a198:	e005      	b.n	800a1a6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800a19a:	2300      	movs	r3, #0
 800a19c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a19e:	2301      	movs	r3, #1
 800a1a0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a1a4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a1a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	f000 8090 	beq.w	800a2ce <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a1ae:	697b      	ldr	r3, [r7, #20]
 800a1b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1b2:	4a44      	ldr	r2, [pc, #272]	@ (800a2c4 <UART_SetConfig+0x5c4>)
 800a1b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a1b8:	461a      	mov	r2, r3
 800a1ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1bc:	fbb3 f3f2 	udiv	r3, r3, r2
 800a1c0:	005a      	lsls	r2, r3, #1
 800a1c2:	697b      	ldr	r3, [r7, #20]
 800a1c4:	685b      	ldr	r3, [r3, #4]
 800a1c6:	085b      	lsrs	r3, r3, #1
 800a1c8:	441a      	add	r2, r3
 800a1ca:	697b      	ldr	r3, [r7, #20]
 800a1cc:	685b      	ldr	r3, [r3, #4]
 800a1ce:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1d2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a1d4:	6a3b      	ldr	r3, [r7, #32]
 800a1d6:	2b0f      	cmp	r3, #15
 800a1d8:	d916      	bls.n	800a208 <UART_SetConfig+0x508>
 800a1da:	6a3b      	ldr	r3, [r7, #32]
 800a1dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a1e0:	d212      	bcs.n	800a208 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a1e2:	6a3b      	ldr	r3, [r7, #32]
 800a1e4:	b29b      	uxth	r3, r3
 800a1e6:	f023 030f 	bic.w	r3, r3, #15
 800a1ea:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a1ec:	6a3b      	ldr	r3, [r7, #32]
 800a1ee:	085b      	lsrs	r3, r3, #1
 800a1f0:	b29b      	uxth	r3, r3
 800a1f2:	f003 0307 	and.w	r3, r3, #7
 800a1f6:	b29a      	uxth	r2, r3
 800a1f8:	8bfb      	ldrh	r3, [r7, #30]
 800a1fa:	4313      	orrs	r3, r2
 800a1fc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800a1fe:	697b      	ldr	r3, [r7, #20]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	8bfa      	ldrh	r2, [r7, #30]
 800a204:	60da      	str	r2, [r3, #12]
 800a206:	e062      	b.n	800a2ce <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800a208:	2301      	movs	r3, #1
 800a20a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a20e:	e05e      	b.n	800a2ce <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a210:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a214:	2b08      	cmp	r3, #8
 800a216:	d828      	bhi.n	800a26a <UART_SetConfig+0x56a>
 800a218:	a201      	add	r2, pc, #4	@ (adr r2, 800a220 <UART_SetConfig+0x520>)
 800a21a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a21e:	bf00      	nop
 800a220:	0800a245 	.word	0x0800a245
 800a224:	0800a24d 	.word	0x0800a24d
 800a228:	0800a255 	.word	0x0800a255
 800a22c:	0800a26b 	.word	0x0800a26b
 800a230:	0800a25b 	.word	0x0800a25b
 800a234:	0800a26b 	.word	0x0800a26b
 800a238:	0800a26b 	.word	0x0800a26b
 800a23c:	0800a26b 	.word	0x0800a26b
 800a240:	0800a263 	.word	0x0800a263
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a244:	f7fc fc92 	bl	8006b6c <HAL_RCC_GetPCLK1Freq>
 800a248:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a24a:	e014      	b.n	800a276 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a24c:	f7fc fca4 	bl	8006b98 <HAL_RCC_GetPCLK2Freq>
 800a250:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a252:	e010      	b.n	800a276 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a254:	4b1a      	ldr	r3, [pc, #104]	@ (800a2c0 <UART_SetConfig+0x5c0>)
 800a256:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a258:	e00d      	b.n	800a276 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a25a:	f7fc fc19 	bl	8006a90 <HAL_RCC_GetSysClockFreq>
 800a25e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a260:	e009      	b.n	800a276 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a262:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a266:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a268:	e005      	b.n	800a276 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800a26a:	2300      	movs	r3, #0
 800a26c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a26e:	2301      	movs	r3, #1
 800a270:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a274:	bf00      	nop
    }

    if (pclk != 0U)
 800a276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d028      	beq.n	800a2ce <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a27c:	697b      	ldr	r3, [r7, #20]
 800a27e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a280:	4a10      	ldr	r2, [pc, #64]	@ (800a2c4 <UART_SetConfig+0x5c4>)
 800a282:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a286:	461a      	mov	r2, r3
 800a288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a28a:	fbb3 f2f2 	udiv	r2, r3, r2
 800a28e:	697b      	ldr	r3, [r7, #20]
 800a290:	685b      	ldr	r3, [r3, #4]
 800a292:	085b      	lsrs	r3, r3, #1
 800a294:	441a      	add	r2, r3
 800a296:	697b      	ldr	r3, [r7, #20]
 800a298:	685b      	ldr	r3, [r3, #4]
 800a29a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a29e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a2a0:	6a3b      	ldr	r3, [r7, #32]
 800a2a2:	2b0f      	cmp	r3, #15
 800a2a4:	d910      	bls.n	800a2c8 <UART_SetConfig+0x5c8>
 800a2a6:	6a3b      	ldr	r3, [r7, #32]
 800a2a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a2ac:	d20c      	bcs.n	800a2c8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a2ae:	6a3b      	ldr	r3, [r7, #32]
 800a2b0:	b29a      	uxth	r2, r3
 800a2b2:	697b      	ldr	r3, [r7, #20]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	60da      	str	r2, [r3, #12]
 800a2b8:	e009      	b.n	800a2ce <UART_SetConfig+0x5ce>
 800a2ba:	bf00      	nop
 800a2bc:	40008000 	.word	0x40008000
 800a2c0:	00f42400 	.word	0x00f42400
 800a2c4:	0800b0dc 	.word	0x0800b0dc
      }
      else
      {
        ret = HAL_ERROR;
 800a2c8:	2301      	movs	r3, #1
 800a2ca:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a2ce:	697b      	ldr	r3, [r7, #20]
 800a2d0:	2201      	movs	r2, #1
 800a2d2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a2d6:	697b      	ldr	r3, [r7, #20]
 800a2d8:	2201      	movs	r2, #1
 800a2da:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a2de:	697b      	ldr	r3, [r7, #20]
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a2e4:	697b      	ldr	r3, [r7, #20]
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a2ea:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	3730      	adds	r7, #48	@ 0x30
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800a2f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a2f8:	b480      	push	{r7}
 800a2fa:	b083      	sub	sp, #12
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a304:	f003 0308 	and.w	r3, r3, #8
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d00a      	beq.n	800a322 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	685b      	ldr	r3, [r3, #4]
 800a312:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	430a      	orrs	r2, r1
 800a320:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a326:	f003 0301 	and.w	r3, r3, #1
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d00a      	beq.n	800a344 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	685b      	ldr	r3, [r3, #4]
 800a334:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	430a      	orrs	r2, r1
 800a342:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a348:	f003 0302 	and.w	r3, r3, #2
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d00a      	beq.n	800a366 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	685b      	ldr	r3, [r3, #4]
 800a356:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	430a      	orrs	r2, r1
 800a364:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a36a:	f003 0304 	and.w	r3, r3, #4
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d00a      	beq.n	800a388 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	685b      	ldr	r3, [r3, #4]
 800a378:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	430a      	orrs	r2, r1
 800a386:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a38c:	f003 0310 	and.w	r3, r3, #16
 800a390:	2b00      	cmp	r3, #0
 800a392:	d00a      	beq.n	800a3aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	689b      	ldr	r3, [r3, #8]
 800a39a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	430a      	orrs	r2, r1
 800a3a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3ae:	f003 0320 	and.w	r3, r3, #32
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d00a      	beq.n	800a3cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	689b      	ldr	r3, [r3, #8]
 800a3bc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	430a      	orrs	r2, r1
 800a3ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d01a      	beq.n	800a40e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	685b      	ldr	r3, [r3, #4]
 800a3de:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	430a      	orrs	r2, r1
 800a3ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a3f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a3f6:	d10a      	bne.n	800a40e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	685b      	ldr	r3, [r3, #4]
 800a3fe:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	430a      	orrs	r2, r1
 800a40c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a412:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a416:	2b00      	cmp	r3, #0
 800a418:	d00a      	beq.n	800a430 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	685b      	ldr	r3, [r3, #4]
 800a420:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	430a      	orrs	r2, r1
 800a42e:	605a      	str	r2, [r3, #4]
  }
}
 800a430:	bf00      	nop
 800a432:	370c      	adds	r7, #12
 800a434:	46bd      	mov	sp, r7
 800a436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43a:	4770      	bx	lr

0800a43c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a43c:	b580      	push	{r7, lr}
 800a43e:	b098      	sub	sp, #96	@ 0x60
 800a440:	af02      	add	r7, sp, #8
 800a442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	2200      	movs	r2, #0
 800a448:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a44c:	f7f9 fc80 	bl	8003d50 <HAL_GetTick>
 800a450:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	f003 0308 	and.w	r3, r3, #8
 800a45c:	2b08      	cmp	r3, #8
 800a45e:	d12f      	bne.n	800a4c0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a460:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a464:	9300      	str	r3, [sp, #0]
 800a466:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a468:	2200      	movs	r2, #0
 800a46a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a46e:	6878      	ldr	r0, [r7, #4]
 800a470:	f000 f88e 	bl	800a590 <UART_WaitOnFlagUntilTimeout>
 800a474:	4603      	mov	r3, r0
 800a476:	2b00      	cmp	r3, #0
 800a478:	d022      	beq.n	800a4c0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a480:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a482:	e853 3f00 	ldrex	r3, [r3]
 800a486:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a488:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a48a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a48e:	653b      	str	r3, [r7, #80]	@ 0x50
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	461a      	mov	r2, r3
 800a496:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a498:	647b      	str	r3, [r7, #68]	@ 0x44
 800a49a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a49c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a49e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a4a0:	e841 2300 	strex	r3, r2, [r1]
 800a4a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a4a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d1e6      	bne.n	800a47a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	2220      	movs	r2, #32
 800a4b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	2200      	movs	r2, #0
 800a4b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a4bc:	2303      	movs	r3, #3
 800a4be:	e063      	b.n	800a588 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	f003 0304 	and.w	r3, r3, #4
 800a4ca:	2b04      	cmp	r3, #4
 800a4cc:	d149      	bne.n	800a562 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a4ce:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a4d2:	9300      	str	r3, [sp, #0]
 800a4d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a4dc:	6878      	ldr	r0, [r7, #4]
 800a4de:	f000 f857 	bl	800a590 <UART_WaitOnFlagUntilTimeout>
 800a4e2:	4603      	mov	r3, r0
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d03c      	beq.n	800a562 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4f0:	e853 3f00 	ldrex	r3, [r3]
 800a4f4:	623b      	str	r3, [r7, #32]
   return(result);
 800a4f6:	6a3b      	ldr	r3, [r7, #32]
 800a4f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a4fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	461a      	mov	r2, r3
 800a504:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a506:	633b      	str	r3, [r7, #48]	@ 0x30
 800a508:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a50a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a50c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a50e:	e841 2300 	strex	r3, r2, [r1]
 800a512:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a514:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a516:	2b00      	cmp	r3, #0
 800a518:	d1e6      	bne.n	800a4e8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	3308      	adds	r3, #8
 800a520:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a522:	693b      	ldr	r3, [r7, #16]
 800a524:	e853 3f00 	ldrex	r3, [r3]
 800a528:	60fb      	str	r3, [r7, #12]
   return(result);
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	f023 0301 	bic.w	r3, r3, #1
 800a530:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	3308      	adds	r3, #8
 800a538:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a53a:	61fa      	str	r2, [r7, #28]
 800a53c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a53e:	69b9      	ldr	r1, [r7, #24]
 800a540:	69fa      	ldr	r2, [r7, #28]
 800a542:	e841 2300 	strex	r3, r2, [r1]
 800a546:	617b      	str	r3, [r7, #20]
   return(result);
 800a548:	697b      	ldr	r3, [r7, #20]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d1e5      	bne.n	800a51a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	2220      	movs	r2, #32
 800a552:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	2200      	movs	r2, #0
 800a55a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a55e:	2303      	movs	r3, #3
 800a560:	e012      	b.n	800a588 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	2220      	movs	r2, #32
 800a566:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	2220      	movs	r2, #32
 800a56e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	2200      	movs	r2, #0
 800a576:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	2200      	movs	r2, #0
 800a57c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	2200      	movs	r2, #0
 800a582:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a586:	2300      	movs	r3, #0
}
 800a588:	4618      	mov	r0, r3
 800a58a:	3758      	adds	r7, #88	@ 0x58
 800a58c:	46bd      	mov	sp, r7
 800a58e:	bd80      	pop	{r7, pc}

0800a590 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a590:	b580      	push	{r7, lr}
 800a592:	b084      	sub	sp, #16
 800a594:	af00      	add	r7, sp, #0
 800a596:	60f8      	str	r0, [r7, #12]
 800a598:	60b9      	str	r1, [r7, #8]
 800a59a:	603b      	str	r3, [r7, #0]
 800a59c:	4613      	mov	r3, r2
 800a59e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a5a0:	e04f      	b.n	800a642 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a5a2:	69bb      	ldr	r3, [r7, #24]
 800a5a4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a5a8:	d04b      	beq.n	800a642 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a5aa:	f7f9 fbd1 	bl	8003d50 <HAL_GetTick>
 800a5ae:	4602      	mov	r2, r0
 800a5b0:	683b      	ldr	r3, [r7, #0]
 800a5b2:	1ad3      	subs	r3, r2, r3
 800a5b4:	69ba      	ldr	r2, [r7, #24]
 800a5b6:	429a      	cmp	r2, r3
 800a5b8:	d302      	bcc.n	800a5c0 <UART_WaitOnFlagUntilTimeout+0x30>
 800a5ba:	69bb      	ldr	r3, [r7, #24]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d101      	bne.n	800a5c4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a5c0:	2303      	movs	r3, #3
 800a5c2:	e04e      	b.n	800a662 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	f003 0304 	and.w	r3, r3, #4
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d037      	beq.n	800a642 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a5d2:	68bb      	ldr	r3, [r7, #8]
 800a5d4:	2b80      	cmp	r3, #128	@ 0x80
 800a5d6:	d034      	beq.n	800a642 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a5d8:	68bb      	ldr	r3, [r7, #8]
 800a5da:	2b40      	cmp	r3, #64	@ 0x40
 800a5dc:	d031      	beq.n	800a642 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	69db      	ldr	r3, [r3, #28]
 800a5e4:	f003 0308 	and.w	r3, r3, #8
 800a5e8:	2b08      	cmp	r3, #8
 800a5ea:	d110      	bne.n	800a60e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	2208      	movs	r2, #8
 800a5f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a5f4:	68f8      	ldr	r0, [r7, #12]
 800a5f6:	f000 f920 	bl	800a83a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	2208      	movs	r2, #8
 800a5fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	2200      	movs	r2, #0
 800a606:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a60a:	2301      	movs	r3, #1
 800a60c:	e029      	b.n	800a662 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	69db      	ldr	r3, [r3, #28]
 800a614:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a618:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a61c:	d111      	bne.n	800a642 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a626:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a628:	68f8      	ldr	r0, [r7, #12]
 800a62a:	f000 f906 	bl	800a83a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	2220      	movs	r2, #32
 800a632:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	2200      	movs	r2, #0
 800a63a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a63e:	2303      	movs	r3, #3
 800a640:	e00f      	b.n	800a662 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	69da      	ldr	r2, [r3, #28]
 800a648:	68bb      	ldr	r3, [r7, #8]
 800a64a:	4013      	ands	r3, r2
 800a64c:	68ba      	ldr	r2, [r7, #8]
 800a64e:	429a      	cmp	r2, r3
 800a650:	bf0c      	ite	eq
 800a652:	2301      	moveq	r3, #1
 800a654:	2300      	movne	r3, #0
 800a656:	b2db      	uxtb	r3, r3
 800a658:	461a      	mov	r2, r3
 800a65a:	79fb      	ldrb	r3, [r7, #7]
 800a65c:	429a      	cmp	r2, r3
 800a65e:	d0a0      	beq.n	800a5a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a660:	2300      	movs	r3, #0
}
 800a662:	4618      	mov	r0, r3
 800a664:	3710      	adds	r7, #16
 800a666:	46bd      	mov	sp, r7
 800a668:	bd80      	pop	{r7, pc}
	...

0800a66c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b096      	sub	sp, #88	@ 0x58
 800a670:	af00      	add	r7, sp, #0
 800a672:	60f8      	str	r0, [r7, #12]
 800a674:	60b9      	str	r1, [r7, #8]
 800a676:	4613      	mov	r3, r2
 800a678:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	68ba      	ldr	r2, [r7, #8]
 800a67e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	88fa      	ldrh	r2, [r7, #6]
 800a684:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	2200      	movs	r2, #0
 800a68c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	2222      	movs	r2, #34	@ 0x22
 800a694:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d02d      	beq.n	800a6fe <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a6a8:	4a40      	ldr	r2, [pc, #256]	@ (800a7ac <UART_Start_Receive_DMA+0x140>)
 800a6aa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a6b2:	4a3f      	ldr	r2, [pc, #252]	@ (800a7b0 <UART_Start_Receive_DMA+0x144>)
 800a6b4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a6bc:	4a3d      	ldr	r2, [pc, #244]	@ (800a7b4 <UART_Start_Receive_DMA+0x148>)
 800a6be:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	3324      	adds	r3, #36	@ 0x24
 800a6d6:	4619      	mov	r1, r3
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a6dc:	461a      	mov	r2, r3
 800a6de:	88fb      	ldrh	r3, [r7, #6]
 800a6e0:	f7fb f880 	bl	80057e4 <HAL_DMA_Start_IT>
 800a6e4:	4603      	mov	r3, r0
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d009      	beq.n	800a6fe <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	2210      	movs	r2, #16
 800a6ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	2220      	movs	r2, #32
 800a6f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800a6fa:	2301      	movs	r3, #1
 800a6fc:	e051      	b.n	800a7a2 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	691b      	ldr	r3, [r3, #16]
 800a702:	2b00      	cmp	r3, #0
 800a704:	d018      	beq.n	800a738 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a70c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a70e:	e853 3f00 	ldrex	r3, [r3]
 800a712:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a714:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a716:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a71a:	657b      	str	r3, [r7, #84]	@ 0x54
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	461a      	mov	r2, r3
 800a722:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a724:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a726:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a728:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a72a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a72c:	e841 2300 	strex	r3, r2, [r1]
 800a730:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a732:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a734:	2b00      	cmp	r3, #0
 800a736:	d1e6      	bne.n	800a706 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	3308      	adds	r3, #8
 800a73e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a740:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a742:	e853 3f00 	ldrex	r3, [r3]
 800a746:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a74a:	f043 0301 	orr.w	r3, r3, #1
 800a74e:	653b      	str	r3, [r7, #80]	@ 0x50
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	3308      	adds	r3, #8
 800a756:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a758:	637a      	str	r2, [r7, #52]	@ 0x34
 800a75a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a75c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a75e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a760:	e841 2300 	strex	r3, r2, [r1]
 800a764:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a766:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d1e5      	bne.n	800a738 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	3308      	adds	r3, #8
 800a772:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a774:	697b      	ldr	r3, [r7, #20]
 800a776:	e853 3f00 	ldrex	r3, [r3]
 800a77a:	613b      	str	r3, [r7, #16]
   return(result);
 800a77c:	693b      	ldr	r3, [r7, #16]
 800a77e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a782:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	3308      	adds	r3, #8
 800a78a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a78c:	623a      	str	r2, [r7, #32]
 800a78e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a790:	69f9      	ldr	r1, [r7, #28]
 800a792:	6a3a      	ldr	r2, [r7, #32]
 800a794:	e841 2300 	strex	r3, r2, [r1]
 800a798:	61bb      	str	r3, [r7, #24]
   return(result);
 800a79a:	69bb      	ldr	r3, [r7, #24]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d1e5      	bne.n	800a76c <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800a7a0:	2300      	movs	r3, #0
}
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	3758      	adds	r7, #88	@ 0x58
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	bd80      	pop	{r7, pc}
 800a7aa:	bf00      	nop
 800a7ac:	0800a907 	.word	0x0800a907
 800a7b0:	0800aa3b 	.word	0x0800aa3b
 800a7b4:	0800aa81 	.word	0x0800aa81

0800a7b8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a7b8:	b480      	push	{r7}
 800a7ba:	b08f      	sub	sp, #60	@ 0x3c
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7c6:	6a3b      	ldr	r3, [r7, #32]
 800a7c8:	e853 3f00 	ldrex	r3, [r3]
 800a7cc:	61fb      	str	r3, [r7, #28]
   return(result);
 800a7ce:	69fb      	ldr	r3, [r7, #28]
 800a7d0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a7d4:	637b      	str	r3, [r7, #52]	@ 0x34
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	461a      	mov	r2, r3
 800a7dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a7e0:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7e2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a7e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a7e6:	e841 2300 	strex	r3, r2, [r1]
 800a7ea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a7ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d1e6      	bne.n	800a7c0 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	3308      	adds	r3, #8
 800a7f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	e853 3f00 	ldrex	r3, [r3]
 800a800:	60bb      	str	r3, [r7, #8]
   return(result);
 800a802:	68bb      	ldr	r3, [r7, #8]
 800a804:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800a808:	633b      	str	r3, [r7, #48]	@ 0x30
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	3308      	adds	r3, #8
 800a810:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a812:	61ba      	str	r2, [r7, #24]
 800a814:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a816:	6979      	ldr	r1, [r7, #20]
 800a818:	69ba      	ldr	r2, [r7, #24]
 800a81a:	e841 2300 	strex	r3, r2, [r1]
 800a81e:	613b      	str	r3, [r7, #16]
   return(result);
 800a820:	693b      	ldr	r3, [r7, #16]
 800a822:	2b00      	cmp	r3, #0
 800a824:	d1e5      	bne.n	800a7f2 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	2220      	movs	r2, #32
 800a82a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800a82e:	bf00      	nop
 800a830:	373c      	adds	r7, #60	@ 0x3c
 800a832:	46bd      	mov	sp, r7
 800a834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a838:	4770      	bx	lr

0800a83a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a83a:	b480      	push	{r7}
 800a83c:	b095      	sub	sp, #84	@ 0x54
 800a83e:	af00      	add	r7, sp, #0
 800a840:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a848:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a84a:	e853 3f00 	ldrex	r3, [r3]
 800a84e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a850:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a852:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a856:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	461a      	mov	r2, r3
 800a85e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a860:	643b      	str	r3, [r7, #64]	@ 0x40
 800a862:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a864:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a866:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a868:	e841 2300 	strex	r3, r2, [r1]
 800a86c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a86e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a870:	2b00      	cmp	r3, #0
 800a872:	d1e6      	bne.n	800a842 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	3308      	adds	r3, #8
 800a87a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a87c:	6a3b      	ldr	r3, [r7, #32]
 800a87e:	e853 3f00 	ldrex	r3, [r3]
 800a882:	61fb      	str	r3, [r7, #28]
   return(result);
 800a884:	69fb      	ldr	r3, [r7, #28]
 800a886:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a88a:	f023 0301 	bic.w	r3, r3, #1
 800a88e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	3308      	adds	r3, #8
 800a896:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a898:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a89a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a89c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a89e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a8a0:	e841 2300 	strex	r3, r2, [r1]
 800a8a4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a8a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d1e3      	bne.n	800a874 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a8b0:	2b01      	cmp	r3, #1
 800a8b2:	d118      	bne.n	800a8e6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	e853 3f00 	ldrex	r3, [r3]
 800a8c0:	60bb      	str	r3, [r7, #8]
   return(result);
 800a8c2:	68bb      	ldr	r3, [r7, #8]
 800a8c4:	f023 0310 	bic.w	r3, r3, #16
 800a8c8:	647b      	str	r3, [r7, #68]	@ 0x44
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	461a      	mov	r2, r3
 800a8d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a8d2:	61bb      	str	r3, [r7, #24]
 800a8d4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8d6:	6979      	ldr	r1, [r7, #20]
 800a8d8:	69ba      	ldr	r2, [r7, #24]
 800a8da:	e841 2300 	strex	r3, r2, [r1]
 800a8de:	613b      	str	r3, [r7, #16]
   return(result);
 800a8e0:	693b      	ldr	r3, [r7, #16]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d1e6      	bne.n	800a8b4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	2220      	movs	r2, #32
 800a8ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	2200      	movs	r2, #0
 800a8f8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a8fa:	bf00      	nop
 800a8fc:	3754      	adds	r7, #84	@ 0x54
 800a8fe:	46bd      	mov	sp, r7
 800a900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a904:	4770      	bx	lr

0800a906 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a906:	b580      	push	{r7, lr}
 800a908:	b09c      	sub	sp, #112	@ 0x70
 800a90a:	af00      	add	r7, sp, #0
 800a90c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a912:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	f003 0320 	and.w	r3, r3, #32
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d171      	bne.n	800aa06 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800a922:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a924:	2200      	movs	r2, #0
 800a926:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a92a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a930:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a932:	e853 3f00 	ldrex	r3, [r3]
 800a936:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a938:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a93a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a93e:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a940:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	461a      	mov	r2, r3
 800a946:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a948:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a94a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a94c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a94e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a950:	e841 2300 	strex	r3, r2, [r1]
 800a954:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a956:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d1e6      	bne.n	800a92a <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a95c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	3308      	adds	r3, #8
 800a962:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a964:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a966:	e853 3f00 	ldrex	r3, [r3]
 800a96a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a96c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a96e:	f023 0301 	bic.w	r3, r3, #1
 800a972:	667b      	str	r3, [r7, #100]	@ 0x64
 800a974:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	3308      	adds	r3, #8
 800a97a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a97c:	647a      	str	r2, [r7, #68]	@ 0x44
 800a97e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a980:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a982:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a984:	e841 2300 	strex	r3, r2, [r1]
 800a988:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a98a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d1e5      	bne.n	800a95c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a990:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	3308      	adds	r3, #8
 800a996:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a99a:	e853 3f00 	ldrex	r3, [r3]
 800a99e:	623b      	str	r3, [r7, #32]
   return(result);
 800a9a0:	6a3b      	ldr	r3, [r7, #32]
 800a9a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a9a6:	663b      	str	r3, [r7, #96]	@ 0x60
 800a9a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	3308      	adds	r3, #8
 800a9ae:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a9b0:	633a      	str	r2, [r7, #48]	@ 0x30
 800a9b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9b4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a9b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a9b8:	e841 2300 	strex	r3, r2, [r1]
 800a9bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a9be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d1e5      	bne.n	800a990 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a9c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a9c6:	2220      	movs	r2, #32
 800a9c8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a9cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a9ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a9d0:	2b01      	cmp	r3, #1
 800a9d2:	d118      	bne.n	800aa06 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a9d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9da:	693b      	ldr	r3, [r7, #16]
 800a9dc:	e853 3f00 	ldrex	r3, [r3]
 800a9e0:	60fb      	str	r3, [r7, #12]
   return(result);
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	f023 0310 	bic.w	r3, r3, #16
 800a9e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a9ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	461a      	mov	r2, r3
 800a9f0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a9f2:	61fb      	str	r3, [r7, #28]
 800a9f4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9f6:	69b9      	ldr	r1, [r7, #24]
 800a9f8:	69fa      	ldr	r2, [r7, #28]
 800a9fa:	e841 2300 	strex	r3, r2, [r1]
 800a9fe:	617b      	str	r3, [r7, #20]
   return(result);
 800aa00:	697b      	ldr	r3, [r7, #20]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d1e6      	bne.n	800a9d4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800aa06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aa08:	2200      	movs	r2, #0
 800aa0a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa0c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aa0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aa10:	2b01      	cmp	r3, #1
 800aa12:	d109      	bne.n	800aa28 <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800aa14:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aa16:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800aa1a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800aa1c:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800aa20:	4611      	mov	r1, r2
 800aa22:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800aa24:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800aa26:	e004      	b.n	800aa32 <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 800aa28:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aa2a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800aa2e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800aa30:	4798      	blx	r3
}
 800aa32:	bf00      	nop
 800aa34:	3770      	adds	r7, #112	@ 0x70
 800aa36:	46bd      	mov	sp, r7
 800aa38:	bd80      	pop	{r7, pc}

0800aa3a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800aa3a:	b580      	push	{r7, lr}
 800aa3c:	b084      	sub	sp, #16
 800aa3e:	af00      	add	r7, sp, #0
 800aa40:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa46:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	2201      	movs	r2, #1
 800aa4c:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aa52:	2b01      	cmp	r3, #1
 800aa54:	d10b      	bne.n	800aa6e <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800aa5c:	68fa      	ldr	r2, [r7, #12]
 800aa5e:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800aa62:	0852      	lsrs	r2, r2, #1
 800aa64:	b292      	uxth	r2, r2
 800aa66:	4611      	mov	r1, r2
 800aa68:	68f8      	ldr	r0, [r7, #12]
 800aa6a:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800aa6c:	e004      	b.n	800aa78 <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800aa74:	68f8      	ldr	r0, [r7, #12]
 800aa76:	4798      	blx	r3
}
 800aa78:	bf00      	nop
 800aa7a:	3710      	adds	r7, #16
 800aa7c:	46bd      	mov	sp, r7
 800aa7e:	bd80      	pop	{r7, pc}

0800aa80 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800aa80:	b580      	push	{r7, lr}
 800aa82:	b086      	sub	sp, #24
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa8c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800aa8e:	697b      	ldr	r3, [r7, #20]
 800aa90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aa94:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800aa96:	697b      	ldr	r3, [r7, #20]
 800aa98:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800aa9c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800aa9e:	697b      	ldr	r3, [r7, #20]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	689b      	ldr	r3, [r3, #8]
 800aaa4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aaa8:	2b80      	cmp	r3, #128	@ 0x80
 800aaaa:	d109      	bne.n	800aac0 <UART_DMAError+0x40>
 800aaac:	693b      	ldr	r3, [r7, #16]
 800aaae:	2b21      	cmp	r3, #33	@ 0x21
 800aab0:	d106      	bne.n	800aac0 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800aab2:	697b      	ldr	r3, [r7, #20]
 800aab4:	2200      	movs	r2, #0
 800aab6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800aaba:	6978      	ldr	r0, [r7, #20]
 800aabc:	f7ff fe7c 	bl	800a7b8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800aac0:	697b      	ldr	r3, [r7, #20]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	689b      	ldr	r3, [r3, #8]
 800aac6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aaca:	2b40      	cmp	r3, #64	@ 0x40
 800aacc:	d109      	bne.n	800aae2 <UART_DMAError+0x62>
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	2b22      	cmp	r3, #34	@ 0x22
 800aad2:	d106      	bne.n	800aae2 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800aad4:	697b      	ldr	r3, [r7, #20]
 800aad6:	2200      	movs	r2, #0
 800aad8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800aadc:	6978      	ldr	r0, [r7, #20]
 800aade:	f7ff feac 	bl	800a83a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800aae2:	697b      	ldr	r3, [r7, #20]
 800aae4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aae8:	f043 0210 	orr.w	r2, r3, #16
 800aaec:	697b      	ldr	r3, [r7, #20]
 800aaee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800aaf2:	697b      	ldr	r3, [r7, #20]
 800aaf4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800aaf8:	6978      	ldr	r0, [r7, #20]
 800aafa:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aafc:	bf00      	nop
 800aafe:	3718      	adds	r7, #24
 800ab00:	46bd      	mov	sp, r7
 800ab02:	bd80      	pop	{r7, pc}

0800ab04 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b084      	sub	sp, #16
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab10:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	2200      	movs	r2, #0
 800ab16:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	2200      	movs	r2, #0
 800ab1e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800ab28:	68f8      	ldr	r0, [r7, #12]
 800ab2a:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ab2c:	bf00      	nop
 800ab2e:	3710      	adds	r7, #16
 800ab30:	46bd      	mov	sp, r7
 800ab32:	bd80      	pop	{r7, pc}

0800ab34 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ab34:	b580      	push	{r7, lr}
 800ab36:	b088      	sub	sp, #32
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	e853 3f00 	ldrex	r3, [r3]
 800ab48:	60bb      	str	r3, [r7, #8]
   return(result);
 800ab4a:	68bb      	ldr	r3, [r7, #8]
 800ab4c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ab50:	61fb      	str	r3, [r7, #28]
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	461a      	mov	r2, r3
 800ab58:	69fb      	ldr	r3, [r7, #28]
 800ab5a:	61bb      	str	r3, [r7, #24]
 800ab5c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab5e:	6979      	ldr	r1, [r7, #20]
 800ab60:	69ba      	ldr	r2, [r7, #24]
 800ab62:	e841 2300 	strex	r3, r2, [r1]
 800ab66:	613b      	str	r3, [r7, #16]
   return(result);
 800ab68:	693b      	ldr	r3, [r7, #16]
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d1e6      	bne.n	800ab3c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	2220      	movs	r2, #32
 800ab72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	2200      	movs	r2, #0
 800ab7a:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800ab82:	6878      	ldr	r0, [r7, #4]
 800ab84:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ab86:	bf00      	nop
 800ab88:	3720      	adds	r7, #32
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	bd80      	pop	{r7, pc}

0800ab8e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ab8e:	b480      	push	{r7}
 800ab90:	b083      	sub	sp, #12
 800ab92:	af00      	add	r7, sp, #0
 800ab94:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ab96:	bf00      	nop
 800ab98:	370c      	adds	r7, #12
 800ab9a:	46bd      	mov	sp, r7
 800ab9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba0:	4770      	bx	lr

0800aba2 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800aba2:	b480      	push	{r7}
 800aba4:	b083      	sub	sp, #12
 800aba6:	af00      	add	r7, sp, #0
 800aba8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800abaa:	bf00      	nop
 800abac:	370c      	adds	r7, #12
 800abae:	46bd      	mov	sp, r7
 800abb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb4:	4770      	bx	lr

0800abb6 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800abb6:	b480      	push	{r7}
 800abb8:	b083      	sub	sp, #12
 800abba:	af00      	add	r7, sp, #0
 800abbc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800abbe:	bf00      	nop
 800abc0:	370c      	adds	r7, #12
 800abc2:	46bd      	mov	sp, r7
 800abc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc8:	4770      	bx	lr

0800abca <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800abca:	b480      	push	{r7}
 800abcc:	b085      	sub	sp, #20
 800abce:	af00      	add	r7, sp, #0
 800abd0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800abd8:	2b01      	cmp	r3, #1
 800abda:	d101      	bne.n	800abe0 <HAL_UARTEx_DisableFifoMode+0x16>
 800abdc:	2302      	movs	r3, #2
 800abde:	e027      	b.n	800ac30 <HAL_UARTEx_DisableFifoMode+0x66>
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	2201      	movs	r2, #1
 800abe4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	2224      	movs	r2, #36	@ 0x24
 800abec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	681a      	ldr	r2, [r3, #0]
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	f022 0201 	bic.w	r2, r2, #1
 800ac06:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800ac0e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	2200      	movs	r2, #0
 800ac14:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	68fa      	ldr	r2, [r7, #12]
 800ac1c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	2220      	movs	r2, #32
 800ac22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	2200      	movs	r2, #0
 800ac2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ac2e:	2300      	movs	r3, #0
}
 800ac30:	4618      	mov	r0, r3
 800ac32:	3714      	adds	r7, #20
 800ac34:	46bd      	mov	sp, r7
 800ac36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3a:	4770      	bx	lr

0800ac3c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ac3c:	b580      	push	{r7, lr}
 800ac3e:	b084      	sub	sp, #16
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]
 800ac44:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ac4c:	2b01      	cmp	r3, #1
 800ac4e:	d101      	bne.n	800ac54 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ac50:	2302      	movs	r3, #2
 800ac52:	e02d      	b.n	800acb0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	2201      	movs	r2, #1
 800ac58:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	2224      	movs	r2, #36	@ 0x24
 800ac60:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	681a      	ldr	r2, [r3, #0]
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	f022 0201 	bic.w	r2, r2, #1
 800ac7a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	689b      	ldr	r3, [r3, #8]
 800ac82:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	683a      	ldr	r2, [r7, #0]
 800ac8c:	430a      	orrs	r2, r1
 800ac8e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ac90:	6878      	ldr	r0, [r7, #4]
 800ac92:	f000 f84f 	bl	800ad34 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	68fa      	ldr	r2, [r7, #12]
 800ac9c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	2220      	movs	r2, #32
 800aca2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	2200      	movs	r2, #0
 800acaa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800acae:	2300      	movs	r3, #0
}
 800acb0:	4618      	mov	r0, r3
 800acb2:	3710      	adds	r7, #16
 800acb4:	46bd      	mov	sp, r7
 800acb6:	bd80      	pop	{r7, pc}

0800acb8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800acb8:	b580      	push	{r7, lr}
 800acba:	b084      	sub	sp, #16
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
 800acc0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800acc8:	2b01      	cmp	r3, #1
 800acca:	d101      	bne.n	800acd0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800accc:	2302      	movs	r3, #2
 800acce:	e02d      	b.n	800ad2c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	2201      	movs	r2, #1
 800acd4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	2224      	movs	r2, #36	@ 0x24
 800acdc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	681a      	ldr	r2, [r3, #0]
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	f022 0201 	bic.w	r2, r2, #1
 800acf6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	689b      	ldr	r3, [r3, #8]
 800acfe:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	683a      	ldr	r2, [r7, #0]
 800ad08:	430a      	orrs	r2, r1
 800ad0a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ad0c:	6878      	ldr	r0, [r7, #4]
 800ad0e:	f000 f811 	bl	800ad34 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	68fa      	ldr	r2, [r7, #12]
 800ad18:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	2220      	movs	r2, #32
 800ad1e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	2200      	movs	r2, #0
 800ad26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ad2a:	2300      	movs	r3, #0
}
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	3710      	adds	r7, #16
 800ad30:	46bd      	mov	sp, r7
 800ad32:	bd80      	pop	{r7, pc}

0800ad34 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ad34:	b480      	push	{r7}
 800ad36:	b085      	sub	sp, #20
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d108      	bne.n	800ad56 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	2201      	movs	r2, #1
 800ad48:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	2201      	movs	r2, #1
 800ad50:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ad54:	e031      	b.n	800adba <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ad56:	2308      	movs	r3, #8
 800ad58:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ad5a:	2308      	movs	r3, #8
 800ad5c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	689b      	ldr	r3, [r3, #8]
 800ad64:	0e5b      	lsrs	r3, r3, #25
 800ad66:	b2db      	uxtb	r3, r3
 800ad68:	f003 0307 	and.w	r3, r3, #7
 800ad6c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	689b      	ldr	r3, [r3, #8]
 800ad74:	0f5b      	lsrs	r3, r3, #29
 800ad76:	b2db      	uxtb	r3, r3
 800ad78:	f003 0307 	and.w	r3, r3, #7
 800ad7c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ad7e:	7bbb      	ldrb	r3, [r7, #14]
 800ad80:	7b3a      	ldrb	r2, [r7, #12]
 800ad82:	4911      	ldr	r1, [pc, #68]	@ (800adc8 <UARTEx_SetNbDataToProcess+0x94>)
 800ad84:	5c8a      	ldrb	r2, [r1, r2]
 800ad86:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ad8a:	7b3a      	ldrb	r2, [r7, #12]
 800ad8c:	490f      	ldr	r1, [pc, #60]	@ (800adcc <UARTEx_SetNbDataToProcess+0x98>)
 800ad8e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ad90:	fb93 f3f2 	sdiv	r3, r3, r2
 800ad94:	b29a      	uxth	r2, r3
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ad9c:	7bfb      	ldrb	r3, [r7, #15]
 800ad9e:	7b7a      	ldrb	r2, [r7, #13]
 800ada0:	4909      	ldr	r1, [pc, #36]	@ (800adc8 <UARTEx_SetNbDataToProcess+0x94>)
 800ada2:	5c8a      	ldrb	r2, [r1, r2]
 800ada4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ada8:	7b7a      	ldrb	r2, [r7, #13]
 800adaa:	4908      	ldr	r1, [pc, #32]	@ (800adcc <UARTEx_SetNbDataToProcess+0x98>)
 800adac:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800adae:	fb93 f3f2 	sdiv	r3, r3, r2
 800adb2:	b29a      	uxth	r2, r3
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800adba:	bf00      	nop
 800adbc:	3714      	adds	r7, #20
 800adbe:	46bd      	mov	sp, r7
 800adc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc4:	4770      	bx	lr
 800adc6:	bf00      	nop
 800adc8:	0800b0f4 	.word	0x0800b0f4
 800adcc:	0800b0fc 	.word	0x0800b0fc

0800add0 <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 800add0:	b580      	push	{r7, lr}
 800add2:	b082      	sub	sp, #8
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
 800add8:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	ed93 7a06 	vldr	s14, [r3, #24]
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	edd3 7a07 	vldr	s15, [r3, #28]
 800ade6:	ee37 7a27 	vadd.f32	s14, s14, s15
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	edd3 7a08 	vldr	s15, [r3, #32]
 800adf0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	edd3 7a06 	vldr	s15, [r3, #24]
 800ae00:	eeb1 7a67 	vneg.f32	s14, s15
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	edd3 7a08 	vldr	s15, [r3, #32]
 800ae0a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800ae0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	6a1a      	ldr	r2, [r3, #32]
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 800ae20:	683b      	ldr	r3, [r7, #0]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d006      	beq.n	800ae34 <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	330c      	adds	r3, #12
 800ae2a:	220c      	movs	r2, #12
 800ae2c:	2100      	movs	r1, #0
 800ae2e:	4618      	mov	r0, r3
 800ae30:	f000 f804 	bl	800ae3c <memset>
  }

}
 800ae34:	bf00      	nop
 800ae36:	3708      	adds	r7, #8
 800ae38:	46bd      	mov	sp, r7
 800ae3a:	bd80      	pop	{r7, pc}

0800ae3c <memset>:
 800ae3c:	4402      	add	r2, r0
 800ae3e:	4603      	mov	r3, r0
 800ae40:	4293      	cmp	r3, r2
 800ae42:	d100      	bne.n	800ae46 <memset+0xa>
 800ae44:	4770      	bx	lr
 800ae46:	f803 1b01 	strb.w	r1, [r3], #1
 800ae4a:	e7f9      	b.n	800ae40 <memset+0x4>

0800ae4c <__errno>:
 800ae4c:	4b01      	ldr	r3, [pc, #4]	@ (800ae54 <__errno+0x8>)
 800ae4e:	6818      	ldr	r0, [r3, #0]
 800ae50:	4770      	bx	lr
 800ae52:	bf00      	nop
 800ae54:	20000024 	.word	0x20000024

0800ae58 <__libc_init_array>:
 800ae58:	b570      	push	{r4, r5, r6, lr}
 800ae5a:	4d0d      	ldr	r5, [pc, #52]	@ (800ae90 <__libc_init_array+0x38>)
 800ae5c:	4c0d      	ldr	r4, [pc, #52]	@ (800ae94 <__libc_init_array+0x3c>)
 800ae5e:	1b64      	subs	r4, r4, r5
 800ae60:	10a4      	asrs	r4, r4, #2
 800ae62:	2600      	movs	r6, #0
 800ae64:	42a6      	cmp	r6, r4
 800ae66:	d109      	bne.n	800ae7c <__libc_init_array+0x24>
 800ae68:	4d0b      	ldr	r5, [pc, #44]	@ (800ae98 <__libc_init_array+0x40>)
 800ae6a:	4c0c      	ldr	r4, [pc, #48]	@ (800ae9c <__libc_init_array+0x44>)
 800ae6c:	f000 f91e 	bl	800b0ac <_init>
 800ae70:	1b64      	subs	r4, r4, r5
 800ae72:	10a4      	asrs	r4, r4, #2
 800ae74:	2600      	movs	r6, #0
 800ae76:	42a6      	cmp	r6, r4
 800ae78:	d105      	bne.n	800ae86 <__libc_init_array+0x2e>
 800ae7a:	bd70      	pop	{r4, r5, r6, pc}
 800ae7c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae80:	4798      	blx	r3
 800ae82:	3601      	adds	r6, #1
 800ae84:	e7ee      	b.n	800ae64 <__libc_init_array+0xc>
 800ae86:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae8a:	4798      	blx	r3
 800ae8c:	3601      	adds	r6, #1
 800ae8e:	e7f2      	b.n	800ae76 <__libc_init_array+0x1e>
 800ae90:	0800b10c 	.word	0x0800b10c
 800ae94:	0800b10c 	.word	0x0800b10c
 800ae98:	0800b10c 	.word	0x0800b10c
 800ae9c:	0800b110 	.word	0x0800b110

0800aea0 <sqrt>:
 800aea0:	b538      	push	{r3, r4, r5, lr}
 800aea2:	ed2d 8b02 	vpush	{d8}
 800aea6:	ec55 4b10 	vmov	r4, r5, d0
 800aeaa:	f000 f825 	bl	800aef8 <__ieee754_sqrt>
 800aeae:	4622      	mov	r2, r4
 800aeb0:	462b      	mov	r3, r5
 800aeb2:	4620      	mov	r0, r4
 800aeb4:	4629      	mov	r1, r5
 800aeb6:	eeb0 8a40 	vmov.f32	s16, s0
 800aeba:	eef0 8a60 	vmov.f32	s17, s1
 800aebe:	f7f5 fe01 	bl	8000ac4 <__aeabi_dcmpun>
 800aec2:	b990      	cbnz	r0, 800aeea <sqrt+0x4a>
 800aec4:	2200      	movs	r2, #0
 800aec6:	2300      	movs	r3, #0
 800aec8:	4620      	mov	r0, r4
 800aeca:	4629      	mov	r1, r5
 800aecc:	f7f5 fdd2 	bl	8000a74 <__aeabi_dcmplt>
 800aed0:	b158      	cbz	r0, 800aeea <sqrt+0x4a>
 800aed2:	f7ff ffbb 	bl	800ae4c <__errno>
 800aed6:	2321      	movs	r3, #33	@ 0x21
 800aed8:	6003      	str	r3, [r0, #0]
 800aeda:	2200      	movs	r2, #0
 800aedc:	2300      	movs	r3, #0
 800aede:	4610      	mov	r0, r2
 800aee0:	4619      	mov	r1, r3
 800aee2:	f7f5 fc7f 	bl	80007e4 <__aeabi_ddiv>
 800aee6:	ec41 0b18 	vmov	d8, r0, r1
 800aeea:	eeb0 0a48 	vmov.f32	s0, s16
 800aeee:	eef0 0a68 	vmov.f32	s1, s17
 800aef2:	ecbd 8b02 	vpop	{d8}
 800aef6:	bd38      	pop	{r3, r4, r5, pc}

0800aef8 <__ieee754_sqrt>:
 800aef8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aefc:	4a68      	ldr	r2, [pc, #416]	@ (800b0a0 <__ieee754_sqrt+0x1a8>)
 800aefe:	ec55 4b10 	vmov	r4, r5, d0
 800af02:	43aa      	bics	r2, r5
 800af04:	462b      	mov	r3, r5
 800af06:	4621      	mov	r1, r4
 800af08:	d110      	bne.n	800af2c <__ieee754_sqrt+0x34>
 800af0a:	4622      	mov	r2, r4
 800af0c:	4620      	mov	r0, r4
 800af0e:	4629      	mov	r1, r5
 800af10:	f7f5 fb3e 	bl	8000590 <__aeabi_dmul>
 800af14:	4602      	mov	r2, r0
 800af16:	460b      	mov	r3, r1
 800af18:	4620      	mov	r0, r4
 800af1a:	4629      	mov	r1, r5
 800af1c:	f7f5 f982 	bl	8000224 <__adddf3>
 800af20:	4604      	mov	r4, r0
 800af22:	460d      	mov	r5, r1
 800af24:	ec45 4b10 	vmov	d0, r4, r5
 800af28:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af2c:	2d00      	cmp	r5, #0
 800af2e:	dc0e      	bgt.n	800af4e <__ieee754_sqrt+0x56>
 800af30:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800af34:	4322      	orrs	r2, r4
 800af36:	d0f5      	beq.n	800af24 <__ieee754_sqrt+0x2c>
 800af38:	b19d      	cbz	r5, 800af62 <__ieee754_sqrt+0x6a>
 800af3a:	4622      	mov	r2, r4
 800af3c:	4620      	mov	r0, r4
 800af3e:	4629      	mov	r1, r5
 800af40:	f7f5 f96e 	bl	8000220 <__aeabi_dsub>
 800af44:	4602      	mov	r2, r0
 800af46:	460b      	mov	r3, r1
 800af48:	f7f5 fc4c 	bl	80007e4 <__aeabi_ddiv>
 800af4c:	e7e8      	b.n	800af20 <__ieee754_sqrt+0x28>
 800af4e:	152a      	asrs	r2, r5, #20
 800af50:	d115      	bne.n	800af7e <__ieee754_sqrt+0x86>
 800af52:	2000      	movs	r0, #0
 800af54:	e009      	b.n	800af6a <__ieee754_sqrt+0x72>
 800af56:	0acb      	lsrs	r3, r1, #11
 800af58:	3a15      	subs	r2, #21
 800af5a:	0549      	lsls	r1, r1, #21
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d0fa      	beq.n	800af56 <__ieee754_sqrt+0x5e>
 800af60:	e7f7      	b.n	800af52 <__ieee754_sqrt+0x5a>
 800af62:	462a      	mov	r2, r5
 800af64:	e7fa      	b.n	800af5c <__ieee754_sqrt+0x64>
 800af66:	005b      	lsls	r3, r3, #1
 800af68:	3001      	adds	r0, #1
 800af6a:	02dc      	lsls	r4, r3, #11
 800af6c:	d5fb      	bpl.n	800af66 <__ieee754_sqrt+0x6e>
 800af6e:	1e44      	subs	r4, r0, #1
 800af70:	1b12      	subs	r2, r2, r4
 800af72:	f1c0 0420 	rsb	r4, r0, #32
 800af76:	fa21 f404 	lsr.w	r4, r1, r4
 800af7a:	4323      	orrs	r3, r4
 800af7c:	4081      	lsls	r1, r0
 800af7e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800af82:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800af86:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800af8a:	07d2      	lsls	r2, r2, #31
 800af8c:	bf5c      	itt	pl
 800af8e:	005b      	lslpl	r3, r3, #1
 800af90:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800af94:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800af98:	bf58      	it	pl
 800af9a:	0049      	lslpl	r1, r1, #1
 800af9c:	2600      	movs	r6, #0
 800af9e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800afa2:	106d      	asrs	r5, r5, #1
 800afa4:	0049      	lsls	r1, r1, #1
 800afa6:	2016      	movs	r0, #22
 800afa8:	4632      	mov	r2, r6
 800afaa:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800afae:	1917      	adds	r7, r2, r4
 800afb0:	429f      	cmp	r7, r3
 800afb2:	bfde      	ittt	le
 800afb4:	193a      	addle	r2, r7, r4
 800afb6:	1bdb      	suble	r3, r3, r7
 800afb8:	1936      	addle	r6, r6, r4
 800afba:	0fcf      	lsrs	r7, r1, #31
 800afbc:	3801      	subs	r0, #1
 800afbe:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800afc2:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800afc6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800afca:	d1f0      	bne.n	800afae <__ieee754_sqrt+0xb6>
 800afcc:	4604      	mov	r4, r0
 800afce:	2720      	movs	r7, #32
 800afd0:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800afd4:	429a      	cmp	r2, r3
 800afd6:	eb00 0e0c 	add.w	lr, r0, ip
 800afda:	db02      	blt.n	800afe2 <__ieee754_sqrt+0xea>
 800afdc:	d113      	bne.n	800b006 <__ieee754_sqrt+0x10e>
 800afde:	458e      	cmp	lr, r1
 800afe0:	d811      	bhi.n	800b006 <__ieee754_sqrt+0x10e>
 800afe2:	f1be 0f00 	cmp.w	lr, #0
 800afe6:	eb0e 000c 	add.w	r0, lr, ip
 800afea:	da42      	bge.n	800b072 <__ieee754_sqrt+0x17a>
 800afec:	2800      	cmp	r0, #0
 800afee:	db40      	blt.n	800b072 <__ieee754_sqrt+0x17a>
 800aff0:	f102 0801 	add.w	r8, r2, #1
 800aff4:	1a9b      	subs	r3, r3, r2
 800aff6:	458e      	cmp	lr, r1
 800aff8:	bf88      	it	hi
 800affa:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 800affe:	eba1 010e 	sub.w	r1, r1, lr
 800b002:	4464      	add	r4, ip
 800b004:	4642      	mov	r2, r8
 800b006:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800b00a:	3f01      	subs	r7, #1
 800b00c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800b010:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800b014:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800b018:	d1dc      	bne.n	800afd4 <__ieee754_sqrt+0xdc>
 800b01a:	4319      	orrs	r1, r3
 800b01c:	d01b      	beq.n	800b056 <__ieee754_sqrt+0x15e>
 800b01e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800b0a4 <__ieee754_sqrt+0x1ac>
 800b022:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800b0a8 <__ieee754_sqrt+0x1b0>
 800b026:	e9da 0100 	ldrd	r0, r1, [sl]
 800b02a:	e9db 2300 	ldrd	r2, r3, [fp]
 800b02e:	f7f5 f8f7 	bl	8000220 <__aeabi_dsub>
 800b032:	e9da 8900 	ldrd	r8, r9, [sl]
 800b036:	4602      	mov	r2, r0
 800b038:	460b      	mov	r3, r1
 800b03a:	4640      	mov	r0, r8
 800b03c:	4649      	mov	r1, r9
 800b03e:	f7f5 fd23 	bl	8000a88 <__aeabi_dcmple>
 800b042:	b140      	cbz	r0, 800b056 <__ieee754_sqrt+0x15e>
 800b044:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 800b048:	e9da 0100 	ldrd	r0, r1, [sl]
 800b04c:	e9db 2300 	ldrd	r2, r3, [fp]
 800b050:	d111      	bne.n	800b076 <__ieee754_sqrt+0x17e>
 800b052:	3601      	adds	r6, #1
 800b054:	463c      	mov	r4, r7
 800b056:	1072      	asrs	r2, r6, #1
 800b058:	0863      	lsrs	r3, r4, #1
 800b05a:	07f1      	lsls	r1, r6, #31
 800b05c:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800b060:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800b064:	bf48      	it	mi
 800b066:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800b06a:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800b06e:	4618      	mov	r0, r3
 800b070:	e756      	b.n	800af20 <__ieee754_sqrt+0x28>
 800b072:	4690      	mov	r8, r2
 800b074:	e7be      	b.n	800aff4 <__ieee754_sqrt+0xfc>
 800b076:	f7f5 f8d5 	bl	8000224 <__adddf3>
 800b07a:	e9da 8900 	ldrd	r8, r9, [sl]
 800b07e:	4602      	mov	r2, r0
 800b080:	460b      	mov	r3, r1
 800b082:	4640      	mov	r0, r8
 800b084:	4649      	mov	r1, r9
 800b086:	f7f5 fcf5 	bl	8000a74 <__aeabi_dcmplt>
 800b08a:	b120      	cbz	r0, 800b096 <__ieee754_sqrt+0x19e>
 800b08c:	1ca0      	adds	r0, r4, #2
 800b08e:	bf08      	it	eq
 800b090:	3601      	addeq	r6, #1
 800b092:	3402      	adds	r4, #2
 800b094:	e7df      	b.n	800b056 <__ieee754_sqrt+0x15e>
 800b096:	1c63      	adds	r3, r4, #1
 800b098:	f023 0401 	bic.w	r4, r3, #1
 800b09c:	e7db      	b.n	800b056 <__ieee754_sqrt+0x15e>
 800b09e:	bf00      	nop
 800b0a0:	7ff00000 	.word	0x7ff00000
 800b0a4:	20000080 	.word	0x20000080
 800b0a8:	20000078 	.word	0x20000078

0800b0ac <_init>:
 800b0ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0ae:	bf00      	nop
 800b0b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0b2:	bc08      	pop	{r3}
 800b0b4:	469e      	mov	lr, r3
 800b0b6:	4770      	bx	lr

0800b0b8 <_fini>:
 800b0b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0ba:	bf00      	nop
 800b0bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0be:	bc08      	pop	{r3}
 800b0c0:	469e      	mov	lr, r3
 800b0c2:	4770      	bx	lr
